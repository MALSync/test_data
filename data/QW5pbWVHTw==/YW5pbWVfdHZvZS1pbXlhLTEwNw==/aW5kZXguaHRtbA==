<html lang="ru">

<head>
  <meta charset="UTF-8">
  <title>Хоримия смотреть онлайн — Аниме</title>
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
  <link rel="manifest" href="/manifest.json">
  <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#ff5c57">
  <meta name="apple-mobile-web-app-title" content="AnimeGO">
  <meta name="application-name" content="AnimeGO">
  <meta name="msapplication-TileColor" content="#ff5c57">
  <meta name="msapplication-TileImage" content="/mstile-144x144.png">
  <meta name="theme-color" content="#ffffff">
  <meta property="og:url" content="https://animego.org/anime/horimiya-1686">
  <script type="text/javascript" async="" src="https://mc.yandex.ru/metrika/watch.js"></script>
  <script>var require = { 'baseUrl': '/animego/js' };</script>
  <link href="https://animego.org/anime/horimiya-1686" rel="canonical">
  <meta name="description"
    content="Смотреть онлайн аниме Хоримия — У старшеклассницы Кёко Хори, похоже, есть всё, что только можно пожелать, ведь она умница, красавица и любимица всего класса. Однако...">
  <meta name="keywords" content="аниме Хоримия 1 сезон смотреть онлайн">
  <meta property="og:type" content="video.movie">
  <meta property="og:title" content="Хоримия смотреть онлайн — Аниме">
  <meta property="og:description"
    content="Смотреть онлайн аниме Хоримия — У старшеклассницы Кёко Хори, похоже, есть всё, что только можно пожелать, ведь она умница, красавица и любимица всего класса. Однако...">
  <link rel="image_src"
    href="https://animego.org/media/cache/thumbs_250x350/upload/anime/images/649d6823b618d097585759.jpg">
  <meta property="og:image"
    content="https://animego.org/media/cache/thumbs_250x350/upload/anime/images/649d6823b618d097585759.jpg">
  <meta property="og:image:width" content="250">
  <meta property="og:image:height" content="350">
  <script
    type="application/ld+json">{"@context":"http:\/\/schema.org","@type":"TVSeries","url":"\/anime\/horimiya-1686","name":"\u0425\u043e\u0440\u0438\u043c\u0438\u044f","contentRating":"PG-13","description":"\u0423 \u0441\u0442\u0430\u0440\u0448\u0435\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u0446\u044b \u041a\u0451\u043a\u043e \u0425\u043e\u0440\u0438, \u043f\u043e\u0445\u043e\u0436\u0435, \u0435\u0441\u0442\u044c \u0432\u0441\u0451, \u0447\u0442\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u0436\u0435\u043b\u0430\u0442\u044c, \u0432\u0435\u0434\u044c \u043e\u043d\u0430 \u0443\u043c\u043d\u0438\u0446\u0430, \u043a\u0440\u0430\u0441\u0430\u0432\u0438\u0446\u0430 \u0438 \u043b\u044e\u0431\u0438\u043c\u0438\u0446\u0430 \u0432\u0441\u0435\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430. \u041e\u0434\u043d\u0430\u043a\u043e \u0434\u0430\u0436\u0435 \u0443 \u0438\u0434\u0435\u0430\u043b\u044c\u043d\u044b\u0445 \u043d\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0432\u0437\u0433\u043b\u044f\u0434 \u043b\u044e\u0434\u0435\u0439 \u0431\u044b\u0432\u0430\u044e\u0442 \u0441\u0435\u043a\u0440\u0435\u0442\u044b, \u0438 \u043e\u0434\u0438\u043d \u0442\u0430\u043a\u043e\u0439 \u0435\u0441\u0442\u044c \u0443 \u0425\u043e\u0440\u0438: \u0434\u0435\u0432\u0443\u0448\u043a\u0430 \u0441\u0442\u0440\u0430\u0448\u043d\u043e \u0431\u043e\u0438\u0442\u0441\u044f, \u0447\u0442\u043e \u0435\u0451 \u043e\u0434\u043d\u043e\u043a\u043b\u0430\u0441\u0441\u043d\u0438\u043a\u0438 \u043f\u0440\u043e\u0437\u043d\u0430\u044e\u0442 \u043e \u0442\u043e\u043c, \u0447\u0442\u043e \u0432\u043d\u0435 \u0441\u0442\u0435\u043d \u0448\u043a\u043e\u043b\u044b \u043e\u043d\u0430 \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0430\u0435\u0442\u0441\u044f...","aggregateRating":{"@type":"AggregateRating","ratingCount":39066,"bestRating":10,"ratingValue":"9.3"},"numberOfEpisodes":13,"startDate":"2021-01-10","endDate":"2021-04-04","image":"\/upload\/anime\/images\/649d6823b618d097585759.jpg","genre":["\u041a\u043e\u043c\u0435\u0434\u0438\u044f","\u041f\u043e\u0432\u0441\u0435\u0434\u043d\u0435\u0432\u043d\u043e\u0441\u0442\u044c","\u0420\u043e\u043c\u0430\u043d\u0442\u0438\u043a\u0430","\u0421\u0451\u043d\u044d\u043d","\u0428\u043a\u043e\u043b\u0430"],"alternativeHeadline":["Horimiya","Horimiya","\u30db\u30ea\u30df\u30e4"],"actor":[{"@type":"Person","url":"\/person\/539-haruka-tomatsu","name":"\u0425\u0430\u0440\u0443\u043a\u0430 \u0422\u043e\u043c\u0430\u0446\u0443"},{"@type":"Person","url":"\/person\/31-kouki-uchiyama","name":"\u041a\u043e\u043a\u0438 \u0423\u0442\u0438\u044f\u043c\u0430"}],"creator":[{"@type":"Organization","url":"\/anime\/studio\/cloverworks","name":"CloverWorks"}]}</script>
  <meta property="og:site_name" content="AnimeGO">
  <script>var devicejs = { isMobile: false, isTablet: false };</script>
  <script>var baseOptions = { url: 'https://animego.org/', 'IS_AUTHENTICATED_FULLY': false };</script>
  <script>function ready(e) { (document.attachEvent ? "complete" === document.readyState : "loading" !== document.readyState) ? e() : document.addEventListener("DOMContentLoaded", e) }</script>
  <script src="/animego/js/require.min.js?v=2.3.6" defer=""></script>
  <script src="/animego/js/main.min.js?v=67" defer=""></script>
  <link href="/animego/css/common.min.css?v=19" rel="stylesheet" type="text/css">
  <style data-css="tiny-slider.min.css">
    .tns-outer {
      padding: 0 !important
    }

    .tns-outer [hidden] {
      display: none !important
    }

    .tns-outer [aria-controls],
    .tns-outer [data-action] {
      cursor: pointer
    }

    .tns-slider {
      -webkit-transition: all 0s;
      -moz-transition: all 0s;
      transition: all 0s
    }

    .tns-slider>div,
    .tns-slider>li {
      -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
      box-sizing: border-box
    }

    .tns-horizontal.tns-subpixel {
      white-space: nowrap
    }

    .tns-horizontal.tns-subpixel>div,
    .tns-horizontal.tns-subpixel>li {
      display: inline-block;
      vertical-align: top;
      white-space: normal
    }

    .tns-horizontal.tns-no-subpixel:after {
      content: '';
      display: table;
      clear: both
    }

    .tns-horizontal.tns-no-subpixel>div,
    .tns-horizontal.tns-no-subpixel>li {
      float: left;
      margin-right: -100%
    }

    .tns-no-calc {
      position: relative;
      left: 0
    }

    .tns-gallery {
      position: relative;
      left: 0;
      min-height: 1px
    }

    .tns-gallery>div,
    .tns-gallery>li {
      position: absolute;
      left: -100%;
      -webkit-transition: transform 0s, opacity 0s;
      -moz-transition: transform 0s, opacity 0s;
      transition: transform 0s, opacity 0s
    }

    .tns-gallery>.tns-moving {
      -webkit-transition: all 0.25s;
      -moz-transition: all 0.25s;
      transition: all 0.25s
    }

    .tns-lazy-img {
      -webkit-transition: opacity 0.6s;
      -moz-transition: opacity 0.6s;
      transition: opacity 0.6s;
      opacity: 0.6
    }

    .tns-lazy-img.loaded {
      opacity: 1
    }

    .tns-ah {
      -webkit-transition: height 0s;
      -moz-transition: height 0s;
      transition: height 0s
    }

    .tns-ovh {
      overflow: hidden
    }

    .tns-visually-hidden {
      position: absolute;
      left: -10000em
    }

    .tns-transparent {
      opacity: 0;
      visibility: hidden
    }

    .tns-fadeIn {
      opacity: 1;
      filter: alpha(opacity=100);
      z-index: 0
    }

    .tns-normal,
    .tns-fadeOut {
      opacity: 0;
      filter: alpha(opacity=0);
      z-index: -1
    }

    .tns-t-subp2 {
      margin: 0 auto;
      width: 310px;
      position: relative;
      height: 10px;
      overflow: hidden
    }

    .tns-t-ct {
      width: 2333.3333333%;
      width: -webkit-calc(100% * 70 / 3);
      width: -moz-calc(100% * 70 / 3);
      width: calc(100% * 70 / 3);
      position: absolute;
      right: 0
    }

    .tns-t-ct:after {
      content: '';
      display: table;
      clear: both
    }

    .tns-t-ct>div {
      width: 1.4285714%;
      width: -webkit-calc(100% / 70);
      width: -moz-calc(100% / 70);
      width: calc(100% / 70);
      height: 10px;
      float: left
    }

    /*# sourceMappingURL=sourcemaps/tiny-slider.css.map */
  </style><!-- Global site tag (gtag.js) - Google Analytics -->
  <script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-111104961-1"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'UA-111104961-1');
  </script><!-- Yandex.Metrika counter -->
  <script> (function (d, w, c) { (w[c] = w[c] || []).push(function () { try { w.yaCounter47036808 = new Ya.Metrika({ id: 47036808, clickmap: true, trackLinks: true, accurateTrackBounce: true, webvisor: true }); } catch (e) { } }); var n = d.getElementsByTagName("script")[0], s = d.createElement("script"), f = function () { n.parentNode.insertBefore(s, n); }; s.type = "text/javascript"; s.async = true; s.src = "https://mc.yandex.ru/metrika/watch.js"; if (w.opera == "[object Opera]") { d.addEventListener("DOMContentLoaded", f, false); } else { f(); } })(document, window, "yandex_metrika_callbacks"); </script>
  <!-- /Yandex.Metrika counter --><!-- Yandex.RTB -->
  <script>window.yaContextCb = window.yaContextCb || []</script>
  <script src="https://yandex.ru/ads/system/context.js" async=""></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="sticky"
    src="/animego/js/modules/sticky.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="popper"
    src="/animego/js/lib/popper.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="lazyload"
    src="/animego/js/lib/lazyload.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="app.min"
    src="/animego/js/app.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="filter"
    src="/animego/js/modules/filter.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="jquery"
    src="/animego/js/lib/jquery.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="search"
    src="/animego/js/search.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="modal"
    src="/animego/js/modal.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="LoadedScrollAjax"
    src="/animego/js/LoadedScrollAjax.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="requestAjax"
    src="/animego/js/requestAjax.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="popover"
    src="/animego/js/popover.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="reload"
    src="/animego/js/modules/reload.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="mmenu"
    src="/animego/js/modules/mmenu.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="tiny-slider"
    src="/animego/js/lib/tiny-slider.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="timeago"
    src="/animego/js/lib/jquery.timeago.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="anime"
    src="/animego/js/modules/anime.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="rating"
    src="/animego/js/modules/rating.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="videoPlayer"
    src="/animego/js/modules/videoPlayer.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="social-likes"
    src="/animego/js/lib/social-likes.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="nouislider"
    src="/animego/js/lib/nouislider.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="loader"
    src="/animego/js/loader.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="fancybox"
    src="/animego/js/lib/jquery.fancybox.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="bootstrap"
    src="/animego/js/lib/bootstrap.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="cookie"
    src="/animego/js/lib/js.cookie.min.js?v=67"></script>
  <script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="plagins"
    src="/animego/js/plagins.min.js?v=67"></script>
  <style></style>
</head>

<body>
  <nav id="video-player-bar-menu" class="mm-menu mm-offcanvas mm-fx-menu-slide mm-theme-video-player">
    <div class="mm-header"></div>
    <div class="mm-content"></div>
    <div class="mm-footer"></div>
  </nav>
  <div id="menu" class="mm-menu mm-offcanvas mm-fx-menu-slide mm-theme-white"
    data-header="&quot;<div class=\&quot;mmenu-user d-flex align-items-center justify-content-center\&quot;><a class=\&quot;text-link-gray\&quot; href=\&quot;\/login\&quot;><div class=\&quot;mmenu-user-icon rounded-circle avatar mb-2\&quot;><div class=\&quot;img-square rounded-circle\&quot;><svg class=\&quot;icon icon-person\&quot;><use xlink:href=\&quot;#icon-person\&quot;><\/use><\/svg><\/div><\/div><div class=\&quot;text-center\&quot;><span class=\&quot;mobile-login-in text-link-gray h5 font-weight-normal mb-0\&quot;>\u0412\u043e\u0439\u0442\u0438<\/span><\/div><\/a><\/div>&quot;"
    data-content="&quot;<nav><ul class=\&quot;nav navbar-nav\&quot;><li class=\&quot;nav-item\&quot;><a href=\&quot;\/anime\&quot; class=\&quot;nav-link text-link-gray  font-weight-600 bo-b-1 py-3 px-4 d-flex align-items-center\&quot;><span class=\&quot;d-flex mr-auto\&quot;>\u0410\u043d\u0438\u043c\u0435<\/span><svg class=\&quot;icon icon-lg icon-arrow-right\&quot;><use xlink:href=\&quot;#icon-arrow-right\&quot;><\/use><\/svg><\/a><\/li><li class=\&quot;nav-item\&quot;><a href=\&quot;\/manga\&quot; class=\&quot;nav-link text-link-gray font-weight-600 bo-b-1 py-3 px-4 d-flex align-items-center\&quot;><span class=\&quot;d-flex mr-auto\&quot;>\u041c\u0430\u043d\u0433\u0430<\/span><svg class=\&quot;icon icon-lg icon-arrow-right\&quot;><use xlink:href=\&quot;#icon-arrow-right\&quot;><\/use><\/svg><\/a><\/li><li class=\&quot;nav-item\&quot;><a class=\&quot;nav-link text-link-gray font-weight-600 py-3 px-4 d-flex align-items-center\&quot; href=\&quot;\/anime\/random\&quot; title=\&quot;\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0430\u043d\u0438\u043c\u0435\&quot;>\u0421\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0435 \u0430\u043d\u0438\u043c\u0435<\/a><\/li><\/ul><\/nav>&quot;">
    <div class="mm-header"></div>
    <div class="mm-content"></div>
    <div class="mm-footer"></div>
  </div>
  <div style="height: 70px;">
    <header class="d-none d-lg-block mb-4 w-100 mm-slideout affix show up" data-sticky="scrollBar"
      data-sticky-class="show" style="top: -46px;">
      <nav class="navbar navbar-expand-lg navbar-dark bg-dark border-primary py-0">
        <div class="container"><a class="navbar-brand d-flex align-items-center position-relative" href="/"><span
              class="name">AnimeGO</span><img src="/animego/images/logo/logo.png" alt="AnimeGO"></a>
          <div class="collapse navbar-collapse position-relative">
            <ul class="nav navbar-nav mr-auto ml-2">
              <li class="nav-item"><a class="nav-link" href="https://animego.org/anime" title="Список аниме">Аниме</a>
              </li>
              <li class="nav-item"><a class="nav-link" href="https://animego.org/manga">Манга</a></li>
              <li class="nav-item"><a class="nav-link" href="https://animego.org/characters"
                  title="Аниме персонажи">Персонажи</a></li>
              <li class="nav-item d-none d-xl-block"><a class="nav-link" href="/anime/random"
                  title="Случайное аниме">Случайное аниме</a></li>
            </ul>
            <ul class="nav navbar-nav float-xs-right ml-2 login">
              <li class="nav-item"><a class="nav-link d-flex align-items-center" rel="nofollow"
                  href="https://animego.org/connect/vkontakte"><svg class="icon icon-vk mr-1">
                    <use xlink:href="#icon-vk"></use>
                  </svg> Войти через вконтакт</a></li>
              <li class="nav-item"><a class="nav-link d-flex align-items-center" href="/login"><svg
                    class="icon icon-login mr-1">
                    <use xlink:href="#icon-login"></use>
                  </svg> Войти</a></li>
              <li class="nav-item"><a class="nav-link d-flex align-items-center" id="navbar-search" href="#"><svg
                    class="icon icon-lg icon-search">
                    <use xlink:href="#icon-search"></use>
                  </svg><svg class="icon icon-lg icon-close">
                    <use xlink:href="#icon-close"></use>
                  </svg><span style="width:0;pointer-events:none;">&nbsp;</span></a>
                <div class="search animated"><!--noindex-->
                  <form action="/search/all" method="GET">
                    <div class="searchform-wrapper d-flex">
                      <div class="form-control form-control-sm d-flex align-items-center"><svg
                          class="icon icon-lg icon-search2 mr-2">
                          <use xlink:href="#icon-search2"></use>
                        </svg><input class="form-control-reset w-100 text-placeholder-4" name="q" type="text"
                          placeholder="Поиск аниме, манги, людей и персонажей" autocomplete="off" data-search="true"
                          data-search-id="searchsuggestions" data-ajax-url="/search/all?type=small"
                          data-search-min-query-len="3" data-search-target=".form-control"></div>
                    </div>
                  </form><!--/noindex-->
                </div>
              </li>
            </ul>
          </div>
        </div>
      </nav>
    </header>
  </div>
  <div style="height: 0px;">
    <header
      class="navbar navbar-expand-lg navbar-dark bg-dark d-lg-none mb-0 mb-sm-4 w-100 mm-slideout border-bottom-0 affix show up"
      data-sticky="scrollBar" data-sticky-class="show" style="top: 0px;">
      <div class="d-flex w-100">
        <div class="d-flex align-self-center mr-auto"><button class="navbar-toggler icon-bar d-flex" id="icon-bar"
            type="button"><span class="icon-bar-inner"></span></button></div>
        <div class="text-center d-flex align-self-center mr-auto"><a
            class="navbar-brand d-flex align-items-center position-relative" href="/"><span
              class="name">AnimeGO</span><img src="/animego/images/logo/logo.png" alt="AnimeGO"></a></div>
        <div class="d-flex align-self-center">
          <ul class="nav navbar-nav">
            <li class="nav-item"><a class="nav-link d-flex align-items-center p-2" id="navbar-search-mobile"
                href="#"><svg class="icon icon-ul icon-search2">
                  <use xlink:href="#icon-search2"></use>
                </svg></a></li>
          </ul>
        </div>
      </div>
    </header>
  </div>
  <div class="overflow-h">
    <div id="wrap" class="mm-slideout mm-page">
      <div class="container">
        <div class="row">
          <div class="col-lg-12 col-xl-12 col-ul-12 content-block">
            <main class="content p-3" id="content">
              <div>
                <div class="media mb-3 d-none d-block d-md-flex">
                  <div class="c-image media-left mr-md-4">
                    <div class="anime-poster position-relative cursor-pointer">
                      <div class="poster-icon rounded-circle d-flex justify-content-center align-items-center p-2"
                        onclick="this.nextElementSibling.querySelector('img').click();"><svg class="icon icon-search">
                          <use xlink:href="#icon-search"></use>
                        </svg></div>
                      <div data-ajax-url="/anime/horimiya-1686"
                        data-ajax-appear-params="{&quot;type&quot;:&quot;posters&quot;}" data-ajax-method="GET"><img
                          width="250" height="350"
                          src="https://animego.org/media/cache/thumbs_250x350/upload/anime/images/649d6823b618d097585759.jpg"
                          srcset="https://animego.org/media/cache/thumbs_500x700/upload/anime/images/649d6823b618d097585759.jpg 2x"
                          alt="Хоримия" title="Хоримия" data-ajaximageload="true"></div>
                    </div>
                    <div class="watch-panel mt-3 p-3 bo-1 br-2"><a
                        class="btn btn-primary btn-block d-flex align-items-center justify-content-center br-2 cursor-pointer"
                        href="#video-watch2"><span
                          class="online float-left rounded-circle text-gray-dark-7 mr-2 d-flex align-items-center justify-content-center"><svg
                            class="icon icon-play2 ml-1">
                            <use xlink:href="#icon-play2"></use>
                          </svg></span><span class="ml-1">
                          Смотреть онлайн
                        </span></a><span class="btn btn-block btn-review mt-3 cursor-pointer modal-btn modal.ajax"
                        data-ajax-url="/login" data-ajax-method="GET"><svg class="icon icon-create">
                          <use xlink:href="#icon-create"></use>
                        </svg> Написать отзыв
                      </span>
                      <div class="position-relative mt-3 my-list-anime" id="my-list-1686">
                        <div class="my-list">
                          <div
                            class="d-flex align-items-center justify-content-center my-list-header card-header py-2 br-2 collapsed"
                            data-toggle="collapse" data-target="#mylist-1686" role="button"><span
                              class="d-flex align-items-center mr-sm-auto"><svg class="icon icon-add mr-1">
                                <use xlink:href="#icon-add"></use>
                              </svg><span class="text-underline-hover modal-btn modal.ajax" data-ajax-url="/login"
                                data-ajax-method="GET">
                                Добавить в список
                              </span></span><svg class="icon icon-lg icon-arrow-down">
                              <use xlink:href="#icon-arrow-down"></use>
                            </svg></div>
                          <div class="card-block p-0 collapse" id="mylist-1686">
                            <div class="list-group mt-minus-1"><span
                                class="list-group-item list-group-item-action py-2 modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" role="button">Смотрю</span><span
                                class="list-group-item list-group-item-action py-2 modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" role="button">Просмотрено</span><span
                                class="list-group-item list-group-item-action py-2 modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" role="button">Отложено</span><span
                                class="list-group-item list-group-item-action py-2 modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" role="button">Брошено</span><span
                                class="list-group-item list-group-item-action py-2 modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" role="button">Запланировано</span><span
                                class="list-group-item list-group-item-action py-2 modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" role="button">Пересматриваю</span></div>
                          </div>
                        </div>
                        <div class="text-center mt-2"><a class="b-tooltipped d-none d-lg-inline"
                            href="javascript:void(0)" data-ontouchstart="true" data-popover="true"
                            data-toggle="popover-content" data-html="true" data-placement="bottom" data-content=""
                            data-original-title="В списках у людей" data-ajax-url="/animelist/1686/show">
                            В списках у людей
                          </a><a class="b-tooltipped d-lg-none" href="javascript:void(0)" data-popover="true"
                            data-toggle="popover" data-html="true" data-placement="bottom" data-content=""
                            data-original-title="В списках у людей" data-ajax-url="/animelist/1686/show">
                            В списках у людей
                          </a></div>
                      </div>
                      <div class="text-center mt-2"><a class="bb-dashed-1" href="#review">Читать все рецензии</a></div>
                    </div>
                    <div class="anime-tags mt-2"></div>
                  </div>
                  <div class="media-body">
                    <div id="itemRatingBlock">
                      <div class="itemRatingBlock d-inline-flex align-items-center mb-1 position-relative">
                        <div class="star-rating mr-2"><svg class="icon icon-star">
                            <use xlink:href="#icon-star"></use>
                          </svg></div>
                        <div class="pr-2">
                          <div><span class="rating-value">9,3</span><span
                              class="best-rating text-gray-dark-8">/10</span></div>
                          <div class="rating-count">39066</div>
                        </div>
                        <div class="d-flex position-relative choice-rate pl-2"><select name="rating"
                            class="rating-native-select">
                            <option value="0">Выберите свой рейтинг...</option>
                            <option value="1">1</option>
                            <option value="2">2</option>
                            <option value="3">3</option>
                            <option value="4">4</option>
                            <option value="5">5</option>
                            <option value="6">6</option>
                            <option value="7">7</option>
                            <option value="8">8</option>
                            <option value="9">9</option>
                            <option value="10">10</option>
                          </select>
                          <div class="choice-rate-star d-flex align-items-center py-1" role="button"
                            data-my-rate-text="Моя оценка">
                            <div class="mr-1 text-center star"><svg class="icon icon-star">
                                <use xlink:href="#icon-star"></use>
                              </svg></div>
                            <div class="small rate-this mr-3">Оцените
                              аниме</div>
                          </div>
                          <div class="itemRatingForm justify-content-center">
                            <div class="itemRatingList d-flex align-items-center"><a href="javascript:void(0)"
                                class="rate_star d-flex align-items-center tooltip-icon modal-btn modal.ajax"
                                data-ajax-url="/login" data-rating="1" data-ajax-method="GET"
                                data-rating-ajax="false"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></a><a href="javascript:void(0)"
                                class="rate_star d-flex align-items-center tooltip-icon modal-btn modal.ajax"
                                data-ajax-url="/login" data-rating="2" data-ajax-method="GET"
                                data-rating-ajax="false"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></a><a href="javascript:void(0)"
                                class="rate_star d-flex align-items-center tooltip-icon modal-btn modal.ajax"
                                data-ajax-url="/login" data-rating="3" data-ajax-method="GET"
                                data-rating-ajax="false"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></a><a href="javascript:void(0)"
                                class="rate_star d-flex align-items-center tooltip-icon modal-btn modal.ajax"
                                data-ajax-url="/login" data-rating="4" data-ajax-method="GET"
                                data-rating-ajax="false"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></a><a href="javascript:void(0)"
                                class="rate_star d-flex align-items-center tooltip-icon modal-btn modal.ajax"
                                data-ajax-url="/login" data-rating="5" data-ajax-method="GET"
                                data-rating-ajax="false"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></a><a href="javascript:void(0)"
                                class="rate_star d-flex align-items-center tooltip-icon modal-btn modal.ajax"
                                data-ajax-url="/login" data-rating="6" data-ajax-method="GET"
                                data-rating-ajax="false"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></a><a href="javascript:void(0)"
                                class="rate_star d-flex align-items-center tooltip-icon modal-btn modal.ajax"
                                data-ajax-url="/login" data-rating="7" data-ajax-method="GET"
                                data-rating-ajax="false"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></a><a href="javascript:void(0)"
                                class="rate_star d-flex align-items-center tooltip-icon modal-btn modal.ajax"
                                data-ajax-url="/login" data-rating="8" data-ajax-method="GET"
                                data-rating-ajax="false"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></a><a href="javascript:void(0)"
                                class="rate_star d-flex align-items-center tooltip-icon modal-btn modal.ajax"
                                data-ajax-url="/login" data-rating="9" data-ajax-method="GET"
                                data-rating-ajax="false"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></a><a href="javascript:void(0)"
                                class="rate_star d-flex align-items-center tooltip-icon modal-btn modal.ajax"
                                data-ajax-url="/login" data-rating="10" data-ajax-method="GET"
                                data-rating-ajax="false"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></a></div>
                          </div>
                        </div>
                      </div><a class="tooltip-icon d-none d-lg-inline" href="javascript:void(0)"
                        data-ontouchstart="true" data-popover="true" data-toggle="popover-content" data-html="true"
                        data-placement="bottom" data-content="" data-title="Оценки людей"
                        data-ajax-url="/rating/1686/anime/statistics"><svg
                          class="icon icon-lg icon-info-circle text-gray-dark-2">
                          <use xlink:href="#icon-info-circle"></use>
                        </svg></a><a class="tooltip-icon d-none d-sm-inline d-lg-none" href="javascript:void(0)"
                        data-popover="true" data-toggle="popover" data-html="true" data-placement="bottom"
                        data-content="" data-title="Оценки людей" data-ajax-url="/rating/1686/anime/statistics"><svg
                          class="icon icon-lg icon-info-circle text-gray-dark-2">
                          <use xlink:href="#icon-info-circle"></use>
                        </svg></a>
                      <div class="d-sm-none mt-1"><a href="javascript:void(0)" data-popover="true" data-toggle="popover"
                          data-html="true" data-placement="bottom" data-content="" data-title="Оценки людей"
                          data-ajax-url="/rating/1686/anime/statistics">Оценки людей</a></div>
                    </div>
                    <div class="anime-title">
                      <div>
                        <h1>Хоримия</h1>
                        <div class="synonyms">
                          <div class="anime-synonyms" data-readmore="container" data-readmore-btn-show="···"
                            data-read-more-init="true">
                            <ul class="list-unstyled small mb-0" data-readmore="content">
                              <li>Horimiya</li>
                              <li>Horimiya</li>
                              <li>ホリミヤ</li>
                              <li>Hori-san and Miyamura-kun</li>
                            </ul>
                          </div>
                          <div class="read-more"><a href="#" class="read-more-link" role="button">···</a></div>
                        </div>
                        <hr>
                      </div>
                    </div>
                    <div class="anime-info">
                      <dl class="row">
                        <dt class="col-6 col-sm-4 font-weight-normal text-gray-dark-6">Тип</dt>
                        <dd class="col-6 col-sm-8 mb-1">ТВ Сериал</dd>
                        <dt class="col-6 col-sm-4 font-weight-normal text-gray-dark-6">Эпизоды</dt>
                        <dd class="col-6 col-sm-8 mb-1">13</dd>
                        <dt class="col-6 col-sm-4 font-weight-normal text-gray-dark-6">Статус</dt>
                        <dd class="col-6 col-sm-8 mb-1"><a href="https://animego.org/anime/status/released"
                            title="Вышел">Вышел</a></dd>
                        <dt class="col-6 col-sm-4 font-weight-normal text-gray-dark-6">Жанр</dt>
                        <dd class="col-6 col-sm-8 mb-1 overflow-h"><a href="https://animego.org/anime/genre/comedy"
                            title="Комедия">Комедия</a>, <a href="https://animego.org/anime/genre/slice-of-life"
                            title="Повседневность">Повседневность</a>, <a href="https://animego.org/anime/genre/romance"
                            title="Романтика">Романтика</a>, <a href="https://animego.org/anime/genre/shounen"
                            title="Сёнэн">Сёнэн</a>, <a href="https://animego.org/anime/genre/school"
                            title="Школа">Школа</a></dd>
                        <dt class="col-6 col-sm-4 font-weight-normal text-gray-dark-6">Первоисточник</dt>
                        <dd class="col-6 col-sm-8 mb-1">Манга</dd>
                        <dt class="col-6 col-sm-4 font-weight-normal text-gray-dark-6">Сезон</dt>
                        <dd class="col-6 col-sm-8 mb-1"><a href="https://animego.org/anime/season/2021/winter">Зима
                            2021</a></dd>
                        <dt class="col-6 col-sm-4 font-weight-normal text-gray-dark-6">Выпуск</dt>
                        <dd class="col-6 col-sm-8 mb-1"><span data-label="с 10 янв. 2021 по 4 апр. 2021"><span>с 10
                              января 2021 по 4 апреля 2021</span></span></dd>
                        <dt class="col-6 col-sm-4 font-weight-normal text-gray-dark-6">Студия</dt>
                        <dd class="col-6 col-sm-8 mb-1 overflow-h"><span><a
                              href="https://animego.org/anime/studio/cloverworks"
                              title="CloverWorks"><span>CloverWorks</span></a></span></dd>
                        <dt class="col-6 col-sm-4 font-weight-normal text-gray-dark-6">
                          Рейтинг MPAA
                          <span class="d-none d-lg-inline tooltip-icon" data-toggle="tooltip" data-placement="top"
                            data-title="Принятая в США система оценки содержания фильма, введённая Американской киноассоциацией (MPAA). Для расшифровки значений иконки, наведите на нее курсор мыши."
                            tabindex="-1"><svg class="icon icon-lg icon-help text-gray-dark-2">
                              <use xlink:href="#icon-help"></use>
                            </svg></span>
                        </dt>
                        <dd class="col-6 col-sm-8 mb-1"><span class="b-tooltipped" data-toggle="tooltip"
                            data-placement="top" data-title="дети до 13 лет допускаются на фильм только с родителями"
                            tabindex="-1">PG-13</span></dd>
                        <dt class="col-6 col-sm-4 font-weight-normal text-gray-dark-6">
                          Возрастные ограничения
                        </dt>
                        <dd class="col-6 col-sm-8 mb-1 mt-1"><span
                            style="display: inline-block;font-weight: 700;padding: 0 4px;border: 0;border-radius: 4px;background: rgba(0,0,0,0.84);word-spacing: -2px;color: #fff;">
                            18+
                          </span></dd>
                        <dt class="col-6 col-sm-4 font-weight-normal text-gray-dark-6">Длительность</dt>
                        <dd class="col-6 col-sm-8 mb-1">
                          23 мин. ~ серия
                        </dd>
                        <dt class="col-6 col-sm-4 font-weight-normal text-gray-dark-6">
                          Озвучка
                          <span class="tooltip-icon" data-toggle="tooltip" data-placement="top"
                            data-title="Создаётся в основном любителями-фандабберами, зачастую при помощи лишь микрофона, компьютера и текста."
                            tabindex="-1"><svg class="icon icon-lg icon-help text-gray-dark-2">
                              <use xlink:href="#icon-help"></use>
                            </svg></span>
                        </dt>
                        <dd class="col-6 col-sm-8 mb-1"><a href="/anime/dubbing/anidub">AniDUB</a>, <a
                            href="/anime/dubbing/anilibria">AniLibria</a>, <a href="/anime/dubbing/anifilm">AniFilm</a>,
                          <a href="/anime/dubbing/studio-band">Студийная Банда</a>, <a
                            href="/anime/dubbing/animedia">AniMedia</a>, <a href="/anime/dubbing/Anirise">AniRise</a>
                        </dd>
                        <dd class="mt-2 col-12"></dd>
                        <dt class="col-6 col-sm-4 font-weight-normal text-gray-dark-6">Снят по манге</dt>
                        <dd class="col-6 col-sm-8 mb-1"><a data-popover="true" data-ajax-url="/manga/horimiya-1217"
                            data-ajax-appear-params="{&quot;type&quot;:&quot;manga&quot;}" data-html="true"
                            data-toggle="popover-content" data-placement="top" data-content=" "
                            href="https://animego.org/manga/horimiya-1217">Хоримия</a></dd><!--noindex-->
                        <dt class="col-6 col-sm-4 font-weight-normal text-gray-dark-6">
                          Главные герои
                        </dt><!--/noindex-->
                        <dd class="col-6 col-sm-8 mb-1">
                          <div><span><a href="https://animego.org/character/24646-kyoukohori" data-popover="true"
                                data-ajax-url="/character/24646"
                                data-ajax-appear-params="{&quot;type&quot;:&quot;small&quot;}" data-html="true"
                                data-toggle="popover-content" data-placement="top" data-content=" "><span>Кёко
                                  Хори</span></a></span><span>
                              (озвучивает <a class="text-link-gray text-underline"
                                href="https://animego.org/person/539-haruka-tomatsu" data-popover="true"
                                data-ajax-url="/person/539"
                                data-ajax-appear-params="{&quot;type&quot;:&quot;small&quot;}" data-html="true"
                                data-toggle="popover-content" data-placement="top" data-content=" "><span>Харука
                                  Томацу</span></a>)
                            </span></div>
                          <div><span><a href="https://animego.org/character/24645-izumi-miyamura" data-popover="true"
                                data-ajax-url="/character/24645"
                                data-ajax-appear-params="{&quot;type&quot;:&quot;small&quot;}" data-html="true"
                                data-toggle="popover-content" data-placement="top" data-content=" "><span>Изуми
                                  Миямура</span></a></span><span>
                              (озвучивает <a class="text-link-gray text-underline"
                                href="https://animego.org/person/31-kouki-uchiyama" data-popover="true"
                                data-ajax-url="/person/31"
                                data-ajax-appear-params="{&quot;type&quot;:&quot;small&quot;}" data-html="true"
                                data-toggle="popover-content" data-placement="top" data-content=" "><span>Коки
                                  Утияма</span></a>)
                            </span></div>
                        </dd>
                      </dl>
                    </div>
                  </div>
                </div>
                <div class="description pb-3">
                  У старшеклассницы Кёко Хори, похоже, есть всё, что только можно пожелать, ведь она умница, красавица и
                  любимица всего класса. Однако даже у идеальных на первый взгляд людей бывают секреты, и один такой
                  есть у Хори: девушка страшно боится, что её одноклассники прознают о том, что вне стен школы она
                  превращается в настоящую домохозяйку, на которую вечно пропадающие на работе родители скинули все
                  домашние хлопоты и младшего брата Соту. Однажды на пороге её дома появляется незнакомец, который
                  держит за руку поранившегося Соту… а ещё он знает Хори! Тут же выясняется, что этот парень на самом
                  деле невзрачный одноклассник Хори, Миямура. Что же произойдёт после встречи популярной красавицы и
                  «серой мышки»? Дружба, любовь?.. Встречайте школьную комедию, полную энергии юности!
                </div>
                <div class="mt-3">
                  <div class="row">
                    <div class="col-12 col-md-8 col-lg-9 mb-3 mb-md-0">
                      <div class="h4 mb-3">Кадры</div>
                      <div class="d-flex screenshots-block" id="screenshots-list" data-ajax-url="/anime/horimiya-1686"
                        data-ajax-appear-params="{&quot;type&quot;:&quot;screenshots&quot;}" data-ajax-method="GET"><a
                          class="screenshots-item" href="/upload/anime/images/5ffb0dbeeccfd764885081.jpg"
                          data-ajaximageload="true" data-caption="Кадр 1 из Хоримия">
                          <div class="poster-icon rounded-circle d-flex justify-content-center align-items-center p-2"
                            onclick="this.nextElementSibling.querySelector('img').click();"><svg
                              class="icon icon-search">
                              <use xlink:href="#icon-search"></use>
                            </svg></div><img alt="Кадр 1 из Хоримия" class="img-fluid"
                            src="https://animego.org/media/cache/thumbs_444x250/upload/anime/images/5ffb0dbeeccfd764885081.jpg">
                        </a><a class="screenshots-item ml-3" href="/upload/anime/images/5ffb0dbeeeed3164392389.jpg"
                          data-ajaximageload="true" data-caption="Кадр 2 из Хоримия">
                          <div class="poster-icon rounded-circle d-flex justify-content-center align-items-center p-2"
                            onclick="this.nextElementSibling.querySelector('img').click();"><svg
                              class="icon icon-search">
                              <use xlink:href="#icon-search"></use>
                            </svg></div><img alt="Кадр 2 из Хоримия" class="img-fluid"
                            src="https://animego.org/media/cache/thumbs_444x250/upload/anime/images/5ffb0dbeeeed3164392389.jpg">
                        </a><a class="screenshots-item ml-3" href="/upload/anime/images/5ffb0dbeef4eb363311693.jpg"
                          data-ajaximageload="true" data-caption="Кадр 3 из Хоримия">
                          <div class="poster-icon rounded-circle d-flex justify-content-center align-items-center p-2"
                            onclick="this.nextElementSibling.querySelector('img').click();"><svg
                              class="icon icon-search">
                              <use xlink:href="#icon-search"></use>
                            </svg></div><img alt="Кадр 3 из Хоримия" class="img-fluid"
                            src="https://animego.org/media/cache/thumbs_444x250/upload/anime/images/5ffb0dbeef4eb363311693.jpg">
                        </a></div>
                    </div>
                    <div class="col">
                      <div class="h4 mb-3">Трейлер</div>
                      <div class="video-block" data-ajax-url="/anime/horimiya-1686"
                        data-ajax-appear-params="{&quot;type&quot;:&quot;video_links&quot;}" data-ajax-method="GET"><a
                          data-ajaximageload="" class="video-item position-relative d-flex lazy"
                          href="https://www.youtube.com/embed/nSyiXO2wTow"
                          data-original="https://img.youtube.com/vi/nSyiXO2wTow/mqdefault.jpg" data-was-processed="true"
                          style="background-image: url(&quot;https://img.youtube.com/vi/nSyiXO2wTow/mqdefault.jpg&quot;);">
                          <div class="lds-spinner">
                            <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i></div>
                          <div class="video-item-icon m-1 d-flex align-items-center justify-content-center"><svg
                              class="icon icon-play2 pl-1">
                              <use xlink:href="#icon-play2"></use>
                            </svg></div><span class="marker small"><span class="type px-2">PV</span><span
                              class="duration float-right px-2">01:00</span></span>
                        </a></div>
                    </div>
                  </div>
                </div>
                <div id="video-watch2">
                  <div class="seasons mt-3">
                    <h4 class="pb-3 mb-3 bo-b-2">Связанное</h4>
                    <div class="seasons-container read-more-open" style="max-height: 231px;" data-readmore="container"
                      data-readmore-btn-show="<span class=&quot;read-more-text&quot;>Показать ещё</span><svg class=&quot;icon icon-arrow-down&quot;><use xlink:href=&quot;#icon-arrow-down&quot;></use></svg>">
                      <div class="seasons-items row" data-readmore="content">
                        <div class="seasons-item col-6 col-sm-4 col-md-4 col-lg-3 mb-3">
                          <div class="seasons-item-name text-truncate mb-2"><a class="text-link-gray text-underline"
                              href="https://animego.org/manga/horimiya-1217" title="Хоримия">
                              Хоримия
                            </a></div>
                          <div class="seasons-item-pic float-left mr-2"><a
                              href="https://animego.org/manga/horimiya-1217" data-popover="true"
                              data-ajax-url="/manga/horimiya-1217"
                              data-ajax-appear-params="{&quot;type&quot;:&quot;manga&quot;}" data-html="true"
                              data-toggle="popover-content" data-placement="right" data-content=" ">
                              <div class="anime-grid-lazy lazy"
                                data-original="https://animego.org/media/cache/thumbs_104x166/upload/manga/images/5ff8dee92fe45122939281.jpg"
                                style="width: 52px; background-image: url(&quot;https://animego.org/media/cache/thumbs_104x166/upload/manga/images/5ff8dee92fe45122939281.jpg&quot;);"
                                data-was-processed="true">
                                <div class="lds-spinner">
                                  <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>
                                </div>
                              </div>
                            </a></div>
                          <div class="seasons-item-info text-gray-dark-5 small mb-1">
                            Манга / 2011
                          </div>
                          <div class="seasons-item-info text-gray-dark-5 small">
                            Адаптация
                          </div>
                        </div>
                        <div class="seasons-item col-6 col-sm-4 col-md-4 col-lg-3 mb-3">
                          <div class="seasons-item-name text-truncate mb-2"><a class="text-link-gray text-underline"
                              href="https://animego.org/anime/hori-i-miyamura-1742" title="Хори и Миямура">
                              Хори и Миямура
                            </a></div>
                          <div class="seasons-item-pic float-left mr-2"><a
                              href="https://animego.org/anime/hori-i-miyamura-1742" data-popover="true"
                              data-ajax-url="/anime/hori-i-miyamura-1742"
                              data-ajax-appear-params="{&quot;type&quot;:&quot;anime&quot;}" data-html="true"
                              data-toggle="popover-content" data-placement="right" data-content=" ">
                              <div class="anime-grid-lazy lazy"
                                data-original="https://animego.org/media/cache/thumbs_104x166/upload/anime/images/60692b934ca28131082361.jpg"
                                style="width: 52px; background-image: url(&quot;https://animego.org/media/cache/thumbs_104x166/upload/anime/images/60692b934ca28131082361.jpg&quot;);"
                                data-was-processed="true">
                                <div class="lds-spinner">
                                  <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>
                                </div>
                              </div>
                            </a></div>
                          <div class="seasons-item-info text-gray-dark-5 small mb-1">
                            OVA / 2012
                          </div>
                          <div class="seasons-item-info text-gray-dark-5 small mb-1">
                            6 эпизодов
                          </div>
                          <div class="seasons-item-info text-gray-dark-5 small">
                            Альтернативная история
                          </div>
                        </div>
                        <div class="seasons-item col-6 col-sm-4 col-md-4 col-lg-3 mb-3">
                          <div class="seasons-item-name text-truncate mb-2"><a class="text-link-gray text-underline"
                              href="https://animego.org/anime/horimiya-kusochek-2353" title="Хоримия: Кусочек">
                              Хоримия: Кусочек
                            </a></div>
                          <div class="seasons-item-pic float-left mr-2"><a
                              href="https://animego.org/anime/horimiya-kusochek-2353" data-popover="true"
                              data-ajax-url="/anime/horimiya-kusochek-2353"
                              data-ajax-appear-params="{&quot;type&quot;:&quot;anime&quot;}" data-html="true"
                              data-toggle="popover-content" data-placement="right" data-content=" ">
                              <div class="anime-grid-lazy lazy"
                                data-original="https://animego.org/media/cache/thumbs_104x166/upload/anime/images/649d67b3d2021281902474.jpg"
                                style="width: 52px; background-image: url(&quot;https://animego.org/media/cache/thumbs_104x166/upload/anime/images/649d67b3d2021281902474.jpg&quot;);"
                                data-was-processed="true">
                                <div class="lds-spinner">
                                  <i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i><i></i>
                                </div>
                              </div>
                            </a></div>
                          <div class="seasons-item-info text-gray-dark-5 small mb-1">
                            ТВ Сериал / 2023
                          </div>
                          <div class="seasons-item-info text-gray-dark-5 small mb-1">
                            13 эпизодов
                          </div>
                          <div class="seasons-item-info text-gray-dark-5 small">
                            Другая история
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="mt-3"><!-- Yandex.RTB R-A-752036-1 -->
                    <div id="yandex_rtb_R-A-752036-1"></div>
                    <script>window.yaContextCb.push(() => {
                        Ya.Context.AdvManager.render({
                          renderTo: 'yandex_rtb_R-A-752036-1',
                          blockId: 'R-A-752036-1'
                        })
                      })</script>
                  </div>
                </div>
              </div>
            </main>
            <link href="/animego/css/social-likes_flat.min.css" rel="stylesheet" type="text/css">
            <div class="bg-inverse video-player p-3 py-4" id="video-watch">
              <div class="d-flex mb-3"><strong class="h3 text-white m-0 mr-auto" data-video-player-title="">Смотреть
                  аниме «Хоримия» онлайн</strong><span class="ml-3"
                  style="font-size: 36px;color: hsla(0,0%,100%,.3);font-weight: 600;line-height: 1.11;letter-spacing: -2px;pointer-events: none;">
                  18+
                </span></div>
              <div class="dropdown mt-3" id="video-player" data-time="1698073204300" data-ajax-request-begin="true"
                data-ajax-request-begin-scroll="true" data-ajax-container="true"
                data-ajax-appear-params="{&quot;_allow&quot;:true}" data-ajax-url="/anime/1686/player"
                data-loader="#loader-loading-player" data-loader-style="{&quot;position&quot;:&quot;absolute&quot;}">
                <style>
                  .overlay-censored {
                    background-color: hsla(0, 0%, 8%, .9);
                    position: absolute;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    margin: 0 -15px;
                    z-index: 10;
                  }

                  .overlay-censored-raw {
                    margin-top: -5%;
                  }

                  .overlay-censored-content {
                    max-width: 620px;
                    margin-bottom: 32px;
                  }

                  .overlay-censored-content__title {
                    font-size: 40px;
                    font-weight: 700;
                  }

                  .overlay-censored-content__description {
                    font-size: 20px;
                    color: #d9d7e0;
                  }

                  .overlay-censored__buttons-block button {
                    min-width: 152px;
                  }

                  .overlay-censored__buttons-block button:last-child {
                    margin-left: 24px;
                  }
                </style>
                <div class="align-self-center justify-content-end d-flex d-lg-none mb-3"><button
                    class="navbar-toggler icon-bar d-flex" id="video-player-side-bar" type="button"><span
                      class="icon-bar-inner"></span></button></div>
                <div class="row video-player-bg position-relative">
                  <div class="video-player-main col-12 col-lg-8 col-ul-9 p-0">
                    <div class="video-player-online position-relative"
                      data-player-notvideo="<div class='video-player-online-not'>Нет видео.</div>"><iframe
                        src="//aniboom.one/embed/x6ldxN1MJno?episode=3&amp;translation=2" frameborder="0"
                        webkitallowfullscreen="true" mozallowfullscreen="true" scrolling="no" allowfullscreen=""
                        allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                        width="618.662" height="349.075"></iframe></div>
                    <div class="video-player-bar align-items-center py-2d-flex">
                      <div class="col">
                        <div class="row align-items-center">
                          <div class="col-5 col-sm-4 col-md-3 d-flex align-items-center"><label
                              class="video-player-bar-series text-player-gray mr-3 mb-0 small text-nowrap video-player-number-series-text"
                              for="video-series-number-input" data-toggle="popover" data-trigger="hover"
                              data-html="true" data-placement="bottom"
                              data-content="<div class='text-center' style='max-width: 238px;'>Для быстрой навигации по сериям, в поле справа, введите номер серии.</div>"
                              data-label="№"><span>Серия №</span></label>
                            <div class="video-player-number-series">
                              <div data-placement="bottom" data-content="Нажмите «Enter» чтобы перейти к серии"><input
                                  id="video-series-number-input" class="form-control text-center br-4" type="text"
                                  maxlength="4" placeholder="0"></div>
                            </div>
                          </div>
                          <div class="col-7 col-sm-8 col-md-9 d-flex align-items-center video-player-border-left pr-0">
                            <div
                              class="video-player-bar-series text-player-gray mr-3 small text-nowrap d-none d-sm-block">
                              Серия</div><select name="series" class="form-control d-block d-lg-none">
                              <option value="22486" selected="">1 серия</option>
                              <option value="22487">2 серия</option>
                              <option value="22488">3 серия</option>
                              <option value="22489">4 серия</option>
                              <option value="22640">5 серия</option>
                              <option value="22641">6 серия</option>
                              <option value="22642">7 серия</option>
                              <option value="22643">8 серия</option>
                              <option value="22644">9 серия</option>
                              <option value="22645">10 серия</option>
                              <option value="22646">11 серия</option>
                              <option value="22647">12 серия</option>
                              <option value="22648">13 серия</option>
                            </select>
                            <div class="video-player-bar-series-list text-player-gray text-center d-none d-lg-flex"
                              data-player-bar-series-list="true" data-ajax-url="/anime/series">
                              <div class="tns-outer" id="video-carousel-ow">
                                <div class="tns-controls" aria-label="Carousel Navigation" tabindex="0"><button
                                    type="button" data-controls="prev" tabindex="-1" aria-controls="video-carousel"
                                    disabled=""><svg class="icon icon-lg icon-arrow-left">
                                      <use xlink:href="#icon-arrow-left"></use>
                                    </svg></button><button type="button" data-controls="next" tabindex="-1"
                                    aria-controls="video-carousel"><svg class="icon icon-lg icon-arrow-right">
                                      <use xlink:href="#icon-arrow-right"></use>
                                    </svg></button></div>
                                <div class="tns-liveregion tns-visually-hidden" aria-live="polite" aria-atomic="true">
                                  slide <span class="current">1 to 4</span> of 13</div>
                                <div id="video-carousel-mw" class="tns-ovh">
                                  <div class="tns-inner" id="video-carousel-iw">
                                    <div id="video-carousel"
                                      data-options="{&quot;responsive&quot;:{&quot;0&quot;:{&quot;items&quot;:4},&quot;1200&quot;:{&quot;items&quot;:5},&quot;1400&quot;:{&quot;items&quot;:7}},&quot;speed&quot;:&quot;800&quot;,&quot;items&quot;:7,&quot;loop&quot;:false,&quot;swipeAngle&quot;:false,&quot;mouseDrag&quot;:true,&quot;startIndex&quot;:0,&quot;slideBy&quot;:&quot;page&quot;,&quot;nav&quot;:false,&quot;controlsText&quot;:[&quot;<svg class=\&quot;icon icon-lg icon-arrow-left\&quot;><use xlink:href=\&quot;#icon-arrow-left\&quot;><\/use><\/svg>&quot;,&quot;<svg class=\&quot;icon icon-lg icon-arrow-right\&quot;><use xlink:href=\&quot;#icon-arrow-right\&quot;><\/use><\/svg>&quot;]}"
                                      class="  tns-slider tns-carousel tns-subpixel tns-calc tns-horizontal"
                                      style="transform: translate3d(0%, 0px, 0px);">
                                      <div class="tns-item tns-slide-active" id="video-carousel-item0">
                                        <div class="video-player-bar-series-item d-inline-block br-4 mb-0"
                                          data-episode="1" data-id="22486" data-episode-type="1"
                                          data-episode-title="A Tiny Happenstance" data-episode-released="9 января 2021"
                                          data-episode-description=""
                                          data-player-notvideo="<div class='video-player-online-not'>Нет видео.</div>"
                                          role="button">1</div>
                                      </div>
                                      <div class="tns-item tns-slide-active" id="video-carousel-item1">
                                        <div class="video-player-bar-series-item d-inline-block br-4 mb-0"
                                          data-episode="2" data-id="22487" data-episode-type="1"
                                          data-episode-title="You Wear More Than One Face"
                                          data-episode-released="16 января 2021" data-episode-description=""
                                          data-player-notvideo="<div class='video-player-online-not'>Нет видео.</div>"
                                          role="button">2</div>
                                      </div>
                                      <div class="tns-item tns-slide-active" id="video-carousel-item2">
                                        <div
                                          class="video-player-bar-series-item d-inline-block br-4 mb-0 video-player__active"
                                          data-episode="3" data-id="22488" data-episode-type="1"
                                          data-episode-title="That's Why It's Okay"
                                          data-episode-released="23 января 2021" data-episode-description=""
                                          data-player-notvideo="<div class='video-player-online-not'>Нет видео.</div>"
                                          role="button">3</div>
                                      </div>
                                      <div class="tns-item tns-slide-active" id="video-carousel-item3">
                                        <div class="video-player-bar-series-item d-inline-block br-4 mb-0"
                                          data-episode="4" data-id="22489" data-episode-type="1"
                                          data-episode-title="Everybody Loves Somebody"
                                          data-episode-released="30 января 2021" data-episode-description=""
                                          data-player-notvideo="<div class='video-player-online-not'>Нет видео.</div>"
                                          role="button">4</div>
                                      </div>
                                      <div class="tns-item" id="video-carousel-item4" aria-hidden="true" tabindex="-1">
                                        <div class="video-player-bar-series-item d-inline-block br-4 mb-0"
                                          data-episode="5" data-id="22640" data-episode-type="1"
                                          data-episode-title="I Can't Say It Out Loud"
                                          data-episode-released="6 февраля 2021" data-episode-description=""
                                          data-player-notvideo="<div class='video-player-online-not'>Нет видео.</div>"
                                          role="button">5</div>
                                      </div>
                                      <div class="tns-item" id="video-carousel-item5" aria-hidden="true" tabindex="-1">
                                        <div class="video-player-bar-series-item d-inline-block br-4 mb-0"
                                          data-episode="6" data-id="22641" data-episode-type="1"
                                          data-episode-title="This Summer's Going to Be a Hot One"
                                          data-episode-released="13 февраля 2021" data-episode-description=""
                                          data-player-notvideo="<div class='video-player-online-not'>Нет видео.</div>"
                                          role="button">6</div>
                                      </div>
                                      <div class="tns-item" id="video-carousel-item6" aria-hidden="true" tabindex="-1">
                                        <div class="video-player-bar-series-item d-inline-block br-4 mb-0"
                                          data-episode="7" data-id="22642" data-episode-type="1"
                                          data-episode-title="You're Here, I'm Here"
                                          data-episode-released="20 февраля 2021" data-episode-description=""
                                          data-player-notvideo="<div class='video-player-online-not'>Нет видео.</div>"
                                          role="button">7</div>
                                      </div>
                                      <div class="tns-item" id="video-carousel-item7" aria-hidden="true" tabindex="-1">
                                        <div class="video-player-bar-series-item d-inline-block br-4 mb-0"
                                          data-episode="8" data-id="22643" data-episode-type="1"
                                          data-episode-title="The Truth Deception Reveals"
                                          data-episode-released="27 февраля 2021" data-episode-description=""
                                          data-player-notvideo="<div class='video-player-online-not'>Нет видео.</div>"
                                          role="button">8</div>
                                      </div>
                                      <div class="tns-item" id="video-carousel-item8" aria-hidden="true" tabindex="-1">
                                        <div class="video-player-bar-series-item d-inline-block br-4 mb-0"
                                          data-episode="9" data-id="22644" data-episode-type="1"
                                          data-episode-title="It's Hard, but Not Impossible"
                                          data-episode-released="6 марта 2021" data-episode-description=""
                                          data-player-notvideo="<div class='video-player-online-not'>Нет видео.</div>"
                                          role="button">9</div>
                                      </div>
                                      <div class="tns-item" id="video-carousel-item9" aria-hidden="true" tabindex="-1">
                                        <div class="video-player-bar-series-item d-inline-block br-4 mb-0"
                                          data-episode="10" data-id="22645" data-episode-type="1"
                                          data-episode-title="Until the Snow Melts"
                                          data-episode-released="13 марта 2021" data-episode-description=""
                                          data-player-notvideo="<div class='video-player-online-not'>Нет видео.</div>"
                                          role="button">10</div>
                                      </div>
                                      <div class="tns-item" id="video-carousel-item10" aria-hidden="true" tabindex="-1">
                                        <div class="video-player-bar-series-item d-inline-block br-4 mb-0"
                                          data-episode="11" data-id="22646" data-episode-type="1"
                                          data-episode-title="It May Seem Like Hate"
                                          data-episode-released="20 марта 2021" data-episode-description=""
                                          data-player-notvideo="<div class='video-player-online-not'>Нет видео.</div>"
                                          role="button">11</div>
                                      </div>
                                      <div class="tns-item" id="video-carousel-item11" aria-hidden="true" tabindex="-1">
                                        <div class="video-player-bar-series-item d-inline-block br-4 mb-0"
                                          data-episode="12" data-id="22647" data-episode-type="1"
                                          data-episode-title="Hitherto, and Forevermore"
                                          data-episode-released="27 марта 2021" data-episode-description=""
                                          data-player-notvideo="<div class='video-player-online-not'>Нет видео.</div>"
                                          role="button">12</div>
                                      </div>
                                      <div class="tns-item" id="video-carousel-item12" aria-hidden="true" tabindex="-1">
                                        <div class="video-player-bar-series-item d-inline-block br-4 mb-0"
                                          data-episode="13" data-id="22648" data-episode-type="1"
                                          data-episode-title="I Would Gift You the Sky"
                                          data-episode-released="3 апреля 2021" data-episode-description=""
                                          data-player-notvideo="<div class='video-player-online-not'>Нет видео.</div>"
                                          role="button">13</div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div
                              class="video-player-bar-series-watch text-player-gray px-3 py-2 text-nowrap cursor-pointer  modal-btn modal.ajax"
                              data-toggle="tooltip" data-placement="top" data-title="Отметить эпизод как просмотренный"
                              data-ajax-url="/login" data-ajax-method="GET"><svg class="icon icon-xl icon-visibility">
                                <use xlink:href="#icon-visibility"></use>
                              </svg></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="video-player-side col-lg-4 col-ul-3 p-0" data-player-side="true">
                    <div class="px-4 py-3">
                      <ul class="nav mb-3 text-center" role="tablist">
                        <li class="nav-item col p-0"><span class="nav-link active cursor-pointer" id="video-dubbing-tab"
                            data-toggle="tab" data-target="#video-dubbing" role="tab" aria-controls="video-dubbing"
                            aria-expanded="true">
                            Озвучка
                          </span></li>
                        <li class="nav-item col p-0"><span class="nav-link cursor-pointer" id="video-players-tab"
                            data-toggle="tab" data-target="#video-players" role="tab" aria-controls="video-players"
                            aria-expanded="false">Плеер</span></li>
                      </ul>
                      <div class="tab-content">
                        <div class="tab-pane video-player-toggle active" id="video-dubbing" role="tabpanel"
                          aria-labelledby="video-dubbing-tab"><span
                            class="video-player-toggle-item d-inline-block text-truncate mb-1 br-3 cursor-pointer video-player__active"
                            data-dubbing="2"><span class="video-player-toggle-item-name text-underline-hover">
                              AniLibria
                            </span></span>
                          <div></div><span
                            class="video-player-toggle-item d-inline-block text-truncate mb-1 br-3 cursor-pointer"
                            data-dubbing="6"><span class="video-player-toggle-item-name text-underline-hover">
                              Студийная Банда
                            </span></span>
                          <div></div><span
                            class="video-player-toggle-item d-inline-block text-truncate mb-1 br-3 cursor-pointer"
                            data-dubbing="1"><span class="video-player-toggle-item-name text-underline-hover">
                              AniDUB
                            </span></span>
                          <div></div><span
                            class="video-player-toggle-item d-inline-block text-truncate mb-1 br-3 cursor-pointer"
                            data-dubbing="7"><span class="video-player-toggle-item-name text-underline-hover">
                              AniMedia
                            </span></span>
                          <div></div><span
                            class="video-player-toggle-item d-inline-block text-truncate mb-1 br-3 cursor-pointer"
                            data-dubbing="35"><span class="video-player-toggle-item-name text-underline-hover">
                              AniRise
                            </span></span>
                          <div></div><span
                            class="video-player-toggle-item d-inline-block text-truncate mb-1 br-3 cursor-pointer"
                            data-dubbing="3"><span class="video-player-toggle-item-name text-underline-hover">
                              AniFilm
                            </span></span>
                          <div></div>
                        </div>
                        <div class="tab-pane video-player-toggle scroll" id="video-players" role="tabpanel"
                          aria-labelledby="video-players-tab"><span
                            class="video-player-toggle-item text-truncate mb-1 br-3 video-player__active"
                            data-player="//aniboom.one/embed/x6ldxN1MJno?episode=3&amp;translation=2" data-provider="24"
                            data-provide-dubbing="2"><span class="video-player-toggle-item-name text-underline-hover"
                              role="button">AniBoom</span></span>
                          <div></div><span class="video-player-toggle-item text-truncate mb-1 br-3"
                            data-player="//kodik.info/seria/775043/6c17ca64b5477c29ff15a67eec908ff6/720p?translations=false&amp;min_age=18"
                            data-provider="19" data-provide-dubbing="2"><span
                              class="video-player-toggle-item-name text-underline-hover"
                              role="button">Kodik</span></span>
                          <div></div><span class="video-player-toggle-item text-truncate mb-1 br-3 d-none"
                            data-player="//aniboom.one/embed/x6ldxN1MJno?episode=3&amp;translation=1" data-provider="24"
                            data-provide-dubbing="6"><span class="video-player-toggle-item-name text-underline-hover"
                              role="button">AniBoom</span></span>
                          <div></div><span class="video-player-toggle-item text-truncate mb-1 br-3 d-none"
                            data-player="//kodik.info/seria/774538/00c2943e6ecb23f4a9fe424fb1cd1c92/720p?translations=false&amp;min_age=18"
                            data-provider="19" data-provide-dubbing="6"><span
                              class="video-player-toggle-item-name text-underline-hover"
                              role="button">Kodik</span></span>
                          <div></div><span class="video-player-toggle-item text-truncate mb-1 br-3 d-none"
                            data-player="//kodik.info/seria/775044/65195355c68e9530864db9bb626b3bea/720p?translations=false&amp;min_age=18"
                            data-provider="19" data-provide-dubbing="1"><span
                              class="video-player-toggle-item-name text-underline-hover"
                              role="button">Kodik</span></span>
                          <div></div><span class="video-player-toggle-item text-truncate mb-1 br-3 d-none"
                            data-player="//kodik.info/seria/774733/0b629d691f82d236a6c5e430f33c0fbf/720p?translations=false&amp;min_age=18"
                            data-provider="19" data-provide-dubbing="7"><span
                              class="video-player-toggle-item-name text-underline-hover"
                              role="button">Kodik</span></span>
                          <div></div><span class="video-player-toggle-item text-truncate mb-1 br-3 d-none"
                            data-player="//kodik.info/seria/776330/b7836a00259db57efc2d273cfcd54a63/720p?translations=false&amp;min_age=18"
                            data-provider="19" data-provide-dubbing="35"><span
                              class="video-player-toggle-item-name text-underline-hover"
                              role="button">Kodik</span></span>
                          <div></div><span class="video-player-toggle-item text-truncate mb-1 br-3 d-none"
                            data-player="//kodik.info/seria/777502/2d968ce8838cd369fe0f36d006d59309/720p?translations=false&amp;min_age=18"
                            data-provider="19" data-provide-dubbing="3"><span
                              class="video-player-toggle-item-name text-underline-hover"
                              role="button">Kodik</span></span>
                          <div></div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="row">
                  <div class="episode-info mt-4 col-12 col-lg-9">
                    <div class="episode-info-item mb-2 d-none"><span class="text-player-gray mr-1">Тип:</span><span
                        data-episode-replace-type="">Филлер <a class="b-tooltipped text-player-gray small"
                          data-toggle="tooltip" data-placement="top"
                          data-title="Филлер — дополнительный материал, не связанный с основным сюжетом, добавляемый для увеличения длительности показа. Часто применяются в длительных аниме-сериалах."
                          href="javascript:void(0)">(что это?)</a></span></div>
                    <div class="episode-info-item"><span class="text-player-gray mr-1">Название:</span><span
                        data-episode-replace-title="">That's Why It's Okay</span></div>
                    <div class="episode-info-item mt-2"><span class="text-player-gray mr-1">Дата выхода:</span><span
                        data-episode-replace-released="">23 января 2021</span></div>
                    <div class="episode-info-item mt-2 d-none"><span data-episode-replace-description=""></span></div>
                  </div>
                </div>
              </div>
              <div class="text-player-gray py-2 mt-3 align-items-center social d-none d-sm-flex">
                <div class="mr-3" data-label="Поделиться:"><span>Поделиться с друзьями:</span></div>
                <div class="social-likes social-likes_visible">
                  <div data-service="vkontakte" class="social-likes__widget social-likes__widget_vkontakte"
                    title="Поделиться ссылкой в Вконтакте" tabindex="0" role="button">
                    <svg class="social-likes__icon social-likes__icon_vkontakte" xmlns="http://www.w3.org/2000/svg"
                      width="16" height="16" viewBox="0 0 16 16">
                      <path
                        d="M13 0H3C1 0 0 1 0 3v10c0 2 1 3 3 3h10c2 0 3-1 3-3V3c0-2-1-3-3-3zm.452 11.394l-1.603.022s-.345.068-.8-.243c-.598-.41-1.164-1.48-1.604-1.342-.446.144-.432 1.106-.432 1.106s.003.206-.1.315c-.11.12-.326.144-.326.144H7.87s-1.582.095-2.975-1.356c-1.52-1.583-2.862-4.723-2.862-4.723s-.078-.206.006-.305c.094-.112.35-.12.35-.12l1.716-.01s.162.026.277.11c.095.07.15.202.15.202s.276.7.643 1.335c.716 1.238 1.05 1.508 1.293 1.376.353-.193.247-1.75.247-1.75s.006-.565-.178-.817c-.145-.194-.415-.25-.534-.267-.096-.014.062-.238.267-.338.31-.15.853-.16 1.497-.153.502.004.646.035.842.083.59.143.39.694.39 2.016 0 .422-.075 1.018.23 1.215.13.085.453.013 1.256-1.352.38-.647.666-1.407.666-1.407s.062-.136.16-.194c.098-.06.232-.04.232-.04l1.804-.012s.542-.065.63.18c.092.257-.203.857-.94 1.84-1.21 1.612-1.345 1.46-.34 2.394.96.89 1.16 1.325 1.192 1.38.4.66-.44.71-.44.71z">
                      </path>
                    </svg>

                    <div class="social-likes__button social-likes__button_vkontakte">
                      Вконтакте
                    </div>
                  </div>
                  <div data-service="facebook" class="social-likes__widget social-likes__widget_facebook"
                    title="Поделиться ссылкой в Facebook" tabindex="0" role="button">
                    <svg class="social-likes__icon social-likes__icon_facebook" xmlns="http://www.w3.org/2000/svg"
                      width="16" height="16" viewBox="0 0 16 16">
                      <path
                        d="M13 0H3C1 0 0 1 0 3v10c0 2 1 3 3 3h5V9H6V7h2V5c0-2 2-2 2-2h3v2h-3v2h3l-.5 2H10v7h3c2 0 3-1 3-3V3c0-2-1-3-3-3z">
                      </path>
                    </svg>

                    <div class="social-likes__button social-likes__button_facebook">
                      Facebook
                    </div>
                  </div>
                  <div data-service="telegram" class="social-likes__widget social-likes__widget_telegram"
                    title="Поделиться ссылкой в Telegram" tabindex="0" role="button">
                    <svg class="social-likes__icon social-likes__icon_telegram" xmlns="http://www.w3.org/2000/svg"
                      width="16" height="16" viewBox="0 0 16 16">
                      <path
                        d="M6,11L5,8l11-8L0.622,5.914c0,0-0.672,0.23-0.619,0.655c0.053,0.425,0.602,0.619,0.602,0.619l3.575,1.203L5.8,13.545l2.742-2.411l-0.007-0.005l3.607,2.766c0.973,0.425,1.327-0.46,1.327-0.46L16,0L6,11z">
                      </path>
                    </svg>

                    <div class="social-likes__button social-likes__button_telegram">
                      Telegram
                    </div>
                  </div>
                </div>
              </div>
              <style>
                #video-watch {
                  position: relative;
                  background: rgba(0, 0, 0, 0.84);
                }

                #video-watch:before,
                #video-watch:after {
                  content: '';
                  position: absolute;
                  background: rgba(0, 0, 0, 0.84);
                  width: 100%;
                  height: 100%;
                  top: 0;
                }

                #video-watch:before {
                  left: -100%;
                }

                #video-watch:after {
                  left: 100%;
                }
              </style>
            </div>
            <div class="content p-3"><!--noindex-->
              <div class="mb-2"><!-- Yandex.RTB R-A-752036-6 -->
                <div id="yandex_rtb_R-A-752036-6"></div>
                <script>window.yaContextCb.push(() => {
                    Ya.Context.AdvManager.render({
                      renderTo: 'yandex_rtb_R-A-752036-6',
                      blockId: 'R-A-752036-6'
                    })
                  })</script>
              </div><!--/noindex-->
              <div class="released-episodes read-more-theme-cursor-one">
                <h3 class="released-episodes-header">График выхода серий</h3><!--noindex-->
                <div class="text-muted small mb-3"><b>Внимание!</b> В графике указаны даты выхода эпизодов на
                  телеэкранах Японии. Эпизоды у нас на сайте появляются в течение дня либо на следующий день, потому что
                  для фандаб групп требуется время на их перевод и озвучивание.
                </div><!--/noindex-->
                <div class="bg-dark text-white py-2">
                  <div class="row m-0">
                    <div class="col-3 col-sm-2 col-md" data-label="#"><span>Номер серии</span></div>
                    <div class="col-5 col-sm-5 col-md-5 col-lg-5 d-none d-sm-block">Название</div>
                    <div class="col-6 col-sm-3 col-md-3 col-lg-3 text-right">Дата выхода</div>
                    <div class="col-3 col-sm-2 col-md-2 col-lg-2 text-center"><span
                        class="d-none d-sm-inline">Статус</span></div>
                  </div>
                </div>
                <div class="read-more-container scroll">
                  <div class="row released-episodes-container">
                    <div class="col-12 released-episodes-item">
                      <div class="released-episodes-item list-group-item-action py-2">
                        <div class="row m-0">
                          <div class="col-3 col-sm-2 col-md text-truncate" data-label="13."><span>13 серия</span>
                            <meta content="13">
                          </div>
                          <div
                            class="col-5 col-sm-5 col-md-5 col-lg-5 text-truncate font-weight-bold d-none d-sm-block">
                            I Would Gift You the Sky
                          </div>
                          <div class="col-6 col-sm-3 col-md-3 col-lg-3 text-right text-truncate" content="2021-04-03">
                            <span data-label="3 апр. 2021"><span>3 апреля 2021</span></span></div>
                          <div class="col-3 col-sm-2 col-md-2 col-lg-2 text-center"><span
                              class="cursor-pointer released-episodes-watch" data-watched-id="22648" data-loader="true"
                              data-loader-idloader="ispinner" data-loader-classname="ispinner-xs"
                              data-loader-style="{&quot;position&quot;:&quot;absolute;&quot;,&quot;top&quot;:&quot;50%&quot;,&quot;left&quot;:&quot;50%&quot;,&quot;transform&quot;:&quot;translate(-50%, -50%)&quot;,&quot;z-index&quot;:&quot;110&quot;}"
                              data-toggle="tooltip" data-placement="top"
                              data-original-title="Отметить эпизод как просмотренный"
                              data-watch-text="Отметить эпизод как просмотренный"
                              data-watched-text="Удалить эпизод из просмотренных" data-ajax-request="true"
                              data-ajax-appear-params="{&quot;type&quot;:&quot;episodeSchedule&quot;}"
                              data-ajax-url="/anime/episode/22648/watched" data-ajax-method="POST"><svg
                                class="icon icon-xl icon-done text-success">
                                <use xlink:href="#icon-done"></use>
                              </svg></span></div>
                        </div>
                      </div>
                    </div>
                    <div class="col-12 released-episodes-item">
                      <div class="released-episodes-item list-group-item-action py-2 bo-t-2">
                        <div class="row m-0">
                          <div class="col-3 col-sm-2 col-md text-truncate" data-label="12."><span>12 серия</span>
                            <meta content="12">
                          </div>
                          <div
                            class="col-5 col-sm-5 col-md-5 col-lg-5 text-truncate font-weight-bold d-none d-sm-block">
                            Hitherto, and Forevermore
                          </div>
                          <div class="col-6 col-sm-3 col-md-3 col-lg-3 text-right text-truncate" content="2021-03-27">
                            <span data-label="27 мар. 2021"><span>27 марта 2021</span></span></div>
                          <div class="col-3 col-sm-2 col-md-2 col-lg-2 text-center"><span
                              class="cursor-pointer released-episodes-watch" data-watched-id="22647" data-loader="true"
                              data-loader-idloader="ispinner" data-loader-classname="ispinner-xs"
                              data-loader-style="{&quot;position&quot;:&quot;absolute;&quot;,&quot;top&quot;:&quot;50%&quot;,&quot;left&quot;:&quot;50%&quot;,&quot;transform&quot;:&quot;translate(-50%, -50%)&quot;,&quot;z-index&quot;:&quot;110&quot;}"
                              data-toggle="tooltip" data-placement="top"
                              data-original-title="Отметить эпизод как просмотренный"
                              data-watch-text="Отметить эпизод как просмотренный"
                              data-watched-text="Удалить эпизод из просмотренных" data-ajax-request="true"
                              data-ajax-appear-params="{&quot;type&quot;:&quot;episodeSchedule&quot;}"
                              data-ajax-url="/anime/episode/22647/watched" data-ajax-method="POST"><svg
                                class="icon icon-xl icon-done text-success">
                                <use xlink:href="#icon-done"></use>
                              </svg></span></div>
                        </div>
                      </div>
                    </div>
                    <div class="col-12 released-episodes-item">
                      <div class="released-episodes-item list-group-item-action py-2 bo-t-2">
                        <div class="row m-0">
                          <div class="col-3 col-sm-2 col-md text-truncate" data-label="11."><span>11 серия</span>
                            <meta content="11">
                          </div>
                          <div
                            class="col-5 col-sm-5 col-md-5 col-lg-5 text-truncate font-weight-bold d-none d-sm-block">
                            It May Seem Like Hate
                          </div>
                          <div class="col-6 col-sm-3 col-md-3 col-lg-3 text-right text-truncate" content="2021-03-20">
                            <span data-label="20 мар. 2021"><span>20 марта 2021</span></span></div>
                          <div class="col-3 col-sm-2 col-md-2 col-lg-2 text-center"><span
                              class="cursor-pointer released-episodes-watch" data-watched-id="22646" data-loader="true"
                              data-loader-idloader="ispinner" data-loader-classname="ispinner-xs"
                              data-loader-style="{&quot;position&quot;:&quot;absolute;&quot;,&quot;top&quot;:&quot;50%&quot;,&quot;left&quot;:&quot;50%&quot;,&quot;transform&quot;:&quot;translate(-50%, -50%)&quot;,&quot;z-index&quot;:&quot;110&quot;}"
                              data-toggle="tooltip" data-placement="top"
                              data-original-title="Отметить эпизод как просмотренный"
                              data-watch-text="Отметить эпизод как просмотренный"
                              data-watched-text="Удалить эпизод из просмотренных" data-ajax-request="true"
                              data-ajax-appear-params="{&quot;type&quot;:&quot;episodeSchedule&quot;}"
                              data-ajax-url="/anime/episode/22646/watched" data-ajax-method="POST"><svg
                                class="icon icon-xl icon-done text-success">
                                <use xlink:href="#icon-done"></use>
                              </svg></span></div>
                        </div>
                      </div>
                    </div>
                    <div class="col-12">
                      <div class="row collapse" id="released-episodes-container"></div>
                    </div>
                  </div>
                </div>
                <div class="read-more"><a href="#" class="read-more-link" role="button" id="released-episodes-more"
                    data-loader=".released-episodes-container" data-ajax-request="true"
                    data-ajax-container="#released-episodes-container"
                    data-ajax-appear-params="{&quot;type&quot;:&quot;episodeSchedule&quot;,&quot;episodeNumber&quot;:11,&quot;releasedAt&quot;:&quot;1616254200&quot;}"
                    data-ajax-url="/anime/horimiya-1686"><span class="read-more-text">Показать ещё</span><svg
                      class="icon icon-arrow-down">
                      <use xlink:href="#icon-arrow-down"></use>
                    </svg></a></div>
              </div>
            </div>
            <div class="content p-3">
              <div class="reviews-list">
                <div class="review" id="review">
                  <div class="mb-3">
                    <div class="float-right ml-sm-3"><span class="btn btn-review cursor-pointer modal-btn modal.ajax"
                        data-ajax-url="/login" data-ajax-method="GET"><svg class="icon icon-create">
                          <use xlink:href="#icon-create"></use>
                        </svg> Написать отзыв
                      </span></div>
                    <div class="text-truncate">
                      <div class="h4 d-inline-block mr-1">
                        Рецензии и отзывы к аниме
                      </div><span class="text-muted small align-top">1</span>
                    </div>
                  </div>
                  <div class="review-item" id="review-3813">
                    <div class="review-item-author media">
                      <div class="media-left mr-3">
                        <div class="review-item-avatar"><a class="d-block" data-popover="true"
                            data-ajax-url="/user/stressed.depressed" data-html="true" data-toggle="popover-content"
                            data-placement="right" data-content=" " href="/user/stressed.depressed"
                            title="stressed.depressed"><img class="img-thumbnail p-0 rounded-circle"
                              src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/63d076358cec3597881714.jpeg"
                              srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/63d076358cec3597881714.jpeg 2x"
                              alt="stressed.depressed"></a></div>
                      </div>
                      <div class="media-body">
                        <div class="review-item-name h6 mb-2">
                          Романтика, которую действительно приятно смотреть
                        </div>
                        <div class="itemRatingBlock review-rating">
                          <div class="itemRatingForm justify-content-center">
                            <div class="itemRatingList d-flex align-items-center">
                              <div class="rate_star d-flex align-items-center"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></div>
                              <div class="rate_star d-flex align-items-center"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></div>
                              <div class="rate_star d-flex align-items-center"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></div>
                              <div class="rate_star d-flex align-items-center"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></div>
                              <div class="rate_star d-flex align-items-center"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></div>
                              <div class="rate_star d-flex align-items-center"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></div>
                              <div class="rate_star d-flex align-items-center"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></div>
                              <div class="rate_star d-flex align-items-center"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></div>
                              <div class="rate_star d-flex align-items-center"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></div>
                              <div class="rate_star d-flex align-items-center star_current"><svg class="icon icon-star">
                                  <use xlink:href="#icon-star"></use>
                                </svg></div>
                            </div>
                          </div>
                        </div>
                        <div class="review-item-name"><a href="/user/stressed.depressed">stressed.depressed</a></div>
                        <div class="review-item-date small text-gray-dark-6 mb-2">
                          29 января 2023
                        </div>
                      </div>
                    </div>
                    <hr>
                    <div class="review-item-text read-more-container" data-readmore="container"
                      data-readmore-btn-show="<span class=&quot;read-more-text&quot;>Читать дальше</span><svg class=&quot;icon icon-arrow-down&quot;><use xlink:href=&quot;#icon-arrow-down&quot;></use></svg>"
                      data-readmore-btn-hide="<span class=&quot;read-more-text&quot;>Свернуть</span><svg class=&quot;icon icon-arrow-up&quot;><use xlink:href=&quot;#icon-arrow-up&quot;></use></svg>"
                      data-read-more-init="true">
                      <div data-readmore="content"><strong>Первая романтика, которая пробудила мои <em>чувства</em>, а
                          не просто эмоции. Заставившая думать, а не просто смотреть.</strong><br><br><strong>Я
                          настоятельно рекомендую посмотреть это аниме - ведь это были 13 серий, о просмотре которых
                          невозможно пожалеть.</strong><br><br>Сюжет Хоримии достаточно прост - отношения главных героев
                        начались благодаря чистой случайности - и, я считаю, это просто прекрасно, ведь именно так
                        начинаются хорошие отношения.<br>Развитие любовной линии идет плавно, из-за чего аниме смотрится
                        на одном дыхании и не возникает желания сесть и отдохнуть (как бывает, если сюжет движется
                        слишком быстро или наоборот, медленно), да и история "ХориМии" выглядит именно как история, а не
                        сюжет из манги.<br>Главные герои - простые люди, из-за чего при просмотре тебе легче
                        ассоциировать себя с ними, из-за чего вовлекаешься в историю гораздо проще и быстрее. Да и, в
                        общем-то, все герои здесь такие и за ними приятно наблюдать.<br>Второстепенные персонажи
                        появляются постепенно, демонстрируя нам новые сюжетные линии, связанные с ними - причем эти
                        линии достаточно быстро закрываются, из-за чего параллельно происходит не слишком много событий
                        (что могло бы привести к перегруженности сюжета, чего, к счастью, не произошло).<br><br>Главным
                        преимуществом этого произведения я считаю посыл/комментарий, заложенный в основе, а какой именно
                        - решать уже не мне, а каждому лично, ведь то, над чем заставило меня задуматься данное аниме
                        может отличаться от того, к каким размышлениям придёте вы. <br><br>В конце концов, завершив
                        просмотр этого аниме, я решил сразу написать обзор, пока чувства еще сильны. Смотря на главного
                        героя, невзрачного, никому не интересного, я вспоминаю себя. Вспоминаю свою первую настоящую
                        любовь и отношения, вспоминаю, как жизнь начала налаживаться, как я начал становиться лучшим
                        человеком, чем я был раньше. Вспоминаю, как смотрел в будущее с надеждой и радостью. И
                        вспоминаю, как всё это я начал терять. Именно в такие моменты я понимаю, что разучился плакать.
                        По этому, я хочу сказать вам, парни и девушки, особенно если вы все еще школьники - научитесь
                        ценить то, что у вас есть, и постарайтесь это не потерять. Не подведите меня! <img
                          src="/animego/emoticons/anime/-D.gif" alt=":D:" title=":D:"><img
                          src="/animego/emoticons/anime/--D.gif" alt=":-D:" title=":-D:"></div>
                    </div>
                    <div class="read-more"><a href="#" class="read-more-link" role="button"><span
                          class="read-more-text">Читать дальше</span><svg class="icon icon-arrow-down">
                          <use xlink:href="#icon-arrow-down"></use>
                        </svg></a></div>
                    <hr>
                    <div class="review-item-like d-flex align-items-center">
                      <div class="mr-2">
                        Понравился отзыв?
                      </div>
                      <div class="d-flex mr-2" id="review-vote-3813"><span
                          class="review-rating-average-value font-weight-bold mr-2">55</span><span
                          class="btn-o-4 mr-2 review-like cursor-pointer modal-btn modal.ajax" data-ajax-url="/login"
                          data-ajax-method="GET" data-toggle="tooltip" data-placement="top" title="Нравится"><svg
                            class="icon icon-thumb-up">
                            <use xlink:href="#icon-thumb-up"></use>
                          </svg></span><span class="btn-o-4 review-dislike cursor-pointer modal-btn modal.ajax"
                          role="button" data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                          data-placement="top" title="Не нравится"><svg class="icon icon-thumb-down">
                            <use xlink:href="#icon-thumb-down"></use>
                          </svg></span></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div class="content mb-3 p-3">
              <div id="begin-comments" data-thread-init="2900" data-ajax-request-begin="true"
                data-ajax-request-begin-scroll="true" data-ajax-container="true" data-ajax-scroll-top="200"
                data-ajax-url="/comment/2900/1/show" data-loader="true" class="">
                <div class="mb-3" id="comments-thread-title-2900">

                  <h3 class="d-inline-block mr-1">Комментарии</h3>
                </div>

                <div class="comments" id="comments-2900" data-title="#comments-thread-title-2900">
                  <div class="comments-list" id="comments-list-2900">






                    <div class="comment w-100 depth-1" id="comment-2246455" data-id="2246455">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true"
                              data-ajax-url="/user/%D1%81%D0%B8%D1%8D%D0%BB%D1%8C." data-html="true"
                              data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/%D1%81%D0%B8%D1%8D%D0%BB%D1%8C." title="сиэль."><img
                                class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/653289fcb316a200984552.jpeg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/653289fcb316a200984552.jpeg 2x"
                                alt="сиэль."></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a
                                  href="/user/%D1%81%D0%B8%D1%8D%D0%BB%D1%8C." title="сиэль.">
                                  сиэль.
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-23T02:34:39+03:00" title="23 октября 2023 02:34:39">15 часов
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2246455">
                              как по мне это было скучно,смотрела летом 2022,решила пересмотреть но все так же<img
                                src="/animego/emoticons/anime/-bdl-.gif" alt=":bdl:" title=":bdl:"></div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2246455"><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2246397" data-id="2246397">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/vana1ex"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/vana1ex" title="vana1ex"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/653382b453f2f362676004.jpg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/653382b453f2f362676004.jpg 2x"
                                alt="vana1ex"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/vana1ex"
                                  title="vana1ex">
                                  vana1ex
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-23T02:01:54+03:00" title="23 октября 2023 02:01:54">16 часов
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2246397">
                              Блин .Сюжет можно развивать .Но вряд ли будут </div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2246397"><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2243755" data-id="2243755">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/adamilevskay"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/adamilevskay" title="adamilevskay"><img
                                class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/65364596af157699174914.jpeg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/65364596af157699174914.jpeg 2x"
                                alt="adamilevskay"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/adamilevskay"
                                  title="adamilevskay">
                                  adamilevskay
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-21T01:31:13+03:00" title="21 октября 2023 01:31:13">3 дня
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2243755">
                              Одно аниме из романтики, которое действительно прекрасно. Без розовых соплей, более видно
                              реалистичность. А Хори и Изуми прекрасная пара, особенно с замашками на садомию, ахаха.
                            </div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2243755"><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2243229" data-id="2243229">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true"
                              data-ajax-url="/user/stalkerdrifting" data-html="true" data-toggle="popover-content"
                              data-placement="right" data-content=" " href="/user/stalkerdrifting"
                              title="stalkerdrifting"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/63b4c4d7b6102263128070.jpg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/63b4c4d7b6102263128070.jpg 2x"
                                alt="stalkerdrifting"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/stalkerdrifting"
                                  title="stalkerdrifting">
                                  stalkerdrifting
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-20T20:58:46+03:00" title="20 октября 2023 20:58:46">3 дня
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2243229">
                              Я плачу... Я впервые за 3 года плачу </div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2243229"><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2241523" data-id="2241523">


                      <div class="media d-block d-md-flex comment-body mb-1">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/id770026130"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/id770026130" title="id770026130"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/652f97bce702c381566242.png"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/652f97bce702c381566242.png 2x"
                                alt="id770026130"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/id770026130"
                                  title="id770026130">
                                  id770026130
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-20T10:30:06+03:00" title="20 октября 2023 10:30:6">3 дня
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2241523">
                              Будет круто если выйдет продолжение но этого скорее всего не будет </div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2241523"><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>
                      <div class="children">
                        <div class="mb-3">
                          <span class="comment-all btn-disabled mb-3" role="button" data-ajax-request="true"
                            data-ajax-container="#comment-sub-2241523" data-ajax-url="/comment/2241523/all">
                            <span class="comment-all-link btn-link" data-hide="Скрыть ответы"
                              data-show="Показать все ответы (3)">Показать все ответы (3)</span>
                            <svg class="icon icon-arrow-down mb-0">
                              <use href="#icon-arrow-down" xlink:href="#icon-arrow-down"></use>
                            </svg>
                          </span>
                        </div>
                        <div id="comment-sub-2241523"></div>






                        <div class="comment w-100 depth-2" id="comment-2243546" data-id="2243546">


                          <div class="media d-block d-md-flex comment-body mb-4">
                            <div class="comment-avatar mr-3 float-left float-md-none">
                              <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/nika13q"
                                  data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                                  href="/user/nika13q" title="nika13q"><img class="img-thumbnail p-0 rounded-circle"
                                    src="https://animego.org/media/cache/thumbs_50x50/upload/avatar/64ce02916f659303054269.jpg"
                                    srcset="https://animego.org/media/cache/thumbs_100x100/upload/avatar/64ce02916f659303054269.jpg 2x"
                                    alt="nika13q"></a></figure>
                            </div>
                            <div class="media-body">
                              <div class="comment-author mb-1">
                                <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/nika13q"
                                      title="nika13q">
                                      nika13q
                                    </a></span></div><span class="text-gray-dark-4 mx-2"><svg
                                    class="icon icon-reply mirror-x">
                                    <use xlink:href="#icon-reply"></use>
                                  </svg></span><a class="text-muted small" data-popover="true"
                                  data-ajax-url="/comment/2241523" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/id770026130">
                                  id770026130
                                </a><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                                  aria-hidden="true">•</span><small
                                  class="time text-gray-dark-4 d-block d-md-inline"><time
                                    datetime="2023-10-20T23:24:10+03:00" title="20 октября 2023 23:24:10">3 дня
                                    назад</time></small>
                              </div>
                              <div class="comment-text read-more-open" data-readmore="container"
                                data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                                <div data-readmore="content" id="comment-text-2243546">
                                  а 2сезон как бы есть </div>
                              </div>
                              <div class="comment-actions mt-2"><span
                                  class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                                  data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                                  class="d-inline-flex mr-3" id="comment-vote-2243546"><span
                                    class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Нравится"><svg class="icon icon-thumb-up">
                                      <use xlink:href="#icon-thumb-up"></use>
                                    </svg></span><span
                                    class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Не нравится"><svg class="icon icon-thumb-down">
                                      <use xlink:href="#icon-thumb-down"></use>
                                    </svg></span></span></div>
                            </div>
                          </div>

                        </div>


                        <div class="comment w-100 depth-2" id="comment-2243659" data-id="2243659">


                          <div class="media d-block d-md-flex comment-body mb-4">
                            <div class="comment-avatar mr-3 float-left float-md-none">
                              <figure class="mb-0"><a class="d-block" data-popover="true"
                                  data-ajax-url="/user/id770026130" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/id770026130"
                                  title="id770026130"><img class="img-thumbnail p-0 rounded-circle"
                                    src="https://animego.org/media/cache/thumbs_50x50/upload/avatar/652f97bce702c381566242.png"
                                    srcset="https://animego.org/media/cache/thumbs_100x100/upload/avatar/652f97bce702c381566242.png 2x"
                                    alt="id770026130"></a></figure>
                            </div>
                            <div class="media-body">
                              <div class="comment-author mb-1">
                                <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/id770026130"
                                      title="id770026130">
                                      id770026130
                                    </a></span></div><span class="text-gray-dark-4 mx-2"><svg
                                    class="icon icon-reply mirror-x">
                                    <use xlink:href="#icon-reply"></use>
                                  </svg></span><a class="text-muted small" data-popover="true"
                                  data-ajax-url="/comment/2243546" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/nika13q">
                                  nika13q
                                </a><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                                  aria-hidden="true">•</span><small
                                  class="time text-gray-dark-4 d-block d-md-inline"><time
                                    datetime="2023-10-21T02:24:28+03:00" title="21 октября 2023 02:24:28">3 дня
                                    назад</time></small>
                              </div>
                              <div class="comment-text read-more-open" data-readmore="container"
                                data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                                <div data-readmore="content" id="comment-text-2243659">
                                  Это не совсем второй сезон это фрагменты которые не попали в первый сезон </div>
                              </div>
                              <div class="comment-actions mt-2"><span
                                  class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                                  data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                                  class="d-inline-flex mr-3" id="comment-vote-2243659"><span
                                    class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Нравится"><svg class="icon icon-thumb-up">
                                      <use xlink:href="#icon-thumb-up"></use>
                                    </svg></span><span
                                    class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Не нравится"><svg class="icon icon-thumb-down">
                                      <use xlink:href="#icon-thumb-down"></use>
                                    </svg></span></span></div>
                            </div>
                          </div>

                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2241050" data-id="2241050">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/heverley"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/heverley" title="heverley"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/64d3e803b7481486840618.jpeg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/64d3e803b7481486840618.jpeg 2x"
                                alt="heverley"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/heverley"
                                  title="heverley">
                                  heverley
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-19T19:21:55+03:00" title="19 октября 2023 19:21:55">4 дня
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2241050">
                              отличное аниме которое спасает от осенней хондры) </div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2241050"><span
                                class="mr-3 text-success">5</span><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>
                      <div class="children">






                        <div class="comment w-100 depth-2" id="comment-2247515" data-id="2247515">


                          <div class="media d-block d-md-flex comment-body mb-4">
                            <div class="comment-avatar mr-3 float-left float-md-none">
                              <figure class="mb-0"><a class="d-block" data-popover="true"
                                  data-ajax-url="/user/id732876215" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/id732876215"
                                  title="id732876215"><img class="img-thumbnail p-0 rounded-circle"
                                    src="https://animego.org/media/cache/thumbs_50x50/upload/avatar/64d16e0ae9405048902497.jpg"
                                    srcset="https://animego.org/media/cache/thumbs_100x100/upload/avatar/64d16e0ae9405048902497.jpg 2x"
                                    alt="id732876215"></a></figure>
                            </div>
                            <div class="media-body">
                              <div class="comment-author mb-1">
                                <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/id732876215"
                                      title="id732876215">
                                      id732876215
                                    </a></span></div><span class="text-gray-dark-4 mx-2"><svg
                                    class="icon icon-reply mirror-x">
                                    <use xlink:href="#icon-reply"></use>
                                  </svg></span><a class="text-muted small" data-popover="true"
                                  data-ajax-url="/comment/2241050" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/heverley">
                                  heverley
                                </a><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                                  aria-hidden="true">•</span><small
                                  class="time text-gray-dark-4 d-block d-md-inline"><time
                                    datetime="2023-10-22T23:36:28+03:00" title="22 октября 2023 23:36:28">18 часов
                                    назад</time></small>
                              </div>
                              <div class="comment-text read-more-open" data-readmore="container"
                                data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                                <div data-readmore="content" id="comment-text-2247515">
                                  согласна </div>
                              </div>
                              <div class="comment-actions mt-2"><span
                                  class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                                  data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                                  class="d-inline-flex mr-3" id="comment-vote-2247515"><span
                                    class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="" data-original-title="Нравится"><svg
                                      class="icon icon-thumb-up">
                                      <use xlink:href="#icon-thumb-up"></use>
                                    </svg></span><span
                                    class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Не нравится"><svg class="icon icon-thumb-down">
                                      <use xlink:href="#icon-thumb-down"></use>
                                    </svg></span></span></div>
                            </div>
                          </div>

                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2238278" data-id="2238278">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/deerzzen"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/deerzzen" title="deerzzen"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/6514c802091a0076353871.jpeg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/6514c802091a0076353871.jpeg 2x"
                                alt="deerzzen"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/deerzzen"
                                  title="deerzzen">
                                  deerzzen
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-18T00:21:25+03:00" title="18 октября 2023 00:21:25">6 дней
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2238278">
                              посмотрел пока половину, но я уже понимаю, почему высокая оценка))) </div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2238278"><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2237602" data-id="2237602">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/id763860304"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/id763860304" title="id763860304"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/637bd7f22f347459131506.jpeg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/637bd7f22f347459131506.jpeg 2x"
                                alt="id763860304"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/id763860304"
                                  title="id763860304">
                                  id763860304
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-17T18:08:22+03:00" title="17 октября 2023 18:08:22">6 дней
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2237602">
                              Ну я наконец глянул это аниме, оно прекрасно! Кто знает будет прода? </div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2237602"><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>
                      <div class="children">






                        <div class="comment w-100 depth-2" id="comment-2238083" data-id="2238083">


                          <div class="media d-block d-md-flex comment-body mb-4">
                            <div class="comment-avatar mr-3 float-left float-md-none">
                              <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/yv"
                                  data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                                  href="/user/yv" title="yv"><img class="img-thumbnail p-0 rounded-circle"
                                    src="https://animego.org/media/cache/thumbs_50x50/upload/avatar/61141e5eef354805315138.jpg"
                                    srcset="https://animego.org/media/cache/thumbs_100x100/upload/avatar/61141e5eef354805315138.jpg 2x"
                                    alt="yv"></a></figure>
                            </div>
                            <div class="media-body">
                              <div class="comment-author mb-1">
                                <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/yv"
                                      title="yv">
                                      yv
                                    </a></span></div><span class="text-gray-dark-4 mx-2"><svg
                                    class="icon icon-reply mirror-x">
                                    <use xlink:href="#icon-reply"></use>
                                  </svg></span><a class="text-muted small" data-popover="true"
                                  data-ajax-url="/comment/2237602" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/id763860304">
                                  id763860304
                                </a><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                                  aria-hidden="true">•</span><small
                                  class="time text-gray-dark-4 d-block d-md-inline"><time
                                    datetime="2023-10-17T22:20:50+03:00" title="17 октября 2023 22:20:50">6 дней
                                    назад</time></small>
                              </div>
                              <div class="comment-text read-more-open" data-readmore="container"
                                data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                                <div data-readmore="content" id="comment-text-2238083">
                                  Есть второй сезон - кусочек - больше проды не планируется </div>
                              </div>
                              <div class="comment-actions mt-2"><span
                                  class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                                  data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                                  class="d-inline-flex mr-3" id="comment-vote-2238083"><span
                                    class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="" data-original-title="Нравится"><svg
                                      class="icon icon-thumb-up">
                                      <use xlink:href="#icon-thumb-up"></use>
                                    </svg></span><span
                                    class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Не нравится"><svg class="icon icon-thumb-down">
                                      <use xlink:href="#icon-thumb-down"></use>
                                    </svg></span></span></div>
                            </div>
                          </div>

                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2237083" data-id="2237083">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/rollgan"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/rollgan" title="rollgan"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/652e4a944ca3e908680351.jpg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/652e4a944ca3e908680351.jpg 2x"
                                alt="rollgan"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/rollgan"
                                  title="rollgan">
                                  rollgan
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-17T23:53:17+03:00" title="17 октября 2023 23:53:17">6 дней
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2237083">
                              Спасибо другу анимешнику, что подсадил меня на это всё 2 года назад. Самое первое аниме,
                              которое я посмотрел в жанре "Романтика" </div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2237083"><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2236055" data-id="2236055">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true"
                              data-ajax-url="/user/commedesmaxons" data-html="true" data-toggle="popover-content"
                              data-placement="right" data-content=" " href="/user/commedesmaxons"
                              title="commedesmaxons"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/63b5c69ee0bc6069754919.jpeg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/63b5c69ee0bc6069754919.jpeg 2x"
                                alt="commedesmaxons"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/commedesmaxons"
                                  title="commedesmaxons">
                                  commedesmaxons
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-16T21:04:07+03:00" title="16 октября 2023 21:04:7">7 дней
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2236055">
                              F за Сакуру </div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2236055"><span
                                class="mr-3 text-success">1</span><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="" data-original-title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2233236" data-id="2233236">


                      <div class="media d-block d-md-flex comment-body mb-1">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/Zero%20Two"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/Zero%20Two" title="Zero Two"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/60cbbc0467e30472477226.jpg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/60cbbc0467e30472477226.jpg 2x"
                                alt="Zero Two"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/Zero%20Two"
                                  title="Zero Two">
                                  Zero Two
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-15T19:13:27+03:00" title="15 октября 2023 19:13:27">8 дней
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2233236">
                              Каждый раз под конец таких аниме, испытываю только боль и обиду.<br>Почему у меня такого
                              не было, что я делал не так....<img src="/animego/emoticons/anime/-very-sad-.gif"
                                alt=":very sad:" title=":very sad:"></div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2233236"><span
                                class="mr-3 text-success">5</span><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>
                      <div class="children">
                        <div class="mb-3">
                          <span class="comment-all btn-disabled mb-3" role="button" data-ajax-request="true"
                            data-ajax-container="#comment-sub-2233236" data-ajax-url="/comment/2233236/all">
                            <span class="comment-all-link btn-link" data-hide="Скрыть ответы"
                              data-show="Показать все ответы (4)">Показать все ответы (4)</span>
                            <svg class="icon icon-arrow-down mb-0">
                              <use href="#icon-arrow-down" xlink:href="#icon-arrow-down"></use>
                            </svg>
                          </span>
                        </div>
                        <div id="comment-sub-2233236"></div>






                        <div class="comment w-100 depth-2" id="comment-2238258" data-id="2238258">


                          <div class="media d-block d-md-flex comment-body mb-4">
                            <div class="comment-avatar mr-3 float-left float-md-none">
                              <figure class="mb-0"><a class="d-block" data-popover="true"
                                  data-ajax-url="/user/%D0%A1%D0%B5%D1%80%D0%B3%D0%BE" data-html="true"
                                  data-toggle="popover-content" data-placement="right" data-content=" "
                                  href="/user/%D0%A1%D0%B5%D1%80%D0%B3%D0%BE" title="Серго"><img
                                    class="img-thumbnail p-0 rounded-circle"
                                    src="https://animego.org/media/cache/thumbs_50x50/upload/avatar/64024cc2f165b417004672.jpg"
                                    srcset="https://animego.org/media/cache/thumbs_100x100/upload/avatar/64024cc2f165b417004672.jpg 2x"
                                    alt="Серго"></a></figure>
                            </div>
                            <div class="media-body">
                              <div class="comment-author mb-1">
                                <div class="d-inline-flex mw-60"><span class="text-truncate"><a
                                      href="/user/%D0%A1%D0%B5%D1%80%D0%B3%D0%BE" title="Серго">
                                      Серго
                                    </a></span></div><span class="text-gray-dark-4 mx-2"><svg
                                    class="icon icon-reply mirror-x">
                                    <use xlink:href="#icon-reply"></use>
                                  </svg></span><a class="text-muted small" data-popover="true"
                                  data-ajax-url="/comment/2233236" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/Zero%20Two">
                                  Zero Two
                                </a><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                                  aria-hidden="true">•</span><small
                                  class="time text-gray-dark-4 d-block d-md-inline"><time
                                    datetime="2023-10-18T00:08:35+03:00" title="18 октября 2023 00:08:35">6 дней
                                    назад</time></small>
                              </div>
                              <div class="comment-text read-more-open" data-readmore="container"
                                data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                                <div data-readmore="content" id="comment-text-2238258">
                                  Братишка, ты родился не в аниме, и это вся проблема к сожалению, но история и в правду
                                  отличная, что в манге что в аниме) </div>
                              </div>
                              <div class="comment-actions mt-2"><span
                                  class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                                  data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                                  class="d-inline-flex mr-3" id="comment-vote-2238258"><span
                                    class="mr-3 text-success">2</span><span
                                    class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Нравится"><svg class="icon icon-thumb-up">
                                      <use xlink:href="#icon-thumb-up"></use>
                                    </svg></span><span
                                    class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Не нравится"><svg class="icon icon-thumb-down">
                                      <use xlink:href="#icon-thumb-down"></use>
                                    </svg></span></span></div>
                            </div>
                          </div>

                        </div>


                        <div class="comment w-100 depth-2" id="comment-2246395" data-id="2246395">


                          <div class="media d-block d-md-flex comment-body mb-4">
                            <div class="comment-avatar mr-3 float-left float-md-none">
                              <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/vana1ex"
                                  data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                                  href="/user/vana1ex" title="vana1ex"><img class="img-thumbnail p-0 rounded-circle"
                                    src="https://animego.org/media/cache/thumbs_50x50/upload/avatar/653382b453f2f362676004.jpg"
                                    srcset="https://animego.org/media/cache/thumbs_100x100/upload/avatar/653382b453f2f362676004.jpg 2x"
                                    alt="vana1ex"></a></figure>
                            </div>
                            <div class="media-body">
                              <div class="comment-author mb-1">
                                <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/vana1ex"
                                      title="vana1ex">
                                      vana1ex
                                    </a></span></div><span class="text-gray-dark-4 mx-2"><svg
                                    class="icon icon-reply mirror-x">
                                    <use xlink:href="#icon-reply"></use>
                                  </svg></span><a class="text-muted small" data-popover="true"
                                  data-ajax-url="/comment/2233236" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/Zero%20Two">
                                  Zero Two
                                </a><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                                  aria-hidden="true">•</span><small
                                  class="time text-gray-dark-4 d-block d-md-inline"><time
                                    datetime="2023-10-22T16:01:11+03:00" title="22 октября 2023 16:01:11">день
                                    назад</time></small>
                              </div>
                              <div class="comment-text read-more-open" data-readmore="container"
                                data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                                <div data-readmore="content" id="comment-text-2246395">
                                  Вот прям жизненно </div>
                              </div>
                              <div class="comment-actions mt-2"><span
                                  class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                                  data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                                  class="d-inline-flex mr-3" id="comment-vote-2246395"><span
                                    class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Нравится"><svg class="icon icon-thumb-up">
                                      <use xlink:href="#icon-thumb-up"></use>
                                    </svg></span><span
                                    class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Не нравится"><svg class="icon icon-thumb-down">
                                      <use xlink:href="#icon-thumb-down"></use>
                                    </svg></span></span></div>
                            </div>
                          </div>

                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2231532" data-id="2231532">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/id151831120"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/id151831120" title="id151831120"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/602e1f189ba5e009934104.jpg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/602e1f189ba5e009934104.jpg 2x"
                                alt="id151831120"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/id151831120"
                                  title="id151831120">
                                  id151831120
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-14T23:29:22+03:00" title="14 октября 2023 23:29:22">9 дней
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2231532">
                              Одно из лучших романтических аниме <img src="/animego/emoticons/anime/-).gif" alt=":):"
                                title=":):"></div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2231532"><span
                                class="mr-3 text-success">2</span><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="" data-original-title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2229760" data-id="2229760">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/vernyak"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/vernyak" title="vernyak"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/652d1801c3a75231548684.jpeg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/652d1801c3a75231548684.jpeg 2x"
                                alt="vernyak"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/vernyak"
                                  title="vernyak">
                                  vernyak
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-14T02:27:32+03:00" title="14 октября 2023 02:27:32">10 дней
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2229760">
                              Посмотрел залпом, довольно неплохо. Под кириешки пойдёт <img
                                src="/animego/emoticons/anime/-thumbup-.gif" alt=":thumbup:" title=":thumbup:"><img
                                src="/animego/emoticons/anime/-im-dead-.gif" alt=":im dead:" title=":im dead:"></div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2229760"><span
                                class="mr-3 text-success">4</span><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="" data-original-title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>
                      <div class="children">






                        <div class="comment w-100 depth-2" id="comment-2233379" data-id="2233379">


                          <div class="media d-block d-md-flex comment-body mb-4">
                            <div class="comment-avatar mr-3 float-left float-md-none">
                              <figure class="mb-0"><a class="d-block" data-popover="true"
                                  data-ajax-url="/user/shibaev2009" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/shibaev2009"
                                  title="shibaev2009"><img class="img-thumbnail p-0 rounded-circle"
                                    src="https://animego.org/media/cache/thumbs_50x50/upload/avatar/653126a40b150058804949.jpeg"
                                    srcset="https://animego.org/media/cache/thumbs_100x100/upload/avatar/653126a40b150058804949.jpeg 2x"
                                    alt="shibaev2009"></a></figure>
                            </div>
                            <div class="media-body">
                              <div class="comment-author mb-1">
                                <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/shibaev2009"
                                      title="shibaev2009">
                                      shibaev2009
                                    </a></span></div><span class="text-gray-dark-4 mx-2"><svg
                                    class="icon icon-reply mirror-x">
                                    <use xlink:href="#icon-reply"></use>
                                  </svg></span><a class="text-muted small" data-popover="true"
                                  data-ajax-url="/comment/2229760" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/vernyak">
                                  vernyak
                                </a><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                                  aria-hidden="true">•</span><small
                                  class="time text-gray-dark-4 d-block d-md-inline"><time
                                    datetime="2023-10-15T20:02:16+03:00" title="15 октября 2023 20:02:16">8 дней
                                    назад</time></small>
                              </div>
                              <div class="comment-text read-more-open" data-readmore="container"
                                data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                                <div data-readmore="content" id="comment-text-2233379">
                                  Хавать кириешшки 4 часа подряд? Мощно </div>
                              </div>
                              <div class="comment-actions mt-2"><span
                                  class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                                  data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                                  class="d-inline-flex mr-3" id="comment-vote-2233379"><span
                                    class="mr-3 text-success">3</span><span
                                    class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Нравится"><svg class="icon icon-thumb-up">
                                      <use xlink:href="#icon-thumb-up"></use>
                                    </svg></span><span
                                    class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Не нравится"><svg class="icon icon-thumb-down">
                                      <use xlink:href="#icon-thumb-down"></use>
                                    </svg></span></span></div>
                            </div>
                          </div>

                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2228593" data-id="2228593">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true"
                              data-ajax-url="/user/saidnamikadze" data-html="true" data-toggle="popover-content"
                              data-placement="right" data-content=" " href="/user/saidnamikadze"
                              title="saidnamikadze"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/5e846d65c0c0b174891548.jpg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/5e846d65c0c0b174891548.jpg 2x"
                                alt="saidnamikadze"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/saidnamikadze"
                                  title="saidnamikadze">
                                  saidnamikadze
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-13T17:52:03+03:00" title="13 октября 2023 17:52:3">10 дней
                                назад</time></small>
                          </div>
                          <div class="comment-text" data-readmore="container" data-readmore-btn-show="Читать дальше"
                            data-readmore-btn-hide="Свернуть" data-read-more-init="true">
                            <div data-readmore="content" id="comment-text-2228593">
                              Я наверное покажусь чудиком, но это лучшая наверное романтика которую я смотрел, точнее
                              пересмотрел уже несколько раз, и каждый раз как то хорошо себя чувствую, наверное из за
                              того что мы похожи с главным героем, хоть я и не был таким замкнутым, но многое в нас
                              похоже. <br>Всем советую это аниме, приятного вам просмотра. <br>P.S ***** чуть слезу не
                              пустил пока писал<img src="/animego/emoticons/anime/-ololo-.gif" alt=":ololo:"
                                title=":ololo:"></div>
                          </div>
                          <div class="read-more"><a href="#" class="read-more-link" role="button">Читать дальше</a>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2228593"><span
                                class="mr-3 text-success">3</span><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>
                      <div class="children">






                        <div class="comment w-100 depth-2" id="comment-2231621" data-id="2231621">


                          <div class="media d-block d-md-flex comment-body mb-4">
                            <div class="comment-avatar mr-3 float-left float-md-none">
                              <figure class="mb-0"><a class="d-block" data-popover="true"
                                  data-ajax-url="/user/storojhobitov" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/storojhobitov"
                                  title="storojhobitov"><img class="img-thumbnail p-0 rounded-circle"
                                    src="https://animego.org/media/cache/thumbs_50x50/upload/avatar/64a7e1338ab28031188154.jpg"
                                    srcset="https://animego.org/media/cache/thumbs_100x100/upload/avatar/64a7e1338ab28031188154.jpg 2x"
                                    alt="storojhobitov"></a></figure>
                            </div>
                            <div class="media-body">
                              <div class="comment-author mb-1">
                                <div class="d-inline-flex mw-60"><span class="text-truncate"><a
                                      href="/user/storojhobitov" title="storojhobitov">
                                      storojhobitov
                                    </a></span></div><span class="text-gray-dark-4 mx-2"><svg
                                    class="icon icon-reply mirror-x">
                                    <use xlink:href="#icon-reply"></use>
                                  </svg></span><a class="text-muted small" data-popover="true"
                                  data-ajax-url="/comment/2228593" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/saidnamikadze">
                                  saidnamikadze
                                </a><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                                  aria-hidden="true">•</span><small
                                  class="time text-gray-dark-4 d-block d-md-inline"><time
                                    datetime="2023-10-15T00:13:03+03:00" title="15 октября 2023 00:13:3">9 дней
                                    назад</time></small>
                              </div>
                              <div class="comment-text read-more-open" data-readmore="container"
                                data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                                <div data-readmore="content" id="comment-text-2231621">
                                  посмотри еще форма голоса и город в котором меня нет </div>
                              </div>
                              <div class="comment-actions mt-2"><span
                                  class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                                  data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                                  class="d-inline-flex mr-3" id="comment-vote-2231621"><span
                                    class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Нравится"><svg class="icon icon-thumb-up">
                                      <use xlink:href="#icon-thumb-up"></use>
                                    </svg></span><span
                                    class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Не нравится"><svg class="icon icon-thumb-down">
                                      <use xlink:href="#icon-thumb-down"></use>
                                    </svg></span></span></div>
                            </div>
                          </div>

                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2223380" data-id="2223380">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/Mr.Sadlam"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/Mr.Sadlam" title="Mr.Sadlam"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/6212241736cf8966490166.jpg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/6212241736cf8966490166.jpg 2x"
                                alt="Mr.Sadlam"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/Mr.Sadlam"
                                  title="Mr.Sadlam">
                                  Mr.Sadlam
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-10T19:53:06+03:00" title="10 октября 2023 19:53:6">13 дней
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2223380">
                              А что если... </div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2223380"><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2222218" data-id="2222218">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/Imbri"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/Imbri" title="Imbri"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/6089f02039758744925701.jpeg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/6089f02039758744925701.jpeg 2x"
                                alt="Imbri"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/Imbri"
                                  title="Imbri">
                                  Imbri
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-10T04:05:27+03:00" title="10 октября 2023 04:05:27">14 дней
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2222218">
                              Студийная Банда, 10 серия, 7:10. Что она сказала? "хекстяш ты"? С десяток раз переслушал,
                              ничего не понимаю=\ </div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2222218"><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>
                      <div class="children">






                        <div class="comment w-100 depth-2" id="comment-2224994" data-id="2224994">


                          <div class="media d-block d-md-flex comment-body mb-4">
                            <div class="comment-avatar mr-3 float-left float-md-none">
                              <figure class="mb-0"><a class="d-block" data-popover="true"
                                  data-ajax-url="/user/i_shit_my_self" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/i_shit_my_self"
                                  title="i_shit_my_self"><img class="img-thumbnail p-0 rounded-circle"
                                    src="https://animego.org/media/cache/thumbs_50x50/upload/avatar/63e6a60bdda49999328788.jpeg"
                                    srcset="https://animego.org/media/cache/thumbs_100x100/upload/avatar/63e6a60bdda49999328788.jpeg 2x"
                                    alt="i_shit_my_self"></a></figure>
                            </div>
                            <div class="media-body">
                              <div class="comment-author mb-1">
                                <div class="d-inline-flex mw-60"><span class="text-truncate"><a
                                      href="/user/i_shit_my_self" title="i_shit_my_self">
                                      i_shit_my_self
                                    </a></span></div><span class="text-gray-dark-4 mx-2"><svg
                                    class="icon icon-reply mirror-x">
                                    <use xlink:href="#icon-reply"></use>
                                  </svg></span><a class="text-muted small" data-popover="true"
                                  data-ajax-url="/comment/2222218" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/Imbri">
                                  Imbri
                                </a><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                                  aria-hidden="true">•</span><small
                                  class="time text-gray-dark-4 d-block d-md-inline"><time
                                    datetime="2023-10-11T18:33:08+03:00" title="11 октября 2023 18:33:8">12 дней
                                    назад</time></small>
                              </div>
                              <div class="comment-text read-more-open" data-readmore="container"
                                data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                                <div data-readmore="content" id="comment-text-2224994">
                                  "хитришь ты" </div>
                              </div>
                              <div class="comment-actions mt-2"><span
                                  class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                                  data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                                  class="d-inline-flex mr-3" id="comment-vote-2224994"><span
                                    class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Нравится"><svg class="icon icon-thumb-up">
                                      <use xlink:href="#icon-thumb-up"></use>
                                    </svg></span><span
                                    class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Не нравится"><svg class="icon icon-thumb-down">
                                      <use xlink:href="#icon-thumb-down"></use>
                                    </svg></span></span></div>
                            </div>
                          </div>

                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2222090" data-id="2222090">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/id702951013"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/id702951013" title="id702951013"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/650218b63f8e1831566119.jpg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/650218b63f8e1831566119.jpg 2x"
                                alt="id702951013"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/id702951013"
                                  title="id702951013">
                                  id702951013
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-10T01:31:37+03:00" title="10 октября 2023 01:31:37">14 дней
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2222090">
                              ….. какая розовая всё таки ……… я просила …. </div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2222090"><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2222077" data-id="2222077">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/id702951013"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/id702951013" title="id702951013"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/650218b63f8e1831566119.jpg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/650218b63f8e1831566119.jpg 2x"
                                alt="id702951013"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/id702951013"
                                  title="id702951013">
                                  id702951013
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-10T01:25:53+03:00" title="10 октября 2023 01:25:53">14 дней
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2222077">
                              Я просто ……… я на день забыл про телефон впринципе и …. Забыл какую серию смотрю …. </div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2222077"><span
                                class="mr-3 text-success">1</span><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2219682" data-id="2219682">


                      <div class="media d-block d-md-flex comment-body mb-4">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/Sliznyak"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/Sliznyak" title="Sliznyak"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/626ae84bc01cc755914188.jpeg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/626ae84bc01cc755914188.jpeg 2x"
                                alt="Sliznyak"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/Sliznyak"
                                  title="Sliznyak">
                                  Sliznyak
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-08T23:55:11+03:00" title="8 октября 2023 23:55:11">15 дней
                                назад</time></small>
                          </div>
                          <div class="comment-text" data-readmore="container" data-readmore-btn-show="Читать дальше"
                            data-readmore-btn-hide="Свернуть" data-read-more-init="true">
                            <div data-readmore="content" id="comment-text-2219682">
                              В конце каждой серии чувствовал своё учащенное сердцебиение. Наверное было так
                              волнительно? Или крайне интересно, что сердце замирало... Когда шло аутро, то переваривал
                              все то, что случилось за прошедшую серию, думал, размышлял, что случилось последние 20
                              минут. Не ожидал такого эффекта от романтики. Это аниме и правда заставляет задуматься, не
                              просто смотреть, как сказал товарищ в рецензии. <img
                                src="/animego/emoticons/anime/-love2-.gif" alt=":love2:" title=":love2:"></div>
                          </div>
                          <div class="read-more"><a href="#" class="read-more-link" role="button">Читать дальше</a>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2219682"><span
                                class="mr-3 text-success">2</span><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>

                    </div>


                    <div class="comment w-100 depth-1" id="comment-2219507" data-id="2219507">


                      <div class="media d-block d-md-flex comment-body mb-4" style="opacity: .3;">
                        <div class="comment-avatar mr-3 float-left float-md-none">
                          <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/mmuzeshka"
                              data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                              href="/user/mmuzeshka" title="mmuzeshka"><img class="img-thumbnail p-0 rounded-circle"
                                src="https://animego.org/media/cache/thumbs_60x60/upload/avatar/62b9e4ba6ad6b139222623.jpeg"
                                srcset="https://animego.org/media/cache/thumbs_120x120/upload/avatar/62b9e4ba6ad6b139222623.jpeg 2x"
                                alt="mmuzeshka"></a></figure>
                        </div>
                        <div class="media-body">
                          <div class="comment-author mb-4 mb-md-0">
                            <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/mmuzeshka"
                                  title="mmuzeshka">
                                  mmuzeshka
                                </a></span></div><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                              aria-hidden="true">•</span><small class="time text-gray-dark-4 d-block d-md-inline"><time
                                datetime="2023-10-08T22:58:53+03:00" title="8 октября 2023 22:58:53">15 дней
                                назад</time></small>
                          </div>
                          <div class="comment-text read-more-open" data-readmore="container"
                            data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                            <div data-readmore="content" id="comment-text-2219507">
                              Какой же сайт п*раша.<br>Без ВПН лагает, с ВПН лагает, любом качестве тоже лагает, в любом
                              плеере лагает, инет нормальный а оно лагает. </div>
                          </div>
                          <div class="comment-actions mt-2"><span
                              class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                              data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                              class="d-inline-flex mr-3" id="comment-vote-2219507"><span
                                class="mr-3 text-danger">-10</span><span
                                class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Нравится"><svg class="icon icon-thumb-up">
                                  <use xlink:href="#icon-thumb-up"></use>
                                </svg></span><span class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip" data-placement="top"
                                title="Не нравится"><svg class="icon icon-thumb-down">
                                  <use xlink:href="#icon-thumb-down"></use>
                                </svg></span></span></div>
                        </div>
                      </div>
                      <div class="children">






                        <div class="comment w-100 depth-2" id="comment-2237622" data-id="2237622">


                          <div class="media d-block d-md-flex comment-body mb-4">
                            <div class="comment-avatar mr-3 float-left float-md-none">
                              <figure class="mb-0"><a class="d-block" data-popover="true" data-ajax-url="/user/ksplayf"
                                  data-html="true" data-toggle="popover-content" data-placement="right" data-content=" "
                                  href="/user/ksplayf" title="ksplayf"><img class="img-thumbnail p-0 rounded-circle"
                                    src="https://animego.org/media/cache/thumbs_50x50/upload/avatar/63ac01e1c4f62371690844.jpg"
                                    srcset="https://animego.org/media/cache/thumbs_100x100/upload/avatar/63ac01e1c4f62371690844.jpg 2x"
                                    alt="ksplayf"></a></figure>
                            </div>
                            <div class="media-body">
                              <div class="comment-author mb-1">
                                <div class="d-inline-flex mw-60"><span class="text-truncate"><a href="/user/ksplayf"
                                      title="ksplayf">
                                      ksplayf
                                    </a></span></div><span class="text-gray-dark-4 mx-2"><svg
                                    class="icon icon-reply mirror-x">
                                    <use xlink:href="#icon-reply"></use>
                                  </svg></span><a class="text-muted small" data-popover="true"
                                  data-ajax-url="/comment/2219507" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/mmuzeshka">
                                  mmuzeshka
                                </a><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                                  aria-hidden="true">•</span><small
                                  class="time text-gray-dark-4 d-block d-md-inline"><time
                                    datetime="2023-10-17T18:19:53+03:00" title="17 октября 2023 18:19:53">6 дней
                                    назад</time></small>
                              </div>
                              <div class="comment-text read-more-open" data-readmore="container"
                                data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                                <div data-readmore="content" id="comment-text-2237622">
                                  Братан, думаю это у тебя проблемы. Вот у меня ростелеком, вроде самый худший провайдер
                                  в России, но даже у моего провайдера не лагает. Может ты просто в ***** живешь? </div>
                              </div>
                              <div class="comment-actions mt-2"><span
                                  class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                                  data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                                  class="d-inline-flex mr-3" id="comment-vote-2237622"><span
                                    class="mr-3 text-success">2</span><span
                                    class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Нравится"><svg class="icon icon-thumb-up">
                                      <use xlink:href="#icon-thumb-up"></use>
                                    </svg></span><span
                                    class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Не нравится"><svg class="icon icon-thumb-down">
                                      <use xlink:href="#icon-thumb-down"></use>
                                    </svg></span></span></div>
                            </div>
                          </div>

                        </div>


                        <div class="comment w-100 depth-2" id="comment-2248388" data-id="2248388">


                          <div class="media d-block d-md-flex comment-body mb-4">
                            <div class="comment-avatar mr-3 float-left float-md-none">
                              <figure class="mb-0"><a class="d-block" data-popover="true"
                                  data-ajax-url="/user/Iwakura_Lain" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/Iwakura_Lain"
                                  title="Iwakura_Lain"><img class="img-thumbnail p-0 rounded-circle"
                                    src="https://animego.org/media/cache/thumbs_50x50/upload/avatar/65076435e8bd9449144527.jpeg"
                                    srcset="https://animego.org/media/cache/thumbs_100x100/upload/avatar/65076435e8bd9449144527.jpeg 2x"
                                    alt="Iwakura_Lain"></a></figure>
                            </div>
                            <div class="media-body">
                              <div class="comment-author mb-1">
                                <div class="d-inline-flex mw-60"><span class="text-truncate"><a
                                      href="/user/Iwakura_Lain" title="Iwakura_Lain">
                                      Iwakura_Lain
                                    </a></span></div><span class="text-gray-dark-4 mx-2"><svg
                                    class="icon icon-reply mirror-x">
                                    <use xlink:href="#icon-reply"></use>
                                  </svg></span><a class="text-muted small" data-popover="true"
                                  data-ajax-url="/comment/2219507" data-html="true" data-toggle="popover-content"
                                  data-placement="right" data-content=" " href="/user/mmuzeshka">
                                  mmuzeshka
                                </a><span class="text-gray-dark-4 mx-2 d-none d-md-inline"
                                  aria-hidden="true">•</span><small
                                  class="time text-gray-dark-4 d-block d-md-inline"><time
                                    datetime="2023-10-23T15:55:51+03:00" title="23 октября 2023 15:55:51">2 часа
                                    назад</time></small>
                              </div>
                              <div class="comment-text read-more-open" data-readmore="container"
                                data-readmore-btn-show="Читать дальше" data-readmore-btn-hide="Свернуть">
                                <div data-readmore="content" id="comment-text-2248388">
                                  У меня ноутбук десятилетней давности со встроенной видеокартой, ничего не лагает в
                                  720, так что это не в сайте дело, это у тебя что-то не так </div>
                              </div>
                              <div class="comment-actions mt-2"><span
                                  class="btn-o-4 comment-reply initialism mr-3 modal-btn modal.ajax" role="button"
                                  data-ajax-url="/login" data-ajax-method="GET">Ответить</span><span
                                  class="d-inline-flex mr-3" id="comment-vote-2248388"><span
                                    class="btn-o-4 mr-3 mr-xl-2 comment-like cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Нравится"><svg class="icon icon-thumb-up">
                                      <use xlink:href="#icon-thumb-up"></use>
                                    </svg></span><span
                                    class="btn-o-4 comment-dislike cursor-pointer modal-btn modal.ajax"
                                    data-ajax-url="/login" data-ajax-method="GET" data-toggle="tooltip"
                                    data-placement="top" title="Не нравится"><svg class="icon icon-thumb-down">
                                      <use xlink:href="#icon-thumb-down"></use>
                                    </svg></span></span></div>
                            </div>
                          </div>

                        </div>
                      </div>

                    </div>
                  </div>
                  <div class="btn btn-block btn-secondary btn-review d-flex justify-content-center align-items-center"
                    data-loaded-button="true" data-loaded-scroll-url="/comment/2900/1/show" data-loaded-scroll-page="1"
                    data-loaded-scroll-limit="20" data-loaded-scroll-container="#comments-list-2900"
                    data-loaded-scroll-params="{&quot;view&quot;:&quot;list&quot;}" data-loader="#comment-loader"
                    role="button"><span class="loader-btn" id="comment-loader"></span><span
                      data-loading-text="Загрузка..." data-text="Загрузить ещё">Загрузить ещё</span></div>
                </div>
              </div>
            </div>
          </div>
          <div class="d-none">
            <div class="sidebar" id="sidebar"></div>
          </div>
        </div>
      </div>
      <div class="footer-push"></div>
      <footer id="footer">
        <div class="navbar-dark bg-dark">
          <div class="container">
            <div class="d-flex align-items-center">
              <ul class="nav d-none d-sm-flex mr-auto">
                <li class="nav-item"><a href="/terms" class="nav-link">Соглашение</a></li>
                <li class="nav-item"><a href="/privacy" class="nav-link">Конфиденциальность</a></li>
                <li class="nav-item"><a href="/for-right-holders" class="nav-link">Для правообладателей</a></li>
              </ul>
              <div class="d-flex">
                <div class="copyright py-2">© animego.org <span class="date">2017-2023</span></div>
              </div>
            </div>
          </div>
        </div>
      </footer>
    </div>
  </div><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="0" height="0"
    display="none">
    <symbol viewBox="0 0 24 24" id="icon-add" xmlns="http://www.w3.org/2000/svg">
      <path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"></path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-arrow-down" xmlns="http://www.w3.org/2000/svg">
      <path d="M7.41 7.84L12 12.42l4.59-4.58L18 9.25l-6 6-6-6z"></path>
      <path d="M0-.75h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-arrow-left" xmlns="http://www.w3.org/2000/svg">
      <path d="M15.41 16.09l-4.58-4.59 4.58-4.59L14 5.5l-6 6 6 6z"></path>
      <path d="M0-.5h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 32 32" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round"
      stroke-width="2" id="icon-arrow-left2" xmlns="http://www.w3.org/2000/svg">
      <path d="M10 6L2 16l8 10M2 16h28"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-arrow-right" xmlns="http://www.w3.org/2000/svg">
      <path d="M8.59 16.34l4.58-4.59-4.58-4.59L10 5.75l6 6-6 6z"></path>
      <path d="M0-.25h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-arrow-up" xmlns="http://www.w3.org/2000/svg">
      <path d="M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-attach" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M1596 1385q0 117-79 196t-196 79q-135 0-235-100L309 784Q196 669 196 513q0-159 110-270t269-111q158 0 273 113l605 606q10 10 10 22 0 16-30.5 46.5T1386 950q-13 0-23-10L757 333q-79-77-181-77-106 0-179 75t-73 181q0 105 76 181l776 777q63 63 145 63 64 0 106-42t42-106q0-82-63-145L825 659q-26-24-60-24-29 0-48 19t-19 48q0 32 25 59l410 410q10 10 10 22 0 16-31 47t-47 31q-12 0-22-10L633 851q-63-61-63-149 0-82 57-139t139-57q88 0 149 63l581 581q100 98 100 235z">
      </path>
    </symbol>
    <symbol viewBox="0 0 32 32" id="icon-bold" xmlns="http://www.w3.org/2000/svg">
      <title>bold</title>
      <path
        d="M22.121 15.145A7.965 7.965 0 0 0 24 10c0-4.411-3.589-8-8-8H6v28h12c4.411 0 8-3.589 8-8a8.003 8.003 0 0 0-3.879-6.855zM12 6h3.172c1.749 0 3.172 1.794 3.172 4s-1.423 4-3.172 4H12V6zm4.969 20H12v-8h4.969c1.827 0 3.313 1.794 3.313 4s-1.486 4-3.313 4z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-border-color" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M17.75 7L14 3.25l-10 10V17h3.75l10-10zm2.96-2.96a.996.996 0 0 0 0-1.41L18.37.29a.996.996 0 0 0-1.41 0L15 2.25 18.75 6l1.96-1.96z">
      </path>
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path d="M0 20h24v4H0z" fill-opacity=".36"></path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-chat" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M1408 768q0 139-94 257t-256.5 186.5T704 1280q-86 0-176-16-124 88-278 128-36 9-86 16h-3q-11 0-20.5-8t-11.5-21q-1-3-1-6.5t.5-6.5 2-6l2.5-5 3.5-5.5 4-5 4.5-5 4-4.5q5-6 23-25t26-29.5 22.5-29 25-38.5 20.5-44q-124-72-195-177T0 768q0-139 94-257t256.5-186.5T704 256t353.5 68.5T1314 511t94 257zm384 256q0 120-71 224.5T1526 1425q10 24 20.5 44t25 38.5 22.5 29 26 29.5 23 25q1 1 4 4.5t4.5 5 4 5 3.5 5.5l2.5 5 2 6 .5 6.5-1 6.5q-3 14-13 22t-22 7q-50-7-86-16-154-40-278-128-90 16-176 16-271 0-472-132 58 4 88 4 161 0 309-45t264-129q125-92 192-212t67-254q0-77-23-152 129 71 204 178t75 230z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-check-circle" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path
        d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-close" xmlns="http://www.w3.org/2000/svg">
      <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z">
      </path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-cog" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M1152 896c0-70.667-25-131-75-181s-110.334-75-181-75c-70.667 0-131 25-181 75s-75 110.333-75 181 25 131 75 181 110.333 75 181 75c70.666 0 131-25 181-75s75-110.333 75-181zm511.5-109v222c0 8-2.417 15.667-7.75 23-5.334 7.333-11.875 11.667-19.875 13l-184.938 28c-12.667 36-25.636 66.333-38.969 91 23.333 33.333 59.016 79.333 107.016 138 6.666 8 10.008 16.333 10.008 25s-2.996 16.333-8.996 23c-18 24.667-50.998 60.667-98.998 108s-79.333 71-93.999 71c-8 0-16.667-3-25.999-9l-138-108c-29.334 15.333-59.667 28-91 38-10.667 90.667-20.334 152.917-29 186.25-4.667 18.667-16.667 28.25-36 28.25H785c-9.334 0-17.5-3.083-24.5-8.75s-10.834-12.958-11.5-21.625l-28-184.063c-32.667-10.667-62.667-23.031-90-37.031l-141 106.984c-6.667 6-15 8.992-25 8.992-9.334 0-17.667-3.671-25-11.004-84-76-139-132.002-165-168.002-4.667-6.667-7-14.334-7-23.001 0-8 2.666-15.667 8-23.001 10-14 27-36.167 51-66.5s42-53.833 54-70.5c-18-33.333-31.667-66.333-41-99l-183-27c-8.667-1.333-15.917-5.5-21.25-12.5-5.334-7-8.25-14.833-8.25-23.5V783c0-8 2.916-15.667 8.25-23 5.333-7.333 11.791-11.667 19.125-13l186.063-28c9.333-30.667 22.364-61.333 39.031-92-26.667-38-62.318-84-106.984-138-6.667-8-9.992-16-9.992-24 0-6.667 3.004-14.333 9.004-23 17.333-24 50.168-59.833 98.502-107.5C418.832 286.833 450.333 263 465 263c8.666 0 17.333 3.333 26 10l138 107c29.333-15.333 59.666-28 91-38 10.666-90.667 20.333-152.417 29-185.75 4.666-18.667 16.666-27.75 36-27.75h222c9.333 0 17.5 2.583 24.5 8.25s10.833 12.708 11.5 21.375l28 183.938c32.666 10.667 62.666 22.969 90 36.969l142-107.016c6-6 14-9.008 24-9.008 8.666 0 17 3.33 25 9.996 86 79.333 141 135.998 165 169.998 4.666 5.333 7 12.666 7 21.999 0 8-2.667 15.667-8 23-10 14-27 36.167-51 66.5s-42 53.833-54 70.5c17.333 33.333 31 66 41 98l183 28c8.666 1.333 15.416 5.5 20.75 12.5 5.333 6.999 7.75 14.832 7.75 23.499z">
      </path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-cogs" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M832 896q0-106-75-181t-181-75-181 75-75 181 75 181 181 75 181-75 75-181zm768 512q0-52-38-90t-90-38-90 38-38 90q0 53 37.5 90.5t90.5 37.5 90.5-37.5 37.5-90.5zm0-1024q0-52-38-90t-90-38-90 38-38 90q0 53 37.5 90.5T1472 512t90.5-37.5T1600 384zm-384 421v185q0 10-7 19.5t-16 10.5l-155 24q-11 35-32 76 34 48 90 115 7 10 7 20 0 12-7 19-23 30-82.5 89.5T935 1423q-11 0-21-7l-115-90q-37 19-77 31-11 108-23 155-7 24-30 24H483q-11 0-20-7.5t-10-17.5l-23-153q-34-10-75-31l-118 89q-7 7-20 7-11 0-21-8-144-133-144-160 0-9 7-19 10-14 41-53t47-61q-23-44-35-82l-152-24q-10-1-17-9.5t-7-19.5V802q0-10 7-19.5t16-10.5l155-24q11-35 32-76-34-48-90-115-7-11-7-20 0-12 7-20 22-30 82-89t79-59q11 0 21 7l115 90q34-18 77-32 11-108 23-154 7-24 30-24h186q11 0 20 7.5t10 17.5l23 153q34 10 75 31l118-89q8-7 20-7 11 0 21 8 144 133 144 160 0 9-7 19-12 16-42 54t-45 60q23 48 34 82l152 23q10 2 17 10.5t7 19.5zm640 533v140q0 16-149 31-12 27-30 52 51 113 51 138 0 4-4 7-122 71-124 71-8 0-46-47t-52-68q-20 2-30 2t-30-2q-14 21-52 68t-46 47q-2 0-124-71-4-3-4-7 0-25 51-138-18-25-30-52-149-15-149-31v-140q0-16 149-31 13-29 30-52-51-113-51-138 0-4 4-7 4-2 35-20t59-34 30-16q8 0 46 46.5t52 67.5q20-2 30-2t30 2q51-71 92-112l6-2q4 0 124 70 4 3 4 7 0 25-51 138 17 23 30 52 149 15 149 31zm0-1024v140q0 16-149 31-12 27-30 52 51 113 51 138 0 4-4 7-122 71-124 71-8 0-46-47t-52-68q-20 2-30 2t-30-2q-14 21-52 68t-46 47q-2 0-124-71-4-3-4-7 0-25 51-138-18-25-30-52-149-15-149-31V314q0-16 149-31 13-29 30-52-51-113-51-138 0-4 4-7 4-2 35-20t59-34 30-16q8 0 46 46.5t52 67.5q20-2 30-2t30 2q51-71 92-112l6-2q4 0 124 70 4 3 4 7 0 25-51 138 17 23 30 52 149 15 149 31z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-comment" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M21.99 4c0-1.1-.89-2-1.99-2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4-.01-18zM18 14H6v-2h12v2zm0-3H6V9h12v2zm0-3H6V6h12v2z">
      </path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 512 512" id="icon-comment-dots" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M256 32C114.6 32 0 125.1 0 240c0 49.6 21.4 95 57 130.7C44.5 421.1 2.7 466 2.2 466.5c-2.2 2.3-2.8 5.7-1.5 8.7S4.8 480 8 480c66.3 0 116-31.8 140.6-51.4 32.7 12.3 69 19.4 107.4 19.4 141.4 0 256-93.1 256-208S397.4 32 256 32zM128 272c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 0c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32zm128 0c-17.7 0-32-14.3-32-32s14.3-32 32-32 32 14.3 32 32-14.3 32-32 32z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-create" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a.996.996 0 0 0 0-1.41l-2.34-2.34a.996.996 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z">
      </path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-crop" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path d="M17 15h2V7c0-1.1-.9-2-2-2H9v2h8v8zM7 17V1H5v4H1v2h4v10c0 1.1.9 2 2 2h10v4h2v-4h4v-2H7z"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-delete" xmlns="http://www.w3.org/2000/svg">
      <path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"></path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-doc" xmlns="http://www.w3.org/2000/svg">
      <path d="M6 2c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6H6zm7 7V3.5L18.5 9H13z"></path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-done" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path d="M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z"></path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-ellipsis-h" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M576 736v192q0 40-28 68t-68 28H288q-40 0-68-28t-28-68V736q0-40 28-68t68-28h192q40 0 68 28t28 68zm512 0v192q0 40-28 68t-68 28H800q-40 0-68-28t-28-68V736q0-40 28-68t68-28h192q40 0 68 28t28 68zm512 0v192q0 40-28 68t-68 28h-192q-40 0-68-28t-28-68V736q0-40 28-68t68-28h192q40 0 68 28t28 68z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-error" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-2h2v2zm0-4h-2V7h2v6z"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-error-outline" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0V0z" fill="none"></path>
      <path
        d="M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z">
      </path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-facebook" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M1343 12v264h-157q-86 0-116 36t-30 108v189h293l-39 296h-254v759H734V905H479V609h255V391q0-186 104-288.5T1115 0q147 0 228 12z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-file-download" xmlns="http://www.w3.org/2000/svg">
      <path d="M19 9h-4V3H9v6H5l7 7 7-7zM5 18v2h14v-2H5z"></path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-file-upload" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path d="M9 16h6v-6h4l-7-7-7 7h4zm-4 2h14v2H5z"></path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-filter" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M1595 295q17 41-14 70l-493 493v742q0 42-39 59-13 5-25 5-27 0-45-19l-256-256q-19-19-19-45V858L211 365q-31-29-14-70 17-39 59-39h1280q42 0 59 39z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-fullscreen" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-group" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path
        d="M16 11c1.66 0 2.99-1.34 2.99-3S17.66 5 16 5c-1.66 0-3 1.34-3 3s1.34 3 3 3zm-8 0c1.66 0 2.99-1.34 2.99-3S9.66 5 8 5C6.34 5 5 6.34 5 8s1.34 3 3 3zm0 2c-2.33 0-7 1.17-7 3.5V19h14v-2.5c0-2.33-4.67-3.5-7-3.5zm8 0c-.29 0-.62.02-.97.05 1.16.84 1.97 1.97 1.97 3.45V19h6v-2.5c0-2.33-4.67-3.5-7-3.5z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-help" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path
        d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 17h-2v-2h2v2zm2.07-7.75l-.9.92C13.45 12.9 13 13.5 13 15h-2v-.5c0-1.1.45-2.1 1.17-2.83l1.24-1.26c.37-.36.59-.86.59-1.41 0-1.1-.9-2-2-2s-2 .9-2 2H8c0-2.21 1.79-4 4-4s4 1.79 4 4c0 .88-.36 1.68-.93 2.25z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-home" xmlns="http://www.w3.org/2000/svg">
      <path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"></path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-info-circle" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M1152 1376v-160q0-14-9-23t-23-9h-96V672q0-14-9-23t-23-9H672q-14 0-23 9t-9 23v160q0 14 9 23t23 9h96v320h-96q-14 0-23 9t-9 23v160q0 14 9 23t23 9h448q14 0 23-9t9-23zm-128-896V320q0-14-9-23t-23-9H800q-14 0-23 9t-9 23v160q0 14 9 23t23 9h192q14 0 23-9t9-23zm640 416q0 209-103 385.5T1281.5 1561 896 1664t-385.5-103T231 1281.5 128 896t103-385.5T510.5 231 896 128t385.5 103T1561 510.5 1664 896z">
      </path>
    </symbol>
    <symbol viewBox="0 0 32 32" id="icon-italic" xmlns="http://www.w3.org/2000/svg">
      <title>italic</title>
      <path d="M28 2v2h-4L14 28h4v2H4v-2h4L18 4h-4V2z"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-library-music" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path
        d="M20 2H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-2 5h-3v5.5a2.5 2.5 0 0 1-5 0 2.5 2.5 0 0 1 2.5-2.5c.57 0 1.08.19 1.5.51V5h4v2zM4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6z">
      </path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-login" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M1312 896c0 17.333-6.334 32.333-19 45l-544 544c-12.667 12.667-27.667 19-45 19-17.334 0-32.584-6.333-45.25-19-12.667-12.667-19.25-27.667-19.25-45v-287.5H192c-17.334 0-32.584-6.583-45.25-19.25-12.667-12.667-19.25-27.917-19.25-45.25V704c0-17.333 6.583-32.083 19.25-44.75 12.666-12.667 27.916-18.75 45.25-18.75h447.5V352c0-17.333 6.583-32.333 19.25-45 12.666-12.667 27.791-19 45.125-19 17.333 0 32.396 6.333 45.063 19l544.031 544c12.666 12.667 19.031 27.667 19.031 45zm351.5-352v704c0 79.333-27.917 147.417-84.25 203.75-56.334 56.333-123.917 84.75-203.25 84.75h-320c-8.667 0-16.167-3.417-22.5-9.75-6.334-6.333-9.5-13.958-9.5-22.625 0-2.667-.334-9.396-1-20.063-.667-10.667-.834-19.531-.5-26.531.333-7 1.333-14.849 3-23.516 1.666-8.667 5-14.925 10-19.258s11.833-6.258 20.5-6.258h320c44 0 81.416-15.917 112.75-47.25 31.333-31.333 46.75-69.25 46.75-113.25V544c0-44-15.417-81.417-46.75-112.75-31.334-31.333-68.75-46.75-112.75-46.75h-312l-11.5-1.25-11.5-3.125-8-5.563-7-9.031-2-13.516c0-2.667-.334-9.341-1-20.008-.667-10.667-.834-19.504-.5-26.504.333-7 1.333-14.835 3-23.502 1.666-8.667 5-14.917 10-19.251s11.833-6.251 20.5-6.251h320c79.333 0 146.916 27.917 203.25 84.25 56.333 56.334 84.25 123.918 84.25 203.251z">
      </path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-logout" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M704 1440c0 2.667.333 9.333 1 20 .666 10.667.833 19.5.5 26.5-.334 7-1.334 14.833-3 23.5-1.667 8.667-5 15.417-10 19.75s-11.834 6.75-20.5 6.75H352c-79.334 0-147.417-28.417-203.75-84.75C91.916 1395.417 63.5 1327.333 63.5 1248V544c0-79.333 28.416-146.917 84.75-203.25C204.583 284.417 272.666 256.5 352 256.5h320c8.666 0 16.166 2.917 22.5 9.25 6.333 6.333 9.5 13.708 9.5 22.375 0 2.667.333 9.271 1 19.938.666 10.667.833 19.469.5 26.469-.334 7-1.334 14.818-3 23.484-1.667 8.667-5 15.409-10 19.742S680.666 384.5 672 384.5H352c-44 0-81.917 15.417-113.25 46.75C207.416 462.583 191.5 500 191.5 544v704c0 44 15.916 81.917 47.25 113.25 31.333 31.333 69.25 47.25 113.25 47.25h312l11.5.75 11.5 2.875 8 5.438 7 8.969 2 13.468zm928-544c0 17.333-6.334 32.333-19 45l-544 544c-12.667 12.667-27.667 19-45 19-17.334 0-32.584-6.333-45.25-19-12.667-12.667-19.25-27.667-19.25-45v-287.5H512c-17.334 0-32.584-6.583-45.25-19.25-12.667-12.667-19.25-27.917-19.25-45.25V704c0-17.333 6.583-32.083 19.25-44.75 12.666-12.667 27.916-18.75 45.25-18.75h447.5V352c0-17.333 6.583-32.333 19.25-45 12.666-12.667 27.791-19 45.125-19 17.333 0 32.396 6.333 45.063 19l544.031 544c12.666 12.667 19.031 27.667 19.031 45z">
      </path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-mobile" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M976 1408q0-33-23.5-56.5T896 1328t-56.5 23.5T816 1408t23.5 56.5T896 1488t56.5-23.5T976 1408zm208-160V544q0-13-9.5-22.5T1152 512H640q-13 0-22.5 9.5T608 544v704q0 13 9.5 22.5t22.5 9.5h512q13 0 22.5-9.5t9.5-22.5zM992 400q0-16-16-16H816q-16 0-16 16t16 16h160q16 0 16-16zm288-16v1024q0 52-38 90t-90 38H640q-52 0-90-38t-38-90V384q0-52 38-90t90-38h512q52 0 90 38t38 90z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-more-vert" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path
        d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z">
      </path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-notifications-none" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M912 1696c0-10.667-5.334-16-16-16-39.334 0-73.167-14.167-101.5-42.5-28.334-28.333-42.5-62.167-42.5-101.5 0-10.667-5.334-16-16-16-10.667 0-16 5.333-16 16 0 48.667 17.166 90.167 51.5 124.5 34.333 34.333 75.833 51.5 124.5 51.5 10.666 0 16-5.333 16-16zm-666-287.5h1300c-177.334-200-266-477.583-266-832.25 0-34-8-69.125-24-105.125s-39-70.396-69-103.063-70.5-59.531-121.5-80.531S958 256.016 896 256.016s-118.5 10.492-169.5 31.492S635 335.337 605 368.004s-53 66.998-69 102.998-24 71.249-24 105.249c0 354.667-88.667 632.249-266 832.249zm1482-.5c0 34.667-12.667 64.917-38 90.25-25.334 25.333-55.334 38.25-90 38.25h-448c0 70-25 130.75-75 180.75s-110.334 74.875-181 74.875c-70.667 0-131-24.813-181-74.813S640 1606.5 640 1536.5H192c-34.667 0-64.667-12.917-90-38.25-25.334-25.333-38-55.458-38-90.125 33.333-28 63.666-57.396 91-88.063 27.333-30.667 55.666-70.531 85-119.531 29.333-49 54.166-101.849 74.5-158.516 20.333-56.667 37-125.341 50-206.008S384 668.671 384 576.004c0-101.333 39-195.502 117-282.502s180.333-139.834 307-158.501c-5.334-12.667-8-25.667-8-39 0-26.667 9.333-49.333 28-68 18.666-18.666 41.333-28 68-28 26.666 0 49.333 9.333 68 28 18.666 18.667 28 41.333 28 68 0 13.333-2.667 26.333-8 39 126.666 18.667 229 71.5 307 158.5s117 181.167 117 282.5c0 92.667 6.5 179.333 19.5 260s29.666 149.333 50 206c20.333 56.667 45.166 109.5 74.5 158.5 29.333 49 57.666 88.833 85 119.5 27.333 30.666 57.666 59.999 91 87.999z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-open-with" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M10 9h4V6h3l-5-5-5 5h3v3zm-1 1H6V7l-5 5 5 5v-3h3v-4zm14 2l-5-5v3h-3v4h3v3l5-5zm-9 3h-4v3H7l5 5 5-5h-3v-3z">
      </path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 32 32" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round"
      stroke-width="2" id="icon-options" xmlns="http://www.w3.org/2000/svg">
      <path d="M28 6H4m24 10H4m24 10H4M24 3v6M8 13v6m12 4v6"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-pause" xmlns="http://www.w3.org/2000/svg">
      <path d="M6 19h4V5H6v14zm8-14v14h4V5h-4z"></path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-person" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z">
      </path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-photo" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path
        d="M21 19V5c0-1.1-.9-2-2-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2zM8.5 13.5l2.5 3.01L14.5 12l4.5 6H5l3.5-4.5z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-photo-camera" xmlns="http://www.w3.org/2000/svg">
      <circle cx="12" cy="12" r="3.2"></circle>
      <path
        d="M9 2L7.17 4H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2h-3.17L15 2H9zm3 15c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5z">
      </path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-play" xmlns="http://www.w3.org/2000/svg">
      <path d="M8 5v14l11-7z"></path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 32 32" id="icon-play2" xmlns="http://www.w3.org/2000/svg">
      <title>play</title>
      <path d="M6 4l20 12L6 28z"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-rate-review" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0zm15.35 6.41l-1.77-1.77c-.2-.2-.51-.2-.71 0L6 11.53V14h2.47l6.88-6.88c.2-.19.2-.51 0-.71z"
        fill="none"></path>
      <path
        d="M20 2H4c-1.1 0-1.99.9-1.99 2L2 22l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zM6 14v-2.47l6.88-6.88c.2-.2.51-.2.71 0l1.77 1.77c.2.2.2.51 0 .71L8.47 14H6zm12 0h-7.5l2-2H18v2z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-remove" xmlns="http://www.w3.org/2000/svg">
      <path d="M19 13H5v-2h14v2z"></path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-repeat" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path d="M7 7h10v3l4-4-4-4v3H5v6h2V7zm10 10H7v-3l-4 4 4 4v-3h12v-6h-2v4z"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-replay" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path d="M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-reply" xmlns="http://www.w3.org/2000/svg">
      <path d="M10 9V5l-7 7 7 7v-4.1c5 0 8.5 1.6 11 5.1-1-5-4-10-11-11z"></path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-report-problem" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path d="M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-search" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M15.5 14h-.79l-.28-.27A6.471 6.471 0 0 0 16 9.5 6.5 6.5 0 1 0 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z">
      </path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 32 32" fill="none" stroke="currentcolor" stroke-linecap="round" stroke-linejoin="round"
      stroke-width="2" id="icon-search2" xmlns="http://www.w3.org/2000/svg">
      <circle cx="14" cy="14" r="12"></circle>
      <path d="M23 23l7 7"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-skip" xmlns="http://www.w3.org/2000/svg">
      <path d="M6 18l8.5-6L6 6v12zM16 6v12h2V6h-2z"></path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-skip-previous" xmlns="http://www.w3.org/2000/svg">
      <path d="M6 6h2v12H6zm3.5 6l8.5 6V6z"></path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 32 32" id="icon-smile" xmlns="http://www.w3.org/2000/svg">
      <title>icon-smile</title>
      <path
        d="M16 32c8.837 0 16-7.163 16-16S24.837 0 16 0 0 7.163 0 16s7.163 16 16 16zm0-29c7.18 0 13 5.82 13 13s-5.82 13-13 13S3 23.18 3 16 8.82 3 16 3zm-8 7a2 2 0 1 1 3.999-.001A2 2 0 0 1 8 10zm12 0a2 2 0 1 1 3.999-.001A2 2 0 0 1 20 10zm2.003 9.602l2.573 1.544c-1.749 2.908-4.935 4.855-8.576 4.855s-6.827-1.946-8.576-4.855l2.573-1.544C11.221 21.638 13.451 23 16 23s4.779-1.362 6.003-3.398z">
      </path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-star" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M1728 647q0 22-26 48l-363 354 86 500q1 7 1 20 0 21-10.5 35.5T1385 1619q-19 0-40-12l-449-236-449 236q-22 12-40 12-21 0-31.5-14.5T365 1569q0-6 2-20l86-500L89 695q-25-27-25-48 0-37 56-46l502-73L847 73q19-41 49-41t49 41l225 455 502 73q56 9 56 46z">
      </path>
    </symbol>
    <symbol viewBox="0 0 32 32" id="icon-strikethrough" xmlns="http://www.w3.org/2000/svg">
      <title>icon-strikethrough</title>
      <path
        d="M32 16v2h-7.328c.86 1.203 1.328 2.584 1.328 4 0 2.215-1.146 4.345-3.143 5.843C21.002 29.234 18.567 30 16 30s-5.002-.766-6.857-2.157C7.145 26.345 6 24.215 6 22h4c0 2.168 2.748 4 6 4s6-1.832 6-4-2.748-4-6-4H0v-2h9.36a12.062 12.062 0 0 1-.217-.157C7.145 14.345 6 12.215 6 10s1.146-4.345 3.143-5.843C10.998 2.766 13.433 2 16 2s5.002.766 6.857 2.157C24.854 5.655 26 7.785 26 10h-4c0-2.168-2.748-4-6-4s-6 1.832-6 4 2.748 4 6 4c2.468 0 4.814.709 6.64 2H32z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-swap-horiz" xmlns="http://www.w3.org/2000/svg">
      <path d="M6.99 11L3 15l3.99 4v-3H14v-2H6.99v-3zM21 9l-3.99-4v3H10v2h7.01v3L21 9z"></path>
      <path d="M0 0h24v24H0z" fill="none"></path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-th" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M512 1248v192q0 40-28 68t-68 28H96q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm0-512v192q0 40-28 68t-68 28H96q-40 0-68-28T0 928V736q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28H736q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zM512 224v192q0 40-28 68t-68 28H96q-40 0-68-28T0 416V224q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28H736q-40 0-68-28t-28-68V736q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zM1152 224v192q0 40-28 68t-68 28H736q-40 0-68-28t-28-68V224q0-40 28-68t68-28h320q40 0 68 28t28 68zm640 512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68V736q0-40 28-68t68-28h320q40 0 68 28t28 68zm0-512v192q0 40-28 68t-68 28h-320q-40 0-68-28t-28-68V224q0-40 28-68t68-28h320q40 0 68 28t28 68z">
      </path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-th-large" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M832 1024v384q0 52-38 90t-90 38H192q-52 0-90-38t-38-90v-384q0-52 38-90t90-38h512q52 0 90 38t38 90zm0-768v384q0 52-38 90t-90 38H192q-52 0-90-38t-38-90V256q0-52 38-90t90-38h512q52 0 90 38t38 90zm896 768v384q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90v-384q0-52 38-90t90-38h512q52 0 90 38t38 90zm0-768v384q0 52-38 90t-90 38h-512q-52 0-90-38t-38-90V256q0-52 38-90t90-38h512q52 0 90 38t38 90z">
      </path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-th-list" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M512 1248v192q0 40-28 68t-68 28H96q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h320q40 0 68 28t28 68zm0-512v192q0 40-28 68t-68 28H96q-40 0-68-28T0 928V736q0-40 28-68t68-28h320q40 0 68 28t28 68zm1280 512v192q0 40-28 68t-68 28H736q-40 0-68-28t-28-68v-192q0-40 28-68t68-28h960q40 0 68 28t28 68zM512 224v192q0 40-28 68t-68 28H96q-40 0-68-28T0 416V224q0-40 28-68t68-28h320q40 0 68 28t28 68zm1280 512v192q0 40-28 68t-68 28H736q-40 0-68-28t-28-68V736q0-40 28-68t68-28h960q40 0 68 28t28 68zm0-512v192q0 40-28 68t-68 28H736q-40 0-68-28t-28-68V224q0-40 28-68t68-28h960q40 0 68 28t28 68z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-thumb-down" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path
        d="M15 3H6c-.83 0-1.54.5-1.84 1.22l-3.02 7.05c-.09.23-.14.47-.14.73v1.91l.01.01L1 14c0 1.1.9 2 2 2h6.31l-.95 4.57-.03.32c0 .41.17.79.44 1.06L9.83 23l6.59-6.59c.36-.36.58-.86.58-1.41V5c0-1.1-.9-2-2-2zm4 0v12h4V3h-4z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-thumb-up" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path
        d="M1 21h4V9H1v12zm22-11c0-1.1-.9-2-2-2h-6.31l.95-4.57.03-.32c0-.41-.17-.79-.44-1.06L14.17 1 7.59 7.59C7.22 7.95 7 8.45 7 9v10c0 1.1.9 2 2 2h9c.83 0 1.54-.5 1.84-1.22l3.02-7.05c.09-.23.14-.47.14-.73v-1.91l-.01-.01L23 10z">
      </path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-twitter" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M1684 408q-67 98-162 167 1 14 1 42 0 130-38 259.5T1369.5 1125 1185 1335.5t-258 146-323 54.5q-271 0-496-145 35 4 78 4 225 0 401-138-105-2-188-64.5T285 1033q33 5 61 5 43 0 85-11-112-23-185.5-111.5T172 710v-4q68 38 146 41-66-44-105-115t-39-154q0-88 44-163 121 149 294.5 238.5T884 653q-8-38-8-74 0-134 94.5-228.5T1199 256q140 0 236 102 109-21 205-78-37 115-142 178 93-10 186-50z">
      </path>
    </symbol>
    <symbol viewBox="0 0 32 32" id="icon-underline" xmlns="http://www.w3.org/2000/svg">
      <title>underline</title>
      <path
        d="M22 2h4v13c0 4.971-4.477 9-10 9S6 19.971 6 15V2h4v13c0 1.255.57 2.459 1.605 3.391C12.758 19.429 14.319 20 16 20s3.242-.572 4.395-1.609C21.43 17.46 22 16.255 22 15V2zM6 26h20v4H6z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-user-plus" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path
        d="M15 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm-9-2V7H4v3H1v2h3v3h2v-3h3v-2H6zm9 4c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z">
      </path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-user-times" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M576 896q-159 0-271.5-112.5T192 512t112.5-271.5T576 128t271.5 112.5T960 512 847.5 783.5 576 896zm1077 320l249 249q9 9 9 23 0 13-9 22l-136 136q-9 9-22 9-14 0-23-9l-249-249-249 249q-9 9-23 9-13 0-22-9l-136-136q-9-9-9-22 0-14 9-23l249-249-249-249q-9-9-9-23 0-13 9-22l136-136q9-9 22-9 14 0 23 9l249 249 249-249q9-9 23-9 13 0 22 9l136 136q9 9 9 22 0 14-9 23zm-498 0l-181 181q-37 37-37 91 0 53 37 90l83 83q-21 3-44 3H139q-121 0-194-69t-73-190q0-53 3.5-103.5t14-109T-84 1084t43-97.5 62-81 85.5-53.5T218 832q19 0 39 17 154 122 319 122t319-122q20-17 39-17 28 0 57 6-28 27-41 50t-13 56q0 54 37 91z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-video" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path
        d="M4 6H2v14c0 1.1.9 2 2 2h14v-2H4V6zm16-4H8c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-8 12.5v-9l6 4.5-6 4.5z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-visibility" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0z" fill="none"></path>
      <path
        d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-visibility-off" xmlns="http://www.w3.org/2000/svg">
      <path d="M0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0z" fill="none"></path>
      <path
        d="M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46A11.804 11.804 0 0 0 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z">
      </path>
    </symbol>
    <symbol viewBox="0 0 1792 1792" id="icon-vk" xmlns="http://www.w3.org/2000/svg">
      <path
        d="M1853 520q23 64-150 294-24 32-65 85-78 100-90 131-17 41 14 81 17 21 81 82h1l1 1 1 1 2 2q141 131 191 221 3 5 6.5 12.5t7 26.5-.5 34-25 27.5-59 12.5l-256 4q-24 5-56-5t-52-22l-20-12q-30-21-70-64t-68.5-77.5-61-58-56.5-15.5q-3 1-8 3.5t-17 14.5-21.5 29.5-17 52-6.5 77.5q0 15-3.5 27.5t-7.5 18.5l-4 5q-18 19-53 22H875q-71 4-146-16.5t-131.5-53-103-66T424 1338l-25-24q-10-10-27.5-30t-71.5-91-106-151T71.5 831-59 559q-6-16-6-27t3-16l4-6q15-19 57-19l274-2q12 2 23 6.5t16 8.5l5 3q16 11 24 32 20 50 46 103.5t41 81.5l16 29q29 60 56 104t48.5 68.5T590 964t34 14 27-5q2-1 5-5t12-22 13.5-47 9.5-81 0-125q-2-40-9-73t-14-46l-6-12q-25-34-85-43-13-2 5-24 17-19 38-30 53-26 239-24 82 1 135 13 20 5 33.5 13.5t20.5 24 10.5 32 3.5 45.5-1 55-2.5 70.5-1.5 82.5q0 11-1 42t-.5 48 3.5 40.5 11.5 39T1093 971q8 2 17 4t26-11 38-34.5 52-67 68-107.5q60-104 107-225 4-10 10-17.5t11-10.5l4-3 5-2.5 13-3 20-.5 288-2q39-5 64 2.5t31 16.5z">
      </path>
    </symbol>
    <symbol viewBox="0 0 24 24" id="icon-watch-later" xmlns="http://www.w3.org/2000/svg">
      <defs>
        <path d="M0 0h24v24H0V0z" id="cxa"></path>
      </defs>
      <clipPath id="cxb">
        <use overflow="visible" xlink:href="#cxa"></use>
      </clipPath>
      <path clip-path="url(#cxb)"
        d="M12 2C6.5 2 2 6.5 2 12s4.5 10 10 10 10-4.5 10-10S17.5 2 12 2zm4.2 14.2L11 13V7h1.5v5.2l4.5 2.7-.8 1.3z">
      </path>
    </symbol>
  </svg>
  <div id="search-overlay" class="d-lg-none" data-state="closed">
    <div class="search-mobile m-3"><!--noindex-->
      <form action="/search/all" method="GET">
        <div class="searchform-wrapper d-flex">
          <div class="form-control form-control form-control-lg d-flex align-items-center border-0"><svg
              class="icon icon-xl icon-search2 mr-2">
              <use xlink:href="#icon-search2"></use>
            </svg><input class="form-control-reset w-100 text-placeholder-4" name="q" type="text"
              placeholder="Поиск аниме, манги, людей и персонажей" autocomplete="off" data-search="true"
              data-search-container="#search-containe-mobile" data-ajax-url="/search/all?type=small"
              data-search-min-query-len="3" data-search-target=".form-control">
            <div class="input-group-btn"><span id="search-overlay-close"><svg class="icon icon-xl icon-close">
                  <use xlink:href="#icon-close"></use>
                </svg></span></div>
          </div>
        </div>
      </form><!--/noindex-->
    </div>
    <div id="search-containe-mobile"></div>
  </div>
  <link href="/animego/css/animate/animate.min.css?v=3" rel="stylesheet" type="text/css">
  <link href="/animego/css/fancybox/fancybox.min.css?v=4" rel="stylesheet" type="text/css"><span id="scrollUp"
    style="position: fixed; z-index: 1000; cursor: pointer;"><svg class="icon icon-lg icon-arrow-up mr-1">
      <use xlink:href="#icon-arrow-up"></use>
    </svg> Наверх
  </span>
</body>

</html>
