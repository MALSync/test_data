<html xmlns="https://www.w3.org/1999/xhtml" lang="en-US">

<head profile="http://gmpg.org/xfn/11">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width">
  <meta name="theme-color" content="#d10000">
  <meta name="msapplication-navbutton-color" content="#d10000">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-status-bar-style" content="#d10000">
  <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1">

  <title>Questism - Void Scans</title>
  <link rel="canonical" href="https://void-scans.com/manga/questism/">
  <meta property="og:locale" content="en_US">
  <meta property="og:type" content="article">
  <meta property="og:title" content="Questism - Void Scans">
  <meta property="og:description"
    content="Gaming geek Suhyeon Kim hates school, and the dislike is mutual. Every day he faces relentless bullying from his classmates, leading him to wish his life was more like the...">
  <meta property="og:url" content="https://void-scans.com/manga/questism/">
  <meta property="og:site_name" content="Void Scans">
  <meta property="article:modified_time" content="2023-10-09T03:55:59+00:00">
  <meta property="og:image"
    content="https://void-scans.com/wp-content/uploads/questUpRGBnoise_scaleLevel2ttawidth-1000.jpg">
  <meta property="og:image:width" content="1000">
  <meta property="og:image:height" content="1430">
  <meta property="og:image:type" content="image/jpeg">
  <meta name="twitter:card" content="summary_large_image">
  <script type="application/ld+json"
    class="yoast-schema-graph">{"@context":"https://schema.org","@graph":[{"@type":"WebPage","@id":"https://void-scans.com/manga/questism/","url":"https://void-scans.com/manga/questism/","name":"Questism - Void Scans","isPartOf":{"@id":"https://void-scans.com/#website"},"primaryImageOfPage":{"@id":"https://void-scans.com/manga/questism/#primaryimage"},"image":{"@id":"https://void-scans.com/manga/questism/#primaryimage"},"thumbnailUrl":"https://void-scans.com/wp-content/uploads/questUpRGBnoise_scaleLevel2ttawidth-1000.jpg","datePublished":"2022-05-30T22:19:30+00:00","dateModified":"2023-10-09T03:55:59+00:00","breadcrumb":{"@id":"https://void-scans.com/manga/questism/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https://void-scans.com/manga/questism/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https://void-scans.com/manga/questism/#primaryimage","url":"https://void-scans.com/wp-content/uploads/questUpRGBnoise_scaleLevel2ttawidth-1000.jpg","contentUrl":"https://void-scans.com/wp-content/uploads/questUpRGBnoise_scaleLevel2ttawidth-1000.jpg","width":1000,"height":1430},{"@type":"BreadcrumbList","@id":"https://void-scans.com/manga/questism/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://void-scans.com/"},{"@type":"ListItem","position":2,"name":"Manga","item":"https://void-scans.com/manga/"},{"@type":"ListItem","position":3,"name":"Questism"}]},{"@type":"WebSite","@id":"https://void-scans.com/#website","url":"https://void-scans.com/","name":"Void Scans","description":"Quality webtoons","publisher":{"@id":"https://void-scans.com/#organization"},"potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https://void-scans.com/?s={search_term_string}"},"query-input":"required name=search_term_string"}],"inLanguage":"en-US"},{"@type":"Organization","@id":"https://void-scans.com/#organization","name":"Void Scans","url":"https://void-scans.com/","logo":{"@type":"ImageObject","inLanguage":"en-US","@id":"https://void-scans.com/#/schema/logo/image/","url":"https://void-scans.com/wp-content/uploads/cropped-weblogo-1.png","contentUrl":"https://void-scans.com/wp-content/uploads/cropped-weblogo-1.png","width":512,"height":512,"caption":"Void Scans"},"image":{"@id":"https://void-scans.com/#/schema/logo/image/"}}]}</script>

  <link rel="alternate" type="application/rss+xml" title="Void Scans » Questism Comments Feed"
    href="https://void-scans.com/manga/questism/feed/">
  <script type="text/javascript">
    window._wpemojiSettings = { "baseUrl": "https:\/\/s.w.org\/images\/core\/emoji\/14.0.0\/72x72\/", "ext": ".png", "svgUrl": "https:\/\/s.w.org\/images\/core\/emoji\/14.0.0\/svg\/", "svgExt": ".svg", "source": { "concatemoji": "https:\/\/void-scans.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=172555cd4e44f74d2ccdf49c61d7b13f" } };
    /*! This file is auto-generated */
    !function (i, n) { var o, s, e; function c(e) { try { var t = { supportTests: e, timestamp: (new Date).valueOf() }; sessionStorage.setItem(o, JSON.stringify(t)) } catch (e) { } } function p(e, t, n) { e.clearRect(0, 0, e.canvas.width, e.canvas.height), e.fillText(t, 0, 0); var t = new Uint32Array(e.getImageData(0, 0, e.canvas.width, e.canvas.height).data), r = (e.clearRect(0, 0, e.canvas.width, e.canvas.height), e.fillText(n, 0, 0), new Uint32Array(e.getImageData(0, 0, e.canvas.width, e.canvas.height).data)); return t.every(function (e, t) { return e === r[t] }) } function u(e, t, n) { switch (t) { case "flag": return n(e, "\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f", "\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f") ? !1 : !n(e, "\ud83c\uddfa\ud83c\uddf3", "\ud83c\uddfa\u200b\ud83c\uddf3") && !n(e, "\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f", "\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f"); case "emoji": return !n(e, "\ud83e\udef1\ud83c\udffb\u200d\ud83e\udef2\ud83c\udfff", "\ud83e\udef1\ud83c\udffb\u200b\ud83e\udef2\ud83c\udfff") }return !1 } function f(e, t, n) { var r = "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? new OffscreenCanvas(300, 150) : i.createElement("canvas"), a = r.getContext("2d", { willReadFrequently: !0 }), o = (a.textBaseline = "top", a.font = "600 32px Arial", {}); return e.forEach(function (e) { o[e] = t(a, e, n) }), o } function t(e) { var t = i.createElement("script"); t.src = e, t.defer = !0, i.head.appendChild(t) } "undefined" != typeof Promise && (o = "wpEmojiSettingsSupports", s = ["flag", "emoji"], n.supports = { everything: !0, everythingExceptFlag: !0 }, e = new Promise(function (e) { i.addEventListener("DOMContentLoaded", e, { once: !0 }) }), new Promise(function (t) { var n = function () { try { var e = JSON.parse(sessionStorage.getItem(o)); if ("object" == typeof e && "number" == typeof e.timestamp && (new Date).valueOf() < e.timestamp + 604800 && "object" == typeof e.supportTests) return e.supportTests } catch (e) { } return null }(); if (!n) { if ("undefined" != typeof Worker && "undefined" != typeof OffscreenCanvas && "undefined" != typeof URL && URL.createObjectURL && "undefined" != typeof Blob) try { var e = "postMessage(" + f.toString() + "(" + [JSON.stringify(s), u.toString(), p.toString()].join(",") + "));", r = new Blob([e], { type: "text/javascript" }), a = new Worker(URL.createObjectURL(r), { name: "wpTestEmojiSupports" }); return void (a.onmessage = function (e) { c(n = e.data), a.terminate(), t(n) }) } catch (e) { } c(n = f(s, u, p)) } t(n) }).then(function (e) { for (var t in e) n.supports[t] = e[t], n.supports.everything = n.supports.everything && n.supports[t], "flag" !== t && (n.supports.everythingExceptFlag = n.supports.everythingExceptFlag && n.supports[t]); n.supports.everythingExceptFlag = n.supports.everythingExceptFlag && !n.supports.flag, n.DOMReady = !1, n.readyCallback = function () { n.DOMReady = !0 } }).then(function () { return e }).then(function () { var e; n.supports.everything || (n.readyCallback(), (e = n.source || {}).concatemoji ? t(e.concatemoji) : e.wpemoji && e.twemoji && (t(e.twemoji), t(e.wpemoji))) })) }((window, document), window._wpemojiSettings);
  </script>
  <style type="text/css">
    img.wp-smiley,
    img.emoji {
      display: inline !important;
      border: none !important;
      box-shadow: none !important;
      height: 1em !important;
      width: 1em !important;
      margin: 0 0.07em !important;
      vertical-align: -0.1em !important;
      background: none !important;
      padding: 0 !important;
    }
  </style>
  <style id="classic-theme-styles-inline-css" type="text/css">
    /*! This file is auto-generated */
    .wp-block-button__link {
      color: #fff;
      background-color: #32373c;
      border-radius: 9999px;
      box-shadow: none;
      text-decoration: none;
      padding: calc(.667em + 2px) calc(1.333em + 2px);
      font-size: 1.125em
    }

    .wp-block-file__button {
      background: #32373c;
      color: #fff;
      text-decoration: none
    }
  </style>
  <link data-minify="1" rel="stylesheet" id="style-css"
    href="https://void-scans.com/wp-content/cache/min/1/wp-content/themes/mangastream/style.css?ver=1687356697"
    type="text/css" media="all">
  <link data-minify="1" rel="stylesheet" id="lightstyle-css"
    href="https://void-scans.com/wp-content/cache/min/1/wp-content/themes/mangastream/assets/css/lightmode.css?ver=1687356697"
    type="text/css" media="all">
  <link data-minify="1" rel="stylesheet" id="owl-carousel-css"
    href="https://void-scans.com/wp-content/cache/min/1/wp-content/themes/mangastream/assets/css/owl.carousel.css?ver=1687356697"
    type="text/css" media="all">
  <script>
    var baseurl = "https://void-scans.com/";
    var ajaxurl = "https://void-scans.com/wp-admin/admin-ajax.php";
    var max_bookmark = 20;
    var max_history = 10;
    var defaultTheme = "darkmode";
    var tsLogoLight = "https://void-scans.com/wp-content/uploads/cropped-weblogo-1.png";
    var tsLogoDark = "https://void-scans.com/wp-content/uploads/cropped-weblogo-1.png";
    const ts_lang = { "bookmark_bookmark_label": "Bookmark", "bookmark_bookmarked_label": "Bookmarked", "bookmark_max_item_reached": "Sorry, you reached your bookmark limit, \nplease remove other manga from bookmark", "bookmark_browser_not_supported": "Sorry, your browser does not support this feature.\nUse Google Chrome \/ Firefox." };
  </script>
  <script type="text/javascript"
    src="https://void-scans.com/wp-content/themes/mangastream/assets/js/jquery.min.js?ver=3.6.0"
    id="jquery-js"></script>
  <script data-minify="1" type="text/javascript"
    src="https://void-scans.com/wp-content/cache/min/1/wp-content/themes/mangastream/assets/js/bookmark.js?ver=1687356697"
    id="bookmarks_script-js"></script>
  <script data-minify="1" type="text/javascript"
    src="https://void-scans.com/wp-content/cache/min/1/wp-content/themes/mangastream/assets/js/history.js?ver=1687356697"
    id="history_script-js"></script>
  <script data-minify="1" type="text/javascript"
    src="https://void-scans.com/wp-content/cache/min/1/wp-content/themes/mangastream/assets/js/function.js?ver=1687356697"
    id="tsfn_scripts-js"></script>
  <script type="text/javascript"
    src="https://void-scans.com/wp-content/themes/mangastream/assets/js/owl.carousel.min.js?ver=2.3.4"
    id="owl-carousel-js"></script>
  <script data-minify="1" type="text/javascript"
    src="https://void-scans.com/wp-content/cache/min/1/wp-content/themes/mangastream/assets/js/nsfw.js?ver=1687356697"
    id="nsfw_scripts-js"></script>
  <script data-minify="1" type="text/javascript"
    src="https://void-scans.com/wp-content/cache/min/1/wp-content/themes/mangastream/assets/js/chapter-search.js?ver=1687356697"
    id="chapter-search-js"></script>
  <link rel="https://api.w.org/" href="https://void-scans.com/wp-json/">
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://void-scans.com/xmlrpc.php?rsd">
  <link rel="shortlink" href="https://void-scans.com/?p=7153">
  <link rel="alternate" type="application/json+oembed"
    href="https://void-scans.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fvoid-scans.com%2Fmanga%2Fquestism%2F">
  <link rel="alternate" type="text/xml+oembed"
    href="https://void-scans.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fvoid-scans.com%2Fmanga%2Fquestism%2F&amp;format=xml">
  <script type="text/javascript">
    var sf_templates = "<a href=\"{search_url_escaped}\">View All Results<\/a>";
    var sf_position = '0';
    var sf_input = '.search-live';
    jQuery(document).ready(function () {
      jQuery(sf_input).ajaxyLiveSearch({ "expand": false, "searchUrl": "https:\/\/void-scans.com\/?s=%s", "text": "Search", "delay": 500, "iwidth": 180, "width": 350, "ajaxUrl": "https:\/\/void-scans.com\/wp-admin\/admin-ajax.php", "rtl": 0 });
      jQuery(".live-search_ajaxy-selective-input").keyup(function () {
        var width = jQuery(this).val().length * 8;
        if (width < 50) {
          width = 50;
        }
        jQuery(this).width(width);
      });
      jQuery(".live-search_ajaxy-selective-search").click(function () {
        jQuery(this).find(".live-search_ajaxy-selective-input").focus();
      });
      jQuery(".live-search_ajaxy-selective-close").click(function () {
        jQuery(this).parent().remove();
      });
    });
  </script>
  <script data-minify="1" async="" data-cfasync="false"
    src="https://void-scans.com/wp-content/cache/min/1/v2/unit/pt.js?ver=1689844576" type="text/javascript"></script>
  <script>
    $(document).ready(function () {
      $(".shme").click(function () {
        $(".mm").toggleClass("shwx");
      });
      $(".topmobile").click(function () {
        $(".topmobcon").toggleClass("topmobshow");
      });
    });
  </script>
  <script type="text/javascript">
    $(document).ready(function () {

      //Check to see if the window is top if not then display button
      $(window).scroll(function () {
        if ($(this).scrollTop() > 100) {
          $('.scrollToTop').fadeIn();
        } else {
          $('.scrollToTop').fadeOut();
        }
      });

      //Click event to scroll to top
      $('.scrollToTop').click(function () {
        $('html, body').animate({ scrollTop: 0 }, 800);
        return false;
      });

    });
  </script>
  <style>
    #main-menu,
    .slider:before,
    .serieslist.pop ul li.topone .limit .bw .ctr,
    .releases .vl,
    .scrollToTop,
    #sidebar #bm-history li a:hover,
    .hpage a,
    #footer .footermenu,
    .footer-az .az-list li a,
    .bigcontent .infox .spe span:before,
    .bxcl ul li span.dt a,
    .bookmark,
    .commentx #submit,
    .bs .bsx .limit .type,
    .radiox input:checked~.checkmarkx,
    .advancedsearch button.searchz,
    .lightmode .nav_apb a:hover,
    .lista a,
    .lightmode .lista a:hover,
    .nextprev a,
    .disqusmen #commentform #submit,
    .blogbox .btitle .vl,
    .bigblogt span a {
      background: #d10000
    }

    .pagination span.page-numbers.current,
    .quickfilter .filters .filter.submit button,
    #sidebar .section .ts-wpop-series-gen .ts-wpop-nav-tabs li.active a,
    #gallery.owl-loaded .owl-dots .owl-dot.active span {
      background: #d10000 !important
    }

    #sidebar .section #searchform #searchsubmit,
    .series-gen .nav-tabs li.active a,
    .lastend .inepcx a,
    .nav_apb a:hover,
    #top-menu li a:hover,
    .readingnav.rnavbot .readingnavbot .readingbar .readingprogress,
    .lightmode .bigcontent .infox .wd-full .mgen a:hover,
    .lightmode .bxcl ul li .chbox:hover,
    .lightmode ul.taxindex li a:hover,
    .comment-list .comment-body .reply a:hover,
    .topmobile,
    .bxcl ul::-webkit-scrollbar-thumb,
    .lightmode .slider:before,
    .quickfilter .filters .filter .genrez::-webkit-scrollbar-thumb {
      background: #d10000
    }

    .lightmode #sidebar .section h4,
    .lightmode .serieslist ul li .ctr,
    .listupd .utao .uta .luf ul li,
    .lightmode .bs .bsx:hover .tt,
    .soralist ul,
    a:hover,
    .lightmode .blogbox .btitle h3,
    .lightmode .blogbox .btitle h1,
    .bxcl ul li .lchx a:visited,
    .listupd .utao .uta .luf ul li a:visited,
    .lightmode .pagination a:hover,
    .lightmode a:hover,
    #sidebar .serieslist ul li .leftseries h2 a:hover,
    .bs.styletere .epxs,
    .bxcl ul li .dt a,
    .lightmode .bigcontent .infox .wd-full .mgen a,
    .lightmode #sidebar .serieslist ul li .leftseries h2 a:hover,
    .comment-list .comment-body .reply a,
    .bxcl ul li .eph-num a:visited,
    .headpost .allc a {
      color: #d10000
    }

    .bxcl ul li .lchx a:visited,
    .listupd .utao .uta .luf ul li a:visited {
      color: #d10000 !important
    }

    .lightmode .serieslist ul li .ctr,
    .advancedsearch button.searchz,
    .lista a,
    .lightmode .lista a:hover,
    .blogbox .boxlist .bma .bmb .bmba,
    .page.blog .thumb,
    #sidebar .section #searchform #searchsubmit,
    .lightmode .bigcontent .infox .wd-full .mgen a,
    .lightmode .bxcl ul li .chbox:hover,
    .comment-list .comment-body .reply a {
      border-color: #d10000
    }

    .hpage a:hover {
      color: #FFF !important;
    }

    @media only screen and (max-width:800px) {

      .lightmode.black .th,
      .lightmode .th,
      .th,
      .surprise {
        background: #d10000
      }

      #main-menu {
        background: rgba(28, 28, 28, 0.95);
      }
    }
  </style>
  <link rel="icon" href="https://void-scans.com/wp-content/uploads/cropped-cropped-weblogo-1-2-32x32.png" sizes="32x32">
  <link rel="icon" href="https://void-scans.com/wp-content/uploads/cropped-cropped-weblogo-1-2-192x192.png"
    sizes="192x192">
  <link rel="apple-touch-icon" href="https://void-scans.com/wp-content/uploads/cropped-cropped-weblogo-1-2-180x180.png">
  <meta name="msapplication-TileImage"
    content="https://void-scans.com/wp-content/uploads/cropped-cropped-weblogo-1-2-270x270.png">
  <style type="text/css" id="wp-custom-css">
    iframe[sandbox] {
      display: none;
    }
  </style>
  <script async="" type="text/javascript" src="https://void-scans-com-1.disqus.com/count.js"></script>
  <script type="text/javascript" async="" src="https://void-scans-com-1.disqus.com/embed.js"></script>
  <script src="https://void-scans.com/wp-includes/js/wp-emoji-release.min.js?ver=172555cd4e44f74d2ccdf49c61d7b13f"
    defer=""></script>
  <script src="https://c.disquscdn.com/next/embed/alfie_v4.63f1ab6d6b9d5807dc0c94ef3fe0b851.js" async=""
    charset="UTF-8"></script>
</head>

<body class="darkmode" itemscope="itemscope" itemtype="http://schema.org/WebPage">
  <script>ts_darkmode.init();</script>
  <div class="th">
    <div class="centernav bound">
      <div class="shme"><i class="fa fa-bars" aria-hidden="true"></i></div>
      <header role="banner" itemscope="" itemtype="http://schema.org/WPHeader">
        <div class="site-branding logox">
          <span class="logos">
            <a title="Void Scans - Quality webtoons" itemprop="url" href="https://void-scans.com/"><img width="512"
                height="512" src="https://void-scans.com/wp-content/uploads/cropped-weblogo-1.png"
                alt="Void Scans - Quality webtoons"><span class="hdl">Void Scans</span></a>
          </span>
          <meta itemprop="name" content="Void Scans">
        </div>
      </header>
      <div class="searchx topcon">
        <form action="https://void-scans.com/" id="form" method="get" itemprop="potentialAction" itemscope=""
          itemtype="http://schema.org/SearchAction">
          <meta itemprop="target" content="https://void-scans.com/?s={query}">
          <input id="s" itemprop="query-input" class="search-live" type="text" placeholder="Search" name="s"
            autocomplete="off">
          <button type="submit" id="submit"><i class="fas fa-search" aria-hidden="true"></i></button>
        </form>
      </div>
      <div id="thememode">
        <label class="switch">
          <input type="checkbox">
          <span class="slider round"></span>
        </label>
      </div>
      <script>
        if (localStorage.getItem("thememode") == null) {
          if (defaultTheme == "lightmode") {
            jQuery(".logos img").attr('src', 'https://void-scans.com/wp-content/uploads/cropped-weblogo-1.png');
            jQuery("#thememode input[type='checkbox']").prop('checked', false);
          } else {
            jQuery(".logos img").attr('src', 'https://void-scans.com/wp-content/uploads/cropped-weblogo-1.png');
            jQuery("#thememode input[type='checkbox']").prop('checked', true);
          }
        } else if (localStorage.getItem("thememode") == "lightmode") {
          jQuery(".logos img").attr('src', 'https://void-scans.com/wp-content/uploads/cropped-weblogo-1.png');
          jQuery("#thememode input[type='checkbox']").prop('checked', false);
        } else {
          jQuery(".logos img").attr('src', 'https://void-scans.com/wp-content/uploads/cropped-weblogo-1.png');
          jQuery("#thememode input[type='checkbox']").prop('checked', true);
        }
      </script>
      <span class="topmobile"><i class="fa fa-th-large" aria-hidden="true"></i></span>
      <div id="top-menu" class="topmobcon">
        <div class="menu-bookmark-container">
          <ul id="menu-bookmark" class="menu">
            <li id="menu-item-71488" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-71488"><a
                href="https://void-scans.com/bookmark/" itemprop="url">Bookmark</a></li>
          </ul>
        </div>
      </div>
    </div>
  </div>
  <nav id="main-menu" class="mm">
    <div class="centernav">
      <div class="bound">
        <span itemscope="itemscope" itemtype="http://schema.org/SiteNavigationElement" role="navigation">
          <ul id="menu-menu" class="menu">
            <li id="menu-item-18"
              class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-18"><a
                href="https://void-scans.com" itemprop="url"><span itemprop="name">Home</span></a></li>
            <li id="menu-item-17" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-17"><a
                href="https://void-scans.com/projects/" itemprop="url"><span itemprop="name">Projects</span></a></li>
            <li id="menu-item-4736" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4736"><a
                href="https://void-scans.com/genres/" itemprop="url"><span itemprop="name">Genres</span></a></li>
            <li id="menu-item-16" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-16"><a
                href="https://void-scans.com/az-list/" itemprop="url"><span itemprop="name">AZ-list</span></a></li>
            <li id="menu-item-19" class="menu-item menu-item-type-custom menu-item-object-custom menu-item-19"><a
                href="https://discord.gg/aJuHK9V3cY" itemprop="url"><span itemprop="name">Discord</span></a></li>
            <li id="menu-item-13863" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-13863"><a
                href="https://void-scans.com/privacy-policy-2/" itemprop="url"><span itemprop="name">Privacy
                  Policy</span></a></li>
            <li id="menu-item-13864" class="menu-item menu-item-type-post_type menu-item-object-page menu-item-13864"><a
                href="https://void-scans.com/digital-millennium-copyright-act/" itemprop="url"><span
                  itemprop="name">Digital Millennium Copyright Act</span></a></li>
          </ul>
        </span>
        <a href="https://void-scans.com/random" class="surprise"><i class="far fa-star" aria-hidden="true"></i> Surprise
          Me!</a>
        <div class="clear"></div>
      </div>
    </div>
  </nav>
  <div class="blox mlb kln">
    <style>
      #radio_content {
        position: fixed;
        bottom: 25px;
        z-index: 9999;
        background: linear-gradient(to bottom, #0A0A0A, #222222);
        border-radius: 0px 20px 20px 0px;
        overflow: hidden;
        display: flex;
        flex-direction: row-reverse;
        align-items: center;
        padding: 0px 0px 0px 10px;
        transition-duration: 1s;
        border-top: 3px solid #333333;
        border-bottom: 3px solid #333333;
        border-right: 3px solid #333333;

      }

      #radio_content.abierto {
        left: 0;
      }

      #radio_content.cerrado {
        left: -170px;
      }

      #radio_content svg {
        color: #fff;
        cursor: pointer;
      }

      #radio_content.abierto svg#abrir_radio,
      #radio_content.cerrado svg#cerrar_radio {
        display: none;
      }
    </style>
    <div id="radio_content" class="abierto">
      <svg id="cerrar_radio" xmlns="http://www.w3.org/2000/svg" width="30" height="50" fill="currentColor"
        class="bi bi-chevron-left" viewBox="0 0 16 16">
        <path fill-rule="evenodd"
          d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z">
        </path>
      </svg>
      <svg id="abrir_radio" xmlns="http://www.w3.org/2000/svg" width="30" height="50" fill="currentColor"
        class="bi bi-chevron-left" viewBox="0 0 16 16">
        <path fill-rule="evenodd"
          d="M11.354 1.646a.5.5 0 0 1 0 .708L5.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z">
        </path>
      </svg>
      <iframe src="https://players.radioonlinehd.net/ads/voidscans_radio.html" style="border:none;" scrolling="no"
        frameborder="0" width="160px" height="70"></iframe>
    </div>
    <script>
      const abrir_radio = document.getElementById('abrir_radio');
      const cerrar_radio = document.getElementById('cerrar_radio');
      const radio_content = document.getElementById('radio_content');

      abrir_radio.addEventListener('click', function () {
        radio_content.classList.add('abierto');
        radio_content.classList.remove('cerrado');
      });

      cerrar_radio.addEventListener('click', function () {
        radio_content.classList.remove('abierto');
        radio_content.classList.add('cerrado');
      });
    </script>
  </div><br>
  <div id="content">
    <div class="wrapper">
      <div class="postbody">
        <article id="post-7153" class="post-7153 hentry" itemscope="itemscope"
          itemtype="http://schema.org/CreativeWorkSeries">
          <div class="ts-breadcrumb bixbox">
            <ol itemscope="" itemtype="http://schema.org/BreadcrumbList">
              <li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
                <a itemprop="item" href="https://void-scans.com/"><span itemprop="name">Void Scans</span></a>
                <meta itemprop="position" content="1">
              </li>
              ›
              <li itemprop="itemListElement" itemscope="" itemtype="http://schema.org/ListItem">
                <a itemprop="item" href="https://void-scans.com/manga/questism/"><span
                    itemprop="name">Questism</span></a>
                <meta itemprop="position" content="2">
              </li>
            </ol>
          </div>
          <div class="bixbox animefull">
            <div class="bigcontent nobigcover">
              <div class="thumbook">
                <div class="thumb" itemprop="image" itemscope="" itemtype="https://schema.org/ImageObject">
                  <img width="1000" height="1430"
                    src="https://void-scans.com/wp-content/uploads/questUpRGBnoise_scaleLevel2ttawidth-1000.jpg"
                    class="attachment- size- wp-post-image" alt="Questism" decoding="async" title="Questism"
                    itemprop="image" fetchpriority="high">
                </div>
                <div class="rt">
                  <div data-id="7153" class="bookmark"><i class="far fa-bookmark" aria-hidden="true"></i> Bookmark</div>
                  <div class="bmc">Followed by 6969 people</div>
                  <div class="rating">
                    <div class="rating-prc" itemscope="itemscope" itemprop="aggregateRating"
                      itemtype="//schema.org/AggregateRating">
                      <meta itemprop="worstRating" content="1">
                      <meta itemprop="bestRating" content="10">
                      <meta itemprop="ratingCount" content="10">
                      <div class="rtp">
                        <div class="rtb"><span style="width:79%"></span></div>
                      </div>
                      <div class="num" itemprop="ratingValue" content="7.9">7.9</div>
                    </div>
                  </div>
                  <div class="tsinfo">
                    <div class="imptdt">
                      Status <i>Ongoing</i>
                    </div>
                    <div class="imptdt">
                      Type <a href="/manga/?order=title&amp;type=Manhwa">Manhwa</a>
                    </div>
                  </div>
                </div>
              </div>
              <div class="infox">
                <h1 class="entry-title" itemprop="name">Questism</h1>
                <div class="wd-full">
                  <b>Alternative Titles</b>
                  <span>Quest Supremacism, Quest Supremacy, Quest 至上主義, 任務至上主義, 퀘스트지상주의</span>
                </div>
                <div class="wd-full">
                  <h2>Synopsis Questism</h2>
                  <div class="entry-content entry-content-single" itemprop="description">
                    <p>Gaming geek Suhyeon Kim hates school, and the dislike is mutual. Every day he faces relentless
                      bullying from his classmates, leading him to wish his life was more like the RPG quest games he
                      plays. Suhyeon’s wish is granted when a quest prompt pops up in real life with an easy quest and
                      an enticing reward. With nothing to lose he takes the chance, and one quest soon leads to another.
                      As the stakes get higher and the rewards get bigger, Suhyeon soon finds he’s gone from being an
                      ostracized nobody to the top of the school. Just how far will Suhyeon take his quests, and how far
                      will he fall if he refuses to participate?</p>
                    <p>[metaslider id=”33262″]</p>
                  </div>
                </div>
                <div class="flex-wrap">
                  <div class="fmed">
                    <b>Released</b>
                    <span>
                      2021 </span>
                  </div>
                  <div class="fmed">
                    <b>Author</b>
                    <span>
                      Yu Nuni&nbsp;[Add, ] </span>
                  </div>
                </div>
                <div class="flex-wrap">
                  <div class="fmed">
                    <b>Artist</b>
                    <span>
                      TAEWAN&nbsp;[Add, ] </span>
                  </div>
                </div>
                <div class="flex-wrap">
                  <div class="fmed">
                    <b>Serialization</b>
                    <span>
                      Naver Series (Naver)Naver Webtoon (Naver) </span>
                  </div>
                  <div class="fmed">
                    <b>Posted By</b>
                    <span itemprop="author" itemscope="" itemtype="https://schema.org/Person" class="author vcard">
                      <i itemprop="name">urekkkk</i>
                    </span>
                  </div>
                </div>
                <div class="flex-wrap">
                  <div class="fmed">
                    <b>Posted On</b>
                    <span>
                      <time itemprop="datePublished" datetime="2022-05-31T03:49:30+05:30">May 31, 2022</time>
                    </span>
                  </div>
                  <div class="fmed">
                    <b>Updated On</b>
                    <span>
                      <time itemprop="dateModified" datetime="2023-10-08T22:25:59+05:30">October 8, 2023</time>
                    </span>
                  </div>
                </div>
                <div class="wd-full"><b>Genres</b><span class="mgen"><a href="https://void-scans.com/genres/action/"
                      rel="tag">Action</a> <a href="https://void-scans.com/genres/drama/" rel="tag">Drama</a> <a
                      href="https://void-scans.com/genres/fantasy/" rel="tag">Fantasy</a> <a
                      href="https://void-scans.com/genres/school-life/" rel="tag">School Life</a> <a
                      href="https://void-scans.com/genres/sci-fi/" rel="tag">Sci-fi</a> <a
                      href="https://void-scans.com/genres/shounen/" rel="tag">Shounen</a></span></div>
              </div>
            </div>
            <div class="bottom">
              <strong>Keywords: </strong> read questism, questism english, questism eng, download questism eng, read
              questism online
            </div>
          </div>
          <div class="bixbox bxcl epcheck">
            <div class="releases">
              <h2>Chapter Questism</h2>
            </div>
            <div class="lastend">
              <div class="inepcx">
                <a href="https://void-scans.com/questism-chapter-4/">
                  <span>First Chapter</span>
                  <span class="epcur epcurfirst">Chapter 4</span>
                </a>
              </div>
              <div class="inepcx">
                <a href="https://void-scans.com/questism-chapter-107/">
                  <span>New Chapter</span>
                  <span class="epcur epcurlast">Chapter 107</span>
                </a>
              </div>
            </div>
            <div class="search-chapter">
              <input id="searchchapter" type="text" placeholder="Search Chapter. Example: 25 or 178" autocomplete="off">
            </div>
            <div class="eplister" id="chapterlist">
              <ul>
                <li data-num="107">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-107/">
                        <span class="chapternum">Chapter 107</span>
                        <span class="chapterdate">October 8, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="106">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-106/">
                        <span class="chapternum">Chapter 106</span>
                        <span class="chapterdate">October 1, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="105">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-105/">
                        <span class="chapternum">Chapter 105</span>
                        <span class="chapterdate">September 24, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="104">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-104/">
                        <span class="chapternum">Chapter 104</span>
                        <span class="chapterdate">September 17, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="103">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-103/">
                        <span class="chapternum">Chapter 103</span>
                        <span class="chapterdate">September 11, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="102">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-102/">
                        <span class="chapternum">Chapter 102</span>
                        <span class="chapterdate">September 4, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="101">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-101/">
                        <span class="chapternum">Chapter 101</span>
                        <span class="chapterdate">August 28, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="100">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-100/">
                        <span class="chapternum">Chapter 100</span>
                        <span class="chapterdate">August 21, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="99">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-99/">
                        <span class="chapternum">Chapter 99</span>
                        <span class="chapterdate">August 13, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="98">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-98/">
                        <span class="chapternum">Chapter 98</span>
                        <span class="chapterdate">August 6, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="97">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-97/">
                        <span class="chapternum">Chapter 97</span>
                        <span class="chapterdate">July 30, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="96">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-96/">
                        <span class="chapternum">Chapter 96</span>
                        <span class="chapterdate">July 23, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="95">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-95/">
                        <span class="chapternum">Chapter 95</span>
                        <span class="chapterdate">July 16, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="94">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-94/">
                        <span class="chapternum">Chapter 94</span>
                        <span class="chapterdate">July 9, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="93">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-93/">
                        <span class="chapternum">Chapter 93</span>
                        <span class="chapterdate">July 3, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="92">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-92/">
                        <span class="chapternum">Chapter 92</span>
                        <span class="chapterdate">June 26, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="91">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-91/">
                        <span class="chapternum">Chapter 91</span>
                        <span class="chapterdate">June 19, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="90">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-90/">
                        <span class="chapternum">Chapter 90</span>
                        <span class="chapterdate">June 11, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="89">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-89/">
                        <span class="chapternum">Chapter 89</span>
                        <span class="chapterdate">June 4, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="88">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-88/">
                        <span class="chapternum">Chapter 88</span>
                        <span class="chapterdate">May 29, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="87">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-87/">
                        <span class="chapternum">Chapter 87</span>
                        <span class="chapterdate">May 21, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="86">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-86/">
                        <span class="chapternum">Chapter 86</span>
                        <span class="chapterdate">May 15, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="85">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-85/">
                        <span class="chapternum">Chapter 85</span>
                        <span class="chapterdate">May 7, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="84">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-84/">
                        <span class="chapternum">Chapter 84</span>
                        <span class="chapterdate">April 30, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="83">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-83/">
                        <span class="chapternum">Chapter 83</span>
                        <span class="chapterdate">April 23, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="82">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-82/">
                        <span class="chapternum">Chapter 82</span>
                        <span class="chapterdate">April 16, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="81">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-81/">
                        <span class="chapternum">Chapter 81</span>
                        <span class="chapterdate">April 9, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="80">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-80/">
                        <span class="chapternum">Chapter 80</span>
                        <span class="chapterdate">April 2, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="79">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-79/">
                        <span class="chapternum">Chapter 79</span>
                        <span class="chapterdate">March 26, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="78">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-78/">
                        <span class="chapternum">Chapter 78</span>
                        <span class="chapterdate">March 19, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="77">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-77/">
                        <span class="chapternum">Chapter 77</span>
                        <span class="chapterdate">March 12, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="76">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-76/">
                        <span class="chapternum">Chapter 76</span>
                        <span class="chapterdate">March 5, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="75">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-75/">
                        <span class="chapternum">Chapter 75</span>
                        <span class="chapterdate">February 26, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="74">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-74/">
                        <span class="chapternum">Chapter 74</span>
                        <span class="chapterdate">February 19, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="73">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-73/">
                        <span class="chapternum">Chapter 73</span>
                        <span class="chapterdate">February 12, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="72">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-72/">
                        <span class="chapternum">Chapter 72</span>
                        <span class="chapterdate">February 6, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="71">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-71/">
                        <span class="chapternum">Chapter 71</span>
                        <span class="chapterdate">January 30, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="70">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-70/">
                        <span class="chapternum">Chapter 70</span>
                        <span class="chapterdate">January 22, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="69">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-69/">
                        <span class="chapternum">Chapter 69</span>
                        <span class="chapterdate">January 15, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="68">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-68/">
                        <span class="chapternum">Chapter 68</span>
                        <span class="chapterdate">January 8, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="67">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-67/">
                        <span class="chapternum">Chapter 67</span>
                        <span class="chapterdate">January 2, 2023</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="66">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-66/">
                        <span class="chapternum">Chapter 66</span>
                        <span class="chapterdate">December 25, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="65">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-65/">
                        <span class="chapternum">Chapter 65</span>
                        <span class="chapterdate">December 18, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="64">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-64/">
                        <span class="chapternum">Chapter 64</span>
                        <span class="chapterdate">December 11, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="63">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-63/">
                        <span class="chapternum">Chapter 63</span>
                        <span class="chapterdate">December 11, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="62">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-62/">
                        <span class="chapternum">Chapter 62</span>
                        <span class="chapterdate">December 11, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="61">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-61/">
                        <span class="chapternum">Chapter 61</span>
                        <span class="chapterdate">December 11, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="60">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-60/">
                        <span class="chapternum">Chapter 60</span>
                        <span class="chapterdate">November 17, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="59">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-59/">
                        <span class="chapternum">Chapter 59</span>
                        <span class="chapterdate">November 9, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="58">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-58/">
                        <span class="chapternum">Chapter 58</span>
                        <span class="chapterdate">November 8, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="57">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-57/">
                        <span class="chapternum">Chapter 57</span>
                        <span class="chapterdate">October 29, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="56">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-56/">
                        <span class="chapternum">Chapter 56</span>
                        <span class="chapterdate">October 24, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="55">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-55/">
                        <span class="chapternum">Chapter 55</span>
                        <span class="chapterdate">October 12, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="54">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-54/">
                        <span class="chapternum">Chapter 54</span>
                        <span class="chapterdate">October 3, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="53">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-53/">
                        <span class="chapternum">Chapter 53</span>
                        <span class="chapterdate">September 27, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="52">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-52/">
                        <span class="chapternum">Chapter 52</span>
                        <span class="chapterdate">September 22, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="51">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-51/">
                        <span class="chapternum">Chapter 51</span>
                        <span class="chapterdate">September 22, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="50">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-50/">
                        <span class="chapternum">Chapter 50</span>
                        <span class="chapterdate">September 5, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="49">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-49/">
                        <span class="chapternum">Chapter 49</span>
                        <span class="chapterdate">August 30, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="48">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-48/">
                        <span class="chapternum">Chapter 48</span>
                        <span class="chapterdate">August 23, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="47">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-47/">
                        <span class="chapternum">Chapter 47</span>
                        <span class="chapterdate">August 15, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="46">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-46/">
                        <span class="chapternum">Chapter 46</span>
                        <span class="chapterdate">August 8, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="45">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-45/">
                        <span class="chapternum">Chapter 45</span>
                        <span class="chapterdate">August 3, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="44">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-44/">
                        <span class="chapternum">Chapter 44</span>
                        <span class="chapterdate">July 29, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="43">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-43/">
                        <span class="chapternum">Chapter 43</span>
                        <span class="chapterdate">July 20, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="42">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-42/">
                        <span class="chapternum">Chapter 42</span>
                        <span class="chapterdate">July 20, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="41">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-41/">
                        <span class="chapternum">Chapter 41</span>
                        <span class="chapterdate">July 18, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="40">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-40/">
                        <span class="chapternum">Chapter 40</span>
                        <span class="chapterdate">July 9, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="39">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-39/">
                        <span class="chapternum">Chapter 39</span>
                        <span class="chapterdate">July 9, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="38">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-38/">
                        <span class="chapternum">Chapter 38</span>
                        <span class="chapterdate">July 9, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="37">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-37/">
                        <span class="chapternum">Chapter 37</span>
                        <span class="chapterdate">June 15, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="36">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-36/">
                        <span class="chapternum">Chapter 36</span>
                        <span class="chapterdate">June 15, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="35">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-35/">
                        <span class="chapternum">Chapter 35</span>
                        <span class="chapterdate">June 5, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="34">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-34/">
                        <span class="chapternum">Chapter 34</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="33">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-33/">
                        <span class="chapternum">Chapter 33</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="32">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-32/">
                        <span class="chapternum">Chapter 32</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="31">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-31/">
                        <span class="chapternum">Chapter 31</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="30">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-30/">
                        <span class="chapternum">Chapter 30</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="29">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-29/">
                        <span class="chapternum">Chapter 29</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="28">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-28/">
                        <span class="chapternum">Chapter 28</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="27">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-27/">
                        <span class="chapternum">Chapter 27</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="26">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-26/">
                        <span class="chapternum">Chapter 26</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="25">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-25/">
                        <span class="chapternum">Chapter 25</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="24">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-24/">
                        <span class="chapternum">Chapter 24</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="23">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-23/">
                        <span class="chapternum">Chapter 23</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="22">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-22/">
                        <span class="chapternum">Chapter 22</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="21">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-21/">
                        <span class="chapternum">Chapter 21</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="20">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-20/">
                        <span class="chapternum">Chapter 20</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="19">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-19/">
                        <span class="chapternum">Chapter 19</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="18">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-18/">
                        <span class="chapternum">Chapter 18</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="17">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-17/">
                        <span class="chapternum">Chapter 17</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="16">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-16/">
                        <span class="chapternum">Chapter 16</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="15">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-15/">
                        <span class="chapternum">Chapter 15</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="14">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-14/">
                        <span class="chapternum">Chapter 14</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="13">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-13/">
                        <span class="chapternum">Chapter 13</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="12">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-12/">
                        <span class="chapternum">Chapter 12</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="11">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-11/">
                        <span class="chapternum">Chapter 11</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="10">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-10/">
                        <span class="chapternum">Chapter 10</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="9">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-9/">
                        <span class="chapternum">Chapter 9</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="8">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-8/">
                        <span class="chapternum">Chapter 8</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="7">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-7/">
                        <span class="chapternum">Chapter 7</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="6">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-6/">
                        <span class="chapternum">Chapter 6</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="5">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-5/">
                        <span class="chapternum">Chapter 5</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
                <li data-num="4" class="first-chapter">
                  <div class="chbox">
                    <div class="eph-num">
                      <a href="https://void-scans.com/questism-chapter-4/">
                        <span class="chapternum">Chapter 4</span>
                        <span class="chapterdate">June 1, 2022</span>
                      </a>
                    </div>
                  </div>
                </li>
              </ul>
            </div>
          </div>
          <script>
            var chapterSearchNotFound = "No Chapter Found";
            series_chapters.setFirstChapterData();
            series_chapters.controlSearchInput();

          </script>
          <div id="comments" class="bixbox comments-area">
            <div class="releases">
              <h2><span>Comment</span></h2>
            </div>
            <div class="cmt commentx">
              <div id="disqus_thread"><iframe id="dsq-app8447" name="dsq-app8447" allowtransparency="true"
                  frameborder="0" scrolling="no" tabindex="0" title="Disqus" width="100%"
                  src="https://disqus.com/embed/comments/?base=default&amp;f=void-scans-com-1&amp;t_i=7153%20https%3A%2F%2Finfernalvoidscans.com%2F%3Fpost_type%3Dmanga%26p%3D7153&amp;t_u=https%3A%2F%2Fvoid-scans.com%2Fmanga%2Fquestism%2F&amp;t_e=Questism&amp;t_d=Questism%20-%20Void%20Scans&amp;t_t=Questism&amp;s_o=default#version=4699de2a86f3c790aa59c8d1312129e4"
                  style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 7602px !important;"
                  horizontalscrolling="no" verticalscrolling="no"></iframe><iframe id="indicator-north"
                  name="indicator-north" allowtransparency="true" frameborder="0" scrolling="no" tabindex="0"
                  title="Disqus"
                  style="width: 796px !important; border: none !important; overflow: hidden !important; top: 0px !important; min-width: 796px !important; max-width: 796px !important; position: fixed !important; z-index: 2147483646 !important; height: 0px !important; min-height: 0px !important; max-height: 0px !important; display: none !important;"></iframe><iframe
                  id="indicator-south" name="indicator-south" allowtransparency="true" frameborder="0" scrolling="no"
                  tabindex="0" title="Disqus"
                  style="width: 796px !important; border: none !important; overflow: hidden !important; bottom: 0px !important; min-width: 796px !important; max-width: 796px !important; position: fixed !important; z-index: 2147483646 !important; height: 0px !important; min-height: 0px !important; max-height: 0px !important; display: none !important;"></iframe>
              </div>
            </div>
          </div>
          <div class="bixbox">
            <div class="releases">
              <h2><span>Related Series</span></h2>
            </div>
            <div class="listupd">
              <div class="bs">
                <div class="bsx">
                  <a href="https://void-scans.com/manga/gangho-daeran-life-and-punishment/"
                    title="Gangho Daeran: Life and Punishment">
                    <div class="limit">
                      <div class="ply"></div>
                      <span class="type Manhwa">Manhwa</span> <img
                        src="https://void-scans.com/wp-content/themes/mangastream/assets/images/noimg165px.png"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="165"
                        height="230">
                    </div>
                    <div class="bigor">
                      <div class="tt">
                        Gangho Daeran: Life and Punishment </div>
                      <div class="adds">
                        <div class="epxs">Chapter ?</div>
                        <div class="rt">
                          <div class="rating">
                            <div class="rating-prc">
                              <div class="rtp">
                                <div class="rtb"><span style="width:96%"></span></div>
                              </div>
                            </div>
                            <div class="numscore">9.6</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </a>
                </div>
              </div>
              <div class="bs">
                <div class="bsx">
                  <a href="https://void-scans.com/manga/the-lazy-swordmaster/" title="The Lazy Swordmaster">
                    <div class="limit">
                      <div class="ply"></div>
                      <span class="type Manhwa">Manhwa</span> <img
                        src="https://void-scans.com/wp-content/uploads/2022/05/unnamed-file-214x300.jpg"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="214"
                        height="300">
                    </div>
                    <div class="bigor">
                      <div class="tt">
                        The Lazy Swordmaster </div>
                      <div class="adds">
                        <div class="epxs">Chapter 95</div>
                        <div class="rt">
                          <div class="rating">
                            <div class="rating-prc">
                              <div class="rtp">
                                <div class="rtb"><span style="width:100%"></span></div>
                              </div>
                            </div>
                            <div class="numscore">10</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </a>
                </div>
              </div>
              <div class="bs">
                <div class="bsx">
                  <a href="https://void-scans.com/manga/hand-over-the-money/" title="Hand over the Money!">
                    <div class="limit">
                      <div class="ply"></div>
                      <span class="type Manhwa">Manhwa</span> <img
                        src="https://void-scans.com/wp-content/uploads/thumbnail_IMAG21_72.webp"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="960"
                        height="1246">
                    </div>
                    <div class="bigor">
                      <div class="tt">
                        Hand over the Money! </div>
                      <div class="adds">
                        <div class="epxs">Chapter 17</div>
                        <div class="rt">
                          <div class="rating">
                            <div class="rating-prc">
                              <div class="rtp">
                                <div class="rtb"><span style="width:98%"></span></div>
                              </div>
                            </div>
                            <div class="numscore">9.8</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </a>
                </div>
              </div>
              <div class="bs">
                <div class="bsx">
                  <a href="https://void-scans.com/manga/start-raising-dragons-from-today/"
                    title="Start Raising Dragons From Today">
                    <div class="limit">
                      <div class="ply"></div>
                      <span class="type Manhua">Manhua</span> <img
                        src="https://void-scans.com/wp-content/uploads/2022/08/congjintiankaishiyanglong-xiazieyuanzhucaimogehuizhi-226x300.jpg"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="226"
                        height="300">
                    </div>
                    <div class="bigor">
                      <div class="tt">
                        Start Raising Dragons From Today </div>
                      <div class="adds">
                        <div class="epxs">Chapter 15</div>
                        <div class="rt">
                          <div class="rating">
                            <div class="rating-prc">
                              <div class="rtp">
                                <div class="rtb"><span style="width:92%"></span></div>
                              </div>
                            </div>
                            <div class="numscore">9.2</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </a>
                </div>
              </div>
              <div class="bs">
                <div class="bsx">
                  <a href="https://void-scans.com/manga/king-game/" title="King Game">
                    <div class="limit">
                      <div class="ply"></div>
                      <span class="type Manhwa">Manhwa</span> <img
                        src="https://void-scans.com/wp-content/uploads/2022/08/¿O°OAO_A¯·aE_C_5Ao-690x1000-1-207x300.jpg"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="207"
                        height="300">
                    </div>
                    <div class="bigor">
                      <div class="tt">
                        King Game </div>
                      <div class="adds">
                        <div class="epxs">Chapter 8</div>
                        <div class="rt">
                          <div class="rating">
                            <div class="rating-prc">
                              <div class="rtp">
                                <div class="rtb"><span style="width:100%"></span></div>
                              </div>
                            </div>
                            <div class="numscore">10</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </a>
                </div>
              </div>
            </div>
          </div>
          <span style="display: none;" itemprop="publisher" itemscope="" itemtype="https://schema.org/Organization">
            <span style="display: none;" itemprop="logo" itemscope="" itemtype="https://schema.org/ImageObject">
              <meta itemprop="url" content="https://void-scans.com/wp-content/uploads/cropped-weblogo-1.png">
            </span>
            <meta itemprop="name" content="Void Scans">
          </span>
        </article>
      </div>
      <script>jQuery(document).ready(function () { jQuery.ajax({ url: ajaxurl, type: 'post', data: { action: 'dynamic_view_ajax', post_id: 7153 }, success: function (response) { } }); });</script>
      <div id="sidebar">
        <div class="widget_text section">
          <div class="textwidget custom-html-widget">
            <div class="releases">
              <h3>Support US</h3>
            </div>
            <div class="textwidget custom-html-widget">
              <style>
                .socialbutton {
                  display: flex;
                  flex-direction: row;
                  gap: 4px;
                }
              </style>
              <div class="socialbutton">
                &nbsp;&nbsp;&nbsp;&nbsp;<br>
                <a href="https://discord.gg/gxK8JsDUMM" class="scfb" target="_blank" rel="noopener"><i
                    class="fab fa-discord fa-5x"></i></a><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
                <a href="https://paypal.me/anggitprayogo" class="sctw" target="_blank" rel="noopener"><i
                    class="fab fa-paypal fa-5x"></i></a><br>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>
                <a href="https://www.patreon.com/InfernalVoidScans" class="scig" target="_blank" rel="noopener"><i
                    class="fab fa-patreon fa-5x"></i></a>
              </div>
            </div>
          </div>
        </div>
        <div class="widget_text section">
          <div class="releases">
            <h3>Discord server</h3>
          </div>
          <div class="textwidget custom-html-widget"><iframe
              src="https://discord.com/widget?id=863082264451219465&amp;theme=dark" width="320" height="500"
              allowtransparency="true" frameborder="0"
              sandbox="allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts"></iframe></div>
        </div>
        <div class="section">
          <div class="ts-wpop-series-gen">
            <ul class="ts-wpop-nav-tabs">
              <li class="active"><a class="ts-wpop-tab" data-range="weekly">Weekly</a></li>
              <li><a class="ts-wpop-tab" data-range="monthly">Monthly</a></li>
              <li><a class="ts-wpop-tab" data-range="alltime">All</a></li>
            </ul>
          </div>
          <div id="wpop-items">
            <div class="serieslist pop wpop wpop-weekly" style="">
              <ul>
                <li>
                  <div class="ctr">1</div>
                  <div class="imgseries"><a class="series" href="https://void-scans.com/manga/lookism1/" rel="7283"><img
                        src="https://void-scans.com/wp-content/uploads/2022/05/k372635749_1-212x300.jpg"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="212"
                        height="300"> </a></div>
                  <div class="leftseries">
                    <h2><a class="series" href="https://void-scans.com/manga/lookism1/" rel="7283">Lookism</a></h2>
                    <span><b>Genres</b>: <a href="https://void-scans.com/genres/action/" rel="tag">Action</a>, <a
                        href="https://void-scans.com/genres/comedy/" rel="tag">Comedy</a>, <a
                        href="https://void-scans.com/genres/drama/" rel="tag">Drama</a>, <a
                        href="https://void-scans.com/genres/school-life/" rel="tag">School Life</a>, <a
                        href="https://void-scans.com/genres/shounen/" rel="tag">Shounen</a>, <a
                        href="https://void-scans.com/genres/supernatural/" rel="tag">Supernatural</a></span>
                    <div class="rt">
                      <div class="rating">
                        <div class="rating-prc">
                          <div class="rtp">
                            <div class="rtb"><span style="width:100%"></span></div>
                          </div>
                        </div>
                        <div class="numscore">10</div>
                      </div>
                    </div>
                  </div>
                </li>
                <li>
                  <div class="ctr">2</div>
                  <div class="imgseries"><a class="series"
                      href="https://void-scans.com/manga/the-constellations-are-my-disciples/" rel="81616"><img
                        src="https://void-scans.com/wp-content/uploads/img.png"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="1440"
                        height="2049"> </a></div>
                  <div class="leftseries">
                    <h2><a class="series" href="https://void-scans.com/manga/the-constellations-are-my-disciples/"
                        rel="81616">The Constellations Are My Disciples</a></h2><span><b>Genres</b>: <a
                        href="https://void-scans.com/genres/action/" rel="tag">Action</a>, <a
                        href="https://void-scans.com/genres/drama/" rel="tag">Drama</a>, <a
                        href="https://void-scans.com/genres/isekai/" rel="tag">Isekai</a></span>
                    <div class="rt">
                      <div class="rating">
                        <div class="rating-prc">
                          <div class="rtp">
                            <div class="rtb"><span style="width:82%"></span></div>
                          </div>
                        </div>
                        <div class="numscore">8.2</div>
                      </div>
                    </div>
                  </div>
                </li>
                <li>
                  <div class="ctr">3</div>
                  <div class="imgseries"><a class="series" href="https://void-scans.com/manga/the-bully-in-charge/"
                      rel="15955"><img src="https://void-scans.com/wp-content/uploads/2022/07/300_430-209x300.jpg"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="209"
                        height="300"> </a></div>
                  <div class="leftseries">
                    <h2><a class="series" href="https://void-scans.com/manga/the-bully-in-charge/" rel="15955">The Bully
                        In-Charge</a></h2><span><b>Genres</b>: <a href="https://void-scans.com/genres/action/"
                        rel="tag">Action</a>, <a href="https://void-scans.com/genres/drama/" rel="tag">Drama</a>, <a
                        href="https://void-scans.com/genres/seinen/" rel="tag">Seinen</a></span>
                    <div class="rt">
                      <div class="rating">
                        <div class="rating-prc">
                          <div class="rtp">
                            <div class="rtb"><span style="width:100%"></span></div>
                          </div>
                        </div>
                        <div class="numscore">10</div>
                      </div>
                    </div>
                  </div>
                </li>
                <li>
                  <div class="ctr">4</div>
                  <div class="imgseries"><a class="series" href="https://void-scans.com/manga/questism/" rel="7153"><img
                        src="https://void-scans.com/wp-content/uploads/questUpRGBnoise_scaleLevel2ttawidth-1000.jpg"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="1000"
                        height="1430"> </a></div>
                  <div class="leftseries">
                    <h2><a class="series" href="https://void-scans.com/manga/questism/" rel="7153">Questism</a></h2>
                    <span><b>Genres</b>: <a href="https://void-scans.com/genres/action/" rel="tag">Action</a>, <a
                        href="https://void-scans.com/genres/drama/" rel="tag">Drama</a>, <a
                        href="https://void-scans.com/genres/fantasy/" rel="tag">Fantasy</a>, <a
                        href="https://void-scans.com/genres/school-life/" rel="tag">School Life</a>, <a
                        href="https://void-scans.com/genres/sci-fi/" rel="tag">Sci-fi</a>, <a
                        href="https://void-scans.com/genres/shounen/" rel="tag">Shounen</a></span>
                    <div class="rt">
                      <div class="rating">
                        <div class="rating-prc">
                          <div class="rtp">
                            <div class="rtb"><span style="width:79%"></span></div>
                          </div>
                        </div>
                        <div class="numscore">7.9</div>
                      </div>
                    </div>
                  </div>
                </li>
                <li>
                  <div class="ctr">5</div>
                  <div class="imgseries"><a class="series"
                      href="https://void-scans.com/manga/han-dae-sung-returned-from-hell/" rel="82502"><img
                        src="https://void-scans.com/wp-content/uploads/4109ecf868e7bb27e1f42d04e6c887b5UpRGBnoise_scaleLevel3ttaheight-1500-copy.jpg"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="998"
                        height="1500"> </a></div>
                  <div class="leftseries">
                    <h2><a class="series" href="https://void-scans.com/manga/han-dae-sung-returned-from-hell/"
                        rel="82502">Han Dae Sung Returned From Hell</a></h2><span><b>Genres</b>: <a
                        href="https://void-scans.com/genres/action/" rel="tag">Action</a>, <a
                        href="https://void-scans.com/genres/adventure/" rel="tag">Adventure</a>, <a
                        href="https://void-scans.com/genres/drama/" rel="tag">Drama</a>, <a
                        href="https://void-scans.com/genres/fantasy/" rel="tag">Fantasy</a>, <a
                        href="https://void-scans.com/genres/seinen/" rel="tag">Seinen</a>, <a
                        href="https://void-scans.com/genres/supernatural/" rel="tag">Supernatural</a></span>
                    <div class="rt">
                      <div class="rating">
                        <div class="rating-prc">
                          <div class="rtp">
                            <div class="rtb"><span style="width:89%"></span></div>
                          </div>
                        </div>
                        <div class="numscore">8.9</div>
                      </div>
                    </div>
                  </div>
                </li>
              </ul>
            </div>
            <div class="serieslist pop wpop wpop-monthly" style="display: none;">
              <ul>
                <li>
                  <div class="ctr">1</div>
                  <div class="imgseries"><a class="series" href="https://void-scans.com/manga/lookism1/" rel="7283"><img
                        src="https://void-scans.com/wp-content/uploads/2022/05/k372635749_1-212x300.jpg"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="212"
                        height="300"> </a></div>
                  <div class="leftseries">
                    <h2><a class="series" href="https://void-scans.com/manga/lookism1/" rel="7283">Lookism</a></h2>
                    <span><b>Genres</b>: <a href="https://void-scans.com/genres/action/" rel="tag">Action</a>, <a
                        href="https://void-scans.com/genres/comedy/" rel="tag">Comedy</a>, <a
                        href="https://void-scans.com/genres/drama/" rel="tag">Drama</a>, <a
                        href="https://void-scans.com/genres/school-life/" rel="tag">School Life</a>, <a
                        href="https://void-scans.com/genres/shounen/" rel="tag">Shounen</a>, <a
                        href="https://void-scans.com/genres/supernatural/" rel="tag">Supernatural</a></span>
                    <div class="rt">
                      <div class="rating">
                        <div class="rating-prc">
                          <div class="rtp">
                            <div class="rtb"><span style="width:100%"></span></div>
                          </div>
                        </div>
                        <div class="numscore">10</div>
                      </div>
                    </div>
                  </div>
                </li>
                <li>
                  <div class="ctr">2</div>
                  <div class="imgseries"><a class="series" href="https://void-scans.com/manga/the-bully-in-charge/"
                      rel="15955"><img src="https://void-scans.com/wp-content/uploads/2022/07/300_430-209x300.jpg"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="209"
                        height="300"> </a></div>
                  <div class="leftseries">
                    <h2><a class="series" href="https://void-scans.com/manga/the-bully-in-charge/" rel="15955">The Bully
                        In-Charge</a></h2><span><b>Genres</b>: <a href="https://void-scans.com/genres/action/"
                        rel="tag">Action</a>, <a href="https://void-scans.com/genres/drama/" rel="tag">Drama</a>, <a
                        href="https://void-scans.com/genres/seinen/" rel="tag">Seinen</a></span>
                    <div class="rt">
                      <div class="rating">
                        <div class="rating-prc">
                          <div class="rtp">
                            <div class="rtb"><span style="width:100%"></span></div>
                          </div>
                        </div>
                        <div class="numscore">10</div>
                      </div>
                    </div>
                  </div>
                </li>
                <li>
                  <div class="ctr">3</div>
                  <div class="imgseries"><a class="series"
                      href="https://void-scans.com/manga/the-constellations-are-my-disciples/" rel="81616"><img
                        src="https://void-scans.com/wp-content/uploads/img.png"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="1440"
                        height="2049"> </a></div>
                  <div class="leftseries">
                    <h2><a class="series" href="https://void-scans.com/manga/the-constellations-are-my-disciples/"
                        rel="81616">The Constellations Are My Disciples</a></h2><span><b>Genres</b>: <a
                        href="https://void-scans.com/genres/action/" rel="tag">Action</a>, <a
                        href="https://void-scans.com/genres/drama/" rel="tag">Drama</a>, <a
                        href="https://void-scans.com/genres/isekai/" rel="tag">Isekai</a></span>
                    <div class="rt">
                      <div class="rating">
                        <div class="rating-prc">
                          <div class="rtp">
                            <div class="rtb"><span style="width:82%"></span></div>
                          </div>
                        </div>
                        <div class="numscore">8.2</div>
                      </div>
                    </div>
                  </div>
                </li>
                <li>
                  <div class="ctr">4</div>
                  <div class="imgseries"><a class="series"
                      href="https://void-scans.com/manga/han-dae-sung-returned-from-hell/" rel="82502"><img
                        src="https://void-scans.com/wp-content/uploads/4109ecf868e7bb27e1f42d04e6c887b5UpRGBnoise_scaleLevel3ttaheight-1500-copy.jpg"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="998"
                        height="1500"> </a></div>
                  <div class="leftseries">
                    <h2><a class="series" href="https://void-scans.com/manga/han-dae-sung-returned-from-hell/"
                        rel="82502">Han Dae Sung Returned From Hell</a></h2><span><b>Genres</b>: <a
                        href="https://void-scans.com/genres/action/" rel="tag">Action</a>, <a
                        href="https://void-scans.com/genres/adventure/" rel="tag">Adventure</a>, <a
                        href="https://void-scans.com/genres/drama/" rel="tag">Drama</a>, <a
                        href="https://void-scans.com/genres/fantasy/" rel="tag">Fantasy</a>, <a
                        href="https://void-scans.com/genres/seinen/" rel="tag">Seinen</a>, <a
                        href="https://void-scans.com/genres/supernatural/" rel="tag">Supernatural</a></span>
                    <div class="rt">
                      <div class="rating">
                        <div class="rating-prc">
                          <div class="rtp">
                            <div class="rtb"><span style="width:89%"></span></div>
                          </div>
                        </div>
                        <div class="numscore">8.9</div>
                      </div>
                    </div>
                  </div>
                </li>
                <li>
                  <div class="ctr">5</div>
                  <div class="imgseries"><a class="series" href="https://void-scans.com/manga/questism/" rel="7153"><img
                        src="https://void-scans.com/wp-content/uploads/questUpRGBnoise_scaleLevel2ttawidth-1000.jpg"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="1000"
                        height="1430"> </a></div>
                  <div class="leftseries">
                    <h2><a class="series" href="https://void-scans.com/manga/questism/" rel="7153">Questism</a></h2>
                    <span><b>Genres</b>: <a href="https://void-scans.com/genres/action/" rel="tag">Action</a>, <a
                        href="https://void-scans.com/genres/drama/" rel="tag">Drama</a>, <a
                        href="https://void-scans.com/genres/fantasy/" rel="tag">Fantasy</a>, <a
                        href="https://void-scans.com/genres/school-life/" rel="tag">School Life</a>, <a
                        href="https://void-scans.com/genres/sci-fi/" rel="tag">Sci-fi</a>, <a
                        href="https://void-scans.com/genres/shounen/" rel="tag">Shounen</a></span>
                    <div class="rt">
                      <div class="rating">
                        <div class="rating-prc">
                          <div class="rtp">
                            <div class="rtb"><span style="width:79%"></span></div>
                          </div>
                        </div>
                        <div class="numscore">7.9</div>
                      </div>
                    </div>
                  </div>
                </li>
              </ul>
            </div>
            <div class="serieslist pop wpop wpop-alltime" style="display: none;">
              <ul>
                <li>
                  <div class="ctr">1</div>
                  <div class="imgseries"><a class="series" href="https://void-scans.com/manga/lookism1/" rel="7283"><img
                        src="https://void-scans.com/wp-content/uploads/2022/05/k372635749_1-212x300.jpg"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="212"
                        height="300"> </a></div>
                  <div class="leftseries">
                    <h2><a class="series" href="https://void-scans.com/manga/lookism1/" rel="7283">Lookism</a></h2>
                    <span><b>Genres</b>: <a href="https://void-scans.com/genres/action/" rel="tag">Action</a>, <a
                        href="https://void-scans.com/genres/comedy/" rel="tag">Comedy</a>, <a
                        href="https://void-scans.com/genres/drama/" rel="tag">Drama</a>, <a
                        href="https://void-scans.com/genres/school-life/" rel="tag">School Life</a>, <a
                        href="https://void-scans.com/genres/shounen/" rel="tag">Shounen</a>, <a
                        href="https://void-scans.com/genres/supernatural/" rel="tag">Supernatural</a></span>
                    <div class="rt">
                      <div class="rating">
                        <div class="rating-prc">
                          <div class="rtp">
                            <div class="rtb"><span style="width:100%"></span></div>
                          </div>
                        </div>
                        <div class="numscore">10</div>
                      </div>
                    </div>
                  </div>
                </li>
                <li>
                  <div class="ctr">2</div>
                  <div class="imgseries"><a class="series" href="https://void-scans.com/manga/the-bully-in-charge/"
                      rel="15955"><img src="https://void-scans.com/wp-content/uploads/2022/07/300_430-209x300.jpg"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="209"
                        height="300"> </a></div>
                  <div class="leftseries">
                    <h2><a class="series" href="https://void-scans.com/manga/the-bully-in-charge/" rel="15955">The Bully
                        In-Charge</a></h2><span><b>Genres</b>: <a href="https://void-scans.com/genres/action/"
                        rel="tag">Action</a>, <a href="https://void-scans.com/genres/drama/" rel="tag">Drama</a>, <a
                        href="https://void-scans.com/genres/seinen/" rel="tag">Seinen</a></span>
                    <div class="rt">
                      <div class="rating">
                        <div class="rating-prc">
                          <div class="rtp">
                            <div class="rtb"><span style="width:100%"></span></div>
                          </div>
                        </div>
                        <div class="numscore">10</div>
                      </div>
                    </div>
                  </div>
                </li>
                <li>
                  <div class="ctr">3</div>
                  <div class="imgseries"><a class="series" href="https://void-scans.com/manga/maybe-meant-to-be/"
                      rel="6591"><img
                        src="https://void-scans.com/wp-content/uploads/2022/05/maybe-meant-to-be-1-285x400-1-214x300.webp"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="214"
                        height="300"> </a></div>
                  <div class="leftseries">
                    <h2><a class="series" href="https://void-scans.com/manga/maybe-meant-to-be/" rel="6591">Maybe Meant
                        to Be</a></h2><span><b>Genres</b>: <a href="https://void-scans.com/genres/comedy/"
                        rel="tag">Comedy</a>, <a href="https://void-scans.com/genres/drama/" rel="tag">Drama</a>, <a
                        href="https://void-scans.com/genres/josei/" rel="tag">Josei</a>, <a
                        href="https://void-scans.com/genres/romance/" rel="tag">romance</a></span>
                    <div class="rt">
                      <div class="rating">
                        <div class="rating-prc">
                          <div class="rtp">
                            <div class="rtb"><span style="width:89%"></span></div>
                          </div>
                        </div>
                        <div class="numscore">8.9</div>
                      </div>
                    </div>
                  </div>
                </li>
                <li>
                  <div class="ctr">4</div>
                  <div class="imgseries"><a class="series" href="https://void-scans.com/manga/questism/" rel="7153"><img
                        src="https://void-scans.com/wp-content/uploads/questUpRGBnoise_scaleLevel2ttawidth-1000.jpg"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="1000"
                        height="1430"> </a></div>
                  <div class="leftseries">
                    <h2><a class="series" href="https://void-scans.com/manga/questism/" rel="7153">Questism</a></h2>
                    <span><b>Genres</b>: <a href="https://void-scans.com/genres/action/" rel="tag">Action</a>, <a
                        href="https://void-scans.com/genres/drama/" rel="tag">Drama</a>, <a
                        href="https://void-scans.com/genres/fantasy/" rel="tag">Fantasy</a>, <a
                        href="https://void-scans.com/genres/school-life/" rel="tag">School Life</a>, <a
                        href="https://void-scans.com/genres/sci-fi/" rel="tag">Sci-fi</a>, <a
                        href="https://void-scans.com/genres/shounen/" rel="tag">Shounen</a></span>
                    <div class="rt">
                      <div class="rating">
                        <div class="rating-prc">
                          <div class="rtp">
                            <div class="rtb"><span style="width:79%"></span></div>
                          </div>
                        </div>
                        <div class="numscore">7.9</div>
                      </div>
                    </div>
                  </div>
                </li>
                <li>
                  <div class="ctr">5</div>
                  <div class="imgseries"><a class="series" href="https://void-scans.com/manga/the-lazy-swordmaster/"
                      rel="4908"><img src="https://void-scans.com/wp-content/uploads/2022/05/unnamed-file-214x300.jpg"
                        class="ts-post-image wp-post-image attachment-medium size-medium" loading="lazy" width="214"
                        height="300"> </a></div>
                  <div class="leftseries">
                    <h2><a class="series" href="https://void-scans.com/manga/the-lazy-swordmaster/" rel="4908">The Lazy
                        Swordmaster</a></h2><span><b>Genres</b>: <a href="https://void-scans.com/genres/action/"
                        rel="tag">Action</a>, <a href="https://void-scans.com/genres/adventure/"
                        rel="tag">Adventure</a>, <a href="https://void-scans.com/genres/comedy/" rel="tag">Comedy</a>,
                      <a href="https://void-scans.com/genres/drama/" rel="tag">Drama</a>, <a
                        href="https://void-scans.com/genres/fantasy/" rel="tag">Fantasy</a>, <a
                        href="https://void-scans.com/genres/shounen/" rel="tag">Shounen</a>, <a
                        href="https://void-scans.com/genres/slice-of-life/" rel="tag">Slice of Life</a>, <a
                        href="https://void-scans.com/genres/supernatural/" rel="tag">Supernatural</a></span>
                    <div class="rt">
                      <div class="rating">
                        <div class="rating-prc">
                          <div class="rtp">
                            <div class="rtb"><span style="width:100%"></span></div>
                          </div>
                        </div>
                        <div class="numscore">10</div>
                      </div>
                    </div>
                  </div>
                </li>
              </ul>
            </div>
          </div>
        </div>
        <script>ts_popular_widget.run(1697311565);</script>

      </div>
    </div>
  </div>
  <div id="footer">
    <footer id="colophon" class="site-footer" itemscope="itemscope" itemtype="http://schema.org/WPFooter"
      role="contentinfo">
      <div class="footermenu">
        <div class="menu-menu-container">
          <ul id="menu-menu-1" class="menu">
            <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-18"><a
                href="https://void-scans.com" itemprop="url">Home</a></li>
            <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-17"><a
                href="https://void-scans.com/projects/" itemprop="url">Projects</a></li>
            <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-4736"><a
                href="https://void-scans.com/genres/" itemprop="url">Genres</a></li>
            <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-16"><a
                href="https://void-scans.com/az-list/" itemprop="url">AZ-list</a></li>
            <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-19"><a
                href="https://discord.gg/aJuHK9V3cY" itemprop="url">Discord</a></li>
            <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-13863"><a
                href="https://void-scans.com/privacy-policy-2/" itemprop="url">Privacy Policy</a></li>
            <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-13864"><a
                href="https://void-scans.com/digital-millennium-copyright-act/" itemprop="url">Digital Millennium
                Copyright Act</a></li>
          </ul>
        </div>
      </div>
      <div class="footercopyright">
        <div class="footer-az">
          <span class="ftaz">A-Z LIST</span><span class="size-s">Find manga from A to Z.</span>
          <ul class="ulclear az-list">
            <li><a href="https://void-scans.com/az-list/?show=.">#</a></li>
            <li><a href="https://void-scans.com/az-list/?show=0-9">0-9</a></li>
            <li><a href="https://void-scans.com/az-list/?show=A">A</a></li>
            <li><a href="https://void-scans.com/az-list/?show=B">B</a></li>
            <li><a href="https://void-scans.com/az-list/?show=C">C</a></li>
            <li><a href="https://void-scans.com/az-list/?show=D">D</a></li>
            <li><a href="https://void-scans.com/az-list/?show=E">E</a></li>
            <li><a href="https://void-scans.com/az-list/?show=F">F</a></li>
            <li><a href="https://void-scans.com/az-list/?show=G">G</a></li>
            <li><a href="https://void-scans.com/az-list/?show=H">H</a></li>
            <li><a href="https://void-scans.com/az-list/?show=I">I</a></li>
            <li><a href="https://void-scans.com/az-list/?show=J">J</a></li>
            <li><a href="https://void-scans.com/az-list/?show=K">K</a></li>
            <li><a href="https://void-scans.com/az-list/?show=L">L</a></li>
            <li><a href="https://void-scans.com/az-list/?show=M">M</a></li>
            <li><a href="https://void-scans.com/az-list/?show=N">N</a></li>
            <li><a href="https://void-scans.com/az-list/?show=O">O</a></li>
            <li><a href="https://void-scans.com/az-list/?show=P">P</a></li>
            <li><a href="https://void-scans.com/az-list/?show=Q">Q</a></li>
            <li><a href="https://void-scans.com/az-list/?show=R">R</a></li>
            <li><a href="https://void-scans.com/az-list/?show=S">S</a></li>
            <li><a href="https://void-scans.com/az-list/?show=T">T</a></li>
            <li><a href="https://void-scans.com/az-list/?show=U">U</a></li>
            <li><a href="https://void-scans.com/az-list/?show=V">V</a></li>
            <li><a href="https://void-scans.com/az-list/?show=W">W</a></li>
            <li><a href="https://void-scans.com/az-list/?show=X">X</a></li>
            <li><a href="https://void-scans.com/az-list/?show=Y">Y</a></li>
            <li><a href="https://void-scans.com/az-list/?show=Z">Z</a></li>
          </ul>
          <div class="clear"></div>
        </div>
        <div class="copyright">
          <div class="footer-logo"><img width="512" height="512"
              src="https://void-scans.com/wp-content/uploads/cropped-weblogo-1.png" title="" alt=""></div>
          <div class="txt">
            <p>All the comics on this website are only previews of the original comics, there may be many language
              errors, character names, and story lines. For the original version, please buy the comic if it's available
              in your city.</p>
          </div>
        </div>
        <div class="ftnaru"></div>
      </div>
    </footer>
  </div>
  <style id="multiple-file-upload">
    /* Delete Status */
    .dnd-icon-remove.deleting {
      font-size: 12px;
      color: #000;
      font-weight: 500;
      position: relative;
      top: -3px;
    }

    .dnd-icon-remove.deleting:after {
      display: none !important;
    }

    .wpcf7-drag-n-drop-file.d-none {
      display: none;
      opacity: 0;
      visibility: hidden;
      position: absolute;
      top: 0;
    }

    /* Upload Status */
    .dnd-upload-status {
      display: flex;
      padding: 4px 0;
      align-items: center;
      position: relative;
    }

    /* Progress bar - Image */
    .dnd-upload-status .dnd-upload-image {
      width: 40px;
      height: 40px;
      border: 1px solid #a5a5a5;
      text-align: center;
      border-radius: 100%;
      position: relative;
    }

    .dnd-upload-status .dnd-upload-image span.file {
      background-image: url("data:image/svg+xml,%0A%3Csvg width='18' height='23' viewBox='0 0 18 23' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12.569 0.659576H0.5V23H18V6.09053L12.569 0.659576ZM12.7872 1.93075L16.7288 5.87234H12.7872V1.93075ZM1.24468 22.2553V1.40426H12.0426V6.61702H17.2553V22.2553H1.24468Z' fill='%235C5B5B'/%3E%3C/svg%3E%0A");
      background-repeat: no-repeat;
      background-size: 100%;
      height: 21px;
      width: 16px;
      display: block;
      position: absolute;
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      -moz-transform: translate(-50%, -50%);
      -webkit-transform: translate(-50%, -50%);
    }

    /* Progress bar - Image Details ( Name and Size ) */
    .dnd-upload-status .dnd-upload-details {
      padding-left: 10px;
      width: calc(100% - 40px);
    }

    .dnd-upload-status .dnd-upload-details .name {
      color: #016d98;
      padding: 4px 0;
      padding-right: 60px;
      display: flex;
    }

    .dnd-upload-status .dnd-upload-details .name span {
      text-overflow: ellipsis;
      white-space: nowrap;
      overflow: hidden;
      position: relative;
      padding-right: 10px;
    }

    .dnd-upload-status .dnd-upload-details .name em {
      color: #444242;
      font-weight: 700;
    }

    /* Remove Upload File */
    .dnd-upload-status .dnd-upload-details .remove-file {
      position: absolute;
      right: 0;
      top: 10px;
      text-decoration: none;
      box-shadow: none;
      outline: none;
      opacity: 1;
    }

    .dnd-upload-status .dnd-upload-details .remove-file span:after {
      content: '';
      width: 15px;
      height: 15px;
      display: block;
      background-repeat: no-repeat;
      background-size: 100%;
      background-image: url("data:image/svg+xml,%3Csvg width='35' height='35' viewBox='0 0 35 35' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M17.5 0C7.83499 0 0 7.83499 0 17.5C0 27.165 7.83499 35 17.5 35C27.165 35 35 27.165 35 17.5C34.9888 7.83965 27.1604 0.0112198 17.5 0ZM17.5 33.871C8.45857 33.871 1.12903 26.5414 1.12903 17.5C1.12903 8.45857 8.45857 1.12903 17.5 1.12903C26.5414 1.12903 33.871 8.45857 33.871 17.5C33.861 26.5373 26.5373 33.861 17.5 33.871Z' fill='black'/%3E%3Cpath d='M25.4834 9.51661C25.2629 9.29624 24.9056 9.29624 24.6852 9.51661L17.5 16.7018L10.3148 9.51661C10.0983 9.29236 9.74087 9.28615 9.51661 9.50271C9.29236 9.71927 9.28615 10.0767 9.50271 10.3009C9.50723 10.3057 9.51188 10.3103 9.51661 10.3148L16.7018 17.5L9.51661 24.6852C9.29236 24.9018 9.28615 25.2591 9.50278 25.4834C9.71941 25.7076 10.0768 25.7139 10.301 25.4972C10.3057 25.4927 10.3103 25.488 10.3148 25.4834L17.5 18.2982L24.6852 25.4834C24.9094 25.7 25.2668 25.6938 25.4834 25.4696C25.6947 25.2508 25.6947 24.9039 25.4834 24.6852L18.2982 17.5L25.4834 10.3148C25.7038 10.0944 25.7038 9.73705 25.4834 9.51661Z' fill='black'/%3E%3C/svg%3E%0A");
    }

    .dnd-upload-status.in-progress .remove-file {
      opacity: 0.2;
    }

    .dnd-upload-status .dnd-upload-details span.has-error {
      color: #f50505;
    }

    /* Progress Loading */
    .dnd-upload-status .dnd-upload-details .dnd-progress-bar {
      display: block;
      border-radius: 5px;
      overflow: hidden;
      background: #565555;
      height: 14px;
    }

    .dnd-upload-status .dnd-upload-details .dnd-progress-bar span {
      background: #4CAF50;
      display: block;
      font-size: 11px;
      text-align: right;
      color: #fff;
      height: 100%;
      width: 0;
      line-height: 14px;
    }

    .dnd-upload-status .dnd-upload-details .dnd-progress-bar span.complete {
      width: 100% !important;
      padding-right: 5px;
    }

    .dnd-upload-counter {
      position: absolute;
      right: 5px;
      bottom: 3px;
      font-size: 12px;
    }

    /* CodeDropz Upload Plugin */
    .codedropz-upload-handler {
      border: 2px dashed #c5c5c5;
      border-radius: 5px;
      margin-bottom: 10px;
      position: relative;
    }

    .codedropz-upload-container {
      padding: 15px 20px;
    }

    .codedropz-upload-inner {
      overflow: hidden;
      width: 100%;
      /*white-space: nowrap;*/
      text-align: center;
      text-overflow: ellipsis;
      font-weight: inherit;
    }

    .codedropz-upload-inner .codedropz-btn-wrap a.cd-upload-btn {
      text-decoration: none;
      box-shadow: none;
    }

    .codedropz-upload-inner h3 {
      margin: 5px 0;
      font-size: 30px;
      line-height: 32px;
      word-break: break-word;
    }

    /* Add border on dragenter, drag etc */
    .codedropz-dragover {
      border-color: #6b6a6a;
    }

    .codedropz-upload-wrapper span.has-error-msg {
      display: inline-block;
      color: #ff0000;
      padding: 5px 0;
      font-style: italic;
    }

    /* Jquery Validation For Contact Form 7 */
    .wpcf7-form label.error-new {
      color: #900;
      font-size: 11px;
      float: none;
      padding-left: 5px;
    }

    .wpcf7-form .codedropz-upload-wrapper.invalid .codedropz-upload-handler {
      border-bottom-color: #900;
      border-bottom-style: solid;
    }

    /* END : Jquery Validation CF7 */

    @media screen and (max-width: 767px) {
      .dnd-upload-status .dnd-upload-details .name em {
        font-weight: normal;
      }

      .dnd-upload-status .dnd-upload-details .name {
        padding-right: 60px;
      }

      .codedropz-upload-inner h3 {
        font-size: 22px;
      }
    }
  </style><a href="#" class="scrollToTop"><span class="fas fa-angle-up"></span></a>
  <div id="teaser3"
    style="width: 100%;text-align: center;display: scroll;position:fixed;bottom: 0;margin: 0 auto;z-index: 103;">
    <div align="center"><span id="close-teaser" onclick="document.getElementById('teaser3').style.display = 'none';"
        style="cursor:pointer;"><img width="52" height="15"
          src="https://void-scans.com/wp-content/themes/mangastream/assets/images/btn_close.gif"></span></div>
    <div class="blox kln">
      <div id="pf-4989-1">
        <script>window.pubfuturetag = window.pubfuturetag || []; window.pubfuturetag.push({ unit: "64b7570e94889f003ff7d80b", id: "pf-4989-1" })</script>
      </div>
    </div>
  </div>
  <script>ts_darkmode.listen();</script>
  <link data-minify="1" rel="stylesheet" id="fontawesome-css"
    href="https://void-scans.com/wp-content/cache/min/1/wp-content/themes/mangastream/assets/css/font-awesome.min.css?ver=1687356697"
    type="text/css" media="all">
  <script type="text/javascript" id="disqus_count-js-extra">
    /* <![CDATA[ */
    var countVars = { "disqusShortname": "void-scans-com-1" };
    /* ]]> */
  </script>
  <script data-minify="1" type="text/javascript"
    src="https://void-scans.com/wp-content/cache/min/1/wp-content/plugins/disqus-comment-system/public/js/comment_count.js?ver=1687356697"
    id="disqus_count-js"></script>
  <script type="text/javascript" id="disqus_embed-js-extra">
    /* <![CDATA[ */
    var embedVars = { "disqusConfig": { "integration": "wordpress 3.0.23" }, "disqusIdentifier": "7153 https:\/\/infernalvoidscans.com\/?post_type=manga&p=7153", "disqusShortname": "void-scans-com-1", "disqusTitle": "Questism", "disqusUrl": "https:\/\/void-scans.com\/manga\/questism\/", "postId": "7153" };
    /* ]]> */
  </script>
  <script data-minify="1" type="text/javascript"
    src="https://void-scans.com/wp-content/cache/min/1/wp-content/plugins/disqus-comment-system/public/js/comment_embed.js?ver=1687356697"
    id="disqus_embed-js"></script>
  <script data-minify="1" type="text/javascript"
    src="https://void-scans.com/wp-content/cache/min/1/wp-content/themes/mangastream/assets/js/filter.js?ver=1687356697"
    id="filter-js"></script>
  <script data-minify="1" type="text/javascript"
    src="https://void-scans.com/wp-content/cache/min/1/wp-content/themes/mangastream/assets/js/search-V2.js?ver=1687356697"
    id="ts-search-js"></script>


  <div id="live-search_sb" class="live-search_sb" style="position:absolute;display:none;width:350px;z-index:9999">
    <div class="live-search_sb_cont">
      <div class="live-search_sb_top"></div>
      <div id="live-search_results" style="width:100%">
        <div id="live-search_val"></div>
        <div id="live-search_more"></div>
      </div>
      <div class="live-search_sb_bottom"></div>
    </div>
  </div><iframe style="display: none;"></iframe>
  <div data-lastpass-root=""
    style="position: absolute !important; top: 0px !important; left: 0px !important; height: 0px !important; width: 0px !important;">
    <div data-lastpass-infield="true" style="position: absolute !important; top: 0px !important; left: 0px !important;">
    </div>
  </div>
</body>

</html>
