<html lang="ru">

<head>
  <style>
    #back-to-top {
      background: #1b1b1b;
      -webkit-border-radius: 50%;
      -moz-border-radius: 50%;
      border-radius: 50%;
      bottom: 20px;
      -webkit-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, .26);
      -moz-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, .26);
      box-shadow: 0 2px 5px 0 rgba(0, 0, 0, .26);
      color: #fff;
      cursor: pointer;
      display: block;
      height: 56px;
      opacity: 1;
      outline: 0;
      position: fixed;
      right: 20px;
      -webkit-tap-highlight-color: transparent;
      -webkit-touch-callout: none;
      -webkit-transition: bottom .2s, opacity .2s;
      -o-transition: bottom .2s, opacity .2s;
      -moz-transition: bottom .2s, opacity .2s;
      transition: bottom .2s, opacity .2s;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      width: 56px;
      z-index: 1
    }

    #back-to-top svg {
      display: block;
      fill: currentColor;
      height: 24px;
      margin: 16px auto 0;
      width: 24px
    }

    #back-to-top.hidden {
      bottom: -56px;
      opacity: 0
    }
  </style>
  <meta name="csrf-token" content="ZZgREsvaEJmlzbWilwRpUyiZlXak0wrnYQH2BZmg">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1.0, user-scalable=0">
  <title>Аниме - Юри на льду смотреть онлайн</title>
  <meta name="description"
    content="Все серии в русской озвучке и субтитрах. На любом спортсмене выступающем на соревнованиях лежит тяжелый груз, ведь на него надеется целая страна. Поражения бывают не тольк...">
  <meta name="keywords" content="аниме, описание, кадры, трейлеры, следующая серия, Юри на льду">
  <style data-tippy-stylesheet="">
    .tippy-box[data-animation=fade][data-state=hidden] {
      opacity: 0
    }

    [data-tippy-root] {
      max-width: calc(100vw - 10px)
    }

    .tippy-box {
      position: relative;
      background-color: #333;
      color: #fff;
      border-radius: 4px;
      font-size: 14px;
      line-height: 1.4;
      white-space: normal;
      outline: 0;
      transition-property: transform, visibility, opacity
    }

    .tippy-box[data-placement^=top]>.tippy-arrow {
      bottom: 0
    }

    .tippy-box[data-placement^=top]>.tippy-arrow:before {
      bottom: -7px;
      left: 0;
      border-width: 8px 8px 0;
      border-top-color: initial;
      transform-origin: center top
    }

    .tippy-box[data-placement^=bottom]>.tippy-arrow {
      top: 0
    }

    .tippy-box[data-placement^=bottom]>.tippy-arrow:before {
      top: -7px;
      left: 0;
      border-width: 0 8px 8px;
      border-bottom-color: initial;
      transform-origin: center bottom
    }

    .tippy-box[data-placement^=left]>.tippy-arrow {
      right: 0
    }

    .tippy-box[data-placement^=left]>.tippy-arrow:before {
      border-width: 8px 0 8px 8px;
      border-left-color: initial;
      right: -7px;
      transform-origin: center left
    }

    .tippy-box[data-placement^=right]>.tippy-arrow {
      left: 0
    }

    .tippy-box[data-placement^=right]>.tippy-arrow:before {
      left: -7px;
      border-width: 8px 8px 8px 0;
      border-right-color: initial;
      transform-origin: center right
    }

    .tippy-box[data-inertia][data-state=visible] {
      transition-timing-function: cubic-bezier(.54, 1.5, .38, 1.11)
    }

    .tippy-arrow {
      width: 16px;
      height: 16px;
      color: #333
    }

    .tippy-arrow:before {
      content: "";
      position: absolute;
      border-color: transparent;
      border-style: solid
    }

    .tippy-content {
      position: relative;
      padding: 5px 9px;
      z-index: 1
    }
  </style>
  <link rel="canonical" href="https://animebuff.ru/anime/yuri-na-ldu">
  <meta property="og:title" content="Аниме - Юри на льду смотреть онлайн">
  <meta property="og:description"
    content="Все серии в русской озвучке и субтитрах. На любом спортсмене выступающем на соревнованиях лежит тяжелый груз, ведь на него надеется целая страна. Поражения бывают не тольк...">
  <meta property="og:type" content="article">
  <meta property="og:url" content="https://animebuff.ru/anime/yuri-na-ldu">
  <meta property="og:image" content="https://animebuff.ru/a_img/posters/original/anime_yuri-na-ldu.jpg?1679603285">
  <meta name="twitter:title" content="Аниме - Юри на льду смотреть онлайн">
  <meta name="twitter:description"
    content="Все серии в русской озвучке и субтитрах. На любом спортсмене выступающем на соревнованиях лежит тяжелый груз, ведь на него надеется целая страна. Поражения бывают не тольк...">
  <script async="" src="https://mc.yandex.ru/metrika/tag.js"></script>
  <script
    type="application/ld+json">{"@context":"https://schema.org","@type":"WebPage","name":"Аниме - Юри на льду смотреть онлайн","description":"Все серии в русской озвучке и субтитрах. На любом спортсмене выступающем на соревнованиях лежит тяжелый груз, ведь на него надеется целая страна. Поражения бывают не тольк..."}</script>
  <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
  <link rel="icon" href="/favicon.ico?5" type="image/x-icon">
  <meta name="msapplication-TileColor" content="#da532c">
  <meta name="theme-color" content="#1a1b20">
  <link rel="preconnect" href="https://fonts.gstatic.com">
  <link
    href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&amp;display=swap"
    rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Domine&amp;display=swap" rel="stylesheet">

  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link
    href="https://fonts.googleapis.com/css2?family=Exo+2:ital,wght@0,300;0,400;0,500;0,600;0,700;0,800;1,400&amp;display=swap"
    rel="stylesheet">
  <link href="/css/libs.css?id=f06f70a5a078beb210c4d50a33ef5644" type="text/css" rel="stylesheet">
  <link href="/css/app.css?id=85c12aca8a72f09320ed64e59841bf96" type="text/css" rel="stylesheet">
  <meta name="yandex-verification" content="51fe9d7149f832cc">
  <script>window.yaContextCb = window.yaContextCb || []</script>
  <script src="https://yandex.ru/ads/system/context.js" async=""></script>
  <script>
    window.isAuth = 0;
    window.user_id = 0;
    window.isAdmin = 0;
    window.user_token = "guest";
  </script>
</head>

<body class="light-theme " aria-expanded="false">
  <div class="header-wrapper">
    <div class="container">
      <nav class=" header-inner" role="navigation">
        <div class="nav-wrapper container">
          <div class="nav-left-side">
            <a id="logo-container" href="/" class="brand-logo">
              <span class="logo-a">А</span>
            </a>
            <ul class="header-menu hide-on-med-and-down">
              <li><a class="header-menu__link " href="/">Главная</a></li>
              <li>
                <a class="header-menu__link " href="/anime">Каталог</a>
                <ul class="submenu anime-type-list">
                  <li><a href="/anime" title="Каталог аниме">Каталог аниме</a></li>
                  <li><a href="/anime/status/airing" title="Аниме Онгоинги">Онгоинги</a></li>
                  <li><a href="/anime/status/upcoming" title="Аниме Анонсы">Анонсы</a></li>
                  <li><a href="/anime/status/finished" title="Аниме Завершенные">Завершенные</a></li>
                  <li><a href="/schedule" title="Расписание аниме">Расписание</a></li>
                  <li><a href="/tags" title="Список аниме тегов">Теги</a></li>
                </ul>
              </li>
              <li><a class="header-menu__link " href="/genres">Жанры</a>
                <ul class="submenu">
                  <li><a href="/genres/avangard" title="Авангард">Авангард</a></li>
                  <li><a href="/genres/bezumie" title="Безумие">Безумие</a></li>
                  <li><a href="/genres/boevye-iskusstva" title="Боевые искусства">Боевые искусства</a></li>
                  <li><a href="/genres/vampiry" title="Вампиры">Вампиры</a></li>
                  <li><a href="/genres/voennoe" title="Военное">Военное</a></li>
                  <li><a href="/genres/garem" title="Гарем">Гарем</a></li>
                  <li><a href="/genres/gurman" title="Гурман">Гурман</a></li>
                  <li><a href="/genres/demony" title="Демоны">Демоны</a></li>
                  <li><a href="/genres/detektiv" title="Детектив">Детектив</a></li>
                  <li><a href="/genres/detskoe" title="Детское">Детское</a></li>
                  <li><a href="/genres/dzesei" title="Дзёсей">Дзёсей</a></li>
                  <li><a href="/genres/drama" title="Драма">Драма</a></li>
                  <li><a href="/genres/igry" title="Игры">Игры</a></li>
                  <li><a href="/genres/istoricheskii" title="Исторический">Исторический</a></li>
                  <li><a href="/genres/kitaiskoe" title="Китайское">Китайское</a></li>
                  <li><a href="/genres/komediya" title="Комедия">Комедия</a></li>
                  <li><a href="/genres/kosmos" title="Космос">Космос</a></li>
                  <li><a href="/genres/magiya" title="Магия">Магия</a></li>
                  <li><a href="/genres/mashiny" title="Машины">Машины</a></li>
                  <li><a href="/genres/meha" title="Меха">Меха</a></li>
                  <li><a href="/genres/muzyka" title="Музыка">Музыка</a></li>
                  <li><a href="/genres/parodiya" title="Пародия">Пародия</a></li>
                  <li><a href="/genres/povsednevnost" title="Повседневность">Повседневность</a></li>
                  <li><a href="/genres/policiya" title="Полиция">Полиция</a></li>
                  <li><a href="/genres/priklyucheniya" title="Приключения">Приключения</a></li>
                  <li><a href="/genres/psihologicheskoe" title="Психологическое">Психологическое</a></li>
                  <li><a href="/genres/rabota" title="Работа">Работа</a></li>
                  <li><a href="/genres/romantika" title="Романтика">Романтика</a></li>
                  <li><a href="/genres/samurai" title="Самураи">Самураи</a></li>
                  <li><a href="/genres/sverhestestvennoe" title="Сверхъестественное">Сверхъестественное</a></li>
                  <li><a href="/genres/sedze" title="Сёдзё">Сёдзё</a></li>
                  <li><a href="/genres/senen" title="Сёнен">Сёнен</a></li>
                  <li><a href="/genres/sport" title="Спорт">Спорт</a></li>
                  <li><a href="/genres/super-sila" title="Супер сила">Супер сила</a></li>
                  <li><a href="/genres/seinen" title="Сэйнэн">Сэйнэн</a></li>
                  <li><a href="/genres/taina" title="Тайна">Тайна</a></li>
                  <li><a href="/genres/triller" title="Триллер">Триллер</a></li>
                  <li><a href="/genres/uzhasy" title="Ужасы">Ужасы</a></li>
                  <li><a href="/genres/fantastika" title="Фантастика">Фантастика</a></li>
                  <li><a href="/genres/fentezi" title="Фэнтези">Фэнтези</a></li>
                  <li><a href="/genres/shkola" title="Школа">Школа</a></li>
                  <li><a href="/genres/ekshen" title="Экшен">Экшен</a></li>
                  <li><a href="/genres/etti" title="Этти">Этти</a></li>
                </ul>
              </li>
              <li>
                <a class="header-menu__link " href="/types">Типы</a>
                <ul class="submenu anime-type-list">
                  <li><a href="/types/tv-serial" title="Аниме сериал">Аниме сериал</a></li>
                  <li><a href="/types/polnometrazhnyi-film" title="Аниме фильм">Аниме фильм</a></li>
                  <li><a href="/types/ona" title="ONA">ONA</a></li>
                  <li><a href="/types/ova" title="OVA">OVA</a></li>
                  <li><a href="/types/special" title="SPECIAL">SPECIAL</a></li>
                  <li><a href="/types/clip" title="Клип">Клип</a></li>
                </ul>
              </li>
              <li><a class="header-menu__link " href="/top">Топ</a></li>
              <li class="header-menu__dot">
                <a href="#"><svg width="22" height="22" xmlns="http://www.w3.org/2000/svg">
                    <path
                      d="M5 14a2 2 0 100-4 2 2 0 000 4zM12 14a2 2 0 100-4 2 2 0 000 4zM19 14a2 2 0 100-4 2 2 0 000 4z">
                    </path>
                  </svg></a>
                <ul class="submenu anime-type-list">
                  <li><a href="/rooms" title="Совместный просмотр">Совместный просмотр</a></li>
                  <li><a href="/recommendations" title="Рекомендации">Рекомендации</a></li>
                  <li><a href="/userlist" title="Подборки аниме созданные пользователями">Пользовательские
                      подборки</a></li>
                  <li><a href="/social" title="Активность пользователей сайта">Лента сайта</a></li>
                  <li><a href="/quiz/guessAnime" title="Аниме викторина">Аниме викторина</a></li>
                  <li><a href="/challenges" title="Испытания">Испытания</a></li>
                </ul>
              </li>
            </ul>
            <form class="top-search__form" action="/search">
              <span class="twitter-typeahead" style="position: relative; display: inline-block;"><input
                  class="top-search__header top-search__area tt-input" type="text" name="q" placeholder="Поиск аниме"
                  autocomplete="off" spellcheck="false" dir="auto" style="position: relative; vertical-align: top;">
                <pre aria-hidden="true"
                  style="position: absolute; visibility: hidden; white-space: pre; font-family: -apple-system, &quot;exo 2&quot;, &quot;sans-serif&quot;; font-size: 14.5px; font-style: normal; font-variant: normal; font-weight: 400; word-spacing: 0px; letter-spacing: 0px; text-indent: 0px; text-rendering: auto; text-transform: none;"></pre>
                <div class="tt-menu" style="position: absolute; top: 100%; left: 0px; z-index: 100; display: none;">
                  <div class="tt-dataset tt-dataset-states"></div>
                </div>
              </span>
              <button aria-label="Поиск"><i class="far fa-search"></i></button>
            </form>
          </div>
          <ul class="right-nav">
            <li class="nav-show-search">
              <i class="far fa-search"></i>
            </li>
            <li class="nav-show-notification" onclick="ym(82793836,'reachGoal','click_notification'); return true;"><i
                class="far fa-bell"></i><span class="guest__notification">1</span></li>
            <li class="nav-show-login"><a href="/login"><i class="far fa-user"></i><span
                  class="nav-login">Войти</span></a></li>
          </ul>
          <ul id="nav-mobile" class="sidenav">
            <li><a class="" href="/"><i class="fas fa-home"></i>
                Главная</a></li>
            <li><a class="" href="/anime"><i class="fas fa-tv"></i> Все аниме</a></li>
            <li class="nav-mobile-menu-show">
              <span class=""><i class="fas fa-list-ul"></i> Жанры <i
                  class="fas fa-chevron-down nav-mobile-menu-show-icon"></i></span>
              <ul class="nav-mobile-menu-show-item">
                <li><a href="/genres/avangard" title="Авангард">Авангард</a></li>
                <li><a href="/genres/bezumie" title="Безумие">Безумие</a></li>
                <li><a href="/genres/boevye-iskusstva" title="Боевые искусства">Боевые искусства</a></li>
                <li><a href="/genres/vampiry" title="Вампиры">Вампиры</a></li>
                <li><a href="/genres/voennoe" title="Военное">Военное</a></li>
                <li><a href="/genres/garem" title="Гарем">Гарем</a></li>
                <li><a href="/genres/gurman" title="Гурман">Гурман</a></li>
                <li><a href="/genres/demony" title="Демоны">Демоны</a></li>
                <li><a href="/genres/detektiv" title="Детектив">Детектив</a></li>
                <li><a href="/genres/detskoe" title="Детское">Детское</a></li>
                <li><a href="/genres/dzesei" title="Дзёсей">Дзёсей</a></li>
                <li><a href="/genres/drama" title="Драма">Драма</a></li>
                <li><a href="/genres/igry" title="Игры">Игры</a></li>
                <li><a href="/genres/istoricheskii" title="Исторический">Исторический</a></li>
                <li><a href="/genres/kitaiskoe" title="Китайское">Китайское</a></li>
                <li><a href="/genres/komediya" title="Комедия">Комедия</a></li>
                <li><a href="/genres/kosmos" title="Космос">Космос</a></li>
                <li><a href="/genres/magiya" title="Магия">Магия</a></li>
                <li><a href="/genres/mashiny" title="Машины">Машины</a></li>
                <li><a href="/genres/meha" title="Меха">Меха</a></li>
                <li><a href="/genres/muzyka" title="Музыка">Музыка</a></li>
                <li><a href="/genres/parodiya" title="Пародия">Пародия</a></li>
                <li><a href="/genres/povsednevnost" title="Повседневность">Повседневность</a></li>
                <li><a href="/genres/policiya" title="Полиция">Полиция</a></li>
                <li><a href="/genres/priklyucheniya" title="Приключения">Приключения</a></li>
                <li><a href="/genres/psihologicheskoe" title="Психологическое">Психологическое</a></li>
                <li><a href="/genres/rabota" title="Работа">Работа</a></li>
                <li><a href="/genres/romantika" title="Романтика">Романтика</a></li>
                <li><a href="/genres/samurai" title="Самураи">Самураи</a></li>
                <li><a href="/genres/sverhestestvennoe" title="Сверхъестественное">Сверхъестественное</a></li>
                <li><a href="/genres/sedze" title="Сёдзё">Сёдзё</a></li>
                <li><a href="/genres/senen" title="Сёнен">Сёнен</a></li>
                <li><a href="/genres/sport" title="Спорт">Спорт</a></li>
                <li><a href="/genres/super-sila" title="Супер сила">Супер сила</a></li>
                <li><a href="/genres/seinen" title="Сэйнэн">Сэйнэн</a></li>
                <li><a href="/genres/taina" title="Тайна">Тайна</a></li>
                <li><a href="/genres/triller" title="Триллер">Триллер</a></li>
                <li><a href="/genres/uzhasy" title="Ужасы">Ужасы</a></li>
                <li><a href="/genres/fantastika" title="Фантастика">Фантастика</a></li>
                <li><a href="/genres/fentezi" title="Фэнтези">Фэнтези</a></li>
                <li><a href="/genres/shkola" title="Школа">Школа</a></li>
                <li><a href="/genres/ekshen" title="Экшен">Экшен</a></li>
                <li><a href="/genres/etti" title="Этти">Этти</a></li>
              </ul>
            </li>
            <li class="nav-mobile-menu-show">
              <span class=""><i class="fas fa-list-ol"></i> Типы <i
                  class="fas fa-chevron-down nav-mobile-menu-show-icon"></i></span>
              <ul class="nav-mobile-menu-show-item">
                <li><a href="/types/tv-serial" title="Аниме сериал">Аниме сериал</a></li>
                <li><a href="/types/polnometrazhnyi-film" title="Аниме фильм">Аниме фильм</a></li>
                <li><a href="/types/ona" title="ONA">ONA</a></li>
                <li><a href="/types/ova" title="OVA">OVA</a></li>
                <li><a href="/types/special" title="SPECIAL">SPECIAL</a></li>
                <li><a href="/types/clip" title="Клип">Клип</a></li>
              </ul>
            </li>
            <li><a class="" href="/top"><i class="far fa-fire"></i> Топ 100</a></li>
            <li><a class="" href="/rooms"><i class="far fa-users"></i> Совместный просмотр</a></li>
            <li><a class="" href="/social"><i class="far fa-chart-line"></i> Лента активности</a></li>
            <li><a class="" href="/anime/status/airing"><i class="far fa-walking"></i> Онгоинги</a></li>
            <li><a class="" href="/anime/status/upcoming"><i class="far fa-bullhorn"></i> Анонсы</a></li>
            <li><a class="" href="/recommendations"><i class="far fa-thumbs-up"></i> Рекомендации</a></li>
            <li><a class="" href="/challenges"><i class="far fa-dungeon"></i> Испытания</a></li>
            <li><a class="" href="/schedule"><i class="far fa-calendar-alt"></i> Расписание</a></li>
            <li><a class="" href="/tags"><i class="fas fa-hashtag"></i> Теги</a></li>
            <li><a class="" href="/videos"><i class="far fa-video"></i> Видео</a></li>
            <li><a class="" href="/studios"><i class="fas fa-film"></i> Студии</a></li>
            <li><a class="" href="/expected"><i class="far fa-star"></i> Самые ожидаемые</a></li>
            <li><a class="" href="/userlist"><i class="far fa-th-large"></i> Пользовательские подборки</a></li>
            <li><a class="" href="/quiz/guessAnime"><i class="far fa-gamepad"></i> Аниме викторина</a></li>
            <li style="padding: 0 32px;"><span class="theme__change"><i class="far fa-moon"></i> Смена темы:</span>
              <button class="footer-theme__change footer-theme__change-dark" data-type="dark-theme"
                aria-label="Темная тема">Т</button>
              <button class="footer-theme__change footer-theme__change-light" data-type="light-theme"
                aria-label="Светлая меню">С</button>
            </li>
          </ul>
          <a href="#" data-target="nav-mobile" class="sidenav-trigger" aria-label="Мобильное меню"><i
              class="far fa-bars"></i></a>
          <div class="notification__login-form">
            <div class="notification__login-title">
              Уведомления
            </div>
            <div class="notification__login-info">
              <div class="notification__login-image">
                <i class="fas fa-exclamation"></i>
              </div>
              <div class="notification__login-wrapper">
                <div class="notification__login-text"><a href="/login">Авторизуйтесь</a> или <a
                    href="/reg">зарегистрируйтесь</a>,
                  что бы писать комментарии и пользоваться списками для добавления аниме.
                </div>
                <div class="notification__login-social">
                  <a href="/login/redirect/google" class="notification__login-social-item"
                    aria-label="Логин с помощью google">
                    <i class="fab fa-google"></i>
                  </a>
                  <a href="/login/redirect/vkontakte" class="notification__login-social-item"
                    aria-label="Логин с помощью vk">
                    <i class="fab fa-vk"></i>
                  </a>
                  <a href="/login/redirect/discord" class="notification__login-social-item"
                    aria-label="Логин с помощью discord">
                    <i class="fab fa-discord"></i>
                  </a>
                  <a href="/login/redirect/facebook" class="notification__login-social-item"
                    aria-label="Логин с помощью facebook">
                    <i class="fab fa-facebook-f"></i>
                  </a>
                </div>
              </div>
            </div>
          </div>
        </div>
      </nav>
    </div>
  </div>
  <div class="section">
    <div class="container inner-container">
      <div class="yan">

        <div id="yandex_rtb_R-A-1985589-5" style="height: 250px;"></div>
        <script>window.yaContextCb.push(() => {
            Ya.Context.AdvManager.render({
              renderTo: 'yandex_rtb_R-A-1985589-5',
              blockId: 'R-A-1985589-5'
            })
          })
        </script>
      </div>
      <div class="row">
        <div class="col s12 l9">
          <div class="anime" data-anime-id="675">
            <div class="anime__poster">
              <div class="anime__poster-img">
                <img src="/a_img/posters/original/anime_yuri-na-ldu.jpg?1679603285" alt="Постер к аниме Юри на льду"
                  style="object-fit: cover">
                <button class="anime__poster-trailer">Трейлер</button>
              </div>
              <div class="watchlist_parent" data-watchlist-type="main" data-anime-id="675">
                <div class="anime__watchlist">
                  <div class="anime__watchlist-menu">
                    <div class="anime__watchlist-select watchlist_btn " data-watch-type="will-watch"><i
                        class="fas fa-plus"></i> <span>Буду смотреть</span></div>
                    <div class="anime__watchlist-btn dropdown-trigger" data-target="dropdown_watchlist"><i
                        class="fas fa-sort-down"></i></div>
                    <ul id="dropdown_watchlist" class="dropdown-content" tabindex="0">
                      <li class="dropdown-title" tabindex="0">Добавить в список</li>
                      <li tabindex="0"><a href="#" class="watchlist_btn" data-watch-type="watching">Смотрю</a></li>
                      <li tabindex="0"><a href="#" class="watchlist_btn" data-watch-type="will-watch">Буду смотреть</a>
                      </li>
                      <li tabindex="0"><a href="#" class="watchlist_btn" data-watch-type="seen">Просмотрено</a></li>
                      <li tabindex="0"><a href="#" class="watchlist_btn" data-watch-type="abandoned">Заброшено</a></li>
                      <li tabindex="0"><a href="#" class="watchlist_btn" data-watch-type="favourite">Избранное</a></li>
                      <li class="delete-watchlist" style="display: none;" tabindex="0"><a href="#" class="watchlist_btn"
                          data-watch-type="delete">Удалить из списка</a></li>
                    </ul>
                  </div>
                </div>

                <div class="watchlist-dub" style=" display: none;">
                  <i class="far fa-check-square"></i> Уведомления при <span data-ajax="/anime/675/dubs"
                    aria-expanded="true">любой</span> озвучке
                </div>
              </div>
              <div class="anime__userlists">
                <button class="anime__userlists-add-btn">Добавить в папку</button>
              </div>
            </div>
            <div class="anime__info">
              <div class="anime__info-header">
                <div>
                  <h1 class="anime__title">Юри на льду</h1>
                  <div class="anime__other-names">Yuri!!! on Ice</div>
                </div>
                <div class="anime__top-rating" itemscope="" itemtype="http://schema.org/AggregateRating">
                  <meta content="1" itemprop="worstRating">
                  <meta content="10" itemprop="bestRating">
                  <meta content="7.9" itemprop="ratingValue">
                  <meta content="196845" itemprop="ratingCount">
                  <span itemprop="itemReviewed" itemscope="" itemtype="http://schema.org/CreativeWorkSeries">
                    <meta itemprop="name" content="Юри на льду">
                    <meta itemprop="alternateName" content="Yuri!!! on Ice">
                  </span>
                  <span class="top-rating__number anime-rating__green-number">7.9</span>
                  <span class="top-rating__count">196.8K</span>
                </div>
              </div>
              <div class="anime__about">
                <div class="anime__about-title">О аниме</div>
                <div class="anime__info-list">
                  <div class="anime__info-item">
                    <div class="anime__info-type">Тип</div>
                    <div class="anime__info-value"><a href="/types/tv-serial">ТВ-сериал</a></div>
                  </div>
                  <div class="anime__info-item">
                    <div class="anime__info-type">Жанры</div>
                    <div class="anime__info-value">
                      <a href="/genres/komediya">Комедия</a>,
                      <a href="/genres/sport">Спорт</a>
                    </div>
                  </div>
                  <div class="anime__info-item">
                    <div class="anime__info-type">Эпизоды</div>
                    <div class="anime__info-value">12 из 12</div>
                  </div>
                  <div class="anime__info-item">
                    <div class="anime__info-type">Статус</div>
                    <div class="anime__info-value"><a href="/anime/status/finished"
                        class="anime__info-status finished">Завершён</a> <a href="/anime/year/2016">с 6 окт. 2016 г. по
                        22 дек. 2016 г.</a></div>
                  </div>
                  <div class="anime__info-item">
                    <div class="anime__info-type">Сезон</div>
                    <div class="anime__info-value"><a href="/anime/seasons/2016/fall">Осень 2016</a></div>
                  </div>
                  <div class="anime__info-item">
                    <div class="anime__info-type">Длительность</div>
                    <div class="anime__info-value">23 мин</div>
                  </div>
                  <div class="anime__info-item">
                    <div class="anime__info-type">Студия</div>
                    <div class="anime__info-value"><a href="/studios/mappa">MAPPA</a></div>
                  </div>
                  <div class="anime__info-item">
                    <div class="anime__info-type">Возраст</div>
                    <div class="anime__info-value info-box">13+</div>
                  </div>
                  <div class="anime__info-item">
                    <div class="anime__info-type">Рейтинг MPAA</div>
                    <div class="anime__info-value info-box">PG-13</div>
                  </div>
                  <div class="anime__info-item">
                    <div class="anime__info-type">Озвучка</div>
                    <div class="anime__info-value">
                      <a href="/anime/dubs/animevost">AnimeVost</a>,
                      <a href="/anime/dubs/sovetromantica">SovetRomantica</a>,
                      <a href="/anime/dubs/anidub">AniDUB</a>,
                      <a href="/anime/dubs/anilibria">AniLibria.TV</a>,
                      <a href="/anime/dubs/animaunt">AniMaunt</a>,
                      <a href="/anime/dubs/animedia">AniMedia</a>,
                      <a href="/anime/dubs/shiza-project">SHIZA Project</a>,
                      <a href="/anime/dubs/anistar">AniStar</a>,
                      <a href="/anime/dubs/risens-team">Risens Team</a>,
                      <a href="/anime/dubs/aniplay">AniPlay</a>,
                      <a href="/anime/dubs/amazing-dubbing">Amazing Dubbing</a>,
                      <a href="/anime/dubs/medusasub">MedusaSub</a>
                    </div>
                  </div>
                  <div class="anime__info-item">
                    <div class="anime__info-type">Другие названия</div>
                    <div class="anime__info-value">
                      Юри на льду!!!
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <h2 class="small-title">Про что аниме «Юри на льду»</h2>
          <div class="anime-description">
            <div class="anime-description-wrapper">
              <p> На любом спортсмене выступающем на соревнованиях лежит тяжелый груз, ведь на него надеется целая
                страна. Поражения бывают не только в боксе или футболе, а так же и в фигурном катании. Главного героя
                зовут Юри Кацуки и ему двадцать три года, он выступал под флагом Японии в финале соревнований по
                фигурному катанию и смог сполна ощутить горечь от поражения, ведь он ошибся в самый важный момент. Когда
                он вернулся домой, то его терзали два чувства: первое — ему хотелось бросить фигурное катание из-за
                поражения, а второе — продолжить тренировки, что бы повторить попытку и одержать победу. Из-за того что
                парень не мог решить, что же ему делать дальше, на время он скрылся в доме своих родителей. Но в один
                день судьба привела к нему пятикратного чемпиона мира по фигурке по имени Виктор, а с ним был Юрий —
                юный фигурист, сумевший превзойти даже тех соперников, кто был старше него! Юри был очень вдохновлён
                такой компанией, а от чего решил что сдаваться ещё рано и стоит попробовать одержать победу!</p>
            </div>
          </div>
          <div class="rooms-invite">
            <div class="room-invite__image">
              <img src="/a_img/posters/x50/anime_yuri-na-ldu.jpg?1679603285" alt="Постер">
            </div>
            <div>
              <div class="room-invite__title">Совместный просмотр</div>
              <div class="room-invite__desc">Смотри это и любое другое аниме вместе с друзьями<span>, с помощью функции
                  совместного просмотра</span> </div>
            </div>
            <div class="room-invite__label">Популярно</div>
          </div>
          <h3 class="small-title">Рейтинг аниме</h3>
          <div class="anime-star-rating">
            <div class="anime-star-rating__wrapper">
              <div class="anime-star-list">
                <div class="anime-star-rating__item star-item" data-rating-value="1">
                  <div class="star-item__icons">
                    <div class="star-item__icon star-item-orange"></div>
                  </div>
                  <div class="star-item__number">1</div>
                </div>
                <div class="anime-star-rating__item star-item" data-rating-value="2">
                  <div class="star-item__icons">
                    <div class="star-item__icon star-item-orange"></div>
                  </div>
                  <div class="star-item__number">2</div>
                </div>
                <div class="anime-star-rating__item star-item" data-rating-value="3">
                  <div class="star-item__icons">
                    <div class="star-item__icon star-item-orange"></div>
                  </div>
                  <div class="star-item__number">3</div>
                </div>
                <div class="anime-star-rating__item star-item" data-rating-value="4">
                  <div class="star-item__icons">
                    <div class="star-item__icon star-item-orange"></div>
                  </div>
                  <div class="star-item__number">4</div>
                </div>
                <div class="anime-star-rating__item star-item" data-rating-value="5">
                  <div class="star-item__icons">
                    <div class="star-item__icon star-item-orange"></div>
                  </div>
                  <div class="star-item__number">5</div>
                </div>
                <div class="anime-star-rating__item star-item" data-rating-value="6">
                  <div class="star-item__icons">
                    <div class="star-item__icon star-item-orange"></div>
                  </div>
                  <div class="star-item__number">6</div>
                </div>
                <div class="anime-star-rating__item star-item" data-rating-value="7">
                  <div class="star-item__icons">
                    <div class="star-item__icon star-item-orange"></div>
                  </div>
                  <div class="star-item__number">7</div>
                </div>
                <div class="anime-star-rating__item star-item" data-rating-value="8">
                  <div class="star-item__icons">
                    <div class="star-item__icon "></div>
                    <div class="star-item__icon star-item-orange" style="width: 90%"></div>
                  </div>
                  <div class="star-item__number">8</div>
                </div>
                <div class="anime-star-rating__item star-item" data-rating-value="9">
                  <div class="star-item__icons">
                    <div class="star-item__icon "></div>
                  </div>
                  <div class="star-item__number">9</div>
                </div>
                <div class="anime-star-rating__item star-item" data-rating-value="10">
                  <div class="star-item__icons">
                    <div class="star-item__icon "></div>
                  </div>
                  <div class="star-item__number">10</div>
                </div>
              </div>
              <div class="anime-rating__wrapper">
                <div class="anime-rating-body ">
                  <div class="anime-rating-body__inner">
                    <span class="anime-rating__number anime-rating__green-number">7.9</span>
                    <span class="anime-rating__count">196 845</span>
                  </div>
                  <div class="anime-rating__watchlist-stat" data-ajax="/anime/675/watchlistStats" aria-expanded="false">
                    В списках людей</div>
                </div>
              </div>
            </div>
            <div class="anime-rating__your-vote" style="display: none;">
              Вы поставили оценку <span class="rating-red">0</span> <a href="#" class="remove-vote">Удалить</a>
            </div>
            <div class="anime-rating__add_review">
              <a class="normal-btn" href="/anime/yuri-na-ldu/reviews"><i class="fas fa-plus"></i> Написать отзыв</a>
              <a class="normal-btn" href="/anime/yuri-na-ldu/recommendations"><i class="far fa-thumbs-up"></i>
                Рекомендации</a>
            </div>
          </div>
          <div class="rek">

            <div id="yandex_rtb_R-A-1985589-3"></div>
            <script>window.yaContextCb.push(() => {
                Ya.Context.AdvManager.render({
                  renderTo: 'yandex_rtb_R-A-1985589-3',
                  blockId: 'R-A-1985589-3'
                })
              })
            </script>
          </div>
          <h2 class="small-title">Смотреть аниме «Юри на льду» онлайн</h2>
          <div class="anime-player" data-country="RU" data-v="0" data-k="1533760">
            <div class="anime-player__wrapper">
              <div class="anime-player__inner">
                <div class="iframe-container" data-episode_id="1533760"><iframe
                    src="//kodik.info/season/61001/39f38c9fd6c0cfec81feaf7f76b5b9e5/720p?translations=false&amp;hide_selectors=true&amp;only_season=true&amp;episode=1"
                    frameborder="0" webkitallowfullscreen="true" mozallowfullscreen="true" scrolling="no"
                    allowfullscreen="allowfullscreen"></iframe></div>
              </div>
              <div class="anime-player__controls">
                <button class="anime-player__prev-series" aria-label="Предыдущая" disabled=""><i
                    class="fas fa-angle-double-left"></i></button>
                <span class="anime-player__current-series-number"><span>1</span> серия</span>
                <button class="anime-player__next-series" aria-label="Следующая"><i
                    class="fas fa-angle-double-right"></i></button>
                <button class="anime-player__show-popular-dubs-btn" aria-label="Популярность озвучки"><i
                    class="far fa-microphone"></i> <span>Популярность озвучек</span></button>
                <button class="anime-player__report-series show-report-btn" data-id="675" aria-label="Жалоба на аниме"
                  data-type="App\Models\Anime"><i class="far fa-bug"></i> <span>Не работает</span></button>
              </div>
              <a href="/premium" class="premium-wrapper">
                Надоела реклама? Попробуй <span>премиум</span>
              </a>
            </div>
            <div class="popular-dubs">
              <div class="popular-dubs__item">
                <div class="popular-dubs__title">Неизвестно</div>
                <div class="popular-dubs__bar" style="width: 49%"></div>
              </div>
              <div class="popular-dubs__item">
                <div class="popular-dubs__title">AniLibria.TV</div>
                <div class="popular-dubs__bar" style="width: 14%"></div>
              </div>
              <div class="popular-dubs__item">
                <div class="popular-dubs__title">AniDUB</div>
                <div class="popular-dubs__bar" style="width: 14%"></div>
              </div>
              <div class="popular-dubs__item">
                <div class="popular-dubs__title">AniMedia</div>
                <div class="popular-dubs__bar" style="width: 14%"></div>
              </div>
              <div class="popular-dubs__item">
                <div class="popular-dubs__title">SHIZA Project</div>
                <div class="popular-dubs__bar" style="width: 10%"></div>
              </div>
            </div>
            <div class="audio-player__list">
              <div class="input-block">
                <select class="slim-select dub-select " tabindex="-1" data-ssid="ss-74261" style="display: none;">
                  <option value="Animedia">Озвучка Animedia (12 эп.)</option>
                  <option value="SHIZA Project">Озвучка SHIZA Project (12 эп.)</option>
                  <option value="AniLibria.TV">Озвучка AniLibria.TV (12 эп.)</option>
                  <option value="AniDUB">Озвучка AniDUB (12 эп.)</option>
                  <option value="D`n`T FunDab">Озвучка D`n`T FunDab (12 эп.)</option>
                  <option value="Неизвестно">Субтитры Неизвестно (12 эп.)</option>
                  <option value="SоvetRomantica">Субтитры SоvetRomantica (12 эп.)</option>
                  <option value="psyho19">Субтитры psyho19 (12 эп.)</option>
                  <option value="Amazing Dubbing">Субтитры Amazing Dubbing (12 эп.)</option>
                  <option value="AnimeJet">Озвучка AnimeJet (12 эп.)</option>
                  <option value="Ericchi &amp; DADORK">Озвучка Ericchi &amp; DADORK (12 эп.)</option>
                  <option value="AniStar">Озвучка AniStar (11 эп.)</option>
                  <option value="Risens Team">Субтитры Risens Team (10 эп.)</option>
                  <option value="animeplan">Озвучка animeplan (7 эп.)</option>
                  <option value="AniMur">Озвучка AniMur (6 эп.)</option>
                  <option value="Animeplan.com">Озвучка Animeplan.com (6 эп.)</option>
                  <option value="DeadLine Studio">Озвучка DeadLine Studio (5 эп.)</option>
                  <option value="Animeplan">Озвучка Animeplan (5 эп.)</option>
                  <option value="Timecraft">Субтитры Timecraft (3 эп.)</option>
                  <option value="FSG COMEBACK">Субтитры FSG COMEBACK (3 эп.)</option>
                  <option value="4Anime">Озвучка 4Anime (2 эп.)</option>
                  <option value="AnimeVost">Озвучка AnimeVost (1 эп.)</option>
                  <option value="AniMaunt">Озвучка AniMaunt (1 эп.)</option>
                  <option value="AniMedia">Озвучка AniMedia (1 эп.)</option>
                  <option value="FrondaCreativeStudio">Озвучка FrondaCreativeStudio (1 эп.)</option>
                  <option value="~Itazura-team~">Субтитры ~Itazura-team~ (1 эп.)</option>
                  <option value="AniPlay">Субтитры AniPlay (1 эп.)</option>
                </select>
                <div class="ss-74261 ss-main slim-select dub-select" style="">
                  <div class="ss-single-selected"><span class="placeholder">Озвучка Animedia (12 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search"><input type="search" placeholder="Искать" tabindex="0" aria-label="Искать"
                        autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="20672938">Озвучка Animedia (12 эп.)
                      </div>
                      <div class="ss-option" data-id="32963208">Озвучка SHIZA Project (12 эп.)</div>
                      <div class="ss-option" data-id="47427536">Озвучка AniLibria.TV (12 эп.)</div>
                      <div class="ss-option" data-id="50286694">Озвучка AniDUB (12 эп.)</div>
                      <div class="ss-option" data-id="8396755">Озвучка D`n`T FunDab (12 эп.)</div>
                      <div class="ss-option" data-id="82286087">Субтитры Неизвестно (12 эп.)</div>
                      <div class="ss-option" data-id="12491128">Субтитры SоvetRomantica (12 эп.)</div>
                      <div class="ss-option" data-id="92574395">Субтитры psyho19 (12 эп.)</div>
                      <div class="ss-option" data-id="24215064">Субтитры Amazing Dubbing (12 эп.)</div>
                      <div class="ss-option" data-id="12111458">Озвучка AnimeJet (12 эп.)</div>
                      <div class="ss-option" data-id="75677584">Озвучка Ericchi &amp; DADORK (12 эп.)</div>
                      <div class="ss-option" data-id="5938778">Озвучка AniStar (11 эп.)</div>
                      <div class="ss-option" data-id="61171404">Субтитры Risens Team (10 эп.)</div>
                      <div class="ss-option" data-id="9500510">Озвучка animeplan (7 эп.)</div>
                      <div class="ss-option" data-id="26374945">Озвучка AniMur (6 эп.)</div>
                      <div class="ss-option" data-id="16438036">Озвучка Animeplan.com (6 эп.)</div>
                      <div class="ss-option" data-id="95019466">Озвучка DeadLine Studio (5 эп.)</div>
                      <div class="ss-option" data-id="30524833">Озвучка Animeplan (5 эп.)</div>
                      <div class="ss-option" data-id="15385241">Субтитры Timecraft (3 эп.)</div>
                      <div class="ss-option" data-id="21183614">Субтитры FSG COMEBACK (3 эп.)</div>
                      <div class="ss-option" data-id="38830750">Озвучка 4Anime (2 эп.)</div>
                      <div class="ss-option" data-id="29451431">Озвучка AnimeVost (1 эп.)</div>
                      <div class="ss-option" data-id="93517193">Озвучка AniMaunt (1 эп.)</div>
                      <div class="ss-option" data-id="47360692">Озвучка AniMedia (1 эп.)</div>
                      <div class="ss-option" data-id="73565234">Озвучка FrondaCreativeStudio (1 эп.)</div>
                      <div class="ss-option" data-id="36505646">Субтитры ~Itazura-team~ (1 эп.)</div>
                      <div class="ss-option" data-id="57075129">Субтитры AniPlay (1 эп.)</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: block;" data-dub="Animedia">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-16614" style="display: none;">
                  <option value="kodik">Плеер kodik (12 эп.)</option>
                </select>
                <div class="ss-16614 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер kodik (12 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="69126998">Плеер kodik (12 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="SHIZA Project">
                <select class="slim-select " tabindex="-1" data-ssid="ss-25230" style="display: none;">
                  <option value="kodik">Плеер kodik (12 эп.)</option>
                  <option value="sibnet.ru">Плеер sibnet.ru (12 эп.)</option>
                </select>
                <div class="ss-25230 ss-main slim-select" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер kodik (12 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="74006429">Плеер kodik (12 эп.)
                      </div>
                      <div class="ss-option" data-id="51768165">Плеер sibnet.ru (12 эп.)</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="AniLibria.TV">
                <select class="slim-select " tabindex="-1" data-ssid="ss-9633" style="display: none;">
                  <option value="kodik">Плеер kodik (12 эп.)</option>
                  <option value="sibnet.ru">Плеер sibnet.ru (12 эп.)</option>
                </select>
                <div class="ss-9633 ss-main slim-select" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер kodik (12 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="28452608">Плеер kodik (12 эп.)
                      </div>
                      <div class="ss-option" data-id="66192459">Плеер sibnet.ru (12 эп.)</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="AniDUB">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-45973" style="display: none;">
                  <option value="sibnet.ru">Плеер sibnet.ru (12 эп.)</option>
                </select>
                <div class="ss-45973 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sibnet.ru (12 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="11819502">Плеер sibnet.ru (12 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="D`n`T FunDab">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-58482" style="display: none;">
                  <option value="sibnet.ru">Плеер sibnet.ru (12 эп.)</option>
                </select>
                <div class="ss-58482 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sibnet.ru (12 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="8846361">Плеер sibnet.ru (12 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="Неизвестно">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-68716" style="display: none;">
                  <option value="sibnet.ru">Плеер sibnet.ru (12 эп.)</option>
                </select>
                <div class="ss-68716 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sibnet.ru (12 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="50446906">Плеер sibnet.ru (12 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="SоvetRomantica">
                <select class="slim-select " tabindex="-1" data-ssid="ss-24963" style="display: none;">
                  <option value="sovetromantica.com">Плеер sovetromantica.com (12 эп.)</option>
                  <option value="vk.com">Плеер vk.com (10 эп.)</option>
                </select>
                <div class="ss-24963 ss-main slim-select" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sovetromantica.com (12
                      эп.)</span><span class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span
                        class="arrow-down"></span></span></div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="69290209">Плеер sovetromantica.com
                        (12 эп.)</div>
                      <div class="ss-option" data-id="88575952">Плеер vk.com (10 эп.)</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="psyho19">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-38416" style="display: none;">
                  <option value="vk.com">Плеер vk.com (12 эп.)</option>
                </select>
                <div class="ss-38416 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер vk.com (12 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="19652219">Плеер vk.com (12 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="Amazing Dubbing">
                <select class="slim-select " tabindex="-1" data-ssid="ss-88105" style="display: none;">
                  <option value="vk.com">Плеер vk.com (12 эп.)</option>
                  <option value="sibnet.ru">Плеер sibnet.ru (2 эп.)</option>
                </select>
                <div class="ss-88105 ss-main slim-select" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер vk.com (12 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="38524159">Плеер vk.com (12 эп.)
                      </div>
                      <div class="ss-option" data-id="19439526">Плеер sibnet.ru (2 эп.)</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="AnimeJet">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-19324" style="display: none;">
                  <option value="sibnet.ru">Плеер sibnet.ru (12 эп.)</option>
                </select>
                <div class="ss-19324 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sibnet.ru (12 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="6318558">Плеер sibnet.ru (12 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="Ericchi &amp; DADORK">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-85368" style="display: none;">
                  <option value="sibnet.ru">Плеер sibnet.ru (12 эп.)</option>
                </select>
                <div class="ss-85368 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sibnet.ru (12 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="60262731">Плеер sibnet.ru (12 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="AniStar">
                <select class="slim-select " tabindex="-1" data-ssid="ss-48344" style="display: none;">
                  <option value="vk.com">Плеер vk.com (11 эп.)</option>
                  <option value="sibnet.ru">Плеер sibnet.ru (4 эп.)</option>
                </select>
                <div class="ss-48344 ss-main slim-select" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер vk.com (11 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="91638637">Плеер vk.com (11 эп.)
                      </div>
                      <div class="ss-option" data-id="42172860">Плеер sibnet.ru (4 эп.)</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="Risens Team">
                <select class="slim-select " tabindex="-1" data-ssid="ss-1375" style="display: none;">
                  <option value="vk.com">Плеер vk.com (10 эп.)</option>
                  <option value="sibnet.ru">Плеер sibnet.ru (6 эп.)</option>
                </select>
                <div class="ss-1375 ss-main slim-select" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер vk.com (10 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="63663694">Плеер vk.com (10 эп.)
                      </div>
                      <div class="ss-option" data-id="88395491">Плеер sibnet.ru (6 эп.)</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="animeplan">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-52778" style="display: none;">
                  <option value="sibnet.ru">Плеер sibnet.ru (7 эп.)</option>
                </select>
                <div class="ss-52778 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sibnet.ru (7 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="62052583">Плеер sibnet.ru (7 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="AniMur">
                <select class="slim-select " tabindex="-1" data-ssid="ss-88668" style="display: none;">
                  <option value="sibnet.ru">Плеер sibnet.ru (6 эп.)</option>
                  <option value="vk.com">Плеер vk.com (5 эп.)</option>
                </select>
                <div class="ss-88668 ss-main slim-select" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sibnet.ru (6 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="39159978">Плеер sibnet.ru (6 эп.)
                      </div>
                      <div class="ss-option" data-id="59938289">Плеер vk.com (5 эп.)</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="Animeplan.com">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-74226" style="display: none;">
                  <option value="sibnet.ru">Плеер sibnet.ru (6 эп.)</option>
                </select>
                <div class="ss-74226 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sibnet.ru (6 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="43134096">Плеер sibnet.ru (6 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="DeadLine Studio">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-70705" style="display: none;">
                  <option value="sibnet.ru">Плеер sibnet.ru (5 эп.)</option>
                </select>
                <div class="ss-70705 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sibnet.ru (5 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="82389414">Плеер sibnet.ru (5 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="Animeplan">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-78955" style="display: none;">
                  <option value="sibnet.ru">Плеер sibnet.ru (5 эп.)</option>
                </select>
                <div class="ss-78955 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sibnet.ru (5 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="91556763">Плеер sibnet.ru (5 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="Timecraft">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-72112" style="display: none;">
                  <option value="sibnet.ru">Плеер sibnet.ru (3 эп.)</option>
                </select>
                <div class="ss-72112 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sibnet.ru (3 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="73817443">Плеер sibnet.ru (3 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="FSG COMEBACK">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-88" style="display: none;">
                  <option value="vk.com">Плеер vk.com (3 эп.)</option>
                </select>
                <div class="ss-88 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер vk.com (3 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="21549588">Плеер vk.com (3 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="4Anime">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-89127" style="display: none;">
                  <option value="sibnet.ru">Плеер sibnet.ru (2 эп.)</option>
                </select>
                <div class="ss-89127 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sibnet.ru (2 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="20446311">Плеер sibnet.ru (2 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="AnimeVost">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-46331" style="display: none;">
                  <option value="vk.com">Плеер vk.com (1 эп.)</option>
                </select>
                <div class="ss-46331 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер vk.com (1 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="63282500">Плеер vk.com (1 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="AniMaunt">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-48227" style="display: none;">
                  <option value="sibnet.ru">Плеер sibnet.ru (1 эп.)</option>
                </select>
                <div class="ss-48227 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sibnet.ru (1 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="39660450">Плеер sibnet.ru (1 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="AniMedia">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-80400" style="display: none;">
                  <option value="sibnet.ru">Плеер sibnet.ru (1 эп.)</option>
                </select>
                <div class="ss-80400 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sibnet.ru (1 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="44896183">Плеер sibnet.ru (1 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="FrondaCreativeStudio">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-7525" style="display: none;">
                  <option value="vk.com">Плеер vk.com (1 эп.)</option>
                </select>
                <div class="ss-7525 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер vk.com (1 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="71711669">Плеер vk.com (1 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="~Itazura-team~">
                <select class="slim-select disabled" tabindex="-1" data-ssid="ss-33866" style="display: none;">
                  <option value="vk.com">Плеер vk.com (1 эп.)</option>
                </select>
                <div class="ss-33866 ss-main slim-select disabled" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер vk.com (1 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="60841244">Плеер vk.com (1 эп.)
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="input-block player-select" style="display: none;" data-dub="AniPlay">
                <select class="slim-select " tabindex="-1" data-ssid="ss-80490" style="display: none;">
                  <option value="sibnet.ru">Плеер sibnet.ru (1 эп.)</option>
                  <option value="vk.com">Плеер vk.com (1 эп.)</option>
                </select>
                <div class="ss-80490 ss-main slim-select" style="">
                  <div class="ss-single-selected"><span class="placeholder">Плеер sibnet.ru (1 эп.)</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="50993571">Плеер sibnet.ru (1 эп.)
                      </div>
                      <div class="ss-option" data-id="74244272">Плеер vk.com (1 эп.)</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="episodes__count-controls">
                <button class="episodes__count-minus-btn" aria-label="Минус серия">-</button>
                <div class="episodes__count-number">Просмотрено серий: <span>0</span></div>
                <button class="episodes__count-plus-btn" aria-label="Плюс серия">+</button>
              </div>
            </div>
            <div class="select-series-list select-series-img-style slick-initialized slick-slider select-series-slider"
              data-dub="Animedia" data-player="kodik" style=""><button type="button"
                class="slick-prev slick-arrow slick-disabled" aria-label="Предыдущий" aria-disabled="true"
                style="display: inline-block;"><i class="fas fa-chevron-left"></i></button>
              <div class="slick-list draggable">
                <div class="slick-track" style="opacity: 1; width: 60000px; transform: translate3d(0px, 0px, 0px);">
                  <div
                    class="select-series-item select-series-img-style__item slick-slide select-series-active slick-current slick-active"
                    data-episode_id="1533760"
                    data-iframe="//kodik.info/season/61001/39f38c9fd6c0cfec81feaf7f76b5b9e5/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=1"
                    data-series-number="1" data-slick-index="0" aria-hidden="false" tabindex="0">
                    <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                        alt="Постер к 1 серии аниме Юри на льду">
                      <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                    </div>
                    <div class="select-series-img-style__number">Серия 1</div>
                    <div class="select-series-img-style__date">Добавлена: 19 June</div>
                  </div>
                  <div class="select-series-item select-series-img-style__item  slick-slide" data-episode_id="1533761"
                    data-iframe="//kodik.info/season/61001/39f38c9fd6c0cfec81feaf7f76b5b9e5/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=2"
                    data-series-number="2" data-slick-index="1" aria-hidden="true" tabindex="-1">
                    <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                        alt="Постер к 2 серии аниме Юри на льду">
                      <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                    </div>
                    <div class="select-series-img-style__number">Серия 2</div>
                    <div class="select-series-img-style__date">Добавлена: 19 June</div>
                  </div>
                  <div class="select-series-item select-series-img-style__item  slick-slide" data-episode_id="1533762"
                    data-iframe="//kodik.info/season/61001/39f38c9fd6c0cfec81feaf7f76b5b9e5/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=3"
                    data-series-number="3" data-slick-index="2" aria-hidden="true" tabindex="-1">
                    <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                        alt="Постер к 3 серии аниме Юри на льду">
                      <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                    </div>
                    <div class="select-series-img-style__number">Серия 3</div>
                    <div class="select-series-img-style__date">Добавлена: 19 June</div>
                  </div>
                  <div class="select-series-item select-series-img-style__item  slick-slide" data-episode_id="1533763"
                    data-iframe="//kodik.info/season/61001/39f38c9fd6c0cfec81feaf7f76b5b9e5/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=4"
                    data-series-number="4" data-slick-index="3" aria-hidden="true" tabindex="-1">
                    <div class="select-series-img-style__image"><img src="/a_img/series/675/4.jpg"
                        alt="Постер к 4 серии аниме Юри на льду">
                      <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                    </div>
                    <div class="select-series-img-style__number">Серия 4</div>
                    <div class="select-series-img-style__date">Добавлена: 19 June</div>
                  </div>
                  <div class="select-series-item select-series-img-style__item  slick-slide" data-episode_id="1533764"
                    data-iframe="//kodik.info/season/61001/39f38c9fd6c0cfec81feaf7f76b5b9e5/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=5"
                    data-series-number="5" data-slick-index="4" aria-hidden="true" tabindex="-1">
                    <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                        alt="Постер к 5 серии аниме Юри на льду">
                      <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                    </div>
                    <div class="select-series-img-style__number">Серия 5</div>
                    <div class="select-series-img-style__date">Добавлена: 19 June</div>
                  </div>
                  <div class="select-series-item select-series-img-style__item  slick-slide" data-episode_id="1533765"
                    data-iframe="//kodik.info/season/61001/39f38c9fd6c0cfec81feaf7f76b5b9e5/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=6"
                    data-series-number="6" data-slick-index="5" aria-hidden="true" tabindex="-1">
                    <div class="select-series-img-style__image"><img src="/a_img/series/675/6.jpg"
                        alt="Постер к 6 серии аниме Юри на льду">
                      <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                    </div>
                    <div class="select-series-img-style__number">Серия 6</div>
                    <div class="select-series-img-style__date">Добавлена: 19 June</div>
                  </div>
                  <div class="select-series-item select-series-img-style__item  slick-slide" data-episode_id="1533766"
                    data-iframe="//kodik.info/season/61001/39f38c9fd6c0cfec81feaf7f76b5b9e5/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=7"
                    data-series-number="7" data-slick-index="6" aria-hidden="true" tabindex="-1">
                    <div class="select-series-img-style__image"><img src="/a_img/series/675/7.jpg"
                        alt="Постер к 7 серии аниме Юри на льду">
                      <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                    </div>
                    <div class="select-series-img-style__number">Серия 7</div>
                    <div class="select-series-img-style__date">Добавлена: 19 June</div>
                  </div>
                  <div class="select-series-item select-series-img-style__item  slick-slide" data-episode_id="1533767"
                    data-iframe="//kodik.info/season/61001/39f38c9fd6c0cfec81feaf7f76b5b9e5/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=8"
                    data-series-number="8" data-slick-index="7" aria-hidden="true" tabindex="-1">
                    <div class="select-series-img-style__image"><img src="/a_img/series/675/8.jpg"
                        alt="Постер к 8 серии аниме Юри на льду">
                      <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                    </div>
                    <div class="select-series-img-style__number">Серия 8</div>
                    <div class="select-series-img-style__date">Добавлена: 19 June</div>
                  </div>
                  <div class="select-series-item select-series-img-style__item  slick-slide" data-episode_id="1533768"
                    data-iframe="//kodik.info/season/61001/39f38c9fd6c0cfec81feaf7f76b5b9e5/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=9"
                    data-series-number="9" data-slick-index="8" aria-hidden="true" tabindex="-1">
                    <div class="select-series-img-style__image"><img src="/a_img/series/675/9.jpg"
                        alt="Постер к 9 серии аниме Юри на льду">
                      <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                    </div>
                    <div class="select-series-img-style__number">Серия 9</div>
                    <div class="select-series-img-style__date">Добавлена: 19 June</div>
                  </div>
                  <div class="select-series-item select-series-img-style__item  slick-slide" data-episode_id="1533769"
                    data-iframe="//kodik.info/season/61001/39f38c9fd6c0cfec81feaf7f76b5b9e5/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=10"
                    data-series-number="10" data-slick-index="9" aria-hidden="true" tabindex="-1">
                    <div class="select-series-img-style__image"><img src="/a_img/series/675/10.jpg"
                        alt="Постер к 10 серии аниме Юри на льду">
                      <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                    </div>
                    <div class="select-series-img-style__number">Серия 10</div>
                    <div class="select-series-img-style__date">Добавлена: 19 June</div>
                  </div>
                  <div class="select-series-item select-series-img-style__item  slick-slide" data-episode_id="1533770"
                    data-iframe="//kodik.info/season/61001/39f38c9fd6c0cfec81feaf7f76b5b9e5/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=11"
                    data-series-number="11" data-slick-index="10" aria-hidden="true" tabindex="-1">
                    <div class="select-series-img-style__image"><img src="/a_img/series/675/11.jpg"
                        alt="Постер к 11 серии аниме Юри на льду">
                      <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.4</div>
                    </div>
                    <div class="select-series-img-style__number">Серия 11</div>
                    <div class="select-series-img-style__date">Добавлена: 19 June</div>
                  </div>
                  <div class="select-series-item select-series-img-style__item  slick-slide" data-episode_id="1533771"
                    data-iframe="//kodik.info/season/61001/39f38c9fd6c0cfec81feaf7f76b5b9e5/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=12"
                    data-series-number="12" data-slick-index="11" aria-hidden="true" tabindex="-1">
                    <div class="select-series-img-style__image"><img src="/a_img/series/675/12.jpg"
                        alt="Постер к 12 серии аниме Юри на льду">
                      <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                    </div>
                    <div class="select-series-img-style__number">Серия 12</div>
                    <div class="select-series-img-style__date">Добавлена: 19 June</div>
                  </div>
                </div>
              </div>











              <button type="button" class="slick-next slick-arrow" aria-label="Следующий" style="display: flex;"
                aria-disabled="false"><i class="fas fa-chevron-right"></i></button>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="SHIZA Project" data-player="kodik"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="1574024"
                data-iframe="//kodik.info/season/54676/7b01c38e3cf817369802b1fbefdffd99/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=1"
                data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 30 January</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1574025"
                data-iframe="//kodik.info/season/54676/7b01c38e3cf817369802b1fbefdffd99/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=2"
                data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 30 January</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1574026"
                data-iframe="//kodik.info/season/54676/7b01c38e3cf817369802b1fbefdffd99/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=3"
                data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 30 January</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1574027"
                data-iframe="//kodik.info/season/54676/7b01c38e3cf817369802b1fbefdffd99/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=4"
                data-series-number="4">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/4.jpg"
                    alt="Постер к 4 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 4</div>
                <div class="select-series-img-style__date">Добавлена: 30 January</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1574028"
                data-iframe="//kodik.info/season/54676/7b01c38e3cf817369802b1fbefdffd99/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=5"
                data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 30 January</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1574029"
                data-iframe="//kodik.info/season/54676/7b01c38e3cf817369802b1fbefdffd99/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=6"
                data-series-number="6">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/6.jpg"
                    alt="Постер к 6 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Добавлена: 30 January</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1574030"
                data-iframe="//kodik.info/season/54676/7b01c38e3cf817369802b1fbefdffd99/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=7"
                data-series-number="7">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/7.jpg"
                    alt="Постер к 7 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Добавлена: 30 January</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1574031"
                data-iframe="//kodik.info/season/54676/7b01c38e3cf817369802b1fbefdffd99/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=8"
                data-series-number="8">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/8.jpg"
                    alt="Постер к 8 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 8</div>
                <div class="select-series-img-style__date">Добавлена: 30 January</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1574032"
                data-iframe="//kodik.info/season/54676/7b01c38e3cf817369802b1fbefdffd99/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=9"
                data-series-number="9">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/9.jpg"
                    alt="Постер к 9 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 9</div>
                <div class="select-series-img-style__date">Добавлена: 30 January</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1574033"
                data-iframe="//kodik.info/season/54676/7b01c38e3cf817369802b1fbefdffd99/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=10"
                data-series-number="10">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/10.jpg"
                    alt="Постер к 10 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 10</div>
                <div class="select-series-img-style__date">Добавлена: 30 January</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1574034"
                data-iframe="//kodik.info/season/54676/7b01c38e3cf817369802b1fbefdffd99/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=11"
                data-series-number="11">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/11.jpg"
                    alt="Постер к 11 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.4</div>
                </div>
                <div class="select-series-img-style__number">Серия 11</div>
                <div class="select-series-img-style__date">Добавлена: 30 January</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1574035"
                data-iframe="//kodik.info/season/54676/7b01c38e3cf817369802b1fbefdffd99/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=12"
                data-series-number="12">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/12.jpg"
                    alt="Постер к 12 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 12</div>
                <div class="select-series-img-style__date">Добавлена: 30 January</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="SHIZA Project" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122084"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2711002" data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122136"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2718645" data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122181"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2726812" data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122222"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2732543" data-series-number="4">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/4.jpg"
                    alt="Постер к 4 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 4</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122263"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2739056" data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122305"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2746534" data-series-number="6">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/6.jpg"
                    alt="Постер к 6 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122344"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2753499" data-series-number="7">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/7.jpg"
                    alt="Постер к 7 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122383"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2783361" data-series-number="8">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/8.jpg"
                    alt="Постер к 8 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 8</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122421"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2784241" data-series-number="9">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/9.jpg"
                    alt="Постер к 9 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 9</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122456"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2788670" data-series-number="10">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/10.jpg"
                    alt="Постер к 10 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 10</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122487"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2792804" data-series-number="11">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/11.jpg"
                    alt="Постер к 11 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.4</div>
                </div>
                <div class="select-series-img-style__number">Серия 11</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122522"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2793335" data-series-number="12">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/12.jpg"
                    alt="Постер к 12 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 12</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="AniLibria.TV" data-player="kodik"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="1601943"
                data-iframe="//kodik.info/season/3072/2be14ba2df3ace259d576793fa85a013/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=1"
                data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 10 December</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1601944"
                data-iframe="//kodik.info/season/3072/2be14ba2df3ace259d576793fa85a013/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=2"
                data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 10 December</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1601945"
                data-iframe="//kodik.info/season/3072/2be14ba2df3ace259d576793fa85a013/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=3"
                data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 10 December</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1601946"
                data-iframe="//kodik.info/season/3072/2be14ba2df3ace259d576793fa85a013/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=4"
                data-series-number="4">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/4.jpg"
                    alt="Постер к 4 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 4</div>
                <div class="select-series-img-style__date">Добавлена: 10 December</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1601947"
                data-iframe="//kodik.info/season/3072/2be14ba2df3ace259d576793fa85a013/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=5"
                data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 10 December</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1601948"
                data-iframe="//kodik.info/season/3072/2be14ba2df3ace259d576793fa85a013/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=6"
                data-series-number="6">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/6.jpg"
                    alt="Постер к 6 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Добавлена: 10 December</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1601949"
                data-iframe="//kodik.info/season/3072/2be14ba2df3ace259d576793fa85a013/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=7"
                data-series-number="7">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/7.jpg"
                    alt="Постер к 7 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Добавлена: 10 December</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1601950"
                data-iframe="//kodik.info/season/3072/2be14ba2df3ace259d576793fa85a013/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=8"
                data-series-number="8">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/8.jpg"
                    alt="Постер к 8 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 8</div>
                <div class="select-series-img-style__date">Добавлена: 10 December</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1601951"
                data-iframe="//kodik.info/season/3072/2be14ba2df3ace259d576793fa85a013/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=9"
                data-series-number="9">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/9.jpg"
                    alt="Постер к 9 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 9</div>
                <div class="select-series-img-style__date">Добавлена: 10 December</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1601952"
                data-iframe="//kodik.info/season/3072/2be14ba2df3ace259d576793fa85a013/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=10"
                data-series-number="10">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/10.jpg"
                    alt="Постер к 10 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 10</div>
                <div class="select-series-img-style__date">Добавлена: 10 December</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1601953"
                data-iframe="//kodik.info/season/3072/2be14ba2df3ace259d576793fa85a013/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=11"
                data-series-number="11">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/11.jpg"
                    alt="Постер к 11 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.4</div>
                </div>
                <div class="select-series-img-style__number">Серия 11</div>
                <div class="select-series-img-style__date">Добавлена: 10 December</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="1601954"
                data-iframe="//kodik.info/season/3072/2be14ba2df3ace259d576793fa85a013/720p?translations=false&amp;amp;hide_selectors=true&amp;amp;only_season=true&amp;amp;episode=12"
                data-series-number="12">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/12.jpg"
                    alt="Постер к 12 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 12</div>
                <div class="select-series-img-style__date">Добавлена: 10 December</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="AniLibria.TV" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122078"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2714189" data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122131"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2718918" data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122176"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2740617" data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122217"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2740618" data-series-number="4">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/4.jpg"
                    alt="Постер к 4 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 4</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122257"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2740620" data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122300"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2758476" data-series-number="6">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/6.jpg"
                    alt="Постер к 6 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122341"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2758478" data-series-number="7">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/7.jpg"
                    alt="Постер к 7 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122381"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2761108" data-series-number="8">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/8.jpg"
                    alt="Постер к 8 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 8</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122418"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2783064" data-series-number="9">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/9.jpg"
                    alt="Постер к 9 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 9</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122454"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2784051" data-series-number="10">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/10.jpg"
                    alt="Постер к 10 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 10</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122485"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2794088" data-series-number="11">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/11.jpg"
                    alt="Постер к 11 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.4</div>
                </div>
                <div class="select-series-img-style__number">Серия 11</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122518"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2794094" data-series-number="12">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/12.jpg"
                    alt="Постер к 12 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 12</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="AniDUB" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122077"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2713457" data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122130"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2718867" data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122175"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2725152" data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122216"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2742604" data-series-number="4">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/4.jpg"
                    alt="Постер к 4 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 4</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122256"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2742621" data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122299"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2748739" data-series-number="6">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/6.jpg"
                    alt="Постер к 6 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122340"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2754019" data-series-number="7">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/7.jpg"
                    alt="Постер к 7 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122380"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2786217" data-series-number="8">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/8.jpg"
                    alt="Постер к 8 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 8</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122417"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2786238" data-series-number="9">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/9.jpg"
                    alt="Постер к 9 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 9</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122453"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2786305" data-series-number="10">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/10.jpg"
                    alt="Постер к 10 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 10</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122484"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2797826" data-series-number="11">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/11.jpg"
                    alt="Постер к 11 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.4</div>
                </div>
                <div class="select-series-img-style__number">Серия 11</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122517"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2797750" data-series-number="12">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/12.jpg"
                    alt="Постер к 12 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 12</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="D`n`T FunDab" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122082"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2857398" data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122134"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2857399" data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122179"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2858435" data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122220"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2862996" data-series-number="4">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/4.jpg"
                    alt="Постер к 4 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 4</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122261"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2868449" data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122304"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2869453" data-series-number="6">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/6.jpg"
                    alt="Постер к 6 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122343"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2870090" data-series-number="7">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/7.jpg"
                    alt="Постер к 7 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122382"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2874590" data-series-number="8">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/8.jpg"
                    alt="Постер к 8 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 8</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122420"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2875132" data-series-number="9">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/9.jpg"
                    alt="Постер к 9 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 9</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122455"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2875978" data-series-number="10">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/10.jpg"
                    alt="Постер к 10 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 10</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122486"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2880408" data-series-number="11">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/11.jpg"
                    alt="Постер к 11 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.4</div>
                </div>
                <div class="select-series-img-style__number">Серия 11</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122520"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2881611" data-series-number="12">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/12.jpg"
                    alt="Постер к 12 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 12</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="Неизвестно" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122076"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2707815" data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122128"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2714191" data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122174"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2722403" data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122215"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2728173" data-series-number="4">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/4.jpg"
                    alt="Постер к 4 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 4</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122255"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2735000" data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122298"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2740640" data-series-number="6">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/6.jpg"
                    alt="Постер к 6 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122339"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2747695" data-series-number="7">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/7.jpg"
                    alt="Постер к 7 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122379"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2753601" data-series-number="8">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/8.jpg"
                    alt="Постер к 8 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 8</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122416"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2759949" data-series-number="9">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/9.jpg"
                    alt="Постер к 9 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 9</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122452"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2779309" data-series-number="10">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/10.jpg"
                    alt="Постер к 10 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 10</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122483"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2784522" data-series-number="11">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/11.jpg"
                    alt="Постер к 11 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.4</div>
                </div>
                <div class="select-series-img-style__number">Серия 11</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122516"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2790667" data-series-number="12">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/12.jpg"
                    alt="Постер к 12 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 12</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="SоvetRomantica"
              data-player="sovetromantica.com" style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122064"
                data-iframe="//sovetromantica.com/embed/episode_188_1-dubbed" data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122120"
                data-iframe="//sovetromantica.com/embed/episode_188_2-dubbed" data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122164"
                data-iframe="//sovetromantica.com/embed/episode_188_3-dubbed" data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122207"
                data-iframe="//sovetromantica.com/embed/episode_188_4-dubbed" data-series-number="4">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/4.jpg"
                    alt="Постер к 4 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 4</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122246"
                data-iframe="//sovetromantica.com/embed/episode_188_5-dubbed" data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122292"
                data-iframe="//sovetromantica.com/embed/episode_188_6-dubbed" data-series-number="6">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/6.jpg"
                    alt="Постер к 6 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122332"
                data-iframe="//sovetromantica.com/embed/episode_188_7-dubbed" data-series-number="7">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/7.jpg"
                    alt="Постер к 7 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122372"
                data-iframe="//sovetromantica.com/embed/episode_188_8-dubbed" data-series-number="8">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/8.jpg"
                    alt="Постер к 8 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 8</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122408"
                data-iframe="//sovetromantica.com/embed/episode_188_9-dubbed" data-series-number="9">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/9.jpg"
                    alt="Постер к 9 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 9</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122446"
                data-iframe="//sovetromantica.com/embed/episode_188_10-dubbed" data-series-number="10">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/10.jpg"
                    alt="Постер к 10 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 10</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122477"
                data-iframe="//sovetromantica.com/embed/episode_188_11-dubbed" data-series-number="11">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/11.jpg"
                    alt="Постер к 11 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.4</div>
                </div>
                <div class="select-series-img-style__number">Серия 11</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122530"
                data-iframe="//sovetromantica.com/embed/episode_188_12-subtitles" data-series-number="12">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/12.jpg"
                    alt="Постер к 12 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 12</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="SоvetRomantica" data-player="vk.com"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122094"
                data-iframe="//vk.com/video_ext.php?oid=-33905270&amp;id=456241786&amp;hash=6ced65f585a8d6de"
                data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122145"
                data-iframe="//vk.com/video_ext.php?oid=-33905270&amp;id=456241870&amp;hash=0086be444b0f4368"
                data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122191"
                data-iframe="//vk.com/video_ext.php?oid=-33905270&amp;id=456241959&amp;hash=570828efc7f693de"
                data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122274"
                data-iframe="//vk.com/video_ext.php?oid=-33905270&amp;id=456242092&amp;hash=9c28f1bef55bd16d"
                data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122354"
                data-iframe="//vk.com/video_ext.php?oid=-33905270&amp;id=456242184&amp;hash=175fc9ced6f215a0"
                data-series-number="7">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/7.jpg"
                    alt="Постер к 7 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122464"
                data-iframe="//vk.com/video_ext.php?oid=-33905270&amp;id=456242330&amp;hash=78e36168c5027685"
                data-series-number="10">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/10.jpg"
                    alt="Постер к 10 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 10</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 11 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='11'>Включить</button> "
                data-series-number="11">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 11 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 11</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="psyho19" data-player="vk.com"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122092"
                data-iframe="//vk.com/video_ext.php?oid=-127884413&amp;id=456239018&amp;hash=d78fb39c7d1f599e"
                data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122143"
                data-iframe="//vk.com/video_ext.php?oid=-127884413&amp;id=456239024&amp;hash=14557345f2024205"
                data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122190"
                data-iframe="//vk.com/video_ext.php?oid=-127884413&amp;id=456239025&amp;hash=fc59ea55c1e6b514"
                data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122273"
                data-iframe="//vk.com/video_ext.php?oid=-127884413&amp;id=456239030&amp;hash=aaa751edb6c4d682"
                data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122314"
                data-iframe="//vk.com/video_ext.php?oid=-127884413&amp;id=456239031&amp;hash=72b59a9a53f2016a"
                data-series-number="6">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/6.jpg"
                    alt="Постер к 6 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122353"
                data-iframe="//vk.com/video_ext.php?oid=-127884413&amp;id=456239033&amp;hash=fef983f6a65d15b9"
                data-series-number="7">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/7.jpg"
                    alt="Постер к 7 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122390"
                data-iframe="//vk.com/video_ext.php?oid=-127884413&amp;id=456239034&amp;hash=c32577ae3642bd0c"
                data-series-number="8">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/8.jpg"
                    alt="Постер к 8 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 8</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122427"
                data-iframe="//vk.com/video_ext.php?oid=-127884413&amp;id=456239036&amp;hash=637aa0558ec6473a"
                data-series-number="9">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/9.jpg"
                    alt="Постер к 9 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 9</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122462"
                data-iframe="//vk.com/video_ext.php?oid=-127884413&amp;id=456239039&amp;hash=05f6eaa938f0c301"
                data-series-number="10">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/10.jpg"
                    alt="Постер к 10 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 10</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122529"
                data-iframe="//vk.com/video_ext.php?oid=-127884413&amp;id=456239041&amp;hash=6e73326380855c3b"
                data-series-number="12">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/12.jpg"
                    alt="Постер к 12 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 12</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="Amazing Dubbing" data-player="vk.com"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122188"
                data-iframe="//vk.com/video_ext.php?oid=-126822319&amp;id=456239131&amp;hash=0ca2446c8f0075ba"
                data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122229"
                data-iframe="//vk.com/video_ext.php?oid=-126822319&amp;id=456239149&amp;hash=60cbc853911fc715"
                data-series-number="4">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/4.jpg"
                    alt="Постер к 4 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 4</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122271"
                data-iframe="//vk.com/video_ext.php?oid=-126822319&amp;id=456239175&amp;hash=0bb66a8fae5b262e"
                data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122312"
                data-iframe="//vk.com/video_ext.php?oid=-126822319&amp;id=456239187&amp;hash=773fd2d3c6931af3"
                data-series-number="6">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/6.jpg"
                    alt="Постер к 6 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122352"
                data-iframe="//vk.com/video_ext.php?oid=-126822319&amp;id=456239200&amp;hash=0f83ebb32d06fa48"
                data-series-number="7">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/7.jpg"
                    alt="Постер к 7 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122389"
                data-iframe="//vk.com/video_ext.php?oid=-126822319&amp;id=456239216&amp;hash=0482908e7fac7b91"
                data-series-number="8">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/8.jpg"
                    alt="Постер к 8 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 8</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122426"
                data-iframe="//vk.com/video_ext.php?oid=-126822319&amp;id=456239231&amp;hash=b69ffeefd4b39358"
                data-series-number="9">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/9.jpg"
                    alt="Постер к 9 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 9</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122494"
                data-iframe="//vk.com/video_ext.php?oid=-126822319&amp;id=456239256&amp;hash=241f6871923b1cf0"
                data-series-number="11">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/11.jpg"
                    alt="Постер к 11 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.4</div>
                </div>
                <div class="select-series-img-style__number">Серия 11</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122528"
                data-iframe="//vk.com/video_ext.php?oid=-126822319&amp;id=456239291&amp;hash=987c59fdcd87eca2"
                data-series-number="12">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/12.jpg"
                    alt="Постер к 12 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 12</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="Amazing Dubbing" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122155"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2719483" data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 3 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='3'>Включить</button> "
                data-series-number="3">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 3 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="AnimeJet" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122258"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2735181" data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122301"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2743029" data-series-number="6">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/6.jpg"
                    alt="Постер к 6 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122419"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2763540" data-series-number="9">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/9.jpg"
                    alt="Постер к 9 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 9</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122519"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2790180" data-series-number="12">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/12.jpg"
                    alt="Постер к 12 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 12</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="Ericchi &amp; DADORK"
              data-player="sibnet.ru" style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122521"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2807534" data-series-number="12">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/12.jpg"
                    alt="Постер к 12 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 12</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="AniStar" data-player="vk.com"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122330"
                data-iframe="//vk.com/video_ext.php?oid=-130145784&amp;id=456239138&amp;hash=bc2fc6b66738d4a0"
                data-series-number="7">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/7.jpg"
                    alt="Постер к 7 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122369"
                data-iframe="//vk.com/video_ext.php?oid=-130145784&amp;id=456239193&amp;hash=1c42d6210c784864"
                data-series-number="8">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/8.jpg"
                    alt="Постер к 8 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 8</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122443"
                data-iframe="//vk.com/video_ext.php?oid=-130145784&amp;id=456239265&amp;hash=e57aae4e78304ee8"
                data-series-number="10">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/10.jpg"
                    alt="Постер к 10 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 10</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122475"
                data-iframe="//vk.com/video_ext.php?oid=-130145784&amp;id=456239289&amp;hash=04221d2cdce02f8b"
                data-series-number="11">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/11.jpg"
                    alt="Постер к 11 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.4</div>
                </div>
                <div class="select-series-img-style__number">Серия 11</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 12 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='12'>Включить</button> "
                data-series-number="12">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 12 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 12</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="AniStar" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122133"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2713635" data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122178"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2720386" data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122219"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2727625" data-series-number="4">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/4.jpg"
                    alt="Постер к 4 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 4</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 5 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='5'>Включить</button> "
                data-series-number="5">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 5 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="Risens Team" data-player="vk.com"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122093"
                data-iframe="//vk.com/video_ext.php?oid=-130150054&amp;id=456239020&amp;hash=0cceb154e5a2f0bd"
                data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122144"
                data-iframe="//vk.com/video_ext.php?oid=-130150054&amp;id=456239109&amp;hash=7bb88d8dd222edef"
                data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122463"
                data-iframe="//vk.com/video_ext.php?oid=-130150054&amp;id=456239538&amp;hash=c2ebde3a76f86946"
                data-series-number="10">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/10.jpg"
                    alt="Постер к 10 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 10</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 11 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='11'>Включить</button> "
                data-series-number="11">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 11 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 11</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="Risens Team" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122283"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2734306" data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122323"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2740043" data-series-number="6">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/6.jpg"
                    alt="Постер к 6 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 7 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='7'>Включить</button> "
                data-series-number="7">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 7 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="animeplan" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122342"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2753448" data-series-number="7">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/7.jpg"
                    alt="Постер к 7 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.8</div>
                </div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 8 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='8'>Включить</button> "
                data-series-number="8">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 8 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 8</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="AniMur" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122081"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2730660" data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122132"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2736031" data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122177"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2737076" data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122218"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2742007" data-series-number="4">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/4.jpg"
                    alt="Постер к 4 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 4</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122260"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2744042" data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122303"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2744791" data-series-number="6">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/6.jpg"
                    alt="Постер к 6 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 7 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='7'>Включить</button> "
                data-series-number="7">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 7 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="AniMur" data-player="vk.com"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122244"
                data-iframe="//vk.com/video_ext.php?oid=353455265&amp;id=456239028&amp;hash=6a4ba86ba23592fd"
                data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 6 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='6'>Включить</button> "
                data-series-number="6">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 6 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="Animeplan.com" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122302"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2741761" data-series-number="6">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/6.jpg"
                    alt="Постер к 6 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 7 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='7'>Включить</button> "
                data-series-number="7">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 7 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 7</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="DeadLine Studio" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122083"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2722211" data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122135"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2722212" data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122180"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2725001" data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122221"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2743456" data-series-number="4">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/4.jpg"
                    alt="Постер к 4 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.5</div>
                </div>
                <div class="select-series-img-style__number">Серия 4</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122262"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2743461" data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 6 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='6'>Включить</button> "
                data-series-number="6">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 6 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="Animeplan" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122259"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2735184" data-series-number="5">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/5.jpg"
                    alt="Постер к 5 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 5</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 6 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='6'>Включить</button> "
                data-series-number="6">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 6 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 6</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="Timecraft" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122107"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2713608" data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122156"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2715830" data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-episode_id="122198"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2723138" data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 4 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='4'>Включить</button> "
                data-series-number="4">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 4 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 4</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="FSG COMEBACK" data-player="vk.com"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122189"
                data-iframe="//vk.com/video_ext.php?oid=-101820654&amp;id=456239680&amp;hash=74e45d1f33c16e44"
                data-series-number="3">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/3.jpg"
                    alt="Постер к 3 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.7</div>
                </div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 4 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='4'>Включить</button> "
                data-series-number="4">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 4 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 4</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="4Anime" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122129"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2715884" data-series-number="2">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/2.jpg"
                    alt="Постер к 2 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 3 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='3'>Включить</button> "
                data-series-number="3">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 3 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 3</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="AnimeVost" data-player="vk.com"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122061"
                data-iframe="//vk.com/video_ext.php?oid=-130149355&amp;id=456239026&amp;hash=1f2df39058d21379"
                data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 2 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='2'>Включить</button> "
                data-series-number="2">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 2 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="AniMaunt" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122079"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2708086" data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 2 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='2'>Включить</button> "
                data-series-number="2">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 2 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="AniMedia" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122080"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2709656" data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 2 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='2'>Включить</button> "
                data-series-number="2">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 2 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="FrondaCreativeStudio" data-player="vk.com"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122062"
                data-iframe="//vk.com/video_ext.php?oid=-124439291&amp;id=456239052&amp;hash=ce9a0f7d61ab7829"
                data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 2 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='2'>Включить</button> "
                data-series-number="2">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 2 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="~Itazura-team~" data-player="vk.com"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122095"
                data-iframe="//vk.com/video_ext.php?oid=-130302021&amp;id=456239023&amp;hash=ecff0ae48579c26d"
                data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 2 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='2'>Включить</button> "
                data-series-number="2">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 2 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="AniPlay" data-player="sibnet.ru"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122106"
                data-iframe="//video.sibnet.ru/shell.php?videoid=2707663" data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 2 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='2'>Включить</button> "
                data-series-number="2">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 2 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
            <div class="select-series-list select-series-img-style" data-dub="AniPlay" data-player="vk.com"
              style="display: none">
              <div class="select-series-item select-series-img-style__item" data-episode_id="122091"
                data-iframe="//vk.com/video_ext.php?oid=-64292596&amp;id=456242155&amp;hash=957557b79bb60679"
                data-series-number="1">
                <div class="select-series-img-style__image"><img src="/a_img/series/675/1.jpg"
                    alt="Постер к 1 серии аниме Юри на льду">
                  <div class="select-series-img-style__rating tooltipped" data-tooltip="Рейтинг серии">4.6</div>
                </div>
                <div class="select-series-img-style__number">Серия 1</div>
                <div class="select-series-img-style__date">Добавлена: 11 July</div>
              </div>
              <div class="select-series-item select-series-img-style__item" data-iframe="new_series"
                data-new-series-text="Cерия 2 уже доступна в другой озвучке <br> <button class='next-series-dubs-btn blue-btn' data-series-number='2'>Включить</button> "
                data-series-number="2">
                <div class="select-series-img-style__image"><img src="/img/no-series.jpg"
                    alt="Постер к 2 серии аниме Юри на льду"></div>
                <div class="select-series-img-style__number">Серия 2</div>
                <div class="select-series-img-style__date">Ожидается: Неизвестно</div>
              </div>
            </div>
          </div>
          <div class="rek" style="padding-bottom: 20px; padding-top: 10px">

            <div id="yandex_rtb_R-A-1985589-4"></div>
            <script>window.yaContextCb.push(() => {
                Ya.Context.AdvManager.render({
                  renderTo: 'yandex_rtb_R-A-1985589-4',
                  blockId: 'R-A-1985589-4'
                })
              })
            </script>
          </div>
          <div class="small-title">Порядок просмотра</div>
          <div class="anime-chronology">
            <div class="anime-chronology__item chronology-select" style="">
              <div class="anime-chronology__number">
                <i class="fas fa-play-circle"></i>
              </div>
              <a href="/anime/yuri-na-ldu" class="anime-chronology__name">Юри на льду <span
                  class="anime-chronology__status"></span></a>
              <div class="anime-chronology__year">2016 год</div>
              <div class="anime-chronology__rating info-box rating-green">7.9</div>
            </div>
            <div class="anime-chronology__item " style="">
              <div class="anime-chronology__number">
                2
              </div>
              <a href="/anime/yuri-na-ldu-ledyanaya-yunost" class="anime-chronology__name">Юри на льду: Ледяная юность
                <span class="anime-chronology__status">Анонс</span></a>
              <div class="anime-chronology__year">2021 год</div>
              <div class="anime-chronology__rating info-box rating-grey">–</div>
            </div>
            <div class="anime-chronology__item " style="">
              <div class="anime-chronology__number">
                3
              </div>
              <a href="/anime/yuri-na-ldu-specvypusk" class="anime-chronology__name">Юри на льду: Спецвыпуск <span
                  class="anime-chronology__status"></span></a>
              <div class="anime-chronology__year">2017 год</div>
              <div class="anime-chronology__rating info-box rating-green">8.0</div>
            </div>
            <div class="anime-chronology__item " style="display: none">
              <div class="anime-chronology__number">
                4
              </div>
              <a href="/anime/yuri-on-ice-the-movie-ice-adolescence" class="anime-chronology__name">Юри на льду: Ледяная
                юность <span class="anime-chronology__status">Анонс</span></a>
              <div class="anime-chronology__year">2023 год</div>
              <div class="anime-chronology__rating info-box rating-grey">–</div>
            </div>
            <div class="anime-chronology-show-wrapper"><span class="anime-chronology-show-btn">Показать все</span></div>
          </div>
          <h3 class="small-title">Цитаты</h3>
          <div class="quote" data-quote-id="14">
            <div class="quote__info">
              <p class="quote__text">Я из тебя борщ сделаю в Москве.</p>
              <div class="quote__author">— Юрий Плисецкий</div>
            </div>
            <div class="quote__controls">
              <button class="quote__btn quote__like"><i class="far fa-heart"></i></button>
              <button class="quote__btn quote__next"><i class="fas fa-arrow-right"></i></button>
            </div>
          </div>
          <h3 class="small-title">Кадры из аниме и трейлеры</h3>
          <div class="anime-screenlist magnific-container screenshot-slider slick-initialized slick-slider"><button
              type="button" class="slick-prev slick-arrow slick-disabled" aria-label="Предыдущий" aria-disabled="true"
              style="display: inline-block;"><i class="fas fa-chevron-left"></i></button>
            <div class="slick-list draggable">
              <div class="slick-track" style="opacity: 1; width: 40000px; transform: translate3d(0px, 0px, 0px);"><a
                  href="/a_img/screenshots/original/675/1.jpg?1624121211"
                  class="anime-screenshot-item slick-slide slick-current slick-active" data-slick-index="0"
                  aria-hidden="false" tabindex="0"><img src="/a_img/screenshots/mini/675/1.jpg?1624121211"
                    alt="Кадр из аниме Юри на льду"></a><a href="/a_img/screenshots/original/675/2.jpg?1624121211"
                  class="anime-screenshot-item slick-slide" data-slick-index="1" aria-hidden="true" tabindex="-1"><img
                    src="/a_img/screenshots/mini/675/2.jpg?1624121211" alt="Кадр из аниме Юри на льду"></a><a
                  href="/a_img/screenshots/original/675/3.jpg?1624121212" class="anime-screenshot-item slick-slide"
                  data-slick-index="2" aria-hidden="true" tabindex="-1"><img
                    src="/a_img/screenshots/mini/675/3.jpg?1624121212" alt="Кадр из аниме Юри на льду"></a><a
                  href="/a_img/screenshots/original/675/4.jpg?1624121212" class="anime-screenshot-item slick-slide"
                  data-slick-index="3" aria-hidden="true" tabindex="-1"><img
                    src="/a_img/screenshots/mini/675/4.jpg?1624121212" alt="Кадр из аниме Юри на льду"></a><a
                  href="/a_img/screenshots/original/675/5.jpg?1624121212" class="anime-screenshot-item slick-slide"
                  data-slick-index="4" aria-hidden="true" tabindex="-1"><img
                    src="/a_img/screenshots/mini/675/5.jpg?1624121212" alt="Кадр из аниме Юри на льду"></a><a
                  href="https://www.youtube.com/watch?v=9-xcX0sqkkA" data-anime-id="675" data-youtube-id="9-xcX0sqkkA"
                  class="anime-trailer-item video-link slick-slide" data-slick-index="5" aria-hidden="true"
                  tabindex="-1">
                  <img src="https://img.youtube.com/vi/9-xcX0sqkkA/mqdefault.jpg" alt="Превью к трейлеру Юри на льду">
                  <span class="anime-trailer__overlay">Трейлер <i class="fas fa-play-circle"></i></span>
                </a><a href="https://www.youtube.com/watch?v=og0KAkYb0cU" data-anime-id="675"
                  data-youtube-id="og0KAkYb0cU" class="anime-trailer-item video-link slick-slide" data-slick-index="6"
                  aria-hidden="true" tabindex="-1">
                  <img src="https://img.youtube.com/vi/og0KAkYb0cU/mqdefault.jpg" alt="Превью к трейлеру Юри на льду">
                  <span class="anime-trailer__overlay">Трейлер <i class="fas fa-play-circle"></i></span>
                </a><a href="https://www.youtube.com/watch?v=5u3RGhznctE" data-anime-id="675"
                  data-youtube-id="5u3RGhznctE" class="anime-trailer-item video-link slick-slide" data-slick-index="7"
                  aria-hidden="true" tabindex="-1">
                  <img src="https://img.youtube.com/vi/5u3RGhznctE/mqdefault.jpg" alt="Превью к трейлеру Юри на льду">
                  <span class="anime-trailer__overlay">Трейлер <i class="fas fa-play-circle"></i></span>
                </a></div>
            </div>







            <button type="button" class="slick-next slick-arrow" aria-label="Следующий" style="display: flex;"
              aria-disabled="false"><i class="fas fa-chevron-right"></i></button>
          </div>
          <a href="/quiz/guessAnime" class="sidebar__quiz">
            Аниме викторина
          </a>
          <h3 class="small-title comments-title"><a href="/anime/yuri-na-ldu/reviews">Отзывы</a></h3>
          <div class="reviews">
            <div class="reviews__list">
              <div class="reviews__item reviews-green-status">
                <div class="reviews__header">
                  <a href="/users/8923" class="reviews__header-img">
                    <img src="/uploads/avatars/8923.png?1694726868" alt="Аватарка">
                  </a>
                  <div class="reviews__header-info">
                    <a href="/users/8923" class="reviews__header-name">evelina24</a>
                    <div class="reviews__header-date">10.02.2023 в 11:02</div>
                  </div>
                </div>
                <div class="reviews__body">
                  <p>Жанар классная но есть минусы как типа продолжение если бы было продолжение то оно было ещё бы
                    классные. Люди края любит катание или спорт это аниме подходит им патамушта главный герой больше не
                    тренировался и потом когда он встретил своего кумира он начинает тренироваться до того какой степени
                    что...
                  </p>
                </div>
                <a href="/anime/yuri-na-ldu/reviews#review_13176" class="reviews__more">Читать отзыв</a>
              </div>
              <div class="reviews__item reviews-green-status">
                <div class="reviews__header">
                  <a href="/users/14470" class="reviews__header-img">
                    <img src="/img/avatars/shop/a88.gif" alt="Аватарка">
                  </a>
                  <div class="reviews__header-info">
                    <a href="/users/14470" class="reviews__header-name">zxctrl</a>
                    <div class="reviews__header-date">05.08.2023 в 02:08</div>
                  </div>
                </div>
                <div class="reviews__body">
                  <p>стоит ли смотреть? чтобы ответить на этот вопрос, достаточно будет посмотреть всего одну серию.
                    понравится — и в дальнейшем сериал не оставит вас равнодушным. юри на льду — это один из тех редких
                    спортивных тайтлов, в котором на протяжении всех серий поддерживается высокая динамика, отсутствует
                    изли...
                  </p>
                </div>
                <a href="/anime/yuri-na-ldu/reviews#review_14146" class="reviews__more">Читать отзыв</a>
              </div>
            </div>
          </div>
          <h3 class="small-title comments-title">Комментарии <span>14</span></h3>
          <div class="comments" data-comments-count="14" data-commentable-id="675" data-commentable-type="Anime"
            data-ratings="[]" aria-expanded="false">
            <div class="comments__sort">
              <div class="comments__sort-select comments__sort-rating ">Популярные</div>
              <div class="comments__sort-select comments__sort-id comments__sort-active">По порядку</div>
            </div>
            <div class="comments__send-message comments__mini-view ">
              <textarea placeholder="Написать комментарий"></textarea>
              <div class="comments__actions">
                <div class="comments__actions-list">
                  <div class="comments__actions-btn comments__actions-btn-smile">
                    <i class="far fa-smile"></i>
                  </div>
                  <div class="comments__actions-btn comments__actions-btn-link">
                    <i class="fas fa-link"></i>
                  </div>
                  <div class="comments__actions-btn comments__actions-btn-spoiler">
                    <i class="fas fa-code"></i>
                  </div>
                </div>
                <div class="comments__send-btn-wrapper">
                  <button class="comments__send-btn">
                    Отправить
                  </button>
                </div>
              </div>
              <div class="comments__smiles">
                <div class="comments__smiles-type-tabs">
                  <div class="comments__smiles-type-tab tooltipped" data-tooltip="Категория смайла - Аниме"
                    data-emoji-type="Аниме">
                    <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis_categories/Аниме.png"
                      alt="Категория смайла">
                  </div>
                  <div class="comments__smiles-type-tab tooltipped" data-tooltip="Категория смайла - Pepe"
                    data-emoji-type="Pepe">
                    <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis_categories/Pepe.png"
                      alt="Категория смайла">
                  </div>
                  <div class="comments__smiles-type-tab tooltipped" data-tooltip="Категория смайла - Разное"
                    data-emoji-type="Разное">
                    <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis_categories/Разное.png"
                      alt="Категория смайла">
                  </div>
                </div>
                <div class="comments__smiles-type comments__smiles-type--active" data-emoji-type="Аниме">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/02hype.png" alt=":02hype:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/animehehe.png" alt=":animehehe:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/aquacry.png" alt=":aquacry:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/AYAYA.png" alt=":AYAYA:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/ChikaAngry.png" alt=":ChikaAngry:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Chika-lenny.gif?2" alt=":Chika-lenny:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/devilanimegirl.png?2"
                    alt=":devilanimegirl:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/donewlife.png" alt=":donewlife:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/gasmm.png" alt=":gasmm:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/giyuu_angry.png" alt=":giyuu_angry:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Hehe.png" alt=":Hehe:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/hey_hey.png" alt=":hey_hey:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/hugeheart.png?2" alt=":hugeheart:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/ItachiFacePalm.png"
                    alt=":ItachiFacePalm:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Kaneki_Think.png" alt=":Kaneki_Think:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/KannaPeer.png" alt=":KannaPeer:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/KannaSpook.png" alt=":KannaSpook:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/KannaWhat.png" alt=":KannaWhat:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/konatacry.png" alt=":konatacry:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/L_M_A_O.png" alt=":L_M_A_O:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/lolice.png" alt=":lolice:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/meis-no.png" alt=":meis-no:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/nagatoro-smirking.png"
                    alt=":nagatoro-smirking:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/ree.png" alt=":ree:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/SagiriShy.png" alt=":SagiriShy:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/saitamaok.png" alt=":saitamaok:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/surprised.png" alt=":surprised:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/tohrusmug.png" alt=":tohrusmug:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Woww.png" alt=":Woww:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/yan-cringe.png" alt=":yan-cringe:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/zeroban.png" alt=":zeroban:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/zerogasm.png" alt=":zerogasm:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/zeronom.png" alt=":zeronom:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/zeropensive.png" alt=":zeropensive:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/zeroreee.png" alt=":zeroreee:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/zerotwo-mmm.png" alt=":zerotwo-mmm:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/AnimeBully.png" alt=":AnimeBully:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/AnimeHugs.png" alt=":AnimeHugs:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Animescream.png" alt=":Animesrceam:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/AnimeSmug.png" alt=":AnimeSmug:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/annie2.png" alt=":annie2:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/mememe.png" alt=":mememe:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PolnareffCantHear.png"
                    alt=":PolnareffCantHear:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Rohan.png" alt=":Rohan:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/SagiriBleh.png" alt=":SagiriBleh:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/tohruShrug.png" alt=":tohruShrug:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/YomiGasm.png" alt=":YomiGasm:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/ZeroTwoWhat.png" alt=":ZeroTwoWhat:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/nazuna-stare.png" alt=":nazuna-stare:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/anya-smug.png" alt=":anya-smug:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/jett-happy.png" alt=":jett-happy:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/anyalook.png" alt=":anyalook:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/anya-peek.png" alt=":anya-peek:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/anime-soft.png" alt=":anime-soft:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/nazuna-stare.png" alt=":nazuna-stare:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/nazuna-blush.png" alt=":nazuna-blush:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/nazuna-heh.png" alt=":nazuna-heh:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/anya-sly.png" alt=":anya-sly:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/nazuna-happy.png" alt=":nazuna-happy:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/yuispeechless.png"
                    alt=":yuispeechless:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/surprised-jiraiya.png"
                    alt=":surprised-jiraiya:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/anya-panic.png" alt=":anya-panic:">
                </div>
                <div class="comments__smiles-type " data-emoji-type="Pepe">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Booba.gif" alt=":booba:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/ClownGun.png" alt=":clowngun:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/FeelsAngryMan.png"
                    alt=":FeelsAngryMan:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/FeelsClownMan.png"
                    alt=":FeelsClownMan:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/FeelsCryMan.png" alt=":FeelsCryMan:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/FeelsOkayMan.png" alt=":FeelsOkayMan:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/feelsrageman.png" alt=":feelsrageman:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/feelstiredman.png"
                    alt=":feelstiredman:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/monkaDrive.gif" alt=":monkaDrive:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PeepoAnd.png" alt=":PeepoAnd:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/peepoarrive.gif" alt=":peepoarrive:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PeepoCool.png" alt=":PeepoCool:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PeepoF.gif" alt=":PeepoF:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/peepohello.gif" alt=":peepohello:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/pepearriveangry.gif"
                    alt=":pepearriveangry:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeBaited.png" alt=":PepeBaited:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeBox.gif" alt=":PepeBox:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/pepebreakheart.png"
                    alt=":pepebreakheart:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeBruh.png" alt=":PepeBruh:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/pepecool.png" alt=":pepecool:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/pepefuu.png" alt=":pepefuu:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeGlasses.png" alt=":PepeGlasses:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Pepego.gif" alt=":Pepego:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeHappy.gif" alt=":PepeHappy:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeLove.png" alt=":PepeLove:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeMonkaH.png" alt=":PepeMonkaH:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeNo.png" alt=":PepeNo:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeOK.png" alt=":PepeOK:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepePoint.png" alt=":PepePoint:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeRich.png" alt=":PepeRich:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeRofl.png" alt=":PepeRofl:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeSerious.gif" alt=":PepeSerious:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeSpasibo.gif" alt=":PepeSpasibo:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeSprint.gif" alt=":PepeSprint:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeStonks.png" alt=":PepeStonks:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/pepethink.png" alt=":pepethink:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeWh.gif" alt=":PepeWh:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeYes.png" alt=":PepeYes:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Sadg.png" alt=":Sadg:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/sammyyPepekek.png"
                    alt=":sammyyPepekek:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/FeelsWowMan.png" alt=":FeelsWowMan:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PeepoWut.png" alt=":PeepoWut:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PepeCry.png" alt=":PepeCry:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Pepega.png" alt=":Pepega:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/pepeshy.png" alt=":pepeshy:">
                </div>
                <div class="comments__smiles-type " data-emoji-type="Разное">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/AngryBird.png" alt=":AngryBird:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/BabyRage.png" alt=":BabyRage:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/BibleThump.png" alt=":BibleThump:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/BlobTea.png" alt=":BlobTea:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/CatKiss.gif" alt=":CatKiss:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/CoolCat.png" alt=":CoolCat:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/CoolNut.png" alt=":CoolNut:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/CoolStoryBob.png" alt=":CoolStoryBob:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/DansGame.png" alt=":DansGame:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/DrakeNo.png" alt=":DrakeNo:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/DrakeYes.png" alt=":DrakeYes:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Durka.png" alt=":Durka:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/EleGiggle.png" alt=":EleGiggle:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/FailFish.png" alt=":FailFish:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/HAhaa.png" alt=":HAhaa:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Kappa.png" alt=":Kappa:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/KEKW.png" alt=":KEKW:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Komrad.png" alt=":Komrad:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/KonCha.png" alt=":KonCha:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Kreygasm.png" alt=":Kreygasm:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/NotLikeThis.png" alt=":NotLikeThis:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PekaPled.png" alt=":PekaPled:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/pekaReally.png" alt=":pekaReally:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PogChamp.png" alt=":PogChamp:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/PunOko.png" alt=":PunOko:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/roflanLico.png" alt=":roflanLico:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/shrek.png" alt=":shrek:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/SMOrc.png" alt=":SMOrc:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/TehePelo.png" alt=":TehePelo:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/WaitWhat.png" alt=":WaitWhat:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Yes.png" alt=":Yes:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/BrainCosmic.png" alt=":BrainCosmic:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/catJam.gif" alt=":catJam:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/CatRee.png" alt=":CatRee:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/CoolDog.gif" alt=":CoolDog:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/giga.gif" alt=":giga:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/RoflanGun.png" alt=":RoflanGun:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/roflanPominki.png"
                    alt=":roflanPominki:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/roflanPomoika.png"
                    alt=":roflanPomoika:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/ShrekWTF.png" alt=":ShrekWTF:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/whyPetro.png" alt=":whyPetro:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/Ye.gif" alt=":Ye:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/lensi.png" alt=":lensi:">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/img/emojis/takemymoney.png" alt=":takemymoney:">
                </div>
              </div>
            </div>
            <div class="comments__list">
              <div id="comment_105669" class="comments__item " data-time="1706996258" data-user-id="27952">
                <div class="comments__item-inner">
                  <div class="comments__item-header">
                    <a href="/users/27952" class="comments__avatar tippy-ajax" data-ajax="/users/27952/mini">
                      <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/uploads/avatars/27952.png?1682884314"
                        alt="Аватарка пользователя">
                    </a>
                    <div class="comments__info">
                      <div class="comments__name-wrapper">
                        <a href="/users/27952" class="comments__name">oXa March</a>
                      </div>
                      <div class="comments__date" title="04.02.2024 в 12:02">3 месяца назад</div>
                    </div>
                    <div class="comments__rating">
                      <div class="comments__rating-btn rating-down"><i class="fas fa-chevron-down"></i></div>
                      <div class="comments__rating-number tippy-ajax green-number" data-ajax="/comments/105669/info">1
                      </div>
                      <div class="comments__rating-btn rating-up"><i class="fas fa-chevron-up"></i></div>
                    </div>
                  </div>
                  <div class="comments__item-body">Хорошая анимеха. Местами вдохновляюще, местами орно.</div>
                  <div class="comments__controls">
                    <div class="comment__controls-reply"><i class="far fa-comment"></i> Ответить</div>
                    <div class="comments-control-tippy"><i class="far fa-ellipsis-h"></i></div>
                  </div>
                </div>
                <div class="comments__item-children">
                  <div class="comment__item-collapse"></div>
                </div>
              </div>
              <div id="comment_101932" class="comments__item " data-time="1705009798" data-user-id="65334">
                <div class="comments__item-inner">
                  <div class="comments__item-header">
                    <a href="/users/65334" class="comments__avatar tippy-ajax" data-ajax="/users/65334/mini">
                      <img class="profile-frame lazy" src="/img/lowShop.jpg" data-src="/x35/img/frames/f182.png"
                        alt="Рамка Severnoye Siyaniye">
                      <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/img/avatars/178.jpg"
                        alt="Аватарка пользователя">
                    </a>
                    <div class="comments__info">
                      <div class="comments__name-wrapper">
                        <a href="/users/65334" class="comments__name">Severnoye Siyaniye</a>
                        <a href="/users/65334" class="comments__status-emoji" title="Статус">💜</a>
                      </div>
                      <div class="comments__date" title="12.01.2024 в 12:01">4 месяца назад</div>
                    </div>
                    <div class="comments__rating">
                      <div class="comments__rating-btn rating-down"><i class="fas fa-chevron-down"></i></div>
                      <div class="comments__rating-number tippy-ajax green-number" data-ajax="/comments/101932/info">1
                      </div>
                      <div class="comments__rating-btn rating-up"><i class="fas fa-chevron-up"></i></div>
                    </div>
                  </div>
                  <div class="comments__item-body">это аниме очень понравилось, гг весьма целеустремленный, умничка!
                  </div>
                  <div class="comments__controls">
                    <div class="comment__controls-reply"><i class="far fa-comment"></i> Ответить</div>
                    <div class="comments-control-tippy"><i class="far fa-ellipsis-h"></i></div>
                  </div>
                </div>
                <div class="comments__item-children">
                  <div class="comment__item-collapse"></div>
                </div>
              </div>
              <div id="comment_69859" class="comments__item " data-time="1689675228" data-user-id="14470">
                <div class="comments__item-inner">
                  <div class="comments__item-header">
                    <a href="/users/14470" class="comments__avatar tippy-ajax" data-ajax="/users/14470/mini">
                      <img class="profile-frame lazy" src="/img/lowShop.jpg" data-src="/x35/img/frames/f7.png"
                        alt="Рамка zxctrl">
                      <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/img/avatars/shop/a88.gif"
                        alt="Аватарка пользователя">
                    </a>
                    <div class="comments__info">
                      <div class="comments__name-wrapper">
                        <a href="/users/14470" class="comments__name">zxctrl</a>
                        <a href="/users/14470" class="comments__status-emoji" title="Статус">☠️</a>
                      </div>
                      <div class="comments__date" title="18.07.2023 в 01:07">9 месяцев назад</div>
                    </div>
                    <div class="comments__rating">
                      <div class="comments__rating-btn rating-down"><i class="fas fa-chevron-down"></i></div>
                      <div class="comments__rating-number tippy-ajax green-number" data-ajax="/comments/69859/info">1
                      </div>
                      <div class="comments__rating-btn rating-up"><i class="fas fa-chevron-up"></i></div>
                    </div>
                  </div>
                  <div class="comments__item-body">посмотрел почти залпом, обожаю данное аниме всем сердцем, а парочка
                    казаха и плисецкого это вообще отдельная история, они шикарны!!<img src="/img/emojis/aquacry.png"
                      alt="Смайл aquacry "></div>
                  <div class="comments__controls">
                    <div class="comment__controls-reply"><i class="far fa-comment"></i> Ответить</div>
                    <div class="comments-control-tippy"><i class="far fa-ellipsis-h"></i></div>
                  </div>
                </div>
                <div class="comments__item-children">
                  <div class="comment__item-collapse"></div>
                </div>
              </div>
              <div id="comment_65608" class="comments__item comments__item--main" data-time="1687272504"
                data-user-id="19021">
                <div class="comments__item-inner">
                  <div class="comments__item-header">
                    <a href="/users/19021" class="comments__avatar tippy-ajax" data-ajax="/users/19021/mini">
                      <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/uploads/avatars/19021.png?1698681985"
                        alt="Аватарка пользователя">
                    </a>
                    <div class="comments__info">
                      <div class="comments__name-wrapper">
                        <a href="/users/19021" class="comments__name">shegetsrevenge</a>
                        <a href="/users/19021" class="comments__status-emoji" title="Статус">💗</a>
                      </div>
                      <div class="comments__date" title="20.06.2023 в 05:06">10 месяцев назад</div>
                    </div>
                    <div class="comments__rating">
                      <div class="comments__rating-btn rating-down"><i class="fas fa-chevron-down"></i></div>
                      <div class="comments__rating-number tippy-ajax grey-number" data-ajax="/comments/65608/info">0
                      </div>
                      <div class="comments__rating-btn rating-up"><i class="fas fa-chevron-up"></i></div>
                    </div>
                  </div>
                  <div class="comments__item-body">ваще не зашло чет</div>
                  <div class="comments__controls">
                    <div class="comment__controls-reply"><i class="far fa-comment"></i> Ответить</div>
                    <div class="comments-control-tippy"><i class="far fa-ellipsis-h"></i></div>
                  </div>
                </div>
                <div class="comments__item-children">
                  <div class="comment__item-collapse"></div>
                  <div id="comment_65791" class="comments__item " data-time="1687420369" data-user-id="19021">
                    <div class="comments__item-inner">
                      <div class="comments__item-header">
                        <a href="/users/19021" class="comments__avatar tippy-ajax" data-ajax="/users/19021/mini">
                          <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/uploads/avatars/19021.png?1698681985"
                            alt="Аватарка пользователя">
                        </a>
                        <div class="comments__info">
                          <div class="comments__name-wrapper">
                            <a href="/users/19021" class="comments__name">shegetsrevenge</a>
                            <a href="/users/19021" class="comments__status-emoji" title="Статус">💗</a>
                            <a href="#comment_65608" class="comments__reply-name"><i class="fas fa-reply"></i>
                              <span>shegetsrevenge</span></a>
                          </div>
                          <div class="comments__date" title="22.06.2023 в 10:06">10 месяцев назад</div>
                        </div>
                        <div class="comments__rating">
                          <div class="comments__rating-btn rating-down"><i class="fas fa-chevron-down"></i></div>
                          <div class="comments__rating-number tippy-ajax grey-number" data-ajax="/comments/65791/info">0
                          </div>
                          <div class="comments__rating-btn rating-up"><i class="fas fa-chevron-up"></i></div>
                        </div>
                      </div>
                      <div class="comments__item-body">я передумала, мне понравилось</div>
                      <div class="comments__controls">
                        <div class="comment__controls-reply"><i class="far fa-comment"></i> Ответить</div>
                        <div class="comments-control-tippy"><i class="far fa-ellipsis-h"></i></div>
                      </div>
                    </div>
                    <div class="comments__item-children">
                      <div class="comment__item-collapse"></div>
                      <div id="comment_65794" class="comments__item " data-time="1687420526" data-user-id="4078">
                        <div class="comments__item-inner">
                          <div class="comments__item-header">
                            <a href="/users/4078" class="comments__avatar tippy-ajax" data-ajax="/users/4078/mini">
                              <img class="profile-frame lazy" src="/img/lowShop.jpg" data-src="/x35/img/frames/f10.png"
                                alt="Рамка Дядя Валера">
                              <img class="lazy" src="/img/lowShop.jpg"
                                data-src="/x35/uploads/avatars/4078.png?1692767311" alt="Аватарка пользователя">
                            </a>
                            <div class="comments__info">
                              <div class="comments__name-wrapper">
                                <a href="/users/4078" class="comments__name">Дядя Валера</a>
                                <a class="comments__premium-logo" href="/premium">vip</a>
                                <a href="#comment_65791" class="comments__reply-name"><i class="fas fa-reply"></i>
                                  <span>shegetsrevenge</span></a>
                              </div>
                              <div class="comments__date" title="22.06.2023 в 10:06">10 месяцев назад</div>
                            </div>
                            <div class="comments__rating">
                              <div class="comments__rating-btn rating-down"><i class="fas fa-chevron-down"></i></div>
                              <div class="comments__rating-number tippy-ajax green-number"
                                data-ajax="/comments/65794/info">2</div>
                              <div class="comments__rating-btn rating-up"><i class="fas fa-chevron-up"></i></div>
                            </div>
                          </div>
                          <div class="comments__item-body">хах!</div>
                          <div class="comments__controls">
                            <div class="comment__controls-reply"><i class="far fa-comment"></i> Ответить</div>
                            <div class="comments-control-tippy"><i class="far fa-ellipsis-h"></i></div>
                          </div>
                        </div>
                        <div class="comments__item-children">
                          <div class="comment__item-collapse"></div>
                        </div>
                      </div>
                      <div id="comment_80627" class="comments__item " data-time="1694667955" data-user-id="14470">
                        <div class="comments__item-inner">
                          <div class="comments__item-header">
                            <a href="/users/14470" class="comments__avatar tippy-ajax" data-ajax="/users/14470/mini">
                              <img class="profile-frame lazy" src="/img/lowShop.jpg" data-src="/x35/img/frames/f7.png"
                                alt="Рамка zxctrl">
                              <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/img/avatars/shop/a88.gif"
                                alt="Аватарка пользователя">
                            </a>
                            <div class="comments__info">
                              <div class="comments__name-wrapper">
                                <a href="/users/14470" class="comments__name">zxctrl</a>
                                <a href="/users/14470" class="comments__status-emoji" title="Статус">☠️</a>
                                <a href="#comment_65791" class="comments__reply-name"><i class="fas fa-reply"></i>
                                  <span>shegetsrevenge</span></a>
                              </div>
                              <div class="comments__date" title="14.09.2023 в 08:09">8 месяцев назад</div>
                            </div>
                            <div class="comments__rating">
                              <div class="comments__rating-btn rating-down"><i class="fas fa-chevron-down"></i></div>
                              <div class="comments__rating-number tippy-ajax grey-number"
                                data-ajax="/comments/80627/info">0</div>
                              <div class="comments__rating-btn rating-up"><i class="fas fa-chevron-up"></i></div>
                            </div>
                          </div>
                          <div class="comments__item-body">переобулась так сказать</div>
                          <div class="comments__controls">
                            <div class="comment__controls-reply"><i class="far fa-comment"></i> Ответить</div>
                            <div class="comments-control-tippy"><i class="far fa-ellipsis-h"></i></div>
                          </div>
                        </div>
                        <div class="comments__item-children" style="display: none;">
                          <div class="comment__item-collapse"></div>
                          <div id="comment_80640" class="comments__item " data-time="1694670566" data-user-id="19021">
                            <div class="comments__item-inner">
                              <div class="comments__item-header">
                                <a href="/users/19021" class="comments__avatar tippy-ajax"
                                  data-ajax="/users/19021/mini">
                                  <img class="lazy" src="/img/lowShop.jpg"
                                    data-src="/x35/uploads/avatars/19021.png?1698681985" alt="Аватарка пользователя">
                                </a>
                                <div class="comments__info">
                                  <div class="comments__name-wrapper">
                                    <a href="/users/19021" class="comments__name">shegetsrevenge</a>
                                    <a href="/users/19021" class="comments__status-emoji" title="Статус">💗</a>
                                    <a href="#comment_80627" class="comments__reply-name"><i class="fas fa-reply"></i>
                                      <span>zxctrl</span></a>
                                  </div>
                                  <div class="comments__date" title="14.09.2023 в 08:09">8 месяцев назад</div>
                                </div>
                                <div class="comments__rating">
                                  <div class="comments__rating-btn rating-down"><i class="fas fa-chevron-down"></i>
                                  </div>
                                  <div class="comments__rating-number tippy-ajax grey-number"
                                    data-ajax="/comments/80640/info">0</div>
                                  <div class="comments__rating-btn rating-up"><i class="fas fa-chevron-up"></i></div>
                                </div>
                              </div>
                              <div class="comments__item-body">не переобулась, а повзрослела</div>
                              <div class="comments__controls">
                                <div class="comment__controls-reply"><i class="far fa-comment"></i> Ответить</div>
                                <div class="comments-control-tippy"><i class="far fa-ellipsis-h"></i></div>
                              </div>
                            </div>
                            <div class="comments__item-children">
                              <div class="comment__item-collapse"></div>
                              <div id="comment_80905" class="comments__item " data-time="1694795268"
                                data-user-id="14470">
                                <div class="comments__item-inner">
                                  <div class="comments__item-header">
                                    <a href="/users/14470" class="comments__avatar tippy-ajax"
                                      data-ajax="/users/14470/mini">
                                      <img class="profile-frame lazy" src="/img/lowShop.jpg"
                                        data-src="/x35/img/frames/f7.png" alt="Рамка zxctrl">
                                      <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/img/avatars/shop/a88.gif"
                                        alt="Аватарка пользователя">
                                    </a>
                                    <div class="comments__info">
                                      <div class="comments__name-wrapper">
                                        <a href="/users/14470" class="comments__name">zxctrl</a>
                                        <a href="/users/14470" class="comments__status-emoji" title="Статус">☠️</a>
                                        <a href="#comment_80640" class="comments__reply-name"><i
                                            class="fas fa-reply"></i> <span>shegetsrevenge</span></a>
                                      </div>
                                      <div class="comments__date" title="15.09.2023 в 07:09">7 месяцев назад</div>
                                    </div>
                                    <div class="comments__rating">
                                      <div class="comments__rating-btn rating-down"><i class="fas fa-chevron-down"></i>
                                      </div>
                                      <div class="comments__rating-number tippy-ajax grey-number"
                                        data-ajax="/comments/80905/info">0</div>
                                      <div class="comments__rating-btn rating-up"><i class="fas fa-chevron-up"></i>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="comments__item-body">как тебе угодно</div>
                                  <div class="comments__controls">
                                    <div class="comment__controls-reply"><i class="far fa-comment"></i> Ответить</div>
                                    <div class="comments-control-tippy"><i class="far fa-ellipsis-h"></i></div>
                                  </div>
                                </div>
                                <div class="comments__item-children">
                                  <div class="comment__item-collapse"></div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        <div class="comments__item-open">Развернуть ветку</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div id="comment_35937" class="comments__item " data-time="1672294966" data-user-id="3101">
                <div class="comments__item-inner">
                  <div class="comments__item-header">
                    <a href="/users/3101" class="comments__avatar tippy-ajax" data-ajax="/users/3101/mini">
                      <img class="profile-frame lazy" src="/img/lowShop.jpg" data-src="/x35/img/frames/f15.png"
                        alt="Рамка Murasakibara Atsushi">
                      <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/img/avatars/shop/a80.gif"
                        alt="Аватарка пользователя">
                    </a>
                    <div class="comments__info">
                      <div class="comments__name-wrapper">
                        <a href="/users/3101" class="comments__name">Murasakibara Atsushi</a>
                      </div>
                      <div class="comments__date" title="29.12.2022 в 09:12">1 год назад</div>
                    </div>
                    <div class="comments__rating">
                      <div class="comments__rating-btn rating-down"><i class="fas fa-chevron-down"></i></div>
                      <div class="comments__rating-number tippy-ajax grey-number" data-ajax="/comments/35937/info">0
                      </div>
                      <div class="comments__rating-btn rating-up"><i class="fas fa-chevron-up"></i></div>
                    </div>
                  </div>
                  <div class="comments__item-body">не плохой мотив</div>
                  <div class="comments__controls">
                    <div class="comment__controls-reply"><i class="far fa-comment"></i> Ответить</div>
                    <div class="comments-control-tippy"><i class="far fa-ellipsis-h"></i></div>
                  </div>
                </div>
                <div class="comments__item-children">
                  <div class="comment__item-collapse"></div>
                </div>
              </div>
              <div id="comment_17307" class="comments__item " data-time="1653685558" data-user-id="5502">
                <div class="comments__item-inner">
                  <div class="comments__item-header">
                    <a href="/users/5502" class="comments__avatar tippy-ajax" data-ajax="/users/5502/mini">
                      <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/img/avatars/shop/a15.gif"
                        alt="Аватарка пользователя">
                    </a>
                    <div class="comments__info">
                      <div class="comments__name-wrapper">
                        <a href="/users/5502" class="comments__name">яcплю</a>
                      </div>
                      <div class="comments__date" title="28.05.2022 в 12:05">1 год назад</div>
                    </div>
                    <div class="comments__rating">
                      <div class="comments__rating-btn rating-down"><i class="fas fa-chevron-down"></i></div>
                      <div class="comments__rating-number tippy-ajax green-number" data-ajax="/comments/17307/info">3
                      </div>
                      <div class="comments__rating-btn rating-up"><i class="fas fa-chevron-up"></i></div>
                    </div>
                  </div>
                  <div class="comments__item-body">мальчики мои любимые. люблю это аниме, клацно обьясняются все правила
                    данного вида спорта</div>
                  <div class="comments__controls">
                    <div class="comment__controls-reply"><i class="far fa-comment"></i> Ответить</div>
                    <div class="comments-control-tippy"><i class="far fa-ellipsis-h"></i></div>
                  </div>
                </div>
                <div class="comments__item-children">
                  <div class="comment__item-collapse"></div>
                </div>
              </div>
              <div id="comment_14736" class="comments__item " data-time="1647866594" data-user-id="2539">
                <div class="comments__item-inner">
                  <div class="comments__item-header">
                    <a href="/users/2539" class="comments__avatar tippy-ajax" data-ajax="/users/2539/mini">
                      <img class="lazy" src="/img/lowShop.jpg"
                        data-src="https://sun6-23.userapi.com/s/v1/if1/vADNus-atOCpz-kQeVYllq1b-VNBoDB-3hboOdGmlp7OIQa9_ZRLHOq6F3hBnSqTvk3mrJTJ.jpg?size=200x200&amp;quality=96&amp;crop=2,23,200,200&amp;ava=1"
                        alt="Аватарка пользователя">
                    </a>
                    <div class="comments__info">
                      <div class="comments__name-wrapper">
                        <a href="/users/2539" class="comments__name">Larisa Sokolova</a>
                      </div>
                      <div class="comments__date" title="21.03.2022 в 03:03">2 года назад</div>
                    </div>
                    <div class="comments__rating">
                      <div class="comments__rating-btn rating-down"><i class="fas fa-chevron-down"></i></div>
                      <div class="comments__rating-number tippy-ajax green-number" data-ajax="/comments/14736/info">3
                      </div>
                      <div class="comments__rating-btn rating-up"><i class="fas fa-chevron-up"></i></div>
                    </div>
                  </div>
                  <div class="comments__item-body">Отличное аниме.</div>
                  <div class="comments__controls">
                    <div class="comment__controls-reply"><i class="far fa-comment"></i> Ответить</div>
                    <div class="comments-control-tippy"><i class="far fa-ellipsis-h"></i></div>
                  </div>
                </div>
                <div class="comments__item-children">
                  <div class="comment__item-collapse"></div>
                </div>
              </div>
              <div id="comment_1800" class="comments__item comments__item--main" data-time="1624809182"
                data-user-id="72">
                <div class="comments__item-inner">
                  <div class="comments__item-header">
                    <a href="/users/72" class="comments__avatar tippy-ajax" data-ajax="/users/72/mini">
                      <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/img/avatars/47.jpg"
                        alt="Аватарка пользователя">
                    </a>
                    <div class="comments__info">
                      <div class="comments__name-wrapper">
                        <a href="/users/72" class="comments__name">Artek</a>
                      </div>
                      <div class="comments__date" title="27.06.2021 в 06:06">2 года назад</div>
                    </div>
                    <div class="comments__rating">
                      <div class="comments__rating-btn rating-down"><i class="fas fa-chevron-down"></i></div>
                      <div class="comments__rating-number tippy-ajax green-number" data-ajax="/comments/1800/info">1
                      </div>
                      <div class="comments__rating-btn rating-up"><i class="fas fa-chevron-up"></i></div>
                    </div>
                  </div>
                  <div class="comments__item-body">А мне понравилось, даже очень</div>
                  <div class="comments__controls">
                    <div class="comment__controls-reply"><i class="far fa-comment"></i> Ответить</div>
                    <div class="comments-control-tippy"><i class="far fa-ellipsis-h"></i></div>
                  </div>
                </div>
                <div class="comments__item-children">
                  <div class="comment__item-collapse"></div>
                  <div id="comment_14453" class="comments__item " data-time="1644489140" data-user-id="2121">
                    <div class="comments__item-inner">
                      <div class="comments__item-header">
                        <a href="/users/2121" class="comments__avatar tippy-ajax" data-ajax="/users/2121/mini">
                          <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/img/avatars/53.jpg"
                            alt="Аватарка пользователя">
                        </a>
                        <div class="comments__info">
                          <div class="comments__name-wrapper">
                            <a href="/users/2121" class="comments__name">Ina Umarova</a>
                            <a href="#comment_1800" class="comments__reply-name"><i class="fas fa-reply"></i>
                              <span>Artek</span></a>
                          </div>
                          <div class="comments__date" title="10.02.2022 в 01:02">2 года назад</div>
                        </div>
                        <div class="comments__rating">
                          <div class="comments__rating-btn rating-down"><i class="fas fa-chevron-down"></i></div>
                          <div class="comments__rating-number tippy-ajax green-number" data-ajax="/comments/14453/info">
                            1</div>
                          <div class="comments__rating-btn rating-up"><i class="fas fa-chevron-up"></i></div>
                        </div>
                      </div>
                      <div class="comments__item-body">согласна</div>
                      <div class="comments__controls">
                        <div class="comment__controls-reply"><i class="far fa-comment"></i> Ответить</div>
                        <div class="comments-control-tippy"><i class="far fa-ellipsis-h"></i></div>
                      </div>
                    </div>
                    <div class="comments__item-children">
                      <div class="comment__item-collapse"></div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <h3 class="small-title"><a href="/anime/yuri-na-ldu/recommendations">Похожие аниме</a></h3>
          <div class="anime-list anime-list-with-sidebar similar-slider slick-initialized slick-slider"><button
              type="button" class="slick-prev slick-arrow slick-disabled" aria-label="Предыдущий" aria-disabled="true"
              style="display: inline-block;"><i class="fas fa-chevron-left"></i></button>








            <div class="slick-list draggable">
              <div class="slick-track" style="opacity: 1; width: 1584px; transform: translate3d(0px, 0px, 0px);"><a
                  href="/anime/shestaya-zona" class="anime-item slick-slide slick-current slick-active"
                  data-anime-id="1360" style="width: 198px;" data-slick-index="0" aria-hidden="false" tabindex="0">
                  <div class="anime-item__img ">
                    <img class="anime-item__image" src="/a_img/posters/preview/anime_shestaya-zona.jpg?1683288138"
                      alt="Постер к аниме Шестая зона">
                    <span class="anime-item__rating rating-green">7.6</span>
                    <span class="anime-item__properties">
                      <div class="anime-item__properties-wrapper">
                        <div class="anime-item__actions">
                          <button class="anime-item__edit-watchlist-btn" aria-label="Добавить в список просмотра"
                            tabindex="0"><i class="far fa-bookmark"></i></button>
                          <button class="anime-item__similar-anime-btn tooltipped" aria-label="Похожие аниме"
                            data-tooltip="Похожие аниме" tabindex="0"><i class="fas fa-magic"></i></button>
                        </div>
                        <div class="info-box anime-item__age-rating">16+</div>
                        <div class="anime-item__episodes">
                          <div class="anime-item__episodes-title">Эпизодов</div>
                          <div class="anime-item__episodes-value">11/11</div>
                        </div>
                        <div class="anime_item__footer">
                          <div>135.9K оценок</div>
                          <div>23 мин</div>
                        </div>
                      </div>
                    </span>
                  </div>
                  <div class="anime-item__name" title="Шестая зона">Шестая зона</div>
                  <div class="anime-item__genre">2011 Экшен</div>
                </a><a href="/anime/skvoz-balnyi-zal" class="anime-item slick-slide slick-active" data-anime-id="303"
                  style="width: 198px;" data-slick-index="1" aria-hidden="false" tabindex="0">
                  <div class="anime-item__img ">
                    <img class="anime-item__image" src="/a_img/posters/preview/anime_skvoz-balnyi-zal.jpg?1699096370"
                      alt="Постер к аниме Сквозь бальный зал">
                    <span class="anime-item__rating rating-green">8.2</span>
                    <span class="anime-item__properties">
                      <div class="anime-item__properties-wrapper">
                        <div class="anime-item__actions">
                          <button class="anime-item__edit-watchlist-btn" aria-label="Добавить в список просмотра"
                            tabindex="0"><i class="far fa-bookmark"></i></button>
                          <button class="anime-item__similar-anime-btn tooltipped" aria-label="Похожие аниме"
                            data-tooltip="Похожие аниме" tabindex="0"><i class="fas fa-magic"></i></button>
                        </div>
                        <div class="info-box anime-item__age-rating">13+</div>
                        <div class="anime-item__episodes">
                          <div class="anime-item__episodes-title">Эпизодов</div>
                          <div class="anime-item__episodes-value">24/24</div>
                        </div>
                        <div class="anime_item__footer">
                          <div>112.4K оценок</div>
                          <div>24 мин</div>
                        </div>
                      </div>
                    </span>
                  </div>
                  <div class="anime-item__name" title="Сквозь бальный зал">Сквозь бальный зал</div>
                  <div class="anime-item__genre">2017 Комедия</div>
                </a><a href="/anime/volnyi-stil" class="anime-item slick-slide slick-active" data-anime-id="1961"
                  style="width: 198px;" data-slick-index="2" aria-hidden="false" tabindex="0">
                  <div class="anime-item__img ">
                    <img class="anime-item__image" src="/a_img/posters/preview/anime_volnyi-stil.jpg?1679619475"
                      alt="Постер к аниме Вольный стиль!">
                    <span class="anime-item__rating rating-green">7.3</span>
                    <span class="anime-item__properties">
                      <div class="anime-item__properties-wrapper">
                        <div class="anime-item__actions">
                          <button class="anime-item__edit-watchlist-btn" aria-label="Добавить в список просмотра"
                            tabindex="0"><i class="far fa-bookmark"></i></button>
                          <button class="anime-item__similar-anime-btn tooltipped" aria-label="Похожие аниме"
                            data-tooltip="Похожие аниме" tabindex="0"><i class="fas fa-magic"></i></button>
                        </div>
                        <div class="info-box anime-item__age-rating">13+</div>
                        <div class="anime-item__episodes">
                          <div class="anime-item__episodes-title">Эпизодов</div>
                          <div class="anime-item__episodes-value">12/12</div>
                        </div>
                        <div class="anime_item__footer">
                          <div>139.6K оценок</div>
                          <div>23 мин</div>
                        </div>
                      </div>
                    </span>
                  </div>
                  <div class="anime-item__name" title="Вольный стиль!">Вольный стиль!</div>
                  <div class="anime-item__genre">2013 Повседневность</div>
                </a><a href="/anime/darovannyi" class="anime-item slick-slide slick-active" data-anime-id="194"
                  style="width: 198px;" data-slick-index="3" aria-hidden="false" tabindex="0">
                  <div class="anime-item__img ">
                    <img class="anime-item__image" src="/a_img/posters/preview/anime_darovannyi.jpg?1678964623"
                      alt="Постер к аниме Дарованный">
                    <span class="anime-item__rating rating-green">8.3</span>
                    <span class="anime-item__properties">
                      <div class="anime-item__properties-wrapper">
                        <div class="anime-item__actions">
                          <button class="anime-item__edit-watchlist-btn" aria-label="Добавить в список просмотра"
                            tabindex="0"><i class="far fa-bookmark"></i></button>
                          <button class="anime-item__similar-anime-btn tooltipped" aria-label="Похожие аниме"
                            data-tooltip="Похожие аниме" tabindex="0"><i class="fas fa-magic"></i></button>
                        </div>
                        <div class="info-box anime-item__age-rating">13+</div>
                        <div class="anime-item__episodes">
                          <div class="anime-item__episodes-title">Эпизодов</div>
                          <div class="anime-item__episodes-value">11/11</div>
                        </div>
                        <div class="anime_item__footer">
                          <div>94.6K оценок</div>
                          <div>22 мин</div>
                        </div>
                      </div>
                    </span>
                  </div>
                  <div class="anime-item__name" title="Дарованный">Дарованный</div>
                  <div class="anime-item__genre">2019 Драма</div>
                </a><a href="/anime/voleibol" class="anime-item slick-slide" data-anime-id="97" style="width: 198px;"
                  data-slick-index="4" aria-hidden="true" tabindex="-1">
                  <div class="anime-item__img ">
                    <img class="anime-item__image" src="/a_img/posters/preview/anime_voleibol.jpg?1713541899"
                      alt="Постер к аниме Волейбол!!">
                    <span class="anime-item__rating rating-green">8.4</span>
                    <span class="anime-item__properties">
                      <div class="anime-item__properties-wrapper">
                        <div class="anime-item__actions">
                          <button class="anime-item__edit-watchlist-btn" aria-label="Добавить в список просмотра"
                            tabindex="-1"><i class="far fa-bookmark"></i></button>
                          <button class="anime-item__similar-anime-btn tooltipped" aria-label="Похожие аниме"
                            data-tooltip="Похожие аниме" tabindex="-1"><i class="fas fa-magic"></i></button>
                        </div>
                        <div class="info-box anime-item__age-rating">13+</div>
                        <div class="anime-item__episodes">
                          <div class="anime-item__episodes-title">Эпизодов</div>
                          <div class="anime-item__episodes-value">25/25</div>
                        </div>
                        <div class="anime_item__footer">
                          <div>324.9K оценок</div>
                          <div>24 мин</div>
                        </div>
                      </div>
                    </span>
                  </div>
                  <div class="anime-item__name" title="Волейбол!!">Волейбол!!</div>
                  <div class="anime-item__genre">2014 Комедия</div>
                </a><a href="/anime/figurnyi-kaleidoskop" class="anime-item slick-slide" data-anime-id="2192"
                  style="width: 198px;" data-slick-index="5" aria-hidden="true" tabindex="-1">
                  <div class="anime-item__img ">
                    <img class="anime-item__image"
                      src="/a_img/posters/preview/anime_figurnyi-kaleidoskop.jpg?1681326398"
                      alt="Постер к аниме Фигурный калейдоскоп">
                    <span class="anime-item__rating rating-green">7.3</span>
                    <span class="anime-item__properties">
                      <div class="anime-item__properties-wrapper">
                        <div class="anime-item__actions">
                          <button class="anime-item__edit-watchlist-btn" aria-label="Добавить в список просмотра"
                            tabindex="-1"><i class="far fa-bookmark"></i></button>
                          <button class="anime-item__similar-anime-btn tooltipped" aria-label="Похожие аниме"
                            data-tooltip="Похожие аниме" tabindex="-1"><i class="fas fa-magic"></i></button>
                        </div>
                        <div class="info-box anime-item__age-rating">13+</div>
                        <div class="anime-item__episodes">
                          <div class="anime-item__episodes-title">Эпизодов</div>
                          <div class="anime-item__episodes-value">12/12</div>
                        </div>
                        <div class="anime_item__footer">
                          <div>11.5K оценок</div>
                          <div>24 мин</div>
                        </div>
                      </div>
                    </span>
                  </div>
                  <div class="anime-item__name" title="Фигурный калейдоскоп">Фигурный калейдоскоп</div>
                  <div class="anime-item__genre">2005 Спорт</div>
                </a><a href="/anime/skeit-beskonechnost" class="anime-item slick-slide" data-anime-id="493"
                  style="width: 198px;" data-slick-index="6" aria-hidden="true" tabindex="-1">
                  <div class="anime-item__img ">
                    <img class="anime-item__image" src="/a_img/posters/preview/anime_skeit-beskonechnost.jpg?1689428202"
                      alt="Постер к аниме Скейт: Бесконечность">
                    <span class="anime-item__rating rating-green">8.0</span>
                    <span class="anime-item__properties">
                      <div class="anime-item__properties-wrapper">
                        <div class="anime-item__actions">
                          <button class="anime-item__edit-watchlist-btn" aria-label="Добавить в список просмотра"
                            tabindex="-1"><i class="far fa-bookmark"></i></button>
                          <button class="anime-item__similar-anime-btn tooltipped" aria-label="Похожие аниме"
                            data-tooltip="Похожие аниме" tabindex="-1"><i class="fas fa-magic"></i></button>
                        </div>
                        <div class="info-box anime-item__age-rating">13+</div>
                        <div class="anime-item__episodes">
                          <div class="anime-item__episodes-title">Эпизодов</div>
                          <div class="anime-item__episodes-value">12/12</div>
                        </div>
                        <div class="anime_item__footer">
                          <div>96.7K оценок</div>
                          <div>23 мин</div>
                        </div>
                      </div>
                    </span>
                  </div>
                  <div class="anime-item__name" title="Скейт: Бесконечность">Скейт: Бесконечность</div>
                  <div class="anime-item__genre">2021 Комедия</div>
                </a><a href="/anime/vedushchie-zvezdy" class="anime-item slick-slide" data-anime-id="6413"
                  style="width: 198px;" data-slick-index="7" aria-hidden="true" tabindex="-1">
                  <div class="anime-item__img ">
                    <img class="anime-item__image" src="/a_img/posters/preview/anime_vedushchie-zvezdy.jpg?1679077478"
                      alt="Постер к аниме Ведущие звёзды">
                    <span class="anime-item__rating rating-grey">6.5</span>
                    <span class="anime-item__properties">
                      <div class="anime-item__properties-wrapper">
                        <div class="anime-item__actions">
                          <button class="anime-item__edit-watchlist-btn" aria-label="Добавить в список просмотра"
                            tabindex="-1"><i class="far fa-bookmark"></i></button>
                          <button class="anime-item__similar-anime-btn tooltipped" aria-label="Похожие аниме"
                            data-tooltip="Похожие аниме" tabindex="-1"><i class="fas fa-magic"></i></button>
                        </div>
                        <div class="info-box anime-item__age-rating">13+</div>
                        <div class="anime-item__episodes">
                          <div class="anime-item__episodes-title">Эпизодов</div>
                          <div class="anime-item__episodes-value">12/12</div>
                        </div>
                        <div class="anime_item__footer">
                          <div>7.3K оценок</div>
                          <div>23 мин</div>
                        </div>
                      </div>
                    </span>
                  </div>
                  <div class="anime-item__name" title="Ведущие звёзды">Ведущие звёзды</div>
                  <div class="anime-item__genre">2021 Комедия</div>
                </a></div>
            </div><button type="button" class="slick-next slick-arrow" aria-label="Следующий" style="display: flex;"
              aria-disabled="false"><i class="fas fa-chevron-right"></i></button>
          </div>
        </div>
        <div class="col s12 l3 sidebar">
          <h3 class="small-title"><a href="/schedule">Сегодня выйдут</a></h3>
          <div class="schedule-today">
            <a href="/anime/bezymyannaya-pamyat" class="schedule-today__item" title="Безымянная память">
              <div class="schedule-today__image"><img
                  src="/a_img/posters/preview/anime_bezymyannaya-pamyat.jpg?1713051733" alt="Безымянная память"></div>
              <div class="schedule-today__info">
                <div class="schedule-today__name">Безымянная память</div>
                <div class="schedule-today__series">Вышла: 6 серия</div>
              </div>
            </a>
            <a href="/anime/zabvenie-betteri-2" class="schedule-today__item" title="Забвение бэттери">
              <div class="schedule-today__image"><img
                  src="/a_img/posters/preview/anime_zabvenie-betteri-2.jpg?1712488522" alt="Забвение бэттери"></div>
              <div class="schedule-today__info">
                <div class="schedule-today__name">Забвение бэттери</div>
                <div class="schedule-today__series">Ожидается: 6 серия</div>
              </div>
            </a>
            <a href="/anime/tanec-mechei-pylayushchii-honnodzi" class="schedule-today__item"
              title="Танец мечей: Пылающий Хоннодзи">
              <div class="schedule-today__image"><img
                  src="/a_img/posters/preview/anime_tanec-mechei-pylayushchii-honnodzi.jpg?1712697938"
                  alt="Танец мечей: Пылающий Хоннодзи"></div>
              <div class="schedule-today__info">
                <div class="schedule-today__name">Танец мечей: Пылающий Хоннодзи</div>
                <div class="schedule-today__series">Ожидается: 7 серия</div>
              </div>
            </a>
            <a href="/anime/rinkai" class="schedule-today__item" title="Ринкай!">
              <div class="schedule-today__image"><img src="/a_img/posters/preview/anime_rinkai.jpg?1711928695"
                  alt="Ринкай!"></div>
              <div class="schedule-today__info">
                <div class="schedule-today__name">Ринкай!</div>
                <div class="schedule-today__series">Ожидается: 6 серия</div>
              </div>
            </a>
          </div>

          <div id="yandex_rtb_R-A-1985589-2"></div>
          <script>window.yaContextCb.push(() => {
              Ya.Context.AdvManager.render({
                renderTo: 'yandex_rtb_R-A-1985589-2',
                blockId: 'R-A-1985589-2'
              })
            })
          </script>
          <h3 class="small-title"><a href="/anime/status/airing">Новые серии</a></h3>
          <div class="schedule-today">
            <a href="/anime/protivostoyanie-svyatogo" class="schedule-today__item" title="Противостояние святого">
              <div class="schedule-today__image"><img
                  src="/a_img/posters/preview/anime_protivostoyanie-svyatogo.jpg?1707747131"
                  alt="Противостояние святого"></div>
              <div class="schedule-today__info">
                <div class="schedule-today__name">Противостояние святого</div>
                <div class="schedule-today__series">Добавлена: 36 серия</div>
              </div>
            </a>
            <a href="/anime/istoriya-o-dedushke-i-babushke-kotorye-vernulis-k-svoei-molodosti"
              class="schedule-today__item" title="История о дедушке и бабушке, которые снова стали молодыми">
              <div class="schedule-today__image"><img
                  src="/a_img/posters/preview/anime_istoriya-o-dedushke-i-babushke-kotorye-vernulis-k-svoei-molodosti.jpg?1711446844"
                  alt="История о дедушке и бабушке, которые снова стали молодыми"></div>
              <div class="schedule-today__info">
                <div class="schedule-today__name">История о дедушке и бабушке, которые снова стали молодыми</div>
                <div class="schedule-today__series">Добавлена: 6 серия</div>
              </div>
            </a>
            <a href="/anime/byvshii-geroi-kotorogo-prozvali-neudachnikom-i-vygnali-iz-doma-reshil-zhit-samostoyatelno"
              class="schedule-today__item"
              title="Бывший герой, которого прозвали неудачником и выгнали из дома, решил жить самостоятельно">
              <div class="schedule-today__image"><img
                  src="/a_img/posters/preview/anime_byvshii-geroi-kotorogo-prozvali-neudachnikom-i-vygnali-iz-doma-reshil-zhit-samostoyatelno.jpg?1712224687"
                  alt="Бывший герой, которого прозвали неудачником и выгнали из дома, решил жить самостоятельно"></div>
              <div class="schedule-today__info">
                <div class="schedule-today__name">Бывший герой, которого прозвали неудачником и выгнали из дома, решил
                  жить самостоятельно</div>
                <div class="schedule-today__series">Добавлена: 8 серия</div>
              </div>
            </a>
            <a href="/anime/volchica-i-pryanosti-torgovec-vstrechaet-mudruyu-volchicu" class="schedule-today__item"
              title="Волчица и пряности: Торговец встречает мудрую волчицу">
              <div class="schedule-today__image"><img
                  src="/a_img/posters/preview/anime_volchica-i-pryanosti-torgovec-vstrechaet-mudruyu-volchicu.jpg?1712501493"
                  alt="Волчица и пряности: Торговец встречает мудрую волчицу"></div>
              <div class="schedule-today__info">
                <div class="schedule-today__name">Волчица и пряности: Торговец встречает мудрую волчицу</div>
                <div class="schedule-today__series">Добавлена: 7 серия</div>
              </div>
            </a>
            <a href="/anime/randevu-s-zhiznyu-5" class="schedule-today__item" title="Рандеву с жизнью 5">
              <div class="schedule-today__image"><img
                  src="/a_img/posters/preview/anime_randevu-s-zhiznyu-5.jpg?1711405877" alt="Рандеву с жизнью 5"></div>
              <div class="schedule-today__info">
                <div class="schedule-today__name">Рандеву с жизнью 5</div>
                <div class="schedule-today__series">Добавлена: 5 серия</div>
              </div>
            </a>
          </div>
          <h3 class="small-title">Последние комментарии</h3>
          <div class="last-comments-list">
            <div class="last-comments-item">
              <div class="last-comments-header">
                <a href="/users/7986" class="last-comments-user-avatar tippy-ajax" data-ajax="/users/7986/mini">
                  <img class="profile-frame lazy" src="/img/lowShop.jpg" data-src="/x35/img/frames/f192.png"
                    alt="Рамка Kufa">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/uploads/avatars/7986.png?1714317738"
                    alt="Аватар пользователя">
                </a>
                <div class="last-comments-user-info">
                  <a href="/users/7986" class="last-comments-user-name">
                    Kufa
                  </a>
                  <div class="last-comments-user-date" title="14.05.2024 в 06:05">
                    2 минуты назад
                  </div>
                </div>
              </div>
              <div class="last-comments-user-text">
                Начинаю смотреть.
              </div>
              <a href="/anime/klinok-rassekayushchii-demonov-trenirovka-stolpov#comment_118562"
                class="last-comments-user-reply"><i class="far fa-comment"></i> Ответить</a>
            </div>
            <div class="last-comments-item">
              <div class="last-comments-header">
                <a href="/users/77487" class="last-comments-user-avatar tippy-ajax" data-ajax="/users/77487/mini">
                  <img class="profile-frame lazy" src="/img/lowShop.jpg" data-src="/x35/img/frames/f2.png"
                    alt="Рамка Tialiko">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/uploads/avatars/77487.png?1705922947"
                    alt="Аватар пользователя">
                </a>
                <div class="last-comments-user-info">
                  <a href="/users/77487" class="last-comments-user-name">
                    Tialiko
                  </a>
                  <div class="last-comments-user-date" title="14.05.2024 в 06:05">
                    20 минут назад
                  </div>
                </div>
              </div>
              <div class="last-comments-user-text">
                Ой кучка ОПГ травленых снова минусят. Халтурите ребятки, что с минусами, что с защитой пакостных
                поступков конкретных персонажей. НО оно и неудивительно, когда мрази мразей защищают. <img
                  src="/img/emojis/coolanimcat.png" alt="Смайл coolanimcat ">
              </div>
              <a href="/anime/lunnoe-puteshestvie-privedet-k-novomu-miru-2#comment_118561"
                class="last-comments-user-reply"><i class="far fa-comment"></i> Ответить</a>
            </div>
            <div class="last-comments-item">
              <div class="last-comments-header">
                <a href="/users/101701" class="last-comments-user-avatar tippy-ajax" data-ajax="/users/101701/mini">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/uploads/avatars/101701.png?1715689385"
                    alt="Аватар пользователя">
                </a>
                <div class="last-comments-user-info">
                  <a href="/users/101701" class="last-comments-user-name">
                    moonrise_ik
                  </a>
                  <div class="last-comments-user-date" title="14.05.2024 в 06:05">
                    23 минуты назад
                  </div>
                </div>
              </div>
              <div class="last-comments-user-text">
                а<br>
                ааааааааааааааааааааааааа
              </div>
              <a href="/anime/klinok-rassekayushchii-demonov-trenirovka-stolpov#comment_118560"
                class="last-comments-user-reply"><i class="far fa-comment"></i> Ответить</a>
            </div>
            <div class="last-comments-item">
              <div class="last-comments-header">
                <a href="/users/6676" class="last-comments-user-avatar tippy-ajax" data-ajax="/users/6676/mini">
                  <img class="profile-frame lazy" src="/img/lowShop.jpg" data-src="/x35/img/frames/f14.png"
                    alt="Рамка NOD97">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/img/avatars/shop/a35.gif"
                    alt="Аватар пользователя">
                </a>
                <div class="last-comments-user-info">
                  <a href="/users/6676" class="last-comments-user-name">
                    NOD97
                  </a>
                  <div class="last-comments-user-date" title="14.05.2024 в 05:05">
                    1 час назад
                  </div>
                </div>
              </div>
              <div class="last-comments-user-text">
                Пока что только его зачатки
              </div>
              <a href="/anime/perevoplotilsya-v-sedmogo-princa-tak-chto-ya-budu-sovershenstvovat-svoyu-magiyu-kak-zahochu#comment_118559"
                class="last-comments-user-reply"><i class="far fa-comment"></i> Ответить</a>
            </div>
            <div class="last-comments-item">
              <div class="last-comments-header">
                <a href="/users/63502" class="last-comments-user-avatar tippy-ajax" data-ajax="/users/63502/mini">
                  <img class="profile-frame lazy" src="/img/lowShop.jpg" data-src="/x35/img/frames/f4.png"
                    alt="Рамка Kirigayo Kazuto kirito">
                  <img class="lazy" src="/img/lowShop.jpg" data-src="/x35/img/avatars/65.jpg" alt="Аватар пользователя">
                </a>
                <div class="last-comments-user-info">
                  <a href="/users/63502" class="last-comments-user-name">
                    Kirigayo Kazuto kirito
                  </a>
                  <div class="last-comments-user-date" title="14.05.2024 в 05:05">
                    1 час назад
                  </div>
                </div>
              </div>
              <div class="last-comments-user-text">
                Плюсик
              </div>
              <a href="/anime/lunnoe-puteshestvie-privedet-k-novomu-miru-2#comment_118558"
                class="last-comments-user-reply"><i class="far fa-comment"></i> Ответить</a>
            </div>
          </div>
          <h3 class="small-title">Фильтр аниме</h3>
          <form class="anime-filter filter-sidebar" action="/anime/filter">
            <div class="anime-filter__inputs">
              <div class="anime-filter__input-block input-block">
                <div class="input-block__title">Жанр</div>
                <select name="genre[]" class="slim-select" multiple="" data-placeholder="Жанр аниме" tabindex="-1"
                  data-ssid="ss-34997" style="display: none;">
                  <option value="45">Авангард</option>
                  <option value="34">Безумие</option>
                  <option value="32">Боевые искусства</option>
                  <option value="23">Вампиры</option>
                  <option value="2">Военное</option>
                  <option value="35">Гарем</option>
                  <option value="41">Гурман</option>
                  <option value="27">Демоны</option>
                  <option value="9">Детектив</option>
                  <option value="39">Детское</option>
                  <option value="28">Дзёсей</option>
                  <option value="5">Драма</option>
                  <option value="17">Игры</option>
                  <option value="13">Исторический</option>
                  <option value="43">Китайское</option>
                  <option value="4">Комедия</option>
                  <option value="16">Космос</option>
                  <option value="6">Магия</option>
                  <option value="38">Машины</option>
                  <option value="24">Меха</option>
                  <option value="33">Музыка</option>
                  <option value="14">Пародия</option>
                  <option value="19">Повседневность</option>
                  <option value="30">Полиция</option>
                  <option value="3">Приключения</option>
                  <option value="31">Психологическое</option>
                  <option value="42">Работа</option>
                  <option value="22">Романтика</option>
                  <option value="15">Самураи</option>
                  <option value="21">Сверхъестественное</option>
                  <option value="25">Сёдзё</option>
                  <option value="8">Сёнен</option>
                  <option value="26">Спорт</option>
                  <option value="10">Супер сила</option>
                  <option value="18">Сэйнэн</option>
                  <option value="46">Тайна</option>
                  <option value="11">Триллер</option>
                  <option value="29">Ужасы</option>
                  <option value="12">Фантастика</option>
                  <option value="7">Фэнтези</option>
                  <option value="20">Школа</option>
                  <option value="1">Экшен</option>
                  <option value="36">Этти</option>
                </select>
                <div class="ss-34997 ss-main slim-select" style="">
                  <div class="ss-multi-selected">
                    <div class="ss-values"><span class="ss-disabled">Жанр аниме</span></div>
                    <div class="ss-add"><span class="ss-plus"></span></div>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search"><input type="search" placeholder="Искать" tabindex="0" aria-label="Искать"
                        autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option" data-id="99572660">Авангард</div>
                      <div class="ss-option" data-id="18338543">Безумие</div>
                      <div class="ss-option" data-id="30575258">Боевые искусства</div>
                      <div class="ss-option" data-id="74089656">Вампиры</div>
                      <div class="ss-option" data-id="19601675">Военное</div>
                      <div class="ss-option" data-id="49523615">Гарем</div>
                      <div class="ss-option" data-id="85129220">Гурман</div>
                      <div class="ss-option" data-id="34777545">Демоны</div>
                      <div class="ss-option" data-id="37664125">Детектив</div>
                      <div class="ss-option" data-id="6474103">Детское</div>
                      <div class="ss-option" data-id="96671694">Дзёсей</div>
                      <div class="ss-option" data-id="17620060">Драма</div>
                      <div class="ss-option" data-id="41007503">Игры</div>
                      <div class="ss-option" data-id="24389713">Исторический</div>
                      <div class="ss-option" data-id="59700760">Китайское</div>
                      <div class="ss-option" data-id="26258872">Комедия</div>
                      <div class="ss-option" data-id="37403541">Космос</div>
                      <div class="ss-option" data-id="37785786">Магия</div>
                      <div class="ss-option" data-id="41040734">Машины</div>
                      <div class="ss-option" data-id="16941382">Меха</div>
                      <div class="ss-option" data-id="39417077">Музыка</div>
                      <div class="ss-option" data-id="34947980">Пародия</div>
                      <div class="ss-option" data-id="34818379">Повседневность</div>
                      <div class="ss-option" data-id="54872006">Полиция</div>
                      <div class="ss-option" data-id="95962216">Приключения</div>
                      <div class="ss-option" data-id="62408672">Психологическое</div>
                      <div class="ss-option" data-id="30381574">Работа</div>
                      <div class="ss-option" data-id="12206754">Романтика</div>
                      <div class="ss-option" data-id="24316351">Самураи</div>
                      <div class="ss-option" data-id="59642275">Сверхъестественное</div>
                      <div class="ss-option" data-id="62641275">Сёдзё</div>
                      <div class="ss-option" data-id="8082189">Сёнен</div>
                      <div class="ss-option" data-id="36071275">Спорт</div>
                      <div class="ss-option" data-id="92434282">Супер сила</div>
                      <div class="ss-option" data-id="99645773">Сэйнэн</div>
                      <div class="ss-option" data-id="64667173">Тайна</div>
                      <div class="ss-option" data-id="4153255">Триллер</div>
                      <div class="ss-option" data-id="21603615">Ужасы</div>
                      <div class="ss-option" data-id="14825440">Фантастика</div>
                      <div class="ss-option" data-id="69343514">Фэнтези</div>
                      <div class="ss-option" data-id="23318835">Школа</div>
                      <div class="ss-option" data-id="64251425">Экшен</div>
                      <div class="ss-option" data-id="56862557">Этти</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="anime-filter__input-block input-block">
                <div class="input-block__title">Тип</div>
                <select name="type[]" class="slim-select" multiple="" data-placeholder="Тип аниме" tabindex="-1"
                  data-ssid="ss-74849" style="display: none;">
                  <option value="tv-serial">Аниме сериал</option>
                  <option value="polnometrazhnyi-film">Аниме фильм</option>
                  <option value="ova">OVA</option>
                  <option value="ona">ONA</option>
                  <option value="special">SPECIAL</option>
                </select>
                <div class="ss-74849 ss-main slim-select" style="">
                  <div class="ss-multi-selected">
                    <div class="ss-values"><span class="ss-disabled">Тип аниме</span></div>
                    <div class="ss-add"><span class="ss-plus"></span></div>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option" data-id="46472386">Аниме сериал</div>
                      <div class="ss-option" data-id="80210888">Аниме фильм</div>
                      <div class="ss-option" data-id="31288622">OVA</div>
                      <div class="ss-option" data-id="57771266">ONA</div>
                      <div class="ss-option" data-id="57325760">SPECIAL</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="anime-filter__input-block input-block">
                <div class="input-block__title">Статус аниме</div>
                <select name="status" class="slim-select" tabindex="-1" data-ssid="ss-88363" style="display: none;">
                  <option value="">Не учитывать</option>
                  <option value="airing">Онгоинг</option>
                  <option value="finished">Завершен</option>
                  <option value="upcoming">Анонсирован</option>
                </select>
                <div class="ss-88363 ss-main slim-select" style="">
                  <div class="ss-single-selected"><span class="placeholder">Не учитывать</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="84054394">Не учитывать</div>
                      <div class="ss-option" data-id="75403391">Онгоинг</div>
                      <div class="ss-option" data-id="45251672">Завершен</div>
                      <div class="ss-option" data-id="9915836">Анонсирован</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="anime-filter__input-block input-block" style="display: none">
                <div class="input-block__title">Год выхода</div>
                <select name="release" class="slim-select" tabindex="-1" data-ssid="ss-77313" style="display: none;">
                  <option value="">Год выхода</option>
                  <option value="2021">2021</option>
                  <option value="2020">2020</option>
                  <option value="2019">2019</option>
                  <option value="2018">2018</option>
                  <option value="2017">2017</option>
                  <option value="2016">2016</option>
                  <option value="2015">2015</option>
                  <option value="2014">2014</option>
                  <option value="Older">до 2014</option>
                  <optgroup label="Десятилетия">
                    <option value="2020-2022">2020-2022</option>
                    <option value="2010-2019">2010-2019</option>
                    <option value="2000-2009">2000-2009</option>
                    <option value="1990-1999">1990-1999</option>
                  </optgroup>
                </select>
                <div class="ss-77313 ss-main slim-select" style="">
                  <div class="ss-single-selected"><span class="placeholder">Год выхода</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search"><input type="search" placeholder="Искать" tabindex="0" aria-label="Искать"
                        autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="78202785">Год выхода</div>
                      <div class="ss-option" data-id="79971048">2021</div>
                      <div class="ss-option" data-id="30063131">2020</div>
                      <div class="ss-option" data-id="69601073">2019</div>
                      <div class="ss-option" data-id="66578284">2018</div>
                      <div class="ss-option" data-id="56179852">2017</div>
                      <div class="ss-option" data-id="5211534">2016</div>
                      <div class="ss-option" data-id="99708515">2015</div>
                      <div class="ss-option" data-id="54164522">2014</div>
                      <div class="ss-option" data-id="58825472">до 2014</div>
                      <div class="ss-optgroup">
                        <div class="ss-optgroup-label">Десятилетия</div>
                        <div class="ss-option" data-id="1692224">2020-2022</div>
                        <div class="ss-option" data-id="58398831">2010-2019</div>
                        <div class="ss-option" data-id="70680405">2000-2009</div>
                        <div class="ss-option" data-id="7894661">1990-1999</div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="anime-filter__input-block input-block" style="display: none">
                <div class="input-block__title">Рейтинг</div>
                <select name="rating" class="slim-select" tabindex="-1" data-ssid="ss-88214" style="display: none;">
                  <option value="">Рейтинг</option>
                  <option value="9">Выше 9+</option>
                  <option value="8">Выше 8+</option>
                  <option value="7">Выше 7+</option>
                  <option value="6">Выше 6+</option>
                  <option value="5">Выше 5+</option>
                  <option value="4">Выше 4+</option>
                  <option value="3">Выше 3+</option>
                  <option value="2">Выше 2+</option>
                  <option value="1">Выше 1+</option>
                </select>
                <div class="ss-88214 ss-main slim-select" style="">
                  <div class="ss-single-selected"><span class="placeholder">Рейтинг</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="45643466">Рейтинг</div>
                      <div class="ss-option" data-id="97894459">Выше 9+</div>
                      <div class="ss-option" data-id="39459585">Выше 8+</div>
                      <div class="ss-option" data-id="74865080">Выше 7+</div>
                      <div class="ss-option" data-id="19462882">Выше 6+</div>
                      <div class="ss-option" data-id="576228">Выше 5+</div>
                      <div class="ss-option" data-id="70300549">Выше 4+</div>
                      <div class="ss-option" data-id="24785096">Выше 3+</div>
                      <div class="ss-option" data-id="16950495">Выше 2+</div>
                      <div class="ss-option" data-id="95768164">Выше 1+</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="anime-filter__input-block input-block" style="display: none">
                <div class="input-block__title">Возрастной рейтинг</div>
                <select name="age_rating[]" class="slim-select" multiple="" data-placeholder="Не учитывать"
                  tabindex="-1" data-ssid="ss-33748" style="display: none;">
                  <option value="G">G</option>
                  <option value="PG">PG</option>
                  <option value="PG-13">PG-13</option>
                  <option value="R">R</option>
                  <option value="R-17">R-17</option>
                  <option value="R+">R+</option>
                </select>
                <div class="ss-33748 ss-main slim-select" style="">
                  <div class="ss-multi-selected">
                    <div class="ss-values"><span class="ss-disabled">Не учитывать</span></div>
                    <div class="ss-add"><span class="ss-plus"></span></div>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option" data-id="64612865">G</div>
                      <div class="ss-option" data-id="18056510">PG</div>
                      <div class="ss-option" data-id="16783852">PG-13</div>
                      <div class="ss-option" data-id="53521186">R</div>
                      <div class="ss-option" data-id="26667438">R-17</div>
                      <div class="ss-option" data-id="56212726">R+</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="anime-filter__input-block input-block" style="display: none">
                <div class="input-block__title">Сезон</div>
                <select name="season" class="slim-select" tabindex="-1" data-ssid="ss-88176" style="display: none;">
                  <option value="">Не учитывать</option>
                  <option value="winter">Зима</option>
                  <option value="spring">Весна</option>
                  <option value="summer">Лето</option>
                  <option value="fall">Осень</option>
                </select>
                <div class="ss-88176 ss-main slim-select" style="">
                  <div class="ss-single-selected"><span class="placeholder">Не учитывать</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="64637885">Не учитывать</div>
                      <div class="ss-option" data-id="75809914">Зима</div>
                      <div class="ss-option" data-id="75204082">Весна</div>
                      <div class="ss-option" data-id="23830583">Лето</div>
                      <div class="ss-option" data-id="98637640">Осень</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="anime-filter__input-block input-block" style="display: none">
                <div class="input-block__title">Сортировка</div>
                <select name="sort" class="slim-select" tabindex="-1" data-ssid="ss-6905" style="display: none;">
                  <option value="views">По просмотрам</option>
                  <option value="title">По названию</option>
                  <option value="episode_last_added_at">По обновлению</option>
                  <option value="scores">Рейтингу</option>
                  <option value="post_date">Дате выхода</option>
                </select>
                <div class="ss-6905 ss-main slim-select" style="">
                  <div class="ss-single-selected"><span class="placeholder">По просмотрам</span><span
                      class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                  </div>
                  <div class="ss-content">
                    <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                        aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                    <div class="ss-list">
                      <div class="ss-option ss-disabled ss-option-selected" data-id="79499818">По просмотрам</div>
                      <div class="ss-option" data-id="90452161">По названию</div>
                      <div class="ss-option" data-id="17614662">По обновлению</div>
                      <div class="ss-option" data-id="98982396">Рейтингу</div>
                      <div class="ss-option" data-id="58180716">Дате выхода</div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="show-more-filters">Развернуть <i class="fas fa-sort-down"></i></div>
            </div>
            <div class="anime-filter__btns">
              <button class="anime-filter__btn"><span>Применить</span></button><a href="/anime/random"
                class="anime-filter__btn tooltipped" data-position="bottom" data-tooltip="Случайное аниме"
                aria-label="Рандомное аниме"><i class="fas fa-random"></i></a>
            </div>
          </form>
          <h3 class="small-title">Друзья</h3>
          <div class="anime-friends-score">
            <div class="sidebar-text"><a href="/reg">Зарегистрируйтесь</a> и добавьте друзей, тогда здесь появятся
              оценки, которые ваши друзья поставили этому аниме...</div>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div id="modal-auth" class="modal" tabindex="0">
    <div class="modal-parent">
      <div class="login-reasons">
        <div class="login-reasons-color">
          <div class="login-reasons-title">Что мне даёт регистрация?</div>
          <div class="login-reasons-item">— Возможность создавать списки</div>
          <div class="login-reasons-item">— Общение и новые друзья</div>
          <div class="login-reasons-item">— Зарабатывать особые монеты и улучшать свой профиль</div>
          <div class="login-reasons-item">— Отключить рекламу</div>
        </div>
      </div>
      <form class="login-form">
        <div class="main-title">Авторизация</div>
        <div class="login-form__group-title">Войти с помощью соцсетей</div>
        <div class="login-form__social-btn">
          <a href="/login/redirect/google" class="login__form-btn login-google" aria-label="Логин с помощью google">
            <i class="fab fa-google"></i>
          </a>
          <a href="/login/redirect/vkontakte" class="login__form-btn login-vk" aria-label="Логин с помощью vk">
            <i class="fab fa-vk"></i>
          </a>
          <a href="/login/redirect/discord" class="login__form-btn login-twitter" aria-label="Логин с помощью twitter">
            <i class="fab fa-discord"></i>
          </a>
          <a href="/login/redirect/yandex" class="login__form-btn login-yandex" aria-label="Логин с помощью yandex">
            <i class="fab fa-yandex"></i>
          </a>
        </div>
        <input class="login-form__login" type="text" placeholder="Введите Email">
        <input class="login-form__password" type="password" placeholder="Введите пароль">
        <div class="login-form__forgot-password">
          <a href="/reset">Забыли пароль?</a>
        </div>
        <button class="login__form-btn main-btn login-form__login_btn">
          Войти
        </button>
        <div class="login-form__register">
          Нет аккаунта? <a href="/reg">Зарегистрироваться</a>
        </div>
      </form>
    </div>
  </div>
  <div id="modal-report" class="modal" tabindex="0">
    <div class="report-form">
      <div class="small-title">Отправить жалобу</div>
      <button class="modal-close"><i class="fas fa-times"></i></button>
      <textarea class="modal__report-textarea"
        placeholder="Опишите причину жалобы, например неподобающее поведение"></textarea>
      <button class="blue-btn send-report-btn">Отправить</button>
    </div>
  </div>
  <div id="modal-yaReview" class="modal" tabindex="0">
    <button class="modal-close"><i class="fas fa-times"></i></button>
    <img src="/img/rate.png" alt="Оценка сайта">
  </div>
  <div class="new-footer">
    <div class="container inner-container">
      <div class="row">
        <div class="col s12 l12">
          <div class="new-footer__content">
            <div class="new-footer__menu">
              <div class="new-footer__title">Аниме</div>
              <ul>
                <li><a class="new-footer__link" href="/anime">Каталог</a></li>
                <li><a class="new-footer__link" href="/anime/status/airing">Онгоинги</a></li>
                <li><a class="new-footer__link" href="/anime/status/upcoming">Анонсы</a></li>
                <li><a class="new-footer__link" href="/schedule">Расписание</a></li>
              </ul>
            </div>
            <div class="new-footer__menu">
              <div class="new-footer__title">Типы аниме</div>
              <ul>
                <li><a class="new-footer__link" href="/types/tv-serial">ТВ-Сериал</a></li>
                <li><a class="new-footer__link" href="/types/polnometrazhnyi-film">Полнометражный фильм</a></li>
                <li><a class="new-footer__link" href="/types/ona">ОНА</a></li>
                <li><a class="new-footer__link" href="/types/ova">ОВА</a></li>
              </ul>
            </div>
            <div class="new-footer__menu">
              <div class="new-footer__title">Разное</div>
              <ul>
                <li><a class="new-footer__link" href="/userlist">Подборки</a></li>
                <li><a class="new-footer__link" href="/tags">Тэги</a></li>
                <li><a class="new-footer__link" href="/rooms">Совместный просмотр</a></li>
                <li><a class="new-footer__link" href="/help">Помощь</a></li>
              </ul>
            </div>
            <div class="new-footer__menu">
              <div class="new-footer__title">Смена темы</div>
              <select name="theme" class="slim-select theme-select" tabindex="-1" data-ssid="ss-51430"
                style="display: none;">
                <option value="light-theme">Светлая</option>
                <option value="dark-theme">Темная</option>
              </select>
              <div class="ss-51430 ss-main slim-select theme-select" style="">
                <div class="ss-single-selected"><span class="placeholder">Светлая</span><span
                    class="ss-deselect ss-hide">x</span><span class="ss-arrow"><span class="arrow-down"></span></span>
                </div>
                <div class="ss-content">
                  <div class="ss-search ss-hide"><input readonly="" type="search" placeholder="Искать" tabindex="0"
                      aria-label="Искать" autocapitalize="off" autocomplete="off" autocorrect="off"></div>
                  <div class="ss-list">
                    <div class="ss-option ss-disabled ss-option-selected" data-id="78566978">Светлая</div>
                    <div class="ss-option" data-id="20892733">Темная</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="new-footer__contact">
            <span>Связь:</span><a href="mailto:uriell2mad@yandex.ru">uriell2mad@yandex.ru</a>
          </div>
        </div>
      </div>
    </div>
  </div>
  <script src="/js/jquery-2.1.1.min.js?2"></script>
  <script src="/js/readmore.min.js?2"></script>
  <script src="/js/typeahead.jquery.min.js?2"></script>
  <script src="/js/social-likes.min.js"></script>
  <script src="/js/jquery.magnific-popup.min.js"></script>
  <script src="/js/slick.min.js"></script>
  <script src="/js/slimselect.min.js"></script>
  <script src="/js/materialize.js?12"></script>
  <script src="/js/init.js?286"></script>
  <script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "BreadcrumbList",
  "itemListElement": [{
    "@type": "ListItem",
    "position": 1,
    "item": {
      "@id": "https://animebuff.ru",
      "name": "Главная"
    }
  },{
    "@type": "ListItem",
    "position": 2,
    "item": {
      "@id": "https://animebuff.ru/anime",
      "name": "Аниме"
    }
  },{
    "@type": "ListItem",
    "position": 3,
    "item": {
      "@id": "https://animebuff.ru/anime/yuri-na-ldu",
      "name": "Юри на льду"
    }
  }]
}
</script>

  <script type="text/javascript">
      (function (m, e, t, r, i, k, a) {
        m[i] = m[i] || function () {
          (m[i].a = m[i].a || []).push(arguments)
        };
        m[i].l = 1 * new Date();
        k = e.createElement(t), a = e.getElementsByTagName(t)[0], k.async = 1, k.src = r, a.parentNode.insertBefore(k, a)
      })
      (window, document, "script", "https://mc.yandex.ru/metrika/tag.js", "ym");

    ym(82793836, "init", {
      clickmap: true,
      trackLinks: true,
      accurateTrackBounce: true,
      webvisor: true
    });
  </script>
  <noscript>
    <div><img src="https://mc.yandex.ru/watch/82793836" style="position:absolute; left:-9999px;" alt="" /></div>
  </noscript>


  <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-4Z1LZLXLFL"></script>
  <script>
    window.dataLayer = window.dataLayer || [];

    function gtag() {
      dataLayer.push(arguments);
    }

    gtag('js', new Date());

    gtag('config', 'G-4Z1LZLXLFL');
  </script>

  <script>window.yaContextCb.push(() => {
      Ya.Context.AdvManager.render({
        type: 'floorAd',
        blockId: 'R-A-1985589-1'
      })
    })
  </script>


  <div id="back-to-top" class="hidden"><svg viewBox="0 0 24 24">
      <path d="M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6z"></path>
    </svg></div>
  <div class="sidenav-overlay"></div>
  <div class="drag-target"></div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
  <div class="material-tooltip">
    <div class="tooltip-content"></div>
  </div>
</body>

</html>
