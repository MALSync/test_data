<html xmlns="https://www.w3.org/1999/xhtml">

<head>
  <title>No Game No Life - anime No Game No Life Online - ver No Game No Life</title>
  <meta name="description" content="No Game, No Life se centra en Sora y Shiro, unos hermanos cuya reputación de NEETs hikikomoris y gamers han hecho que comiencen a extenderse leyendas urbanas suyas por todo internet.

Estos dos gamers consideran que el mundo real no es más que “un juego de mierda”.  Un día, un chico llamado “Dios” les invoca en un mundo alternativo. En este mundo, Dios ha prohibido la guerra y declarado que todo se decide en base a los juegos, incluso las fronteras de los países. La humanidad vive ahora en una ciudad por culpa del resto de razas.

¿Se convertirán Sora y Shiro, hermano y hermana, en los salvadores de este mundo alternativo?">
  <meta name="keywords"
    content="No Game No Life,anime No Game No Life Online,ver No Game No Life, ver online No Game No Life">
  <meta property="og:title" content="No Game No Life">
  <meta property="og:url" content="https://jkanime.net/no-game-no-life/">
  <meta property="og:image" content="https://cdn.jkdesu.com/assets/images/animes/image/no-game-no-life.jpg">
  <meta property="og:description" content="No Game, No Life se centra en Sora y Shiro, unos hermanos cuya reputación de NEETs hikikomoris y gamers han hecho que comiencen a extenderse leyendas urbanas suyas por todo internet.

Estos dos gamers consideran que el mundo real no es más que “un juego de mierda”.  Un día, un chico llamado “Dios” les invoca en un mundo alternativo. En este mundo, Dios ha prohibido la guerra y declarado que todo se decide en base a los juegos, incluso las fronteras de los países. La humanidad vive ahora en una ciudad por culpa del resto de razas.

¿Se convertirán Sora y Shiro, hermano y hermana, en los salvadores de este mundo alternativo?">
  <link href="https://cdn.jkdesu.com/assets2/css/img/favicon.ico" rel="icon" type="image/x-icon">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">


  <meta http-equiv="content-language" content="es">
  <meta content="width=device-width, initial-scale=1" name="viewport">

  <link rel="alternate" type="application/rss+xml" title="Jkanime RSS Feed" href="https://feeds.feedburner.com/jkanime">
  <script src="https://cdn.jkdesu.com/assets2/js/jquery-3.3.1.min.js"></script>
  <!-- Google Font -->
  <link href="https://fonts.googleapis.com/css2?family=Oswald:wght@300;400;500;600;700&amp;display=swap"
    rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Mulish:wght@300;400;500;600;700;800;900&amp;display=swap"
    rel="stylesheet">

  <!-- Css Styles -->
  <link rel="stylesheet" href="https://cdn.jkdesu.com/assets2/css/bootstrap.min.css" type="text/css">
  <link rel="stylesheet" href="https://cdn.jkdesu.com/assets2/css/font-awesome.min.css" type="text/css">
  <link rel="stylesheet" href="https://cdn.jkdesu.com/assets2/css/elegant-icons.css" type="text/css">
  <link rel="stylesheet" href="https://cdn.jkdesu.com/assets2/css/plyr.css" type="text/css">
  <link rel="stylesheet" href="https://cdn.jkdesu.com/assets2/css/nice-select.css?=v1.0" type="text/css">
  <link rel="stylesheet" href="https://cdn.jkdesu.com/assets2/css/owl.carousel.min.css" type="text/css">
  <link rel="stylesheet" href="https://cdn.jkdesu.com/assets2/css/slicknav.min.css" type="text/css">
  <link rel="stylesheet" href="https://cdn.jkdesu.com/assets2/css/jquery-confirm.css" type="text/css">
  <link rel="stylesheet" href="https://cdn.jkdesu.com/assets2/css/jquery.toast.css" type="text/css">
  <link rel="stylesheet" href="https://cdn.jkdesu.com/assets2/css/style.css?=v6.1.76" type="text/css">

  <link rel="dns-prefetch" href="//connect.facebook.net">
  <link rel="dns-prefetch" href="//facebook.com">
  <link rel="dns-prefetch" href="//apis.google.com">
  <link rel="dns-prefetch" href="//google-analytics.com">

  <script>
    var login_domain = "https://login.jkanime.bz";
    function crear_cookie(cname, cvalue, exMins) { var d = new Date(); d.setTime(d.getTime() + (exMins * 60 * 1000)); var expires = "expires=" + d.toUTCString(); document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/"; }
    function leer_cookie(cname) {
      var name = cname + "="; var decodedCookie = decodeURIComponent(document.cookie); var ca = decodedCookie.split(';'); for (var i = 0; i < ca.length; i++) {
        var c = ca[i]; while (c.charAt(0) == ' ') { c = c.substring(1); }
        if (c.indexOf(name) == 0) { return c.substring(name.length, c.length); }
      }
      return "";
    }
    $(function () {
      $('#darkswitch').change(function () {
        if ($(this).is(':checked')) {
          crear_cookie("darkmode", "true", 43200);
          $('head').append('<link id="darkcss" rel="stylesheet" href="https://cdn.jkdesu.com/assets2/css/dark.css?=v3.13" type="text/css" />');
          $(".header__logo img").attr("src", $(".header__logo img").attr("src").replace(".png", "-dark.png"));
        } else {
          $('#darkcss').remove();
          crear_cookie("darkmode", "false", -1);
          $(".header__logo img").attr("src", $(".header__logo img").attr("src").replace("-dark.png", ".png"));
        }
      });

      if (leer_cookie("darkmode")) {
        $("#darkswitch").prop("checked", true);
        $(".header__logo img").attr("src", $(".header__logo img").attr("src").replace(".png", "-dark.png"));

      }

    });

    function darkmode() {
      if (!$("#darkcss").length) {
        $('head').append('<link id="darkcss" rel="stylesheet" href="https://cdn.jkdesu.com/assets2/css/dark.css?=v3.13" type="text/css" />');
        darkmode();
      }
    }
    if (leer_cookie("darkmode")) {
      darkmode();
    }
  </script>


  <style type="text/css">
    .fb_iframe_widget iframe {
      position: relative !important;
    }
  </style>

  <script type="text/javascript" src="https://cdn.jkdesu.com/assets2/js/jquery.url.js"></script>
  <script type="text/javascript">
    $(function () {

      if (Math.round(Math.random() * (99)) == 27) $.get($.path + 'ajax/social_counter/1133/no-game-no-life/');


    });
  </script>
  <style type="text/css">
    .listpage li a:visited {
      color: #1286B7 !important;
    }

    .padd {

      width: 100%;
    }
  </style>


  <script src="https://jkanimenet.disqus.com/embed.js" data-timestamp="1696430868301"></script>
  <script src="https://jkanime.net/ads.js"></script>
</head>

<body>
  <div id="modal"></div>

  <header class="header">
    <div class="container">
      <div class="row">
        <div class="col-lg-2">
          <div class="header__logo">
            <a href="/">
              <img class="logoweb" src="https://cdn.jkdesu.com/assets2/css/img/jkanimenet.png" alt="Logo">
            </a>
          </div>
        </div>
        <div class="col-lg-7">
          <div class="header__nav">
            <nav class="header__menu mobile-menu">
              <ul class="addmenu">
                <li class="active"><a href="/">Inicio</a></li>
                <li class="active"><a href="/directorio/">Directorio</a></li>
                <li class="active"><a href="/horario/">Horario</a></li>
                <li class="active"><a href="/top/">Top</a></li>

                <li class="active hentai tip"><a href="https://hentaijk.com/" target="_blank">Hentai
                    <span>+18</span></a></li>
                <li class="active social"><a href="https://www.facebook.com/jkanimado" target="_blank"><i
                      class="fa fa-facebook" aria-hidden="true"></i></a></li>
                <li class="active social"><a href="https://www.youtube.com/@JKanimeOficial" target="_blank"><i
                      class="fa fa-youtube" aria-hidden="true"></i></a></li>
              </ul>
            </nav>

          </div>
        </div>
        <div class="col-lg-3">
          <div class="header__right">


            <form role="search" autocomplete="off" id="form_search_ajax" class="form_search2" action="/buscar/q/"
              method="get">

              <input type="search" id="buscanime" class="buscanime solopc" name="q" rel="Buscar Anime"
                placeholder="Buscar Anime..." value="" required="">

              <button class="buton-form solopc" id="btn_qsubmit" type="submit"><i class="search"></i></button>
              <div style="display: none;" id="search_results">
                <div id="qloader" class="lds-ellipsis">
                  <div></div>
                  <div></div>
                  <div></div>
                  <div></div>
                </div>
              </div>
              <div style="display: none;" class="search_history">
                <h3>Buscado recientemente:</h3>
                <ul class="history_list"></ul>
              </div>
            </form>

            <b class="screen-overlay"></b>
            <button data-trigger="#navbar_main" class="d-lg-none btn btn-light navbar-light" type="button"> <span
                class="navbar-toggler-icon"></span></button>

            <button class="usr-menu entrar" type="submit"><i class="fa fa-user-circle"></i></button>


            <nav id="navbar_main" class="solomovil mobile-offcanvas navbar navbar-expand-lg navbar-dark bg-primary">
              <div class="offcanvas-header">
                <form role="search" id="form_search_ajax" class="form_search2 mob" action="/buscar/q/" method="get">

                  <input type="search" id="buscanime" class="buscanime" name="q" rel="Buscar Anime"
                    placeholder="Buscar Anime..." value="" required="">

                  <button class="buton-form" id="btn_qsubmit" type="submit"><i class="search"></i></button>

                  <div style="display: none;" class="mob" id="search_results">
                    <div id="qloader" class="lds-ellipsis">
                      <div></div>
                      <div></div>
                      <div></div>
                      <div></div>
                    </div>
                  </div>

                </form>
              </div>

              <div class="menubtns"><a href="/busquedas"><i class="fa fa-history" aria-hidden="true"></i></a></div>


              <ul class="addmenu">
                <li class="active"><a href="/">Inicio</a></li>
                <li class="active"><a href="/directorio/">Directorio</a></li>
                <li class="active"><a href="/horario/">Horario</a></li>
                <li class="active"><a href="/top/">Top</a></li>

                <li class="active hentai tip"><a href="https://hentaijk.com/" target="_blank">Hentai
                    <span>+18</span></a></li>
                <li class="active social"><a href="https://www.facebook.com/jkanimado" target="_blank"><i
                      class="fa fa-facebook" aria-hidden="true"></i></a></li>
                <li class="active social"><a href="https://www.youtube.com/@JKanimeOficial" target="_blank"><i
                      class="fa fa-youtube" aria-hidden="true"></i></a></li>
              </ul>
              <div class="letras-box addmenu">
                <ul>
                  <li><a class="letra-link" href="/letra/A/" rel="nofollow">A</a></li>
                  <li><a class="letra-link" href="/letra/B/" rel="nofollow">B</a></li>
                  <li><a class="letra-link" href="/letra/C/" rel="nofollow">C</a></li>
                  <li><a class="letra-link" href="/letra/D/" rel="nofollow">D</a></li>
                  <li><a class="letra-link" href="/letra/E/" rel="nofollow">E</a></li>
                  <li><a class="letra-link" href="/letra/F/" rel="nofollow">F</a></li>
                  <li><a class="letra-link" href="/letra/G/" rel="nofollow">G</a></li>
                  <li><a class="letra-link" href="/letra/H/" rel="nofollow">H</a></li>
                  <li><a class="letra-link" href="/letra/I/" rel="nofollow">I</a></li>
                  <li><a class="letra-link" href="/letra/J/" rel="nofollow">J</a></li>
                  <li><a class="letra-link" href="/letra/K/" rel="nofollow">K</a></li>
                  <li><a class="letra-link" href="/letra/L/" rel="nofollow">L</a></li>
                  <li><a class="letra-link" href="/letra/M/" rel="nofollow">M</a></li>
                  <li><a class="letra-link" href="/letra/N/" rel="nofollow">N</a></li>
                  <li><a class="letra-link" href="/letra/O/" rel="nofollow">O</a></li>
                  <li><a class="letra-link" href="/letra/P/" rel="nofollow">P</a></li>
                  <li><a class="letra-link" href="/letra/Q/" rel="nofollow">Q</a></li>
                  <li><a class="letra-link" href="/letra/R/" rel="nofollow">R</a></li>
                  <li><a class="letra-link" href="/letra/S/" rel="nofollow">S</a></li>
                  <li><a class="letra-link" href="/letra/T/" rel="nofollow">T</a></li>
                  <li><a class="letra-link" href="/letra/U/" rel="nofollow">U</a></li>
                  <li><a class="letra-link" href="/letra/V/" rel="nofollow">V</a></li>
                  <li><a class="letra-link" href="/letra/W/" rel="nofollow">W</a></li>
                  <li><a class="letra-link" href="/letra/X/" rel="nofollow">X</a></li>
                  <li><a class="letra-link" href="/letra/Y/" rel="nofollow">Y</a></li>
                  <li><a class="letra-link" href="/letra/Z/" rel="nofollow">Z</a></li>
                  <li><a class="letra-link" href="/letra/0-9/" rel="nofollow">0-9</a></li>
                  <li class="box-link tp"><a href="#tipoint" rel="nofollow">Por Tipo ↓</a></li>
                  <li class="box-link lt"><a href="#letrasint" rel="nofollow">Por Genero ↓</a></li>
                </ul>
              </div>
              <div class="type-list addmenu">
                <h3>Animes por Tipo:</h3>
                <ul>
                  <li><a href="/tipo/ova/" title="Ovas de anime">Ovas</a></li>
                  <li><a href="/tipo/pelicula/" title="Peliculas de anime">Peliculas</a></li>

                </ul>
              </div>
              <div class="genre-list addmenu">

                <h3>Animes por Idioma:</h3>
                <ul>
                  <li><a href="/genero/latino/">Español latino</a></li>
                </ul><br><br><br>


                <h3>Animes por Genero:</h3>
                <ul>
                  <li><a href="/genero/accion/" title="Animes de Accion">Accion</a></li>
                  <li><a href="/genero/artes-marciales/" title="Animes de Artes Marciales">Artes Marciales</a></li>
                  <li><a href="/genero/autos/" title="Animes de Autos">Autos</a></li>
                  <li><a href="/genero/aventura/" title="Animes de Aventura">Aventura</a></li>
                  <li><a href="/genero/colegial/" title="Animes de Colegial">Colegial</a></li>
                  <li><a href="/genero/comedia/" title="Animes de Comedia">Comedia</a></li>
                  <li><a href="/genero/cosas-de-la-vida/" title="Animes de Cosas de la vida">Cosas de la vida</a></li>
                  <li><a href="/genero/dementia/" title="Animes de Dementia">Dementia</a></li>
                  <li><a href="/genero/demonios/" title="Animes de Demonios">Demonios</a></li>
                  <li><a href="/genero/deportes/" title="Animes de Deportes">Deportes</a></li>
                  <li><a href="/genero/drama/" title="Animes de Drama">Drama</a></li>
                  <li><a href="/genero/ecchi/" title="Animes de Ecchi">Ecchi</a></li>
                  <li><a href="/genero/fantasa/" title="Animes de Fantasia">Fantasia</a></li>
                  <li><a href="/genero/harem/" title="Animes de Harem">Harem</a></li>
                  <li><a href="/genero/historico/" title="Animes de Historico">Historico</a></li>
                  <li><a href="/genero/josei/" title="Animes de Josei">Josei</a></li>
                  <li><a href="/genero/juegos/" title="Animes de Juegos">Juegos</a></li>
                  <li><a href="/genero/magia/" title="Animes de Magia">Magia</a></li>
                  <li><a href="/genero/mecha/" title="Animes de Mecha">Mecha</a></li>
                  <li><a href="/genero/militar/" title="Animes de Militar">Militar</a></li>
                  <li><a href="/genero/misterio/" title="Animes de Misterio">Misterio</a></li>
                  <li><a href="/genero/musica/" title="Animes de Musica">Musica</a></li>
                  <li><a href="/genero/nios/" title="Animes de Niños">Niños</a></li>
                  <li><a href="/genero/parodia/" title="Animes de Parodia">Parodia</a></li>
                  <li><a href="/genero/policial/" title="Animes de Policial">Policial</a></li>
                  <li><a href="/genero/psicologico/" title="Animes de Psicologico">Psicologico</a></li>
                  <li><a href="/genero/romance/" title="Animes de Romance">Romance</a></li>
                  <li><a href="/genero/samurai/" title="Animes de Samurai">Samurai</a></li>
                  <li><a href="/genero/sci-fi/" title="Animes de Sci-fi">Sci-fi</a></li>
                  <li><a href="/genero/seinen/" title="Animes de Seinen">Seinen</a></li>
                  <li><a href="/genero/shoujo/" title="Animes de Shoujo">Shoujo</a></li>
                  <li><a href="/genero/shoujo-ai/" title="Animes de Shoujo ai">Shoujo ai</a></li>
                  <li><a href="/genero/shounen/" title="Animes de Shounen">Shounen</a></li>
                  <li><a href="/genero/shounen-ai/" title="Animes de Shounen ai">Shounen ai</a></li>
                  <li><a href="/genero/sobrenatural/" title="Animes de Sobrenatural">Sobrenatural</a></li>
                  <li><a href="/genero/space/" title="Animes de Space">Space</a></li>
                  <li><a href="/genero/super-poderes/" title="Animes de Super poderes">Super poderes</a></li>
                  <li><a href="/genero/terror/" title="Animes de Terror">Terror</a></li>
                  <li><a href="/genero/thriller/" title="Animes de Thriller">Thriller</a></li>
                  <li><a href="/genero/vampiros/" title="Animes de Vampiros">Vampiros</a></li>
                  <li><a href="/genero/yaoi/" title="Animes de Yaoi">Yaoi</a></li>
                  <li><a href="/genero/yuri/" title="Animes de Yuri">Yuri</a></li>
                </ul>
              </div>
            </nav>


          </div>


        </div>





      </div>






    </div>

  </header>

  <section class="solopc" style="display: none;">

    <div class="menupc">
      <div class="row">
        <div class="letras-box addmenu">
          <ul>
            <li><a class="letra-link" href="/letra/A/" rel="nofollow">A</a></li>
            <li><a class="letra-link" href="/letra/B/" rel="nofollow">B</a></li>
            <li><a class="letra-link" href="/letra/C/" rel="nofollow">C</a></li>
            <li><a class="letra-link" href="/letra/D/" rel="nofollow">D</a></li>
            <li><a class="letra-link" href="/letra/E/" rel="nofollow">E</a></li>
            <li><a class="letra-link" href="/letra/F/" rel="nofollow">F</a></li>
            <li><a class="letra-link" href="/letra/G/" rel="nofollow">G</a></li>
            <li><a class="letra-link" href="/letra/H/" rel="nofollow">H</a></li>
            <li><a class="letra-link" href="/letra/I/" rel="nofollow">I</a></li>
            <li><a class="letra-link" href="/letra/J/" rel="nofollow">J</a></li>
            <li><a class="letra-link" href="/letra/K/" rel="nofollow">K</a></li>
            <li><a class="letra-link" href="/letra/L/" rel="nofollow">L</a></li>
            <li><a class="letra-link" href="/letra/M/" rel="nofollow">M</a></li>
            <li><a class="letra-link" href="/letra/N/" rel="nofollow">N</a></li>
            <li><a class="letra-link" href="/letra/O/" rel="nofollow">O</a></li>
            <li><a class="letra-link" href="/letra/P/" rel="nofollow">P</a></li>
            <li><a class="letra-link" href="/letra/Q/" rel="nofollow">Q</a></li>
            <li><a class="letra-link" href="/letra/R/" rel="nofollow">R</a></li>
            <li><a class="letra-link" href="/letra/S/" rel="nofollow">S</a></li>
            <li><a class="letra-link" href="/letra/T/" rel="nofollow">T</a></li>
            <li><a class="letra-link" href="/letra/U/" rel="nofollow">U</a></li>
            <li><a class="letra-link" href="/letra/V/" rel="nofollow">V</a></li>
            <li><a class="letra-link" href="/letra/W/" rel="nofollow">W</a></li>
            <li><a class="letra-link" href="/letra/X/" rel="nofollow">X</a></li>
            <li><a class="letra-link" href="/letra/Y/" rel="nofollow">Y</a></li>
            <li><a class="letra-link" href="/letra/Z/" rel="nofollow">Z</a></li>
            <li><a class="letra-link" href="/letra/0-9/" rel="nofollow">0-9</a></li>
            <li class="box-link tp"><a href="#tipoint" rel="nofollow">Por Tipo ↓</a></li>
            <li class="box-link lt"><a href="#letrasint" rel="nofollow">Por Genero ↓</a></li>
          </ul>
        </div>
      </div>




      <div class="type-list addmenu">
        <h3>Animes por Tipo:</h3>
        <ul>
          <li><a href="/tipo/ova/" title="Ovas de anime">Ovas</a></li>
          <li><a href="/tipo/pelicula/" title="Peliculas de anime">Peliculas</a></li>

        </ul>
      </div>

      <div class="genre-list addmenu">

        <h3>Animes por Idioma:</h3>
        <ul>
          <li><a href="/genero/latino/">Español latino</a></li>
        </ul><br><br><br>


        <h3>Animes por Genero:</h3>
        <ul>
          <li><a href="/genero/accion/" title="Animes de Accion">Accion</a></li>
          <li><a href="/genero/artes-marciales/" title="Animes de Artes Marciales">Artes Marciales</a></li>
          <li><a href="/genero/autos/" title="Animes de Autos">Autos</a></li>
          <li><a href="/genero/aventura/" title="Animes de Aventura">Aventura</a></li>
          <li><a href="/genero/colegial/" title="Animes de Colegial">Colegial</a></li>
          <li><a href="/genero/comedia/" title="Animes de Comedia">Comedia</a></li>
          <li><a href="/genero/cosas-de-la-vida/" title="Animes de Cosas de la vida">Cosas de la vida</a></li>
          <li><a href="/genero/dementia/" title="Animes de Dementia">Dementia</a></li>
          <li><a href="/genero/demonios/" title="Animes de Demonios">Demonios</a></li>
          <li><a href="/genero/deportes/" title="Animes de Deportes">Deportes</a></li>
          <li><a href="/genero/drama/" title="Animes de Drama">Drama</a></li>
          <li><a href="/genero/ecchi/" title="Animes de Ecchi">Ecchi</a></li>
          <li><a href="/genero/fantasa/" title="Animes de Fantasia">Fantasia</a></li>
          <li><a href="/genero/harem/" title="Animes de Harem">Harem</a></li>
          <li><a href="/genero/historico/" title="Animes de Historico">Historico</a></li>
          <li><a href="/genero/josei/" title="Animes de Josei">Josei</a></li>
          <li><a href="/genero/juegos/" title="Animes de Juegos">Juegos</a></li>
          <li><a href="/genero/magia/" title="Animes de Magia">Magia</a></li>
          <li><a href="/genero/mecha/" title="Animes de Mecha">Mecha</a></li>
          <li><a href="/genero/militar/" title="Animes de Militar">Militar</a></li>
          <li><a href="/genero/misterio/" title="Animes de Misterio">Misterio</a></li>
          <li><a href="/genero/musica/" title="Animes de Musica">Musica</a></li>
          <li><a href="/genero/nios/" title="Animes de Niños">Niños</a></li>
          <li><a href="/genero/parodia/" title="Animes de Parodia">Parodia</a></li>
          <li><a href="/genero/policial/" title="Animes de Policial">Policial</a></li>
          <li><a href="/genero/psicologico/" title="Animes de Psicologico">Psicologico</a></li>
          <li><a href="/genero/romance/" title="Animes de Romance">Romance</a></li>
          <li><a href="/genero/samurai/" title="Animes de Samurai">Samurai</a></li>
          <li><a href="/genero/sci-fi/" title="Animes de Sci-fi">Sci-fi</a></li>
          <li><a href="/genero/seinen/" title="Animes de Seinen">Seinen</a></li>
          <li><a href="/genero/shoujo/" title="Animes de Shoujo">Shoujo</a></li>
          <li><a href="/genero/shoujo-ai/" title="Animes de Shoujo ai">Shoujo ai</a></li>
          <li><a href="/genero/shounen/" title="Animes de Shounen">Shounen</a></li>
          <li><a href="/genero/shounen-ai/" title="Animes de Shounen ai">Shounen ai</a></li>
          <li><a href="/genero/sobrenatural/" title="Animes de Sobrenatural">Sobrenatural</a></li>
          <li><a href="/genero/space/" title="Animes de Space">Space</a></li>
          <li><a href="/genero/super-poderes/" title="Animes de Super poderes">Super poderes</a></li>
          <li><a href="/genero/terror/" title="Animes de Terror">Terror</a></li>
          <li><a href="/genero/thriller/" title="Animes de Thriller">Thriller</a></li>
          <li><a href="/genero/vampiros/" title="Animes de Vampiros">Vampiros</a></li>
          <li><a href="/genero/yaoi/" title="Animes de Yaoi">Yaoi</a></li>
          <li><a href="/genero/yuri/" title="Animes de Yuri">Yuri</a></li>
        </ul>
      </div>



    </div>

  </section>








  <section class="contenido spad">
    <div class="container">
      <div class="anime__details__content">
        <div class="row">
          <div class="col-lg-3">
            <div class="anime__details__pic set-bg"
              data-setbg="https://cdn.jkdesu.com/assets/images/animes/image/no-game-no-life.jpg"
              style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/image/no-game-no-life.jpg&quot;);">
              <!-- <div class="comment"><i class="fa fa-comments"></i> 11</div>
                            <div class="view"><i class="fa fa-eye"></i> 9141</div> -->
            </div>

            <div class="anime__details__btn pc" style="display: none;">


              <a href="#" rel="like" style="" class="votar"><span class="vot">1533</span>
                <p> Me gusta <i class="fas fa-thumbs-up"></i></p>
              </a>

            </div>

            <div class="stats pc" style="display: none;">
              <div class="it"><span class="count" data-stat="tag1"><i class="fa fa-eye" aria-hidden="true"></i>
                  <b></b></span> Mirando</div>
              <div class="it"><span class="count" data-stat="tag2"><i class="fa fa-check-circle" aria-hidden="true"></i>
                  <b></b></span> Visto</div>
              <div class="it"><span class="count" data-stat="tag3"><i class="fa fa-pause-circle" aria-hidden="true"></i>
                  <b></b></span> Por ver</div>
            </div>


          </div>
          <div class="col-lg-9">
            <div class="anime__details__text">
              <div class="anime__details__title">

                <div id="guardar-anime" data-anime="1133" class="btn btn-light btn-sm ml-2">
                  <i class="fa fa-star" aria-hidden="true"></i>
                  <div class="dropmenu"></div>
                </div>
                <h3>No Game No Life</h3>
                <span>No Game, No Life</span>
              </div>
              <!--  <div class="anime__details__rating">
                                <div class="rating">
                                    <a href="#"><i class="fa fa-star"></i></a>
                                    <a href="#"><i class="fa fa-star"></i></a>
                                    <a href="#"><i class="fa fa-star"></i></a>
                                    <a href="#"><i class="fa fa-star"></i></a>
                                    <a href="#"><i class="fa fa-star-half-o"></i></a>
                                </div>
                                <span>1.029 Votos</span>
                            </div> -->

              <nav class="custom-tabs" style="display: none;">
                <ul>
                  <li class="active" data-tab="sinopsis">Sinopsis</li>
                  <li data-tab="aninfo">Información</li>
                </ul>
              </nav>

              <p class="tab sinopsis">No Game, No Life se centra en Sora y Shiro, unos hermanos cuya reputación de NEETs
                hikikomoris y gamers han hecho que comiencen a extenderse leyendas urbanas suyas por todo internet.

                Estos dos gamers consideran que el mundo real no es más que “un juego de mierda”. Un día, un chico
                llamado “Dios” les invoca en un mundo alternativo. En este mundo, Dios ha prohibido la guerra y
                declarado que todo se decide en base a los juegos, incluso las fronteras de los países. La humanidad
                vive ahora en una ciudad por culpa del resto de razas.

                ¿Se convertirán Sora y Shiro, hermano y hermana, en los salvadores de este mundo alternativo?</p>



              <div class="anime__details__widget">
                <div class="row">
                  <div class="col-lg-6 col-md-6 tab aninfo">
                    <ul>
                      <li rel="tipo"><span>Tipo:</span> Serie</li>
                      <li><span>Genero:</span> <a href="https://jkanime.net/genero/sobrenatural/">Sobrenatural</a>, <a
                          href="https://jkanime.net/genero/fantasa/">Fantasìa</a>, <a
                          href="https://jkanime.net/genero/ecchi/">Ecchi</a>, <a
                          href="https://jkanime.net/genero/comedia/">Comedia</a>, <a
                          href="https://jkanime.net/genero/aventura/">Aventura</a>, <a
                          href="https://jkanime.net/genero/isekai/">Isekai</a> </li>


                      <li><span>Studios:</span> <a href="https://jkanime.net/studio/11/">Madhouse</a> </li>


                      <li><span>Idiomas:</span> Japonés</li>
                      <li><span>Episodios:</span> 12</li>
                      <li><span>Duracion:</span> 24 min.</li>
                      <li><span>Emitido:</span> Abr 9 de 2014 </li>
                      <li><span>Estado:</span> <span class="enemision finished">Concluido</span></li>


                    </ul>
                  </div>
                  <div class="col-lg-6 col-md-6 tab aninfo">

                    <div id="togglesee" class="rounded bg-dark mt-2 altert alternativost">
                      <h5 class="font-weight-bold">Titulos Alternativos <div id="chevron-arrow"></div>
                      </h5>
                      <div id="c" class="related_div" style="display: none;">
                        <b class="t">Japones</b>
                        ノーゲーム・ノーライフ
                        <b class="t">Sinonimos</b>
                        NGNL
                        <b class="t">Ingles</b>
                        No Game, No Life
                      </div>

                    </div>
                    <h5 id="aditional" class="font-weight-bold">Adicional</h5>
                    <a href="https://jkanime.net/no-game-no-life-specials/">No Game No Life Specials (Especial) </a>
                    <br>
                    <h5 id="aditional" class="font-weight-bold">Precuela</h5>
                    <a href="https://jkanime.net/no-game-no-life-zero/">No Game No Life: Zero (Pelicula) </a> <br>


                  </div>
                  <div class="col-lg-6">

                    <div class="anime__details__btn mov" style="display: none;">


                      <a href="#" rel="like" style="" class="votar"><span class="vot">1533</span>
                        <p> Me gusta <i class="fas fa-thumbs-up"></i></p>
                      </a>




                    </div>


                    <div class="stats mov" style="display: none;">
                      <div class="it"><span class="count" data-stat="tag1"><i class="fa fa-eye" aria-hidden="true"></i>
                          <b></b></span> Mirando</div>
                      <div class="it"><span class="count" data-stat="tag2"><i class="fa fa-check-circle"
                            aria-hidden="true"></i> <b></b></span> Visto</div>
                      <div class="it"><span class="count" data-stat="tag3"><i class="fa fa-pause-circle"
                            aria-hidden="true"></i> <b></b></span> Por ver</div>
                    </div>



                  </div>

                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="row">

        <div class="col-lg-12 mb-3 anisabi_player" data-id="19815">
          <div class="sabiplayer paused">
            <div class="progress-bar">
              <div class="runner"></div>
            </div>
            <div class="album-art"><a target="_blank" href="https://anisabi.com/track/fb9d433088a21464e7d634c4e190b31a">
                <div class="cover"
                  style="background: url(https://cdn.anisabi.com/assets/anime/no-game-no-life/no-game-no-life-1678059552.jpg?t=4.0.11);">
                </div>
              </a></div>
            <div class="description">
              <div class="title"><a target="_blank" href="https://anisabi.com/track/fb9d433088a21464e7d634c4e190b31a">No
                  Game No Life - Ending 01 Oracion</a></div>
              <div class="sub-title"><a target="_blank" href="https://anisabi.com/ost/no-game-no-life"
                  class="sabilink">Más tracks en anisabi</a></div>
            </div>
            <div class="visualizer">
              <div></div>
              <div></div>
              <div></div>
            </div>
            <div class="play-button">
              <div class="lp-background"></div><i class="fa fa-play"></i><i class="fa fa-pause"></i>
            </div>
            <div class="time-indicator"><i class="mdi mdi-clock"></i><span class="time">04:34</span></div>
          </div>
        </div>

        <div class="col-lg-12">

          <nav class="anime-tabs mb-4">
            <ul>
              <li class="active" data-tab="capitulos">Capitulos</li>
              <li data-callback="personajes" data-tab="personajes">Personajes</li>
              <li data-callback="social" data-tab="usersocial">Social</li>
            </ul>
          </nav>

        </div>
      </div>
      <div class="row">
        <div class="col-lg-12 capitulos animetab">
          <div class="row">






            <div id="proxep" style="display: none;" class="ul"><i class="fa fa-play" aria-hidden="true"></i>
              <p><b>Último episodio</b>: <a id="uep"><i class="new">Nuevo</i></a></p>
            </div>




            <div class="col-7  pt-3">
              <div class="section-title ">
                <h4>Capitulos</h4>
              </div>
            </div>

            <div class="col-5 capform pt-3">
              <div id="inverso" class="col-lg-5 col-md-6 btn btn-primary"> <i class="arrow_down"></i> Invertir</div>
              <input class="col-lg-7 col-md-6" id="qcap" type="number" placeholder="Buscar capítulo, sólo número...">
            </div>



            <div class="row col-12" id="episodes-content">
              <div class="epcontent col-lg-3 col-md-6 col-sm-6 col-6">
                <div class="anime__item" href="https://jkanime.net/no-game-no-life/1/"><a
                    href="https://jkanime.net/no-game-no-life/1/">
                    <div class="anime__item__pic homemini set-bg"
                      data-setbg="https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_e5e6f613e0f47002b64008d6c502fe54.jpg"
                      style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_e5e6f613e0f47002b64008d6c502fe54.jpg&quot;)">
                      <div class="anime__item__text">
                        <ul>
                          <li><span>Capitulo 1 <i class="fa fa-check"></i></span></li>
                        </ul>
                      </div>
                    </div>
                  </a></div>
              </div>
              <div class="epcontent col-lg-3 col-md-6 col-sm-6 col-6">
                <div class="anime__item" href="https://jkanime.net/no-game-no-life/2/"><a
                    href="https://jkanime.net/no-game-no-life/2/">
                    <div class="anime__item__pic homemini set-bg"
                      data-setbg="https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_daf719b7ee191a3d78bd90603c7a1860.jpg"
                      style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_daf719b7ee191a3d78bd90603c7a1860.jpg&quot;)">
                      <div class="anime__item__text">
                        <ul>
                          <li><span>Capitulo 2 <i class="fa fa-check"></i></span></li>
                        </ul>
                      </div>
                    </div>
                  </a></div>
              </div>
              <div class="epcontent col-lg-3 col-md-6 col-sm-6 col-6">
                <div class="anime__item" href="https://jkanime.net/no-game-no-life/3/"><a
                    href="https://jkanime.net/no-game-no-life/3/">
                    <div class="anime__item__pic homemini set-bg"
                      data-setbg="https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_7d5660b9274696a075ea0ad6a4018e02.jpg"
                      style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_7d5660b9274696a075ea0ad6a4018e02.jpg&quot;)">
                      <div class="anime__item__text">
                        <ul>
                          <li><span>Capitulo 3 <i class="fa fa-check"></i></span></li>
                        </ul>
                      </div>
                    </div>
                  </a></div>
              </div>
              <div class="epcontent col-lg-3 col-md-6 col-sm-6 col-6">
                <div class="anime__item" href="https://jkanime.net/no-game-no-life/4/"><a
                    href="https://jkanime.net/no-game-no-life/4/">
                    <div class="anime__item__pic homemini set-bg"
                      data-setbg="https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_072e81e77edf6f7370bc290b32c9bb81.jpg"
                      style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_072e81e77edf6f7370bc290b32c9bb81.jpg&quot;)">
                      <div class="anime__item__text">
                        <ul>
                          <li><span>Capitulo 4 <i class="fa fa-check"></i></span></li>
                        </ul>
                      </div>
                    </div>
                  </a></div>
              </div>
              <div class="epcontent col-lg-3 col-md-6 col-sm-6 col-6">
                <div class="anime__item" href="https://jkanime.net/no-game-no-life/5/"><a
                    href="https://jkanime.net/no-game-no-life/5/">
                    <div class="anime__item__pic homemini set-bg"
                      data-setbg="https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_8eef9fa83d74d0c0b81a6be7842ce67d.jpg"
                      style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_8eef9fa83d74d0c0b81a6be7842ce67d.jpg&quot;)">
                      <div class="anime__item__text">
                        <ul>
                          <li><span>Capitulo 5 <i class="fa fa-check"></i></span></li>
                        </ul>
                      </div>
                    </div>
                  </a></div>
              </div>
              <div class="epcontent col-lg-3 col-md-6 col-sm-6 col-6">
                <div class="anime__item" href="https://jkanime.net/no-game-no-life/6/"><a
                    href="https://jkanime.net/no-game-no-life/6/">
                    <div class="anime__item__pic homemini set-bg"
                      data-setbg="https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_270a009cf37d7723c38fff4a2ef7eb57.jpg"
                      style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_270a009cf37d7723c38fff4a2ef7eb57.jpg&quot;)">
                      <div class="anime__item__text">
                        <ul>
                          <li><span>Capitulo 6 <i class="fa fa-check"></i></span></li>
                        </ul>
                      </div>
                    </div>
                  </a></div>
              </div>
              <div class="epcontent col-lg-3 col-md-6 col-sm-6 col-6">
                <div class="anime__item" href="https://jkanime.net/no-game-no-life/7/"><a
                    href="https://jkanime.net/no-game-no-life/7/">
                    <div class="anime__item__pic homemini set-bg"
                      data-setbg="https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_f5fe1fa07eae84a6cc2c36aefff49592.jpg"
                      style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_f5fe1fa07eae84a6cc2c36aefff49592.jpg&quot;)">
                      <div class="anime__item__text">
                        <ul>
                          <li><span>Capitulo 7 <i class="fa fa-check"></i></span></li>
                        </ul>
                      </div>
                    </div>
                  </a></div>
              </div>
              <div class="epcontent col-lg-3 col-md-6 col-sm-6 col-6">
                <div class="anime__item" href="https://jkanime.net/no-game-no-life/8/"><a
                    href="https://jkanime.net/no-game-no-life/8/">
                    <div class="anime__item__pic homemini set-bg"
                      data-setbg="https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_eede2d28a4d05ac58f8b79102668ad34.jpg"
                      style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_eede2d28a4d05ac58f8b79102668ad34.jpg&quot;)">
                      <div class="anime__item__text">
                        <ul>
                          <li><span>Capitulo 8 <i class="fa fa-check"></i></span></li>
                        </ul>
                      </div>
                    </div>
                  </a></div>
              </div>
              <div class="epcontent col-lg-3 col-md-6 col-sm-6 col-6">
                <div class="anime__item" href="https://jkanime.net/no-game-no-life/9/"><a
                    href="https://jkanime.net/no-game-no-life/9/">
                    <div class="anime__item__pic homemini set-bg"
                      data-setbg="https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_0aff028f25c8fe99cfb354019e09ffb2.jpg"
                      style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_0aff028f25c8fe99cfb354019e09ffb2.jpg&quot;)">
                      <div class="anime__item__text">
                        <ul>
                          <li><span>Capitulo 9 <i class="fa fa-check"></i></span></li>
                        </ul>
                      </div>
                    </div>
                  </a></div>
              </div>
              <div class="epcontent col-lg-3 col-md-6 col-sm-6 col-6">
                <div class="anime__item" href="https://jkanime.net/no-game-no-life/10/"><a
                    href="https://jkanime.net/no-game-no-life/10/">
                    <div class="anime__item__pic homemini set-bg"
                      data-setbg="https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_03f396a359ef22a21e37b7b45f4d9979.jpg"
                      style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_03f396a359ef22a21e37b7b45f4d9979.jpg&quot;)">
                      <div class="anime__item__text">
                        <ul>
                          <li><span>Capitulo 10 <i class="fa fa-check"></i></span></li>
                        </ul>
                      </div>
                    </div>
                  </a></div>
              </div>
              <div class="epcontent col-lg-3 col-md-6 col-sm-6 col-6">
                <div class="anime__item" href="https://jkanime.net/no-game-no-life/11/"><a
                    href="https://jkanime.net/no-game-no-life/11/">
                    <div class="anime__item__pic homemini set-bg"
                      data-setbg="https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_14bc3485c0d01cc69c3d9b14c9a7926c.jpg"
                      style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_14bc3485c0d01cc69c3d9b14c9a7926c.jpg&quot;)">
                      <div class="anime__item__text">
                        <ul>
                          <li><span>Capitulo 11 <i class="fa fa-check"></i></span></li>
                        </ul>
                      </div>
                    </div>
                  </a></div>
              </div>
              <div class="epcontent col-lg-3 col-md-6 col-sm-6 col-6">
                <div class="anime__item" href="https://jkanime.net/no-game-no-life/12/"><a
                    href="https://jkanime.net/no-game-no-life/12/">
                    <div class="anime__item__pic homemini set-bg"
                      data-setbg="https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_e04bc8909bb7969ae5488620e00f8c57.jpg"
                      style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/video/image_thumb/jkvideo_e04bc8909bb7969ae5488620e00f8c57.jpg&quot;)">
                      <div class="anime__item__text">
                        <ul>
                          <li><span>Capitulo 12 <i class="fa fa-check"></i></span></li>
                        </ul>
                      </div>
                    </div>
                  </a></div>
              </div>
            </div>




            <div class="col-12 pb-5">
              <div class="anime__pagination">


                <a class="numbers" href="#pag1" rel="nofollow">1 - 12</a>


              </div>

            </div>
          </div>
        </div>

        <div style="display: none;" class="col-lg-12 personajes animetab">
          <div id="qloader" class="lds-ellipsis">
            <div></div>
            <div></div>
            <div></div>
            <div></div>
          </div>
        </div>

        <div style="display: none;" class="col-lg-12 usersocial animetab">
          <div id="qloader" class="lds-ellipsis">
            <div></div>
            <div></div>
            <div></div>
            <div></div>
          </div>
        </div>


      </div>
      <section class="padd" id="relacionados">
        <div class="section-title init">
          <h4>Te recomendamos</h4>
        </div>

        <div class="row">

          <div class="col-lg-2 col-md-5 col-sm-5 col-5">
            <div class="anime__item"><a href="https://jkanime.net/overlord/" title="Overlord">
                <div class="anime__item__pic homemini set-bg"
                  data-setbg="https://cdn.jkdesu.com/assets/images/animes/image/overlord.jpg"
                  style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/image/overlord.jpg&quot;);">
                  <div class="anime__item__text">
                    <ul>
                      <li class="peli"> Anime
                      </li>
                    </ul>
                  </div>
                </div>
              </a>
              <div class="anime__item__text tituloblanco">
                <h5><a href="https://jkanime.net/overlord/">Overlord</a></h5>
              </div>
            </div>
          </div>


          <div class="col-lg-2 col-md-5 col-sm-5 col-5">
            <div class="anime__item"><a href="https://jkanime.net/kakegurui/" title="Kakegurui">
                <div class="anime__item__pic homemini set-bg"
                  data-setbg="https://cdn.jkdesu.com/assets/images/animes/image/kakegurui.jpg"
                  style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/image/kakegurui.jpg&quot;);">
                  <div class="anime__item__text">
                    <ul>
                      <li class="peli"> Anime
                      </li>
                    </ul>
                  </div>
                </div>
              </a>
              <div class="anime__item__text tituloblanco">
                <h5><a href="https://jkanime.net/kakegurui/">Kakegurui</a></h5>
              </div>
            </div>
          </div>


          <div class="col-lg-2 col-md-5 col-sm-5 col-5">
            <div class="anime__item"><a href="https://jkanime.net/kono-subarashii-sekai-ni-shukufuku-wo/"
                title="Kono Subarashii Sekai ni Shukufuku wo!">
                <div class="anime__item__pic homemini set-bg"
                  data-setbg="https://cdn.jkdesu.com/assets/images/animes/image/kono-subarashii-sekai-ni-shukufuku-wo.jpg"
                  style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/image/kono-subarashii-sekai-ni-shukufuku-wo.jpg&quot;);">
                  <div class="anime__item__text">
                    <ul>
                      <li class="peli"> Anime
                      </li>
                    </ul>
                  </div>
                </div>
              </a>
              <div class="anime__item__text tituloblanco">
                <h5><a href="https://jkanime.net/kono-subarashii-sekai-ni-shukufuku-wo/">Kono Subarashii Sekai ni
                    Shukufuku wo!</a></h5>
              </div>
            </div>
          </div>


          <div class="col-lg-2 col-md-5 col-sm-5 col-5">
            <div class="anime__item"><a href="https://jkanime.net/death-parade/" title="Death Parade">
                <div class="anime__item__pic homemini set-bg"
                  data-setbg="https://cdn.jkdesu.com/assets/images/animes/image/death-parade.jpg"
                  style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/image/death-parade.jpg&quot;);">
                  <div class="anime__item__text">
                    <ul>
                      <li class="peli"> Anime
                      </li>
                    </ul>
                  </div>
                </div>
              </a>
              <div class="anime__item__text tituloblanco">
                <h5><a href="https://jkanime.net/death-parade/">Death Parade</a></h5>
              </div>
            </div>
          </div>


          <div class="col-lg-2 col-md-5 col-sm-5 col-5">
            <div class="anime__item"><a href="https://jkanime.net/shokugeki-no-souma/"
                title=" Food Wars: Shokugeki no Soma">
                <div class="anime__item__pic homemini set-bg"
                  data-setbg="https://cdn.jkdesu.com/assets/images/animes/image/shokugeki-no-souma.jpg"
                  style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/image/shokugeki-no-souma.jpg&quot;);">
                  <div class="anime__item__text">
                    <ul>
                      <li class="peli"> Anime
                      </li>
                    </ul>
                  </div>
                </div>
              </a>
              <div class="anime__item__text tituloblanco">
                <h5><a href="https://jkanime.net/shokugeki-no-souma/"> Food Wars: Shokugeki no Soma</a></h5>
              </div>
            </div>
          </div>


          <div class="col-lg-2 col-md-5 col-sm-5 col-5">
            <div class="anime__item"><a href="https://jkanime.net/one-outs/" title="One Outs">
                <div class="anime__item__pic homemini set-bg"
                  data-setbg="https://cdn.jkdesu.com/assets/images/animes/image/one-outs.jpg"
                  style="background-image: url(&quot;https://cdn.jkdesu.com/assets/images/animes/image/one-outs.jpg&quot;);">
                  <div class="anime__item__text">
                    <ul>
                      <li class="peli"> Anime
                      </li>
                    </ul>
                  </div>
                </div>
              </a>
              <div class="anime__item__text tituloblanco">
                <h5><a href="https://jkanime.net/one-outs/">One Outs</a></h5>
              </div>
            </div>
          </div>


        </div>

      </section>
      <br><br>

      <div class="accordian">
        <h4><i class="double-com-icon"></i>Comenta el anime</h4>
        <li class="dimension">
          <div id="disqus_thread"><iframe id="dsq-app8259" name="dsq-app8259" allowtransparency="true" frameborder="0"
              scrolling="no" tabindex="0" title="Disqus" width="100%"
              src="https://disqus.com/embed/comments/?base=default&amp;f=jkanimenet&amp;t_u=https%3A%2F%2Fjkanime.net%2Fno-game-no-life%2F&amp;t_d=No%20Game%20No%20Life%20-%20anime%20No%20Game%20No%20Life%20Online%20-%20ver%20No%20Game%20No%20Life&amp;t_t=No%20Game%20No%20Life%20-%20anime%20No%20Game%20No%20Life%20Online%20-%20ver%20No%20Game%20No%20Life&amp;s_o=default#version=4699de2a86f3c790aa59c8d1312129e4"
              style="width: 1px !important; min-width: 100% !important; border: none !important; overflow: hidden !important; height: 6661px !important;"
              horizontalscrolling="no" verticalscrolling="no"></iframe></div>
          <script>
            var pageURL = "https://jkanime.net/no-game-no-life/";  // Replace PAGE_URL with your page's canonical URL variable
            var disqus_config = function () {
              this.page.url = pageURL;
            };

            (function () { // DON'T EDIT BELOW THIS LINE
              var d = document, s = d.createElement('script');
              s.src = 'https://jkanimenet.disqus.com/embed.js';
              s.setAttribute('data-timestamp', +new Date());
              (d.head || d.body).appendChild(s);
            })();
          </script>
          <div style="display: none;" id="LuEpUAjlamen">
            <center><img src="https://jkanime.net/gRjxkfI.png"></center>
          </div>
        </li>
      </div>


    </div>


  </section>



  <style>
    /* Dropdown menu */

    .dropmenu ul li {
      background: none;
      border-radius: 0;
      width: 100%;
      padding: 0px 0px;
      left: 0;
      margin: 0;
      top: 0;
    }

    .dropmenu ul {
      width: 110px;
      position: absolute;
      margin: 0;
      padding: 0;
      border-radius: 5px;
      overflow: hidden;
      box-shadow: 0px 0px 3px rgb(0 0 0 / 41%);
    }

    .dropmenu {
      position: absolute;
      top: 45px;
      right: 116px;
      z-index: 5;
    }

    .dropmenu li a i {
      color: #36a9e2;
    }

    .dropmenu li a {
      padding: 8px 4px 8px 12px;
      display: block;
      font-size: 13px;
      color: #000;
      background: #ffffff;
      text-align: left;
    }

    .dropmenu li a:hover {
      background: #f3f3f3;
      color: #36a9e2;
    }

    div#guardar-anime {
      position: relative;
    }

    .dropmenu li a.activo {
      color: #ff9801;
      background: #f7f7f7;
    }

    .dropmenu li a.activo i {
      color: #ff9801;
    }

    i.new {
      color: #fff;
      background: #ff9d00;
      padding: 3px 7px;
      font-size: 13px;
      font-style: normal;
      border-radius: 5px;
    }

    div#proxep.ul {
      background: #f7f7f7;
      color: #fff;
      border-radius: 6px;
      border-left: 56px solid #ff9d00;
      position: relative;
    }

    div#proxep i.fa.fa-play {
      position: absolute;
      left: -44px;
      top: 8px;
      font-size: 29px;
    }

    .altert b.t {
      display: block;
    }

    div#proxep {
      display: block;
      width: 100%;
    }

    a.votar {
      display: block;
      background: #ff9d00;
      padding: 0px 0px;
      margin-top: 9px;
      color: #fff;
      border-radius: 5px;
      position: relative;
      width: 100%;
      float: left;
      font-size: 12px;
    }

    .votar span,
    .votar p {
      padding: 0;
      display: inline-block;
      margin: 0;
    }


    .votar span {
      line-height: 30px;
      font-size: 13px;
      font-weight: bold;
      width: 50px;
      text-align: center;
      background: rgba(0, 0, 0, 0.33);
      height: 100%;
      padding: 9px 9px;
      border-radius: 5px 0px 0px 5px;
      position: absolute;
      top: 0px;
    }

    .votar p {
      color: #fff;

      padding: 9px 20px;
      text-align: center;
      width: 100%;
      padding-left: 50px;
    }

    @-webkit-keyframes pulso {

      0%,
      100%,
      20%,
      40%,
      60%,
      80% {
        -webkit-animation-timing-function: cubic-bezier(.215, .61, .355, 1);
        animation-timing-function: cubic-bezier(.215, .61, .355, 1)
      }

      0% {
        opacity: 0;
        -webkit-transform: scale3d(.3, .3, .3);
        transform: scale3d(.3, .3, .3)
      }

      20% {
        -webkit-transform: scale3d(1.1, 1.1, 1.1);
        transform: scale3d(1.1, 1.1, 1.1)
      }

      40% {
        -webkit-transform: scale3d(.9, .9, .9);
        transform: scale3d(.9, .9, .9)
      }

      60% {
        opacity: 1;
        -webkit-transform: scale3d(1.03, 1.03, 1.03);
        transform: scale3d(1.03, 1.03, 1.03)
      }

      80% {
        -webkit-transform: scale3d(.97, .97, .97);
        transform: scale3d(.97, .97, .97)
      }

      100% {
        opacity: 1;
        -webkit-transform: scale3d(1, 1, 1);
        transform: scale3d(1, 1, 1)
      }
    }

    @keyframes pulso {

      0%,
      100%,
      20%,
      40%,
      60%,
      80% {
        -webkit-animation-timing-function: cubic-bezier(.215, .61, .355, 1);
        animation-timing-function: cubic-bezier(.215, .61, .355, 1)
      }

      0% {
        opacity: 0;
        -webkit-transform: scale3d(.3, .3, .3);
        transform: scale3d(.3, .3, .3)
      }

      20% {
        -webkit-transform: scale3d(1.1, 1.1, 1.1);
        transform: scale3d(1.1, 1.1, 1.1)
      }

      40% {
        -webkit-transform: scale3d(.9, .9, .9);
        transform: scale3d(.9, .9, .9)
      }

      60% {
        opacity: 1;
        -webkit-transform: scale3d(1.03, 1.03, 1.03);
        transform: scale3d(1.03, 1.03, 1.03)
      }

      80% {
        -webkit-transform: scale3d(.97, .97, .97);
        transform: scale3d(.97, .97, .97)
      }

      100% {
        opacity: 1;
        -webkit-transform: scale3d(1, 1, 1);
        transform: scale3d(1, 1, 1)
      }
    }

    a.votar.up {
      background: #4caf50;
      -webkit-animation: pulso 500ms cubic-bezier(.215, .61, .355, 1) 0ms backwards;
      animation: pulso 500ms cubic-bezier(.215, .61, .355, 1) 0ms backwards
    }

    @media screen and (max-width:580px) {
      .cap-share-box {
        height: auto;
        padding: 5px 5px 12px 5px;
      }

      span.vote-text {
        width: 100%;
        float: none;
        display: block;
        margin: 0;
      }

      .soc-buttons {
        float: none;
        margin: auto;
        width: 190px;
      }
    }

    @media screen and (max-width:850px) {
      a.votar {
        float: right;
      }

    }

    /*Visto*/
    .visto span.vi {
      background: #dc343c;
      color: #fff;
      font-size: 12px;
      padding: 1px 5px;
      border-radius: 5px;
      position: absolute;
      right: 4px;
      bottom: 5px;
    }

    .anime__item .fa-check {
      color: #ff9d00;
    }

    a:visited ul li {
      background: #2a2e2e !important;
      color: #ececec;
    }

    /*Stats*/
    .stats {
      background: #6c757d;
      color: #fff;
      margin-top: 7px;
      border-radius: 5px;
      display: inline-block;
      width: 100%;
    }

    .stats .count {
      display: block;
    }

    .stats .it {
      padding: 5px;
      text-align: center;
      display: inline-block;
      width: 33%;
    }

    .it .count b {
      margin-left: 2px;
    }
  </style>



  <script>
    var invertir = false; var vistos = false; var default_page;
    $(document).ready(function () {

      //Votado
      $.get('/ajax/votado/1133/', function (data) {
        if (data == "1") {
          $("a.votar").each(function () {
            $(this).html($(".votar").html().replace("Me", "Te"));
            $(this).addClass("up");
          });

        }
        $(".votar").show();
      });


      //Ultimo episodio
      if ($('.enemision.currently').length) {
        $('#proxep.ul').show();
        $.get('/ajax/last_episode/1133/', function (data) {
          $.each(JSON.parse(data), function (i, item) {
            $('#uep').attr('href', 'https://jkanime.net/no-game-no-life/' + item.number + '/');
            $('#uep').prepend(item.title);
          });
        });
      }

      var jkthumb = $(".anime__details__pic").attr("data-setbg");
      var cdnthumb = jkthumb.replace("/animes/image/", "/animes/video/image_thumb/").split("/").slice(0, -1).join("/") + "/";

      //$.get( $.path + 'ajax/pagination_episodes/1133/'+ pag + '/', function( data ) {
      //$.get( 'https://localhost:8888/jkanime/index.php/ajax/pagination_episodes/2170/' + 1 + '/?log=jk', function( data ) {
      $.get('/ajax/pagination_episodes/1133/' + 1 + '/', function (data) {
        // console.log(JSON.parse(data));
        $.each(JSON.parse(data), function (i, item) {
          if (i == 0) {
            $('a.watch-btn').attr('href', 'https://jkanime.net/no-game-no-life/' + item.number + '/');
          }
        });
      });


      function usr_pagination(callback) {

        if (leer_cookie('jkauth')) {
          console.log(vistos);
          if (vistos !== false) {
            callback(vistos);
          } else {

            anime_visto_numero(window.location.href.split('/')[3], function (i) {
              console.log(i);
              callback(i);
            }, function () {
              //Si hay error
              callback(0);
            });

          }
        } else {
          //Si no es usuario
          callback(0);
        }

      }

      function render_caps(data, vistos) {
        $.each(JSON.parse(data), function (i, item) {

          var cap_post = $('<div>').addClass('epcontent col-lg-3 col-md-6 col-sm-6 col-6');
          var cap_url = $('<a>').attr('href', 'https://jkanime.net/no-game-no-life/' + item.number + '/');
          var cap_content = $('<div>').addClass('anime__item').attr('href', 'https://jkanime.net/no-game-no-life/' + item.number + '/');
          if (item.image.length > 10) { item.image = cdnthumb + item.image; }
          //console.log(item.image);

          var cap_header = item.image.length > 5 ? $('<div>').addClass('anime__item__pic homemini set-bg').attr('data-setbg', '' + item.image + '').attr('style', 'background-image: url("' + item.image + '")') : $('<div>').addClass('anime__item__pic homemini set-bg').attr('data-setbg', 'https://cdn.jkdesu.com/assets/images/animes/image/no-game-no-life.jpg').attr('style', 'background-image: url("https://cdn.jkdesu.com/assets/images/animes/image/no-game-no-life.jpg")');

          if (item.number == vistos) { cap_header.addClass('visto'); }

          var cap_text = $('<div>').addClass('anime__item__text');

          var cap_numero = $('<ul>');
          cap_numero.html('<li><span>Capitulo ' + item.number + ' <i class="fa fa-check"></i></span></li>');

          if (item.number == vistos) { cap_numero.append('<span class="vi">Mirando <i class="fa fa-eye" aria-hidden="true"></i></span>'); }

          cap_url.append(cap_header);
          cap_content.append(cap_url);
          cap_header.append(cap_text);
          cap_text.append(cap_numero);
          cap_post.append(cap_content);


          $('#episodes-content').append(cap_post);

        });
      }


      $('input#qcap').on('input', function (e) {
        var num = $(this).val();
        if (num.length > 0) {
          $('#episodes-content').html('<div id="qloader" class="lds-ellipsis" style="display: none;"><div></div><div></div><div></div><div></div></div>');
          $.get('/ajax/search_episode/1133/' + num + '/', function (data) {
            console.log(data);
            if (data.length > 2) {
              $('#episodes-content').html('');
              render_caps(data, vistos);
            } else {
              $('#episodes-content').html('<h3 style="padding: 14px;">No se encontró.</h3>');
            }
          });
        } else {
          $('#episodes-content').html(default_page);
        }
      });

      function pagination(pag) {
        if (pag == '') pag = 1;


        usr_pagination(function (e) {
          vistos = e;

          $.get('/ajax/pagination_episodes/1133/' + pag + '/', function (data) {

            $('.epcontent').remove();


            render_caps(data, vistos);
            default_page = $('#episodes-content').html();
            $('.cap-post').hover(function () {
              $(this).find('.cap-play').slideToggle("fast");
            });
          });
        });

      }

      pagination($.url(true).fsegment(1).replace('pag', ''));

      $('.numbers').click(function (e) {
        pagination($(this).attr('href').replace('#pag', '')); return false;
      });


      $.fn.reverseChildren = function () {
        return this.each(function () {
          var $this = $(this);
          $this.children().each(function () {
            $this.prepend(this);
          });
        });
      };

      $("#inverso").click(function () {
        if (invertir) { invertir = false; } else { invertir = true; }
        $("#episodes-content").append($(".epcontent"));
        $('#episodes-content,.navigation').reverseChildren();
        $("#episodes-content").after($(".epcontent"));
        $("#episodes-content").empty();
        return false;
      });


      /*Votos*/
      $(".votar").click(function () {
        crear_cookie('stacks', 'true', 1);
        var toastItem = $(this);
        $.get('/ajax/votar_anime/1133/', function (data) {


          if (data.length > 10) {


            var myToast = $.toast({
              text: data,
              icon: 'error',
              hideAfter: 4000,
              bgColor: '#027bff',
              textColor: '#fff',
              loaderBg: '#ff9d00',
              position: {
                left: toastItem.offset().left - parseInt(toastItem.width() / 2.9),
                top: toastItem.offset().top - parseInt(toastItem.height() * 1.3),
              },
            });
            $('.jq-toast-wrap').css('position', 'absolute');


          } else {
            $(".votar").toggleClass("up");
            if ($(".votar").hasClass('up')) {
              $(".votar").html($(".votar").html().replace("Me", "Te"));
              $(".vot").html(parseInt($(".vot").html()) + 1);
            } else {
              $(".votar").html($(".votar").html().replace("Te", "Me"));
              $(".vot").html(parseInt($(".vot").html()) - 1);
            }
          }



        });
        return false;
      });



    });
  </script>
  <script type="text/javascript">
    var el = document.createElement('script');
    el.src = "https://jkanime.net/ads.js";
    document.getElementsByTagName('head')[0].appendChild(el);
    el.onerror = function (script) {
      var lue = document.querySelectorAll('#LuEpUAjlamen');
      for (var i = 0; i < lue.length; i++) {
        lue[i].style.display = 'block';
      }
    }
  </script>






  <!--   adnum 1 -->









  <script type="text/javascript" src="//woafoame.net/5/6078912" async="" data-cfasync="false"></script>



  <!-- Global site tag (gtag.js) - Google Analytics -->
  <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-K46KCYF6E9"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'G-K46KCYF6E9');
  </script>


  <script src="https://cdn.jkdesu.com/assets2/js/bootstrap.min.js"></script>
  <script src="https://cdn.jkdesu.com/assets2/js/player.js"></script>
  <script src="https://cdn.jkdesu.com/assets2/js/jquery.nice-select.min.js"></script>
  <script src="https://cdn.jkdesu.com/assets2/js/mixitup.min.js"></script>
  <script src="https://cdn.jkdesu.com/assets2/js/jquery.slicknav.js"></script>
  <script src="https://cdn.jkdesu.com/assets2/js/owl.carousel.min.js"></script>
  <script src="https://cdn.jkdesu.com/assets2/js/jquery.simplemodal.js"></script>
  <script src="https://cdn.jkdesu.com/assets2/js/jquery.toast.js"></script>
  <script src="https://cdn.jkdesu.com/assets2/js/jquery-confirm.js"></script>
  <script src="https://cdn.jkdesu.com/assets2/js/bot-detector.js?=v6.5.72"></script>
  <script src="https://cdn.jkdesu.com/assets2/js/main.js?=v6.5.208"></script>


  <footer class="footer">
    <div class="page-up">
      <a href="#" id="scrollToTopButton"><span class="arrow_carrot-up"></span></a>
    </div>
    <div class="container">
      <div class="row">

        <div class="col-lg-9">
          <div class="footer__nav">
            <ul>
              <li class="active"><a href="#">Inicio</a></li>
              <li><a href="#">Categorias</a></li>
              <li><a href="#">Anime Episodios</a></li>
              <li><a href="#">Episodio</a></li>
              <li><a href="https://discord.otakudesho.net/">Chat</a></li>
            </ul>
          </div>
        </div>
        <div class="col-lg-3">
          <div class="footer__logo">
            <a href="./index.html"><img src="img/logo.png" alt=""></a>
          </div>
        </div>
      </div>
    </div>
  </footer>



  <div id="xSpeUujVEWNg" style="display: none;"></div><iframe style="display: none;"></iframe>
  <div data-lastpass-root=""
    style="position: absolute !important; top: 0px !important; left: 0px !important; height: 0px !important; width: 0px !important;">
    <div data-lastpass-infield="true" style="position: absolute !important; top: 0px !important; left: 0px !important;">
    </div>
  </div>
</body>

</html>