<html lang="pt">

<head>

  <meta name="csrf-token" content="kNp8FODuYIhU3aN0yqpqLBjJQcHggjKY8UUne7f4">
  <meta http-equiv="content-language" content="pt-br">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="robots" content="index,follow">
  <meta http-equiv="content-language" content="pt-br">
  <meta name="hilltopads-site-verification" content="0fdfe236e6fa584b210950db3b9a44dec2370d54">
  <meta name="propeller" content="02da3e1fffbfcdc63a4336e5e3142d97">
  <meta name="a.validate.02" content="-0tTj7OiNo58w7qpGRd8I7GhXLEvjLgyJvH3">
  <title>Assistir Strike the Blood 3 - Animes Vision - Assistir Animes Online Grátis HD</title>
  <meta name="description"
    content="Foi anunciado em um evento de palco do Dengeki Game Festival que a série de romances leves Strike the Blood terá um terceiro lançamento OVA. Cobrirá até o final do Seisen-hen. (Fonte: notícias MAL) animes vision">
  <meta name="keywords"
    content="acao,fantasia,sobrenatural,ecchi, Strike the Blood 3Animes Vision, baixar Strike the Blood 3 animes vision">
  <meta property="article:published_time" content="2019-06-21 17:41:30">
  <meta property="article:section" content="Animes">
  <meta name="google-site-verification" content="WfHtIHgpKAIErWuzIFzYdVvgFnXBsjS2Q7HDfca4Xbc">
  <meta name="msvalidate.01" content="86CF0E4D516E4A44D36E8D43B35AB230">
  <meta name="pinterest" content="00ad7d282afdbbb749c81a6c5a32c0ab">
  <meta name="yandex-verification" content="264254be940fa95c">
  <meta name="robots" content="index,follow,noodp,noydir">
  <meta property="og:description"
    content="Foi anunciado em um evento de palco do Dengeki Game Festival que a série de romances leves Strike the Blood terá um terceiro lançamento OVA. Cobrirá até o final do Seisen-hen. (Fonte: notícias MAL)">
  <meta property="og:title" content="Assistir Strike the Blood 3">
  <meta property="og:type" content="article">
  <meta property="og:locale" content="pt-br">
  <meta property="og:url" content="https://animes.vision/animes/strike-the-blood-3">
  <meta property="og:site_name" content="Animes Vision">
  <meta property="og:image" content="https://animes.vision/storage/capa/2YFQEqI9UwzOyAK3xTrvtWHcZx2OwmNnpBRI15Wq.jpg">
  <meta property="article:published_time" content="2019-06-21 17:41:30">
  <meta property="article:modified_time" content="2023-10-23 10:46:23">
  <meta property="article:author" content="UmOtakuQualquer">
  <meta property="article:section" content="Animes">
  <meta property="article:tag" content="acao,fantasia,sobrenatural,ecchi">
  <meta name="twitter:card" content="summary">
  <meta name="twitter:site" content="@animesvision">
  <script async="" src="//www.google-analytics.com/analytics.js"></script>
  <script
    type="application/ld+json">{"@context":"https:\/\/schema.org","@type":"WebPage","name":"Over 9000 Thousand!","description":"For those who helped create the Genki Dama"}</script>
  <link rel="alternate" type="application/rss+xml" title="RSS Feed" href="https://animes.vision/rss">

  <script>
    (function (i, s, o, g, r, a, m) {
      i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments)
      }, i[r].l = 1 * new Date(); a = s.createElement(o),
        m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

    ga('create', 'UA-133650552-1', 'auto');
    ga('send', 'pageview');

  </script>
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1">
  <meta name="apple-mobile-web-app-status-bar" content="#202125">
  <meta name="theme-color" content="#202125">
  <link rel="stylesheet" href="//stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <link rel="stylesheet" href="//use.fontawesome.com/releases/v5.3.1/css/all.css">
  <link rel="stylesheet" href="https://animes.vision/v6/css/styles.css">
  <link rel="canonical" href="https://animes.vision/animes/strike-the-blood-3">
  <style>
    [wire\:loading],
    [wire\:loading\.delay],
    [wire\:loading\.inline-block],
    [wire\:loading\.inline],
    [wire\:loading\.block],
    [wire\:loading\.flex],
    [wire\:loading\.table],
    [wire\:loading\.grid] {
      display: none;
    }

    [wire\:loading\.delay\.shortest],
    [wire\:loading\.delay\.shorter],
    [wire\:loading\.delay\.short],
    [wire\:loading\.delay\.long],
    [wire\:loading\.delay\.longer],
    [wire\:loading\.delay\.longest] {
      display: none;
    }

    [wire\:offline] {
      display: none;
    }

    [wire\:dirty]:not(textarea):not(input):not(select) {
      display: none;
    }

    input:-webkit-autofill,
    select:-webkit-autofill,
    textarea:-webkit-autofill {
      animation-duration: 50000s;
      animation-name: livewireautofill;
    }

    @keyframes livewireautofill {
      from {}
    }
  </style>
  <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "url": "https://animes.vision/",
        "potentialAction": {
            "@type": "SearchAction",
            "target": "https://animes.vision/search?nome={nome}",
            "query-input": "required name=nome"
        }
    }
</script>
</head>

<body>
  <div id="sidebar_menu_bg"></div>
  <div id="sidebar_menu">
    <button class="btn btn-radius btn-sm btn-secondary toggle-sidebar" id="fechar-menu-sidebar">
      <i class="fas fa-angle-left mr-2"></i>Fechar menu</button>
    <div class="sb-setting">
      <div class="header-setting">
        <div class="hs-toggles">
          <div class="row mb-3">
            <div class="col-4">
              <a href="https://animes.vision/login" class="hst-item" data-toggle="tooltip"
                data-original-title="Fazer Login">
                <div class="hst-icon"><i class="fas fa-user"></i></div>
                <div class="name"><span>Fazer Login</span></div>
              </a>
            </div>
          </div>
          <div class="row">
            <div class="col-7">
              <a href="https://animes.vision/assistir-em-grupo" class="hst-item" data-toggle="tooltip" title=""
                data-original-title="Assistir em Grupo">
                <div class="hst-icon">
                  <i class="zicon zicon-20 zicon-live"></i>
                </div>
                <div class="name"><span>Assista em Grupo</span></div>
              </a>
            </div>
            <div class="col-5">
              <a href="https://animes.vision/vision-tv" class="hst-item" data-toggle="tooltip" title=""
                data-original-title="Vision TV">
                <div class="hst-icon">
                  <i class="fas fa-tv"></i>
                </div>
                <div class="name"><span>Vision TV</span></div>
              </a>
            </div>
            <div class="col-6 mt-3">
              <a href="https://animes.vision/aleatorio" class="hst-item" data-toggle="tooltip"
                data-original-title="Assistir a um anime aleatório">
                <div class="hst-icon"><i class="fas fa-random"></i></div>
                <div class="name"><span>Aleatório</span></div>
              </a>
            </div>
            <div class="col-6 mt-3">
              <a href="https://animes.vision/acesso-vip" class="hst-item" data-toggle="tooltip"
                data-original-title="Premium VIP">
                <div class="hst-icon"><i class="fas fa-crown"></i></div>
                <div class="name"><span>Premium VIP</span></div>
              </a>
            </div>
          </div>
          <div class="clearfix"></div>
        </div>
      </div>
    </div>
    <ul class="nav sidebar_menu-list">
      <li class="nav-item active"><a class="nav-link" href="/" title="Home">Home</a></li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/filmes" title="Filmes">Filmes</a></li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/animes" title="Animes TV">Animes TV</a>
      </li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/doramas" title="Doramas">Doramas</a>
      </li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/cartoons" title="Cartoons">Cartoons</a>
      </li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/live-actions" title="Live Actions">Live
          Actions</a></li>
      <li class="nav-item"><a class="nav-link" href="https://hentaisvision.biz/" target="_blank"
          title="Hentais Vision">Hentais Vision</a></li>
      <li class="nav-item">
        <div class="nav-link" title="Genre"><strong>Gêneros</strong></div>
        <div class="sidebar_menu-sub show" id="sidebar_subs_genre">
          <ul class="nav color-list sub-menu">
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=acao">Ação</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=aventura">Aventura</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=artes-marciais">Artes
                Marciais</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=comedia">Comédia</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=cotidiano">Cotidiano</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=demonios">Demônios</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=drama">Drama</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=ecchi">Ecchi</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=escolar">Escolar</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=espacial">Espacial</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=esportes">Esportes</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=fantasia">Fantasia</a>
            </li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=ficcao-cientifica">Ficção Científica</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=harem">Harém</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=hentai">Hentai</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=historico">Histórico</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=horror">Horror</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=infantil">Infantil</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=game">Game</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=josei">Josei</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=magia">Magia</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=militar">Militar</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=misterio">Mistério</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=mecha">Mecha</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=musical">Musical</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=policial">Policial</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=parodia">Paródia</a>
            </li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=psicologico">Psicológico</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=romance">Romance</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=samurai">Samurai</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=seinen">Seinen</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=sci-fi">Sci-Fi</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=shoujo">Shoujo</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=shoujo-ai">Shoujo-Ai</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=shounen">Shounen</a>
            </li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=shounen-ai">Shounen-Ai</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=slice-of-life">Slice of
                Life</a></li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=sobrenatural">Sobrenatural</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=super-poderes">Super
                Poderes</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=suspense">Suspense</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=terror">Terror</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=tragedia">Tragédia</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=thriller">Thriller</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vampiros">Vampiros</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vida-escolar">Vida
                Escolar</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=yaoi">Yaoi</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=yuri">Yuri</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=fatia-de-vida">Fatia de
                vida</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=amor-de-meninas">Amor de
                meninas</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=amor-de-meninos">Amor de
                meninos</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=gourmet">Gourmet</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=avant-garde">Avant
                Garde</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vida-de-trabalho">Vida
                de trabalho</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=erotica">Erotica</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vanguarda">Vanguarda</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=garotos-amam">Garotos
                amam</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=isekai">Isekai</a></li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=reincarnation">Reincarnation</a></li>
            <li class="nav-item nav-more">
              <a class="nav-link" href="https://animes.vision/search?generos="><i class="fas fa-plus mr-2"></i>Mais</a>
            </li>
          </ul>
          <div class="clearfix"></div>
        </div>
      </li>
    </ul>
    <div class="clearfix"></div>
  </div>
  <div id="wrapper">
    <div id="header" class="header-home">
      <div class="container">
        <div id="mobile_menu">
          <i class="fa fa-bars"></i>
        </div>
        <a href="https://animes.vision" id="logo">
          <img src="https://animes.vision/v6/images/logo_vision.png" alt="Vision">
          <div class="clearfix"></div>
        </a>
        <div id="search">
          <div class="search-content">
            <form action="/search" autocomplete="off">
              <a href="https://animes.vision/search" class="filter-icon">Filtro</a>
              <input type="text" class="form-control search-input" name="nome" placeholder="Procure por um anime...">
              <button type="submit" class="search-icon"><i class="fas fa-search"></i></button>
            </form>
            <div class="nav search-result-pop" id="search-suggest" style="display: none;">
              <div class="loading-relative" id="search-loading" style="display: none;">
                <div class="loading">
                  <div class="span1"></div>
                  <div class="span2"></div>
                  <div class="span3"></div>
                </div>
              </div>
              <div class="result" style="display:none;"></div>
            </div>
          </div>
        </div>
        <div class="header-group">
          <div class="vision-group">
            <div class="zrg-title">
              <span class="top">Entre agora</span><span class="bottom">Grupos Vision</span>
            </div>
            <div class="zrg-list">
              <div class="item">
                <a href="https://discord.gg/Ey8YwNb" target="_blank" class="zr-social-button dc-btn"><i
                    class="fab fa-discord"></i></a>
              </div>
              <div class="item">
                <a href="https://t.me/+tNl_kGqSsHgyNWVh" target="_blank" class="zr-social-button tl-btn"><i
                    class="fab fa-telegram"></i></a>
              </div>
              <div class="item">
                <a href="https://facebook.com/animesvision.oficial" target="_blank" class="zr-social-button tl-btn"><i
                    class="fab fa-facebook-square"></i></a>
              </div>
              <div class="item">
                <a href="https://instagram.com/animesvisionoficial/" target="_blank" class="zr-social-button rd-btn"><i
                    class="fab fa-instagram"></i></a>
              </div>
              <div class="item">
                <a href="https://play.google.com/store/apps/details?id=com.anivision" target="_blank"
                  class="zr-social-button gr-btn"><i class="fab fa-android"></i></a>
              </div>
            </div>
            <div class="clearfix"></div>
          </div>
        </div>
        <div class="header-setting">
          <div class="hs-toggles">
            <a href="https://animes.vision/assistir-em-grupo" class="hst-item" data-toggle="tooltip" title=""
              data-original-title="Assistir em Grupo">
              <div class="hst-icon">
                <i class="zicon zicon-20 zicon-live"></i>
              </div>
              <div class="name"><span>Assista em Grupo</span></div>
            </a>
            <a href="https://animes.vision/acesso-vip" class="hst-item" data-toggle="tooltip"
              data-original-title="Premium VIP">
              <div class="hst-icon"><i class="fas fa-crown"></i></div>
              <div class="name"><span>Premium VIP</span></div>
            </a>
            <a href="https://animes.vision/aleatorio" class="hst-item" data-toggle="tooltip"
              data-original-title="Assistir a um anime aleatório">
              <div class="hst-icon"><i class="fas fa-random"></i></div>
              <div class="name"><span>Aleatório</span></div>
            </a>
            <div class="clearfix"></div>
          </div>
        </div>
        <div id="pick_menu">
          <div class="pick_menu-ul">
            <ul class="ulclear">
              <li class="pmu-item pmu-item-home">
                <a class="pmu-item-icon" href="/home" title="Home">
                  <img src="https://animes.vision/v6/images/pick-home.svg" data-toggle="tooltip" data-placement="right"
                    title="" data-original-title="Home">
                </a>
              </li>
              <li class="pmu-item pmu-item-movies">
                <a class="pmu-item-icon" href="/movie" title="Movies">
                  <img src="https://animes.vision/v6/images/pick-movies.svg" data-toggle="tooltip"
                    data-placement="right" title="" data-original-title="Movies">
                </a>
              </li>
              <li class="pmu-item pmu-item-show">
                <a class="pmu-item-icon" href="/tv" title="TV Series">
                  <img src="https://animes.vision/v6/images/pick-show.svg" data-toggle="tooltip" data-placement="right"
                    title="" data-original-title="TV Series">
                </a>
              </li>
              <li class="pmu-item pmu-item-popular">
                <a class="pmu-item-icon" href="/most-popular" title="Most Popular">
                  <img src="https://animes.vision/v6/images/pick-popular.svg" data-toggle="tooltip"
                    data-placement="right" title="" data-original-title="Most Popular">
                </a>
              </li>
            </ul>
          </div>
        </div>
        <div id="header_right">
          <a href="https://animes.vision/register" class="btn btn-dark btn-md botao-registre mr-2">Registre-se</a>
          <a href="https://animes.vision/login" class="btn btn-primary btn-md text-white">Fazer login</a>
        </div>
        <div id="mobile_search" class=""><i class="fa fa-search"></i></div>
        <div class="clearfix"></div>
      </div>
    </div>
    <div class="clearfix"></div>
    <div>

      <div id="main-wrapper" class="layout-page layout-page-detail">

        <div id="ani_detail">
          <div class="ani_detail-stage">
            <div class="container">
              <div class="anis-cover-wrap">
                <div class="anis-cover"
                  style="background-image: url(https://animes.vision/storage/strike-the-blood-3-2019-06-21-5d0d4179452f3.jpg)">
                </div>
              </div>
              <div class="anis-content">
                <div class="anisc-poster">
                  <div class="film-poster">
                    <img src="https://animes.vision/storage/capa/2YFQEqI9UwzOyAK3xTrvtWHcZx2OwmNnpBRI15Wq.jpg"
                      class="film-poster-img">
                  </div>
                </div>
                <div class="anisc-detail">
                  <div class="prebreadcrumb">
                    <nav aria-label="breadcrumb">
                      <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="https://animes.vision">Home</a></li>
                        <li class="breadcrumb-item"><a href="https://animes.vision/animes">Animes</a>
                        </li>
                        <li class="breadcrumb-item dynamic-name active" title="Strike the Blood 3">Strike the Blood 3
                        </li>
                      </ol>
                    </nav>
                  </div>
                  <h2 class="film-name dynamic-name" title="Strike the Blood 3">Strike the Blood 3</h2>
                  <div id="mal-sync"></div>
                  <div class="film-stats">
                    <span class="item">
                      <div class="tick-item tick-pg">
                        Livre
                      </div>
                    </span>
                    <span class="item">
                      <div class="tick-item tick-quality">
                        FULL HD
                      </div>
                    </span>
                    <span class="item">
                      <div class="tick-item tick-dub">
                        Legendado
                      </div>
                    </span>
                    <span class="dot"></span>
                    <span class="item">BD</span>
                    <span class="dot"></span>
                    <span class="item">Episódios 10</span>
                    <span class="dot"></span>
                    <span class="item">26 min por ep</span>
                    <div class="clearfix"></div>
                  </div>
                  <div class="film-buttons">
                    <a href="https://animes.vision/animes/strike-the-blood-3/episodio-01/legendado"
                      class="btn btn-radius btn-primary btn-play"><i class="fas fa-play mr-2"></i>Assistir agora</a>
                    <div class="dr-fav" id="watch-list-content">
                      <div wire:id="DKKUNeI0n1B6fFYfraUr" class="mb-2 favoritos-detalhes">
                        <a wire:click="favoritar(0)" class="btn btn-radius btn-danger btn-effect genero-link"><i
                            class="fas fa-heart-o" aria-hidden="true"></i> Favoritar</a>
                      </div>
                    </div>
                    <div class="dr-fav" id="watch-list-content">
                      <div wire:id="4RhJk0FljhbHojRCeJW5" class="input-group mb-3 d-flex justify-content-center">
                        <div class="input-group-prepend" wire:loading.remove="">
                          <button type="button" class="btn btn-light butao1">Add à lista</button>
                          <button type="button" class="btn btn-light dropdown-toggle butao2" data-toggle="dropdown"
                            aria-haspopup="true" aria-expanded="false">
                            <span class="sr-only">Toggle Dropdown</span>
                          </button>
                          <div class="dropdown-menu">
                            <a class="dropdown-item" wire:click="addLista(1)">Assistindo</a>
                            <a class="dropdown-item" wire:click="addLista(2)">Pretendo assistir</a>
                            <a class="dropdown-item" wire:click="addLista(3)">Completo</a>
                            <a class="dropdown-item" wire:click="addLista(4)">Pausado</a>
                            <a class="dropdown-item" wire:click="addLista(5)">Dropado</a>
                          </div>
                        </div>
                        <div class="input-group-prepend" wire:loading="" wire:target="addLista">
                          <button type="button" class="btn btn-light butao1">Carregando...</button>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="film-description m-hide">
                    <div class="text">
                      Foi anunciado em um evento de palco do Dengeki Game Festival que a série de romances leves Strike
                      the Blood terá um terceiro lançamento OVA. Cobrirá até o final do Seisen-hen. (Fonte: notícias
                      MAL)
                    </div>
                  </div>
                </div>
                <div class="anisc-info-wrap">
                  <div class="anisc-info">
                    <div class="item item-title w-hide">
                      <span class="item-head">Sinopse:</span>
                      <div class="text">
                        Foi anunciado em um evento de palco do Dengeki Game Festival que a série de romances leves
                        Strike the Blood terá um terceiro lançamento OVA. Cobrirá até o final do Seisen-hen. (Fonte:
                        notícias MAL)
                      </div>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Título em Inglês:</span>
                      <span class="name"></span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Título Japonês:</span>
                      <span class="name">ストライク・ザ・ブラッドⅢ</span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Foi ao ar em:</span>
                      <span class="name">19 de Dec de 2018</span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Temporada:</span>
                      <span class="name"></span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Duração:</span>
                      <span class="name">26 min por ep</span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Status:</span>
                      <span class="name">Fim da exibição</span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Fansub:</span>
                      <span class="name"><a
                          href="https://animes.vision/search?fansub=Infinite Fansub / Absolute Fansub">Infinite Fansub /
                          Absolute Fansub</a></span>
                    </div>
                    <div class="item item-list">
                      <span class="item-head">Gêneros:</span>
                      <a href="https://animes.vision/search?generos=acao" title="Ação">Ação</a>
                      <a href="https://animes.vision/search?generos=fantasia" title="Fantasia">Fantasia</a>
                      <a href="https://animes.vision/search?generos=sobrenatural" title="Sobrenatural">Sobrenatural</a>
                      <a href="https://animes.vision/search?generos=ecchi" title="Ecchi">Ecchi</a>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Estúdios:</span>
                      <a class="name" href="https://animes.vision/search?estudios=44">Connect</a>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Produtores:</span>
                      <a class="name" href="https://animes.vision/search?produtores=28">Movic</a>,
                      <a class="name" href="https://animes.vision/search?produtores=694">SILVER LINK.</a>,
                      <a class="name" href="https://animes.vision/search?produtores=61">Magic Capsule</a>,
                      <a class="name" href="https://animes.vision/search?produtores=54">Warner Bros. Japan</a>,
                      <a class="name" href="https://animes.vision/search?produtores=55">KlockWorx</a>,
                      <a class="name" href="https://animes.vision/search?produtores=204">ASCII Media Works</a>,
                      <a class="name" href="https://animes.vision/search?produtores=115">Hakuhodo DY Music &amp;
                        Pictures</a>,
                    </div>
                    <div class="film-text w-hide">
                      Assista <strong>Strike the Blood 3</strong> Legendado online de graça.
                    </div>
                  </div>
                  <div class="clearfix"></div>
                </div>
                <div class="clearfix"></div>
              </div>
            </div>
          </div>
        </div>
        <div class="container">
          <div id="main-content">
            <section class="block_area block_area-actors">
              <div class="block_area-header">
                <div class="float-left bah-heading mr-4">
                  <h2 class="cat-heading">Personagens &amp; Dubladores</h2>
                </div>
                <div class="float-right viewmore">
                  <a class="btn" data-toggle="modal" data-target="#modalPersonagens">Ver mais<i
                      class="fas fa-angle-right ml-2"></i></a>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="block-actors-content">
                <div class="bac-list-wrap">
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/akatsuki-kojou" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/3YcSJaNi58CVvuJj6bfnOjATJWjfPwlzR9VmPx0W.jpg"
                          src="https://animes.vision/storage/personagem/3YcSJaNi58CVvuJj6bfnOjATJWjfPwlzR9VmPx0W.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/akatsuki-kojou">Akatsuki, Kojou</a>
                        </h4>
                        <span class="pi-cast">Principal</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/hosoya-yoshimasa" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/q4A2AnGb79dli2Osq5DsjtwOdu9F3VbceXqeQGOP.jpg"
                          src="https://animes.vision/storage/pessoa/q4A2AnGb79dli2Osq5DsjtwOdu9F3VbceXqeQGOP.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/hosoya-yoshimasa">Hosoya,
                            Yoshimasa</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/himeragi-yukina" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/QKLrBcHK0BUi3yhH8ETKhoyVjYWaxiKVvTEvRnUU.jpg"
                          src="https://animes.vision/storage/personagem/QKLrBcHK0BUi3yhH8ETKhoyVjYWaxiKVvTEvRnUU.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/himeragi-yukina">Himeragi, Yukina</a>
                        </h4>
                        <span class="pi-cast">Principal</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/taneda-risa" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/S7Rgbc7IJizCBHUPyeSLJCh8g1hfanodLFACGveS.jpg"
                          src="https://animes.vision/storage/pessoa/S7Rgbc7IJizCBHUPyeSLJCh8g1hfanodLFACGveS.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/taneda-risa">Taneda, Risa</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/aiba-asagi" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/zD22zGD8zRutSfZ67BZ4QSKSXiDjBPwdhY6JY5Wn.jpg"
                          src="https://animes.vision/storage/personagem/zD22zGD8zRutSfZ67BZ4QSKSXiDjBPwdhY6JY5Wn.jpg"
                          alt="Lagusa, Angelo" class=" lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/aiba-asagi">Aiba, Asagi</a>
                        </h4>
                        <span class="pi-cast">De apoio</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/seto-asami" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/Xx5qbBoBL4FiHoko5MwaqfW4wm7NvkaT8J6VgznM.jpg"
                          src="https://animes.vision/storage/pessoa/Xx5qbBoBL4FiHoko5MwaqfW4wm7NvkaT8J6VgznM.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/seto-asami">Seto, Asami</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/akatsuki-mimori" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/nNjh0wbXviozNxnqRzqbErkBopTg8ihGbaC87MK1.jpg"
                          src="https://animes.vision/storage/personagem/nNjh0wbXviozNxnqRzqbErkBopTg8ihGbaC87MK1.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/akatsuki-mimori">Akatsuki, Mimori</a>
                        </h4>
                        <span class="pi-cast">De apoio</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/kobayashi-sanae" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/gBqcNRpGQ6Fg89Yo0eyo4kGvBsJyTkWJDmnBlakE.jpg"
                          src="https://animes.vision/storage/pessoa/gBqcNRpGQ6Fg89Yo0eyo4kGvBsJyTkWJDmnBlakE.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/kobayashi-sanae">Kobayashi, Sanae</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/akatsuki-gajou" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/pK4tA7IHnHNSck5TP4b8lLVqDvecv6XtMIvrOWFB.jpg"
                          src="https://animes.vision/storage/personagem/pK4tA7IHnHNSck5TP4b8lLVqDvecv6XtMIvrOWFB.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/akatsuki-gajou">Akatsuki, Gajou</a>
                        </h4>
                        <span class="pi-cast">De apoio</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/kase-yasuyuki" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/oDIuAbnMEiyXAmfMAhzCcw3pQN6FPiVjMbtSJYZy.jpg"
                          src="https://animes.vision/storage/pessoa/oDIuAbnMEiyXAmfMAhzCcw3pQN6FPiVjMbtSJYZy.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/kase-yasuyuki">Kase, Yasuyuki</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/akatsuki-nagisa" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/jI8pQv8xFslJQy1GzS1fN2PAXtnI0v2avEnnzwTM.jpg"
                          src="https://animes.vision/storage/personagem/jI8pQv8xFslJQy1GzS1fN2PAXtnI0v2avEnnzwTM.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/akatsuki-nagisa">Akatsuki, Nagisa</a>
                        </h4>
                        <span class="pi-cast">De apoio</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/hidaka-rina" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/ZHJB28cb3AZUgL34vgRnfFvgdZSJMEPfBlmAFMA0.jpg"
                          src="https://animes.vision/storage/pessoa/ZHJB28cb3AZUgL34vgRnfFvgdZSJMEPfBlmAFMA0.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/hidaka-rina">Hidaka, Rina</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="clearfix"></div>
                </div>
                <div class="clearfix"></div>
              </div>
            </section>
            <section class="block_area block_area-promotions">
              <div class="block_area-header">
                <div class="float-left bah-heading mr-4">
                  <h2 class="cat-heading">Episódios</h2>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="block_area-content block_area-promotions-list">
                <div class="row justify-content-center">
                  <div class="loading-relative mt-5 mb-5" wire:loading="" wire:target="paginar">
                    <div class="loading">
                      <div class="span1"></div>
                      <div class="span2"></div>
                      <div class="span3"></div>
                    </div>
                  </div>
                </div>
                <div class="screen-items">
                  <div class="item" data-title="Episodio 01 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/strike-the-blood-3/episodio-01/legendado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/hYy3c4nD3Qu8Nl3w9v2QVx3bdgCTQvWVM9Cw9EyL.png"
                        alt="Episodio 01 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 01 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 02 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/strike-the-blood-3/episodio-02/legendado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/4mmuF3z899l9ClfHZ7Nv6w2M8DJjV6XnRthxa9yb.png"
                        alt="Episodio 02 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 02 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 03 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/strike-the-blood-3/episodio-03/legendado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/SWkc7qYJIbGKTLvbg8TGTQMoQJU9q0ikIcV8mFhb.png"
                        alt="Episodio 03 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 03 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 04 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/strike-the-blood-3/episodio-04/legendado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/t0TdndO73AiiqVcaeNkB5fXnKBIQ6ixtkId0sl2x.png"
                        alt="Episodio 04 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 04 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 05 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/strike-the-blood-3/episodio-05/legendado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/gdc6id2Gp9ndVAKze4bjpVfUvQbgsPbBPb0oZBNL.png"
                        alt="Episodio 05 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 05 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 06 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/strike-the-blood-3/episodio-06/legendado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/vkkfMb7K33FbydCpLe14CM69HSUxRj4tyd2bdikm.png"
                        alt="Episodio 06 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 06 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 07 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/strike-the-blood-3/episodio-07/legendado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/RXovphxD1MwueDUYvLGufdoKZZAE9HomSbigLIXJ.png"
                        alt="Episodio 07 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 07 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 08 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/strike-the-blood-3/episodio-08/legendado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/3PXHtRrPqik63GjUKAQf93Bkx9bo6NFrOGK0yiuC.png"
                        alt="Episodio 08 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 08 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 09 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/strike-the-blood-3/episodio-09/legendado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/WLwJT1EDpXoNBcK0mNgSJMR4FAWI6T24YMohzhOe.png"
                        alt="Episodio 09 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 09 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 10 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/strike-the-blood-3/episodio-10/legendado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/1sunQDbc5X3vxyrbiNysYOGhaiCs7gUU8txdHQze.png"
                        alt="Episodio 10 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 10 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="clearfix"></div>
                </div>
                <div class="pre-pagination">
                  <nav aria-label="Page navigation">
                    <ul class="pagination mb-0">
                    </ul>
                  </nav>
                </div>
              </div>
            </section>
            <div class="clearfix"></div>
            <section class="block_area block_area-comment">
              <div class="block_area-header block_area-header-tabs">
                <div class="float-left bah-heading mr-4">
                  <h2 class="cat-heading">Comentários <small>beta</small></h2>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="tab-content">
                <div class="show-comments">
                  <div id="disqus_thread"></div>
                  <div class="text-center">
                    <button class="btn btn-sm btn-secondary sc-button btn-load-comment"><i
                        class="fas fa-comment mr-2"></i>Clique para carregar os comentários
                    </button>
                  </div>
                </div>
              </div>
            </section>
            <div class="clearfix"></div>
          </div>
          <div id="main-sidebar">
            <section wire:id="9NwvAGYl38lUZxjdOysG" class="block_area block_area_sidebar block_area-realtime">
              <div class="block_area-header">
                <div class="float-left bah-heading mr-4">
                  <h2 class="cat-heading">Populares</h2>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="block_area-content">
                <div class="cbox cbox-list cbox-realtime">
                  <div class="cbox-content">
                    <div class="anif-block-ul">
                      <ul class="ulclear">
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/LJZJOMMZWO9A7uTphxK863jfXgTKBgeJKZnRHgEC.jpg"
                              class="film-poster-img lazyload" alt="One Piece">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/one-piece" title="One Piece"
                                class="dynamic-name" data-jname="One Piece">One Piece</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">1090 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">24 min</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/lJYAlaX43KWP9Bq26Q4eq2hWzmwBkMxGbueb0R7k.jpg"
                              class="film-poster-img lazyload" alt="Boruto: Naruto Next Generations">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/boruto-naruto-next-generations"
                                title="Boruto: Naruto Next Generations" class="dynamic-name"
                                data-jname="Boruto: Naruto Next Generations">Boruto: Naruto Next Generations</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">293 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/TPZYbqV1picmurT2CONFMswAtR66N3Tcak8Wfbbz.jpg"
                              class="film-poster-img lazyload" alt="Naruto Shippuuden">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/naruto-shippuden"
                                title="Naruto Shippuuden" class="dynamic-name" data-jname="Naruto Shippuuden">Naruto
                                Shippuuden</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">500 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/I29J5wmoADzccoCY3flDe62AmGsVJzUMlS1t5dHu.jpg"
                              class="film-poster-img lazyload" alt="Kimetsu no Yaiba">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/kimetsu-no-yaiba"
                                title="Kimetsu no Yaiba" class="dynamic-name" data-jname="Kimetsu no Yaiba">Kimetsu no
                                Yaiba</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">BD</span>
                              <span class="dot"></span>
                              <span class="fdi-item">26 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/feVbQep8ew2okFuPtixafURlt4D6oRFZVsRNMmKU.jpg"
                              class="film-poster-img lazyload" alt="Black Clover">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/black-clover"
                                title="Black Clover" class="dynamic-name" data-jname="Black Clover">Black Clover</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">170 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/PaMxC3yCZ1PA0J5BMf1uSzv5VlhCF5E2XiSRRzIC.jpg"
                              class="film-poster-img lazyload" alt="One Punch Man 2">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/one-punch-man-2"
                                title="One Punch Man 2" class="dynamic-name" data-jname="One Punch Man 2">One Punch Man
                                2</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">BD (1-4) / TV (5-12)</span>
                              <span class="dot"></span>
                              <span class="fdi-item">18 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/GDdsfGDX8JfEDwV822hKZO6PptaI1WPEOn0Bm4JV.jpg"
                              class="film-poster-img lazyload" alt="Shingeki no Kyojin: The Final Season Part 2">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a
                                href="https://animes.vision/animes/shingeki-no-kyojin-the-final-season-part-2"
                                title="Shingeki no Kyojin: The Final Season Part 2" class="dynamic-name"
                                data-jname="Shingeki no Kyojin: The Final Season Part 2">Shingeki no Kyojin: The Final
                                Season Part 2</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">12 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 minutos por episódio</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/tZ07emovR5srz1Xt0CXzX074fF6D0iGyMnSNeT9P.jpg"
                              class="film-poster-img lazyload" alt="Boku no Hero Academia 4th Season">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/boku-no-hero-academia-4"
                                title="Boku no Hero Academia 4th Season" class="dynamic-name"
                                data-jname="Boku no Hero Academia 4th Season">Boku no Hero Academia 4th Season</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">25 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">24 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/Heva86kU0Xv9ce0wYjfhSsedS5YFcgbk6va3rnE4.jpg"
                              class="film-poster-img lazyload" alt="Shingeki no Kyojin Season 3 Part 2">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a
                                href="https://animes.vision/animes/shingeki-no-kyojin-season-3-part-2"
                                title="Shingeki no Kyojin Season 3 Part 2" class="dynamic-name"
                                data-jname="Shingeki no Kyojin Season 3 Part 2">Shingeki no Kyojin Season 3 Part 2</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">10 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/1Am6fBnZ1nfz6TMroQS6m49Gsj7P28gKIF6Tnv0F.jpg"
                              class="film-poster-img lazyload" alt="Tate No Yuusha No Nariagari">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/tate-no-yuusha-no-nariagari"
                                title="Tate No Yuusha No Nariagari" class="dynamic-name"
                                data-jname="Tate No Yuusha No Nariagari">Tate No Yuusha No Nariagari</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">25 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">24 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                      </ul>
                      <div class="clearfix"></div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                </div>
              </div>
            </section>
          </div>
          <div class="clearfix"></div>
        </div>
      </div>
      <div wire:id="KhK9Ti4CD8JJX3k6xvH4" wire:ignore.self="" class="modal fade premodal premodal-characters"
        id="modalPersonagens" tabindex="-1" role="dialog" aria-labelledby="modalcharacterstitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title text-left" id="modalcharacterstitle">Personagens &amp; Dubladores</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">×</span>
              </button>
            </div>
            <div class="modal-body">
              <div class="modal-characters">
                <div class="row justify-content-center">
                  <div class="loading-relative mt-5 mb-5" wire:loading="">
                    <div class="loading">
                      <div class="span1"></div>
                      <div class="span2"></div>
                      <div class="span3"></div>
                    </div>
                  </div>
                </div>
                <div id="characters-content" wire:loading.remove="">
                  <div class="bac-list-wrap" mb-3="" id="character-list">
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/akatsuki-kojou" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/3YcSJaNi58CVvuJj6bfnOjATJWjfPwlzR9VmPx0W.jpg"
                            src="https://animes.vision/storage/personagem/3YcSJaNi58CVvuJj6bfnOjATJWjfPwlzR9VmPx0W.jpg"
                            alt="Akatsuki, Kojou">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/akatsuki-kojou">Akatsuki, Kojou</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/hosoya-yoshimasa" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hosoya, Yoshimasa">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/q4A2AnGb79dli2Osq5DsjtwOdu9F3VbceXqeQGOP.jpg"
                              src="https://animes.vision/storage/pessoa/q4A2AnGb79dli2Osq5DsjtwOdu9F3VbceXqeQGOP.jpg"
                              alt="Hosoya, Yoshimasa">
                          </a>
                          <a href="https://animes.vision/pessoa/hosoya-yoshimasa" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hosoya, Yoshimasa">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/q4A2AnGb79dli2Osq5DsjtwOdu9F3VbceXqeQGOP.jpg"
                              src="https://animes.vision/storage/pessoa/q4A2AnGb79dli2Osq5DsjtwOdu9F3VbceXqeQGOP.jpg"
                              alt="Hosoya, Yoshimasa">
                          </a>
                          <a href="https://animes.vision/pessoa/tamura-mutsumi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Tamura, Mutsumi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/uKTMpnkKOBhVFSk9DqrtvnhqSIbOHIUVNzGkVryH.jpg"
                              src="https://animes.vision/storage/pessoa/uKTMpnkKOBhVFSk9DqrtvnhqSIbOHIUVNzGkVryH.jpg"
                              alt="Tamura, Mutsumi">
                          </a>
                          <a href="https://animes.vision/pessoa/grimm-jesse" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Grimm, Jesse">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/N4BhIKCegIkWmQesDCUluMfQbk6jembfW3s6PYWe.jpg"
                              src="https://animes.vision/storage/pessoa/N4BhIKCegIkWmQesDCUluMfQbk6jembfW3s6PYWe.jpg"
                              alt="Grimm, Jesse">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/himeragi-yukina" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/QKLrBcHK0BUi3yhH8ETKhoyVjYWaxiKVvTEvRnUU.jpg"
                            src="https://animes.vision/storage/personagem/QKLrBcHK0BUi3yhH8ETKhoyVjYWaxiKVvTEvRnUU.jpg"
                            alt="Himeragi, Yukina">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/himeragi-yukina">Himeragi, Yukina</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/taneda-risa" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Taneda, Risa">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/S7Rgbc7IJizCBHUPyeSLJCh8g1hfanodLFACGveS.jpg"
                              src="https://animes.vision/storage/pessoa/S7Rgbc7IJizCBHUPyeSLJCh8g1hfanodLFACGveS.jpg"
                              alt="Taneda, Risa">
                          </a>
                          <a href="https://animes.vision/pessoa/taneda-risa" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Taneda, Risa">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/S7Rgbc7IJizCBHUPyeSLJCh8g1hfanodLFACGveS.jpg"
                              src="https://animes.vision/storage/pessoa/S7Rgbc7IJizCBHUPyeSLJCh8g1hfanodLFACGveS.jpg"
                              alt="Taneda, Risa">
                          </a>
                          <a href="https://animes.vision/pessoa/friede-franciska" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Friede, Franciska">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/6LqLAyTpnpW7BPJvsHZ2oF1ezLzV7D4IWBtPaz9Q.jpg"
                              src="https://animes.vision/storage/pessoa/6LqLAyTpnpW7BPJvsHZ2oF1ezLzV7D4IWBtPaz9Q.jpg"
                              alt="Friede, Franciska">
                          </a>
                          <a href="https://animes.vision/pessoa/taneda-risa" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Taneda, Risa">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/S7Rgbc7IJizCBHUPyeSLJCh8g1hfanodLFACGveS.jpg"
                              src="https://animes.vision/storage/pessoa/S7Rgbc7IJizCBHUPyeSLJCh8g1hfanodLFACGveS.jpg"
                              alt="Taneda, Risa">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/aiba-asagi" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/zD22zGD8zRutSfZ67BZ4QSKSXiDjBPwdhY6JY5Wn.jpg"
                            src="https://animes.vision/storage/personagem/zD22zGD8zRutSfZ67BZ4QSKSXiDjBPwdhY6JY5Wn.jpg"
                            alt="Aiba, Asagi">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/aiba-asagi">Aiba, Asagi</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/seto-asami" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Seto, Asami">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Xx5qbBoBL4FiHoko5MwaqfW4wm7NvkaT8J6VgznM.jpg"
                              src="https://animes.vision/storage/pessoa/Xx5qbBoBL4FiHoko5MwaqfW4wm7NvkaT8J6VgznM.jpg"
                              alt="Seto, Asami">
                          </a>
                          <a href="https://animes.vision/pessoa/seto-asami" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Seto, Asami">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Xx5qbBoBL4FiHoko5MwaqfW4wm7NvkaT8J6VgznM.jpg"
                              src="https://animes.vision/storage/pessoa/Xx5qbBoBL4FiHoko5MwaqfW4wm7NvkaT8J6VgznM.jpg"
                              alt="Seto, Asami">
                          </a>
                          <a href="https://animes.vision/pessoa/sturz-dorothee" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Sturz, Dorothee">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/dXXygNCTLlce7aHdMxTRNvfIqtVKRGSgkS6kFxlv.jpg"
                              src="https://animes.vision/storage/pessoa/dXXygNCTLlce7aHdMxTRNvfIqtVKRGSgkS6kFxlv.jpg"
                              alt="Sturz, Dorothee">
                          </a>
                          <a href="https://animes.vision/pessoa/seto-asami" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Seto, Asami">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Xx5qbBoBL4FiHoko5MwaqfW4wm7NvkaT8J6VgznM.jpg"
                              src="https://animes.vision/storage/pessoa/Xx5qbBoBL4FiHoko5MwaqfW4wm7NvkaT8J6VgznM.jpg"
                              alt="Seto, Asami">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/akatsuki-mimori" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/nNjh0wbXviozNxnqRzqbErkBopTg8ihGbaC87MK1.jpg"
                            src="https://animes.vision/storage/personagem/nNjh0wbXviozNxnqRzqbErkBopTg8ihGbaC87MK1.jpg"
                            alt="Akatsuki, Mimori">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/akatsuki-mimori">Akatsuki, Mimori</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kobayashi-sanae" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kobayashi, Sanae">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/gBqcNRpGQ6Fg89Yo0eyo4kGvBsJyTkWJDmnBlakE.jpg"
                              src="https://animes.vision/storage/pessoa/gBqcNRpGQ6Fg89Yo0eyo4kGvBsJyTkWJDmnBlakE.jpg"
                              alt="Kobayashi, Sanae">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/akatsuki-gajou" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/pK4tA7IHnHNSck5TP4b8lLVqDvecv6XtMIvrOWFB.jpg"
                            src="https://animes.vision/storage/personagem/pK4tA7IHnHNSck5TP4b8lLVqDvecv6XtMIvrOWFB.jpg"
                            alt="Akatsuki, Gajou">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/akatsuki-gajou">Akatsuki, Gajou</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kase-yasuyuki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kase, Yasuyuki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/oDIuAbnMEiyXAmfMAhzCcw3pQN6FPiVjMbtSJYZy.jpg"
                              src="https://animes.vision/storage/pessoa/oDIuAbnMEiyXAmfMAhzCcw3pQN6FPiVjMbtSJYZy.jpg"
                              alt="Kase, Yasuyuki">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/akatsuki-nagisa" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/jI8pQv8xFslJQy1GzS1fN2PAXtnI0v2avEnnzwTM.jpg"
                            src="https://animes.vision/storage/personagem/jI8pQv8xFslJQy1GzS1fN2PAXtnI0v2avEnnzwTM.jpg"
                            alt="Akatsuki, Nagisa">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/akatsuki-nagisa">Akatsuki, Nagisa</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/hidaka-rina" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hidaka, Rina">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ZHJB28cb3AZUgL34vgRnfFvgdZSJMEPfBlmAFMA0.jpg"
                              src="https://animes.vision/storage/pessoa/ZHJB28cb3AZUgL34vgRnfFvgdZSJMEPfBlmAFMA0.jpg"
                              alt="Hidaka, Rina">
                          </a>
                          <a href="https://animes.vision/pessoa/hidaka-rina" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hidaka, Rina">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ZHJB28cb3AZUgL34vgRnfFvgdZSJMEPfBlmAFMA0.jpg"
                              src="https://animes.vision/storage/pessoa/ZHJB28cb3AZUgL34vgRnfFvgdZSJMEPfBlmAFMA0.jpg"
                              alt="Hidaka, Rina">
                          </a>
                          <a href="https://animes.vision/pessoa/folster-linda" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Fölster, Linda">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/BZYamvMqOxV8aDoCKkvkJsb0YzBMqxt6mxjjdVoG.jpg"
                              src="https://animes.vision/storage/pessoa/BZYamvMqOxV8aDoCKkvkJsb0YzBMqxt6mxjjdVoG.jpg"
                              alt="Fölster, Linda">
                          </a>
                          <a href="https://animes.vision/pessoa/hidaka-rina" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hidaka, Rina">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ZHJB28cb3AZUgL34vgRnfFvgdZSJMEPfBlmAFMA0.jpg"
                              src="https://animes.vision/storage/pessoa/ZHJB28cb3AZUgL34vgRnfFvgdZSJMEPfBlmAFMA0.jpg"
                              alt="Hidaka, Rina">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/astarte" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/VRKtjMs8SVOPolkDkYqNrDP6I94pUhLjuKNpGvwC.jpg"
                            src="https://animes.vision/storage/personagem/VRKtjMs8SVOPolkDkYqNrDP6I94pUhLjuKNpGvwC.jpg"
                            alt="Astarte">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/astarte">Astarte</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/iguchi-yuka" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Iguchi, Yuka">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/lAdaeenpKWK5jVGue5gIEq9oxdqdAG3ftlcSWzsV.jpg"
                              src="https://animes.vision/storage/pessoa/lAdaeenpKWK5jVGue5gIEq9oxdqdAG3ftlcSWzsV.jpg"
                              alt="Iguchi, Yuka">
                          </a>
                          <a href="https://animes.vision/pessoa/iguchi-yuka" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Iguchi, Yuka">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/lAdaeenpKWK5jVGue5gIEq9oxdqdAG3ftlcSWzsV.jpg"
                              src="https://animes.vision/storage/pessoa/lAdaeenpKWK5jVGue5gIEq9oxdqdAG3ftlcSWzsV.jpg"
                              alt="Iguchi, Yuka">
                          </a>
                          <a href="https://animes.vision/pessoa/kelly-svenja" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kelly, Svenja">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/aoRlDE0pGN5LrUS6DoWx8cCxUep7RnsIGQHfahPB.gif"
                              src="https://animes.vision/storage/pessoa/aoRlDE0pGN5LrUS6DoWx8cCxUep7RnsIGQHfahPB.gif"
                              alt="Kelly, Svenja">
                          </a>
                          <a href="https://animes.vision/pessoa/iguchi-yuka" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Iguchi, Yuka">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/lAdaeenpKWK5jVGue5gIEq9oxdqdAG3ftlcSWzsV.jpg"
                              src="https://animes.vision/storage/pessoa/lAdaeenpKWK5jVGue5gIEq9oxdqdAG3ftlcSWzsV.jpg"
                              alt="Iguchi, Yuka">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/carly" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/JAdEb7SNivwiCsqoc7nIyacJA94vYSAusxWN6Fpu.gif"
                            src="https://animes.vision/storage/personagem/JAdEb7SNivwiCsqoc7nIyacJA94vYSAusxWN6Fpu.gif"
                            alt="Carly">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/carly">Carly</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/akao-hikaru" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Akao, Hikaru">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/sBUkMnXipupGw7zEt66oIrZyjlilf1i18ufIW69D.jpg"
                              src="https://animes.vision/storage/pessoa/sBUkMnXipupGw7zEt66oIrZyjlilf1i18ufIW69D.jpg"
                              alt="Akao, Hikaru">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/december" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/ChsV6JcCjoDltVrOEUm0Hy9vVyZMV4sXv2qKY16I.gif"
                            src="https://animes.vision/storage/personagem/ChsV6JcCjoDltVrOEUm0Hy9vVyZMV4sXv2qKY16I.gif"
                            alt="December">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/december">December</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/lynn" data-toggle="tooltip" title="" class="pi-avatar"
                            data-original-title="Lynn">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/gz1K3ruw97DoKg1PSzrOQtUCjsJu4HaR9CHKJP2R.jpg"
                              src="https://animes.vision/storage/pessoa/gz1K3ruw97DoKg1PSzrOQtUCjsJu4HaR9CHKJP2R.jpg"
                              alt="Lynn">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/didier-lydianne" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/hs1oAkjgLc9Y2aCsF93yiAeyBHSMuPt6YmVbmYfS.jpg"
                            src="https://animes.vision/storage/personagem/hs1oAkjgLc9Y2aCsF93yiAeyBHSMuPt6YmVbmYfS.jpg"
                            alt="Didier, Lydianne">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/didier-lydianne">Didier, Lydianne</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kuno-misaki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kuno, Misaki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/YkAvKodtgwyWupOCgQNFPDchSxsX1qGTTpWzk30K.jpg"
                              src="https://animes.vision/storage/pessoa/YkAvKodtgwyWupOCgQNFPDchSxsX1qGTTpWzk30K.jpg"
                              alt="Kuno, Misaki">
                          </a>
                          <a href="https://animes.vision/pessoa/kuno-misaki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kuno, Misaki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/YkAvKodtgwyWupOCgQNFPDchSxsX1qGTTpWzk30K.jpg"
                              src="https://animes.vision/storage/pessoa/YkAvKodtgwyWupOCgQNFPDchSxsX1qGTTpWzk30K.jpg"
                              alt="Kuno, Misaki">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/glenda" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/tviprrvP8ZwTLSfUanqu0KANNmDq8AXjXjoWgAEq.jpg"
                            src="https://animes.vision/storage/personagem/tviprrvP8ZwTLSfUanqu0KANNmDq8AXjXjoWgAEq.jpg"
                            alt="Glenda">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/glenda">Glenda</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/watada-misaki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Watada, Misaki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/vswcB0CDwpn8aOIi783iFzJ16C9KgEhSsS2qMXSk.jpg"
                              src="https://animes.vision/storage/pessoa/vswcB0CDwpn8aOIi783iFzJ16C9KgEhSsS2qMXSk.jpg"
                              alt="Watada, Misaki">
                          </a>
                          <a href="https://animes.vision/pessoa/watada-misaki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Watada, Misaki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/vswcB0CDwpn8aOIi783iFzJ16C9KgEhSsS2qMXSk.jpg"
                              src="https://animes.vision/storage/pessoa/vswcB0CDwpn8aOIi783iFzJ16C9KgEhSsS2qMXSk.jpg"
                              alt="Watada, Misaki">
                          </a>
                          <a href="https://animes.vision/pessoa/watada-misaki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Watada, Misaki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/vswcB0CDwpn8aOIi783iFzJ16C9KgEhSsS2qMXSk.jpg"
                              src="https://animes.vision/storage/pessoa/vswcB0CDwpn8aOIi783iFzJ16C9KgEhSsS2qMXSk.jpg"
                              alt="Watada, Misaki">
                          </a>
                          <a href="https://animes.vision/pessoa/watada-misaki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Watada, Misaki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/vswcB0CDwpn8aOIi783iFzJ16C9KgEhSsS2qMXSk.jpg"
                              src="https://animes.vision/storage/pessoa/vswcB0CDwpn8aOIi783iFzJ16C9KgEhSsS2qMXSk.jpg"
                              alt="Watada, Misaki">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/haba-yuiri" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/6PhrzFbKCYCShwsdICspfDP6cMGKQsID8smXyTtn.jpg"
                            src="https://animes.vision/storage/personagem/6PhrzFbKCYCShwsdICspfDP6cMGKQsID8smXyTtn.jpg"
                            alt="Haba, Yuiri">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/haba-yuiri">Haba, Yuiri</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/senbongi-sayaka" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Senbongi, Sayaka">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/aUz4ylY51rB7G2HPPdpx1dECQ9aFbhUsj0OrK3AD.jpg"
                              src="https://animes.vision/storage/pessoa/aUz4ylY51rB7G2HPPdpx1dECQ9aFbhUsj0OrK3AD.jpg"
                              alt="Senbongi, Sayaka">
                          </a>
                          <a href="https://animes.vision/pessoa/senbongi-sayaka" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Senbongi, Sayaka">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/aUz4ylY51rB7G2HPPdpx1dECQ9aFbhUsj0OrK3AD.jpg"
                              src="https://animes.vision/storage/pessoa/aUz4ylY51rB7G2HPPdpx1dECQ9aFbhUsj0OrK3AD.jpg"
                              alt="Senbongi, Sayaka">
                          </a>
                          <a href="https://animes.vision/pessoa/senbongi-sayaka" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Senbongi, Sayaka">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/aUz4ylY51rB7G2HPPdpx1dECQ9aFbhUsj0OrK3AD.jpg"
                              src="https://animes.vision/storage/pessoa/aUz4ylY51rB7G2HPPdpx1dECQ9aFbhUsj0OrK3AD.jpg"
                              alt="Senbongi, Sayaka">
                          </a>
                          <a href="https://animes.vision/pessoa/senbongi-sayaka" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Senbongi, Sayaka">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/aUz4ylY51rB7G2HPPdpx1dECQ9aFbhUsj0OrK3AD.jpg"
                              src="https://animes.vision/storage/pessoa/aUz4ylY51rB7G2HPPdpx1dECQ9aFbhUsj0OrK3AD.jpg"
                              alt="Senbongi, Sayaka">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/hikawa-shio" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/Lnf1mxLMWcJacoqtxyTl0Rj8PKuZ7RkBpyHupBbS.jpg"
                            src="https://animes.vision/storage/personagem/Lnf1mxLMWcJacoqtxyTl0Rj8PKuZ7RkBpyHupBbS.jpg"
                            alt="Hikawa, Shio">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/hikawa-shio">Hikawa, Shio</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/hondo-kaede" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hondo, Kaede">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/HsjUpENol2mOe0cLMAHG7mPp1EjKwnGV6F8KP0Oz.jpg"
                              src="https://animes.vision/storage/pessoa/HsjUpENol2mOe0cLMAHG7mPp1EjKwnGV6F8KP0Oz.jpg"
                              alt="Hondo, Kaede">
                          </a>
                          <a href="https://animes.vision/pessoa/hondo-kaede" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hondo, Kaede">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/HsjUpENol2mOe0cLMAHG7mPp1EjKwnGV6F8KP0Oz.jpg"
                              src="https://animes.vision/storage/pessoa/HsjUpENol2mOe0cLMAHG7mPp1EjKwnGV6F8KP0Oz.jpg"
                              alt="Hondo, Kaede">
                          </a>
                          <a href="https://animes.vision/pessoa/hondo-kaede" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hondo, Kaede">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/HsjUpENol2mOe0cLMAHG7mPp1EjKwnGV6F8KP0Oz.jpg"
                              src="https://animes.vision/storage/pessoa/HsjUpENol2mOe0cLMAHG7mPp1EjKwnGV6F8KP0Oz.jpg"
                              alt="Hondo, Kaede">
                          </a>
                          <a href="https://animes.vision/pessoa/hondo-kaede" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hondo, Kaede">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/HsjUpENol2mOe0cLMAHG7mPp1EjKwnGV6F8KP0Oz.jpg"
                              src="https://animes.vision/storage/pessoa/HsjUpENol2mOe0cLMAHG7mPp1EjKwnGV6F8KP0Oz.jpg"
                              alt="Hondo, Kaede">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/itogami-meiga" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/4hLecDrruvHpXhTP4kaPvouTriIXTRbaL3ntbpHP.jpg"
                            src="https://animes.vision/storage/personagem/4hLecDrruvHpXhTP4kaPvouTriIXTRbaL3ntbpHP.jpg"
                            alt="Itogami, Meiga">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/itogami-meiga">Itogami, Meiga</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/hanae-natsuki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hanae, Natsuki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/58RGRXGLqYQ3uj8gdXX93rjeN4IspXcqPAq0v0p0.jpg"
                              src="https://animes.vision/storage/pessoa/58RGRXGLqYQ3uj8gdXX93rjeN4IspXcqPAq0v0p0.jpg"
                              alt="Hanae, Natsuki">
                          </a>
                          <a href="https://animes.vision/pessoa/hanae-natsuki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hanae, Natsuki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/58RGRXGLqYQ3uj8gdXX93rjeN4IspXcqPAq0v0p0.jpg"
                              src="https://animes.vision/storage/pessoa/58RGRXGLqYQ3uj8gdXX93rjeN4IspXcqPAq0v0p0.jpg"
                              alt="Hanae, Natsuki">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/kanase-kensei" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/Ge1w0Xih2kjAcYXRfi3kuWlpoCCHvGOqKP5nMGZi.jpg"
                            src="https://animes.vision/storage/personagem/Ge1w0Xih2kjAcYXRfi3kuWlpoCCHvGOqKP5nMGZi.jpg"
                            alt="Kanase, Kensei">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/kanase-kensei">Kanase, Kensei</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/aoyama-yutaka" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Aoyama, Yutaka">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/W485KqvbtnR0TaodnpOorQUx68f42ge5NeaBXR1U.jpg"
                              src="https://animes.vision/storage/pessoa/W485KqvbtnR0TaodnpOorQUx68f42ge5NeaBXR1U.jpg"
                              alt="Aoyama, Yutaka">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/kanase-kanon" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/cwvZxiS6r7zaRj5viC64fVZtb0xY6kyJ9vUSDczU.jpg"
                            src="https://animes.vision/storage/personagem/cwvZxiS6r7zaRj5viC64fVZtb0xY6kyJ9vUSDczU.jpg"
                            alt="Kanase, Kanon">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/kanase-kanon">Kanase, Kanon</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/itou-kanae" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Itou, Kanae">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/oJLohwfvGi9IAq28WQ9jhVrCi9xNejKGeaJDQISj.jpg"
                              src="https://animes.vision/storage/pessoa/oJLohwfvGi9IAq28WQ9jhVrCi9xNejKGeaJDQISj.jpg"
                              alt="Itou, Kanae">
                          </a>
                          <a href="https://animes.vision/pessoa/itou-kanae" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Itou, Kanae">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/oJLohwfvGi9IAq28WQ9jhVrCi9xNejKGeaJDQISj.jpg"
                              src="https://animes.vision/storage/pessoa/oJLohwfvGi9IAq28WQ9jhVrCi9xNejKGeaJDQISj.jpg"
                              alt="Itou, Kanae">
                          </a>
                          <a href="https://animes.vision/pessoa/seubert-emily" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Seubert, Emily">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/5KYhX2TCM68zcfrreVC29jFYe8cOATvj7yIFCSlk.gif"
                              src="https://animes.vision/storage/pessoa/5KYhX2TCM68zcfrreVC29jFYe8cOATvj7yIFCSlk.gif"
                              alt="Seubert, Emily">
                          </a>
                          <a href="https://animes.vision/pessoa/itou-kanae" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Itou, Kanae">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/oJLohwfvGi9IAq28WQ9jhVrCi9xNejKGeaJDQISj.jpg"
                              src="https://animes.vision/storage/pessoa/oJLohwfvGi9IAq28WQ9jhVrCi9xNejKGeaJDQISj.jpg"
                              alt="Itou, Kanae">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/kirasaka-sayaka" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/Q96YYw5I32T4JkQbcW2B9AlIOMiWYkpOOiNkVYjf.jpg"
                            src="https://animes.vision/storage/personagem/Q96YYw5I32T4JkQbcW2B9AlIOMiWYkpOOiNkVYjf.jpg"
                            alt="Kirasaka, Sayaka">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/kirasaka-sayaka">Kirasaka, Sayaka</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/hayama-ikumi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hayama, Ikumi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/uAdgWItNO2N7sQkVx3LVTZQVHGxk3zeQtVXMTYdJ.jpg"
                              src="https://animes.vision/storage/pessoa/uAdgWItNO2N7sQkVx3LVTZQVHGxk3zeQtVXMTYdJ.jpg"
                              alt="Hayama, Ikumi">
                          </a>
                          <a href="https://animes.vision/pessoa/hayama-ikumi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hayama, Ikumi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/uAdgWItNO2N7sQkVx3LVTZQVHGxk3zeQtVXMTYdJ.jpg"
                              src="https://animes.vision/storage/pessoa/uAdgWItNO2N7sQkVx3LVTZQVHGxk3zeQtVXMTYdJ.jpg"
                              alt="Hayama, Ikumi">
                          </a>
                          <a href="https://animes.vision/pessoa/von-keller-katharina" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="von Keller, Katharina">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/A3erFa7VpCTst19tN8l4LWRZx3GcaOS0QC0YNDgW.jpg"
                              src="https://animes.vision/storage/pessoa/A3erFa7VpCTst19tN8l4LWRZx3GcaOS0QC0YNDgW.jpg"
                              alt="von Keller, Katharina">
                          </a>
                          <a href="https://animes.vision/pessoa/hayama-ikumi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hayama, Ikumi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/uAdgWItNO2N7sQkVx3LVTZQVHGxk3zeQtVXMTYdJ.jpg"
                              src="https://animes.vision/storage/pessoa/uAdgWItNO2N7sQkVx3LVTZQVHGxk3zeQtVXMTYdJ.jpg"
                              alt="Hayama, Ikumi">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/minamiya-natsuki" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/qxgxFeJIm0zuFHDlUWXOCIWAUq1IOgGxfCKIxCTe.jpg"
                            src="https://animes.vision/storage/personagem/qxgxFeJIm0zuFHDlUWXOCIWAUq1IOgGxfCKIxCTe.jpg"
                            alt="Minamiya, Natsuki">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/minamiya-natsuki">Minamiya, Natsuki</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kanemoto-hisako" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kanemoto, Hisako">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/yJ4soXKoIlEpvTPsnKymavXv106ZCvOMDD2VdqIl.jpg"
                              src="https://animes.vision/storage/pessoa/yJ4soXKoIlEpvTPsnKymavXv106ZCvOMDD2VdqIl.jpg"
                              alt="Kanemoto, Hisako">
                          </a>
                          <a href="https://animes.vision/pessoa/kanemoto-hisako" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kanemoto, Hisako">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/yJ4soXKoIlEpvTPsnKymavXv106ZCvOMDD2VdqIl.jpg"
                              src="https://animes.vision/storage/pessoa/yJ4soXKoIlEpvTPsnKymavXv106ZCvOMDD2VdqIl.jpg"
                              alt="Kanemoto, Hisako">
                          </a>
                          <a href="https://animes.vision/pessoa/alavi-souzan" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Alavi, Souzan">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/wF0wl2VtUfuoABVyUB0PJIaX4S2TFI5nVVYpbnZ7.jpg"
                              src="https://animes.vision/storage/pessoa/wF0wl2VtUfuoABVyUB0PJIaX4S2TFI5nVVYpbnZ7.jpg"
                              alt="Alavi, Souzan">
                          </a>
                          <a href="https://animes.vision/pessoa/kanemoto-hisako" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kanemoto, Hisako">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/yJ4soXKoIlEpvTPsnKymavXv106ZCvOMDD2VdqIl.jpg"
                              src="https://animes.vision/storage/pessoa/yJ4soXKoIlEpvTPsnKymavXv106ZCvOMDD2VdqIl.jpg"
                              alt="Kanemoto, Hisako">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/mogwai" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/PgkDNLoC2F5yNHcjnwsswK21guUSElqsS5ezs3VL.jpg"
                            src="https://animes.vision/storage/personagem/PgkDNLoC2F5yNHcjnwsswK21guUSElqsS5ezs3VL.jpg"
                            alt="Mogwai">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/mogwai">Mogwai</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kawada-shinji" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kawada, Shinji">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/25COUaoFj4GrVUTODxdJeR80dhX0iGXeeKe2AqwE.jpg"
                              src="https://animes.vision/storage/pessoa/25COUaoFj4GrVUTODxdJeR80dhX0iGXeeKe2AqwE.jpg"
                              alt="Kawada, Shinji">
                          </a>
                          <a href="https://animes.vision/pessoa/kawada-shinji" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kawada, Shinji">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/25COUaoFj4GrVUTODxdJeR80dhX0iGXeeKe2AqwE.jpg"
                              src="https://animes.vision/storage/pessoa/25COUaoFj4GrVUTODxdJeR80dhX0iGXeeKe2AqwE.jpg"
                              alt="Kawada, Shinji">
                          </a>
                          <a href="https://animes.vision/pessoa/kawada-shinji" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kawada, Shinji">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/25COUaoFj4GrVUTODxdJeR80dhX0iGXeeKe2AqwE.jpg"
                              src="https://animes.vision/storage/pessoa/25COUaoFj4GrVUTODxdJeR80dhX0iGXeeKe2AqwE.jpg"
                              alt="Kawada, Shinji">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/paper-noise" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/RoxXcZtH9X1VB7VhJRXxh6SlAAM28ndXrqKGtaUY.jpg"
                            src="https://animes.vision/storage/personagem/RoxXcZtH9X1VB7VhJRXxh6SlAAM28ndXrqKGtaUY.jpg"
                            alt="Paper Noise">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/paper-noise">Paper Noise</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/ueda-kana" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Ueda, Kana">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/TcfE7eqAl4I1HU9WpJbQdTCRCGgJWXNMXFMRsYaE.jpg"
                              src="https://animes.vision/storage/pessoa/TcfE7eqAl4I1HU9WpJbQdTCRCGgJWXNMXFMRsYaE.jpg"
                              alt="Ueda, Kana">
                          </a>
                          <a href="https://animes.vision/pessoa/ueda-kana" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Ueda, Kana">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/TcfE7eqAl4I1HU9WpJbQdTCRCGgJWXNMXFMRsYaE.jpg"
                              src="https://animes.vision/storage/pessoa/TcfE7eqAl4I1HU9WpJbQdTCRCGgJWXNMXFMRsYaE.jpg"
                              alt="Ueda, Kana">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/rahn" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/Q2JLq7qMghsU94O3yrfloz4nGRXJupUtYi8sHhvv.gif"
                            src="https://animes.vision/storage/personagem/Q2JLq7qMghsU94O3yrfloz4nGRXJupUtYi8sHhvv.gif"
                            alt="Rahn">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/rahn">Rahn</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/haruno-anzu" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Haruno, Anzu">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/sxrwcja3mMn5NxvMY2KBBe1guNlAVrasMeUn71Sk.jpg"
                              src="https://animes.vision/storage/pessoa/sxrwcja3mMn5NxvMY2KBBe1guNlAVrasMeUn71Sk.jpg"
                              alt="Haruno, Anzu">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/rihavein-la-folia" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/MEFn2brdUEMYt36mYD7xU1W4Zkhy4P6FcYSQPrIc.jpg"
                            src="https://animes.vision/storage/personagem/MEFn2brdUEMYt36mYD7xU1W4Zkhy4P6FcYSQPrIc.jpg"
                            alt="Rihavein, La Folia">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/rihavein-la-folia">Rihavein, La Folia</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/oonishi-saori" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Oonishi, Saori">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/VbfYUIkmcEAI1aY98uO9DdgeyWokpAlwpwCP7HyT.jpg"
                              src="https://animes.vision/storage/pessoa/VbfYUIkmcEAI1aY98uO9DdgeyWokpAlwpwCP7HyT.jpg"
                              alt="Oonishi, Saori">
                          </a>
                          <a href="https://animes.vision/pessoa/heuer-diakow-sabrina" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Heuer-Diakow, Sabrina">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/uiDG9Y6iFrVyTMsKTsHK1JOANQXFtQHiTjsS6RNH.jpg"
                              src="https://animes.vision/storage/pessoa/uiDG9Y6iFrVyTMsKTsHK1JOANQXFtQHiTjsS6RNH.jpg"
                              alt="Heuer-Diakow, Sabrina">
                          </a>
                          <a href="https://animes.vision/pessoa/oonishi-saori" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Oonishi, Saori">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/VbfYUIkmcEAI1aY98uO9DdgeyWokpAlwpwCP7HyT.jpg"
                              src="https://animes.vision/storage/pessoa/VbfYUIkmcEAI1aY98uO9DdgeyWokpAlwpwCP7HyT.jpg"
                              alt="Oonishi, Saori">
                          </a>
                          <a href="https://animes.vision/pessoa/oonishi-saori" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Oonishi, Saori">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/VbfYUIkmcEAI1aY98uO9DdgeyWokpAlwpwCP7HyT.jpg"
                              src="https://animes.vision/storage/pessoa/VbfYUIkmcEAI1aY98uO9DdgeyWokpAlwpwCP7HyT.jpg"
                              alt="Oonishi, Saori">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/rogi" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/rpu9JDMAvr5b2U2JcEgP4KL3KL8GTDv5yYiR4sRS.gif"
                            src="https://animes.vision/storage/personagem/rpu9JDMAvr5b2U2JcEgP4KL3KL8GTDv5yYiR4sRS.gif"
                            alt="Rogi">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/rogi">Rogi</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/horie-shun" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Horie, Shun">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/QTNlgQZXzjigWw9buxf5LOQB85BaSEoMd2VZ2b36.jpg"
                              src="https://animes.vision/storage/pessoa/QTNlgQZXzjigWw9buxf5LOQB85BaSEoMd2VZ2b36.jpg"
                              alt="Horie, Shun">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/senga-takehito" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/GOCnJGI5uXCrmSwaWkTFzrr93CFFUIueXwIdt8xU.gif"
                            src="https://animes.vision/storage/personagem/GOCnJGI5uXCrmSwaWkTFzrr93CFFUIueXwIdt8xU.gif"
                            alt="Senga, Takehito">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/senga-takehito">Senga, Takehito</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/toriumi-kousuke" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Toriumi, Kousuke">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/zACj07GTf91sUm5BYmvazPHJPakSlWAkFuorigFq.jpg"
                              src="https://animes.vision/storage/pessoa/zACj07GTf91sUm5BYmvazPHJPakSlWAkFuorigFq.jpg"
                              alt="Toriumi, Kousuke">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/vatler-dimitrie" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/wpw5HkZKhckUaGYBloSRvsSuYlW5RGgpiPb2fpqq.jpg"
                            src="https://animes.vision/storage/personagem/wpw5HkZKhckUaGYBloSRvsSuYlW5RGgpiPb2fpqq.jpg"
                            alt="Vatler, Dimitrie">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/vatler-dimitrie">Vatler, Dimitrie</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/ono-yuuki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Ono, Yuuki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/v39tV1gZzv5WqhYntZyRyv0emFLZSv6u57Qv0Yih.jpg"
                              src="https://animes.vision/storage/pessoa/v39tV1gZzv5WqhYntZyRyv0emFLZSv6u57Qv0Yih.jpg"
                              alt="Ono, Yuuki">
                          </a>
                          <a href="https://animes.vision/pessoa/nohren-henning" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nöhren, Henning">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/0Vq6IfGDlizR55jnMkDxmwggfR0aNpCpqrxmSVVz.jpg"
                              src="https://animes.vision/storage/pessoa/0Vq6IfGDlizR55jnMkDxmwggfR0aNpCpqrxmSVVz.jpg"
                              alt="Nöhren, Henning">
                          </a>
                          <a href="https://animes.vision/pessoa/ono-yuuki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Ono, Yuuki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/v39tV1gZzv5WqhYntZyRyv0emFLZSv6u57Qv0Yih.jpg"
                              src="https://animes.vision/storage/pessoa/v39tV1gZzv5WqhYntZyRyv0emFLZSv6u57Qv0Yih.jpg"
                              alt="Ono, Yuuki">
                          </a>
                          <a href="https://animes.vision/pessoa/ono-yuuki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Ono, Yuuki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/v39tV1gZzv5WqhYntZyRyv0emFLZSv6u57Qv0Yih.jpg"
                              src="https://animes.vision/storage/pessoa/v39tV1gZzv5WqhYntZyRyv0emFLZSv6u57Qv0Yih.jpg"
                              alt="Ono, Yuuki">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/yaze-motoki" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/eYjHPqcF6Gjjn9mvsjsKILBzrYMZXScChLRHxHQT.jpg"
                            src="https://animes.vision/storage/personagem/eYjHPqcF6Gjjn9mvsjsKILBzrYMZXScChLRHxHQT.jpg"
                            alt="Yaze, Motoki">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/yaze-motoki">Yaze, Motoki</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/oosaka-ryouta" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Oosaka, Ryouta">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/vM3MjfzOOFv4ydADZOpZUAFOzYAeACzRe1myqzWg.jpg"
                              src="https://animes.vision/storage/pessoa/vM3MjfzOOFv4ydADZOpZUAFOzYAeACzRe1myqzWg.jpg"
                              alt="Oosaka, Ryouta">
                          </a>
                          <a href="https://animes.vision/pessoa/oosaka-ryouta" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Oosaka, Ryouta">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/vM3MjfzOOFv4ydADZOpZUAFOzYAeACzRe1myqzWg.jpg"
                              src="https://animes.vision/storage/pessoa/vM3MjfzOOFv4ydADZOpZUAFOzYAeACzRe1myqzWg.jpg"
                              alt="Oosaka, Ryouta">
                          </a>
                          <a href="https://animes.vision/pessoa/kinzel-timo" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kinzel, Timo">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/NL4lexoZ2MOan6LawtCpXc6oRicLOErGYqXTgmC8.jpg"
                              src="https://animes.vision/storage/pessoa/NL4lexoZ2MOan6LawtCpXc6oRicLOErGYqXTgmC8.jpg"
                              alt="Kinzel, Timo">
                          </a>
                          <a href="https://animes.vision/pessoa/oosaka-ryouta" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Oosaka, Ryouta">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/vM3MjfzOOFv4ydADZOpZUAFOzYAeACzRe1myqzWg.jpg"
                              src="https://animes.vision/storage/pessoa/vM3MjfzOOFv4ydADZOpZUAFOzYAeACzRe1myqzWg.jpg"
                              alt="Oosaka, Ryouta">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div id="footer" data-settings="">
      <div id="footer-about">
        <div class="container">
          <div class="footer-top">
            <a href="https://animes.vision" class="footer-logo">
              <img src="https://animes.vision/v6/images/logo_vision.png" alt="Vision">
              <div class="clearfix"></div>
            </a>
            <div class="footer-joingroup">
              <div class="vision-group">
                <div class="zrg-title"><span class="top">Entre agora</span><span class="bottom">Grupos Vision</span>
                </div>
                <div class="zrg-list">
                  <div class="item">
                    <a href="https://discord.gg/Ey8YwNb" target="_blank" class="zr-social-button dc-btn"><i
                        class="fab fa-discord"></i></a>
                  </div>
                  <div class="item">
                    <a href="https://t.me/+tNl_kGqSsHgyNWVh" target="_blank" class="zr-social-button tl-btn"><i
                        class="fab fa-telegram"></i></a>
                  </div>
                  <div class="item">
                    <a href="https://www.facebook.com/animesvision.oficial" target="_blank"
                      class="zr-social-button tl-btn"><i class="fab fa-facebook-square"></i></a>
                  </div>
                  <div class="item">
                    <a href="https://www.instagram.com/animesvisionoficial/" target="_blank"
                      class="zr-social-button rd-btn"><i class="fab fa-instagram"></i></a>
                  </div>
                  <div class="item">
                    <a href="https://play.google.com/store/apps/details?id=com.anivision" target="_blank"
                      class="zr-social-button gr-btn"><i class="fab fa-android"></i></a>
                  </div>
                </div>
                <div class="clearfix"></div>
              </div>
            </div>
            <div class="clearfix"></div>
          </div>
          <div class="footer-az">
            <div class="block mb-3">
              <span class="ftaz">Lista A-Z</span><span class="size-s">Pesquise seu título pela primeira letra do
                alfabeto.</span>
            </div>
            <ul class="ulclear az-list">
              <li class=""><a href="https://animes.vision/lista-a-z">Todos</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/A">A</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/B">B</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/C">C</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/D">D</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/E">E</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/F">F</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/G">G</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/H">H</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/I">I</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/J">J</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/K">K</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/L">L</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/M">M</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/N">N</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/O">O</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/P">P</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/Q">Q</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/R">R</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/S">S</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/T">T</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/U">U</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/V">V</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/W">W</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/X">X</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/Y">Y</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/Z">Z</a></li>
            </ul>
            <div class="clearfix"></div>
          </div>
          <div class="footer-links">
            <ul class="ulclear">
              <li><a href="https://animes.vision/estatisticas" title="Estatísticas">Estatísticas</a></li>
              <li><a href="https://animes.vision/terms" title="Terms of service">Termos de Serviços</a></li>
              <li><a href="https://animes.vision/dmca" title="DMCA">DMCA</a></li>
              <li><a href="https://animes.vision/contato" title="Contato">Contato</a></li>
            </ul>
            <div class="clearfix"></div>
          </div>
          <div class="about-text">
            Todos os direitos reservados aos seus respectivos proprietários.
          </div>
          <p class="copyright">Animes.Vision, 2013 ~ 2023
          </p>
        </div>
      </div>
    </div>
  </div>
  <div id="mask-overlay"></div>
  <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script type="text/javascript" src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.bundle.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/js-cookie@rc/dist/js.cookie.min.js"></script>
  <div style="display:none;">
    <script id="_wauga9">var _wau = _wau || []; _wau.push(["small", "1bct79y7rk", "ga9"]);</script>
    <script async="" src="//waust.at/s.js"></script>
  </div>
  <script type="text/javascript" src="https://animes.vision/js/app.js"></script>
  <script type="text/javascript" src="https://animes.vision/v6/js/app.min.js"></script>
  <script type="text/javascript" src="https://animes.vision/v6/js/common.js"></script>
  <script type="text/javascript" src="https://animes.vision/v6/js/movie.js"></script>

  <script src="/vendor/livewire/livewire.js?id=21fa1dd78491a49255cd" data-turbo-eval="false"
    data-turbolinks-eval="false"></script>
  <script data-turbo-eval="false"
    data-turbolinks-eval="false">window.livewire = new Livewire(); window.Livewire = window.livewire; window.livewire_app_url = ''; window.livewire_token = 'kNp8FODuYIhU3aN0yqpqLBjJQcHggjKY8UUne7f4'; window.deferLoadingAlpine = function (callback) { window.addEventListener('livewire:load', function () { callback(); }); }; let started = false; window.addEventListener('alpine:initializing', function () { if (!started) { window.livewire.start(); started = true; } }); document.addEventListener("DOMContentLoaded", function () { if (!started) { window.livewire.start(); started = true; } });</script>
  <script>
    window.addEventListener('notificacao', event => {
      if (event.detail.tipo == 'success') {
        toastr.success(event.detail.mensagem, event.detail.titulo, {
          closeButton: true,
          progressBar: true,
          positionClass: "toast-bottom-right",
        });
      } else if (event.detail.tipo == 'error') {
        toastr.error(event.detail.mensagem, event.detail.titulo, {
          closeButton: true,
          progressBar: true,
          positionClass: "toast-bottom-right",
        });
      } else if (event.detail.tipo == 'warning') {
        toastr.warning(event.detail.mensagem, event.detail.titulo, {
          closeButton: true,
          progressBar: true,
          positionClass: "toast-bottom-right",
        });
      }
    });
  </script>
  <script id="syncData" type="application/json">
    {"page":"anime","name":"Strike the Blood 3","anime_id":1046,"mal_id":37449,"series_url":"https:\/\/animes.vision\/animes\/strike-the-blood-3","selector_position":"#mal-sync"}
</script>
  <script>
    var clickedLoadComment = false;

    $(document).ready(function () {

      // if (parseInt(userSettings.auto_play) === 1) {
      //     $('.quick-settings[data-option="auto_play"]').removeClass('off');
      // }
      // if (parseInt(userSettings.auto_next) === 1) {
      //     $('.quick-settings[data-option="auto_next"]').removeClass('off');
      // }

      $('.btn-load-comment').click(function () {
        clickedLoadComment = true;
        $(this).hide();
        loadDisqus();
      });

      var elmnt = document.getElementById("post-1046");
      elmnt.scrollIntoView();
    });

    var initDisqus = false;

    function loadDisqus() {
      let url = window.location.href;
      $('.btn-load-comment').hide();
      var disqus_config = function () {
        this.page.url = url;
      };

      (function () { // DON'T EDIT BELOW THIS LINE
        var d = document, s = d.createElement('script');
        s.src = 'https://animesvision-1.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
        initDisqus = true;
      })();
    }
    // $("")[0].scrollIntoView();
    // var elmnt = document.getElementsByClassName("ss-list ssl-item ep-item active");
    // elmnt.scrollIntoView();
    // console.log($(".ssl-item ep-item active").val());
  </script>


</body>

</html>
