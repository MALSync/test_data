<html lang="pt">

<head>
  <script type="text/javascript" charset="utf-8" async=""
    src="https://www.gstatic.com/cv/js/sender/v1/cast_sender.js?loadCastFramework=1"></script>
  <script type="text/javascript" charset="utf-8" async="" src="//ssl.p.jwpcdn.com/player/v/8.17.7/jwpsrv.js"></script>

  <meta name="csrf-token" content="kNp8FODuYIhU3aN0yqpqLBjJQcHggjKY8UUne7f4">
  <meta http-equiv="content-language" content="pt-br">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="robots" content="index,follow">
  <meta http-equiv="content-language" content="pt-br">
  <meta name="hilltopads-site-verification" content="0fdfe236e6fa584b210950db3b9a44dec2370d54">
  <meta name="propeller" content="02da3e1fffbfcdc63a4336e5e3142d97">
  <meta name="a.validate.02" content="-0tTj7OiNo58w7qpGRd8I7GhXLEvjLgyJvH3">
  <title>Assistir Strike the Blood 3 Episodio 04 - Animes Vision - Assistir Animes Online Grátis HD</title>
  <meta name="description"
    content="Assistir Strike the Blood 3 Episodio 04, Baixar Strike the Blood 3 Episodio 04 Animes Vision">
  <meta name="keywords"
    content="acao,fantasia,sobrenatural,ecchi, Strike the Blood 3Animes Vision, baixar Strike the Blood 3 animes vision">
  <meta property="article:published_time" content="2019-06-21 17:41:30">
  <meta property="article:section" content="Animes">
  <meta name="google-site-verification" content="WfHtIHgpKAIErWuzIFzYdVvgFnXBsjS2Q7HDfca4Xbc">
  <meta name="msvalidate.01" content="86CF0E4D516E4A44D36E8D43B35AB230">
  <meta name="pinterest" content="00ad7d282afdbbb749c81a6c5a32c0ab">
  <meta name="yandex-verification" content="264254be940fa95c">
  <meta name="robots" content="index,follow,noodp,noydir">
  <meta property="og:description"
    content="Assistir Strike the Blood 3 Episodio 04, Baixar Strike the Blood 3 Episodio 04 Animes Vision">
  <meta property="og:title" content="Assistir Strike the Blood 3 Episodio 04">
  <meta property="og:og:site_name" content="Animes Vision">
  <meta property="og:locale" content="pt-br">
  <meta property="og:type" content="video">
  <meta property="og:url" content="https://animes.vision/animes/strike-the-blood-3/episodio-04/legendado">
  <meta property="og:site_name" content="Animes Vision">
  <meta property="og:image" content="https://animes.vision/storage/capa/2YFQEqI9UwzOyAK3xTrvtWHcZx2OwmNnpBRI15Wq.jpg">
  <meta name="twitter:card" content="summary">
  <meta name="twitter:site" content="@animesvision">
  <script async="" src="//www.google-analytics.com/analytics.js"></script>
  <script
    type="application/ld+json">{"@context":"https:\/\/schema.org","@type":"WebPage","name":"Over 9000 Thousand!","description":"For those who helped create the Genki Dama"}</script>
  <link rel="alternate" type="application/rss+xml" title="RSS Feed" href="https://animes.vision/rss">

  <script>
    (function (i, s, o, g, r, a, m) {
      i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments)
      }, i[r].l = 1 * new Date(); a = s.createElement(o),
        m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

    ga('create', 'UA-133650552-1', 'auto');
    ga('send', 'pageview');

  </script>
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1">
  <meta name="apple-mobile-web-app-status-bar" content="#202125">
  <meta name="theme-color" content="#202125">
  <link rel="stylesheet" href="//stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <link rel="stylesheet" href="//use.fontawesome.com/releases/v5.3.1/css/all.css">
  <link rel="stylesheet" href="https://animes.vision/v6/css/styles.css">
  <link rel="canonical" href="https://animes.vision/animes/strike-the-blood-3/episodio-04/legendado">
  <style>
    [wire\:loading],
    [wire\:loading\.delay],
    [wire\:loading\.inline-block],
    [wire\:loading\.inline],
    [wire\:loading\.block],
    [wire\:loading\.flex],
    [wire\:loading\.table],
    [wire\:loading\.grid] {
      display: none;
    }

    [wire\:loading\.delay\.shortest],
    [wire\:loading\.delay\.shorter],
    [wire\:loading\.delay\.short],
    [wire\:loading\.delay\.long],
    [wire\:loading\.delay\.longer],
    [wire\:loading\.delay\.longest] {
      display: none;
    }

    [wire\:offline] {
      display: none;
    }

    [wire\:dirty]:not(textarea):not(input):not(select) {
      display: none;
    }

    input:-webkit-autofill,
    select:-webkit-autofill,
    textarea:-webkit-autofill {
      animation-duration: 50000s;
      animation-name: livewireautofill;
    }

    @keyframes livewireautofill {
      from {}
    }
  </style>
  <style>
    .page-novip {
      width: 100%;
      height: 100%;
      text-align: center;
      font-size: 26px;
      /* position: absolute; */
      display: block;
      min-height: 0;
      overflow: hidden;
      box-sizing: border-box;
      font-family: Arial, Helvetica, sans-serif;
      z-index: 1;
      background-image: url('/v6/images/fundo_novip.jpg');
      background-repeat: no-repeat;
      background-size: cover;
      color: white;
      padding: 23%;
    }
  </style>
  <script src="//ssl.p.jwpcdn.com/player/v/8.17.7/jwplayer.js" type="text/javascript"></script>
  <script type="text/javascript">jwplayer.key = "ITWMv7t88JGzI0xPwW8I0+LveiXX9SWbfdmt0ArUSyc=";</script>
  <style type="text/css">
    .resume {
      color: #fff;
      padding: 15px;
      bottom: 0px;
      position: absolute;
      width: 100%;
      text-align: center;
      font-family: Montserrat;
      background: #223a65;
    }

    .resume bt {
      padding: 10px;
      background: #337ab7;
      width: calc(100% / 2 - 10px);
      clear: both;
      display: inline-table;
      margin: 5px;
      border-radius: 4px;
      transition: 0.3s;
    }

    .resume-vip {
      color: #fff;
      padding: 15px;
      bottom: 0px;
      position: absolute;
      width: 100%;
      text-align: center;
      font-family: Montserrat;
      background: #223a65;
    }

    .resume-vip bt {
      padding: 10px;
      background: #337ab7;
      width: calc(100% / 2 - 10px);
      clear: both;
      display: inline-table;
      margin: 5px;
      border-radius: 4px;
      transition: 0.3s;
    }

    .resume bt:hover {
      cursor: pointer;
      transition: 0.3s;
      background: #fff;
      color: #000;
    }
  </style>
  <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "url": "https://animes.vision/",
        "potentialAction": {
            "@type": "SearchAction",
            "target": "https://animes.vision/search?nome={nome}",
            "query-input": "required name=nome"
        }
    }
</script>
  <script charset="utf-8" src="//ssl.p.jwpcdn.com/player/v/8.17.7/jwplayer.core.controls.html5.js"></script>
  <style type="text/css" data-jwplayer-id="all-players">
    .jw-reset {
      text-align: left;
      direction: ltr
    }

    .jw-reset-text,
    .jw-reset {
      color: inherit;
      background-color: transparent;
      padding: 0;
      margin: 0;
      float: none;
      font-family: Arial, Helvetica, sans-serif;
      font-size: 1em;
      line-height: 1em;
      list-style: none;
      text-transform: none;
      vertical-align: baseline;
      border: 0;
      font-variant: inherit;
      font-stretch: inherit;
      -webkit-tap-highlight-color: rgba(255, 255, 255, 0)
    }

    body .jw-error,
    body .jwplayer.jw-state-error {
      height: 100%;
      width: 100%
    }

    .jw-title {
      position: absolute;
      top: 0
    }

    .jw-background-color {
      background: rgba(0, 0, 0, 0.4)
    }

    .jw-text {
      color: rgba(255, 255, 255, 0.8)
    }

    .jw-knob {
      color: rgba(255, 255, 255, 0.8);
      background-color: #fff
    }

    .jw-button-color {
      color: rgba(255, 255, 255, 0.8)
    }

    :not(.jw-flag-touch) .jw-button-color:not(.jw-logo-button):focus,
    :not(.jw-flag-touch) .jw-button-color:not(.jw-logo-button):hover {
      color: #fff
    }

    .jw-toggle {
      color: #fff
    }

    .jw-toggle.jw-off {
      color: rgba(255, 255, 255, 0.8)
    }

    .jw-toggle.jw-off:focus {
      color: #fff
    }

    .jw-toggle:focus {
      outline: none
    }

    :not(.jw-flag-touch) .jw-toggle.jw-off:hover {
      color: #fff
    }

    .jw-rail {
      background: rgba(255, 255, 255, 0.3)
    }

    .jw-buffer {
      background: rgba(255, 255, 255, 0.3)
    }

    .jw-progress {
      background: #f2f2f2
    }

    .jw-time-tip,
    .jw-volume-tip {
      border: 0
    }

    .jw-slider-volume.jw-volume-tip.jw-background-color.jw-slider-vertical {
      background: none
    }

    .jw-skip {
      padding: .5em;
      outline: none
    }

    .jw-skip .jw-skiptext,
    .jw-skip .jw-skip-icon {
      color: rgba(255, 255, 255, 0.8)
    }

    .jw-skip.jw-skippable:hover .jw-skip-icon,
    .jw-skip.jw-skippable:focus .jw-skip-icon {
      color: #fff
    }

    .jw-icon-cast google-cast-launcher {
      --connected-color: #fff;
      --disconnected-color: rgba(255, 255, 255, 0.8)
    }

    .jw-icon-cast google-cast-launcher:focus {
      outline: none
    }

    .jw-icon-cast google-cast-launcher.jw-off {
      --connected-color: rgba(255, 255, 255, 0.8)
    }

    .jw-icon-cast:focus google-cast-launcher {
      --connected-color: #fff;
      --disconnected-color: #fff
    }

    .jw-icon-cast:hover google-cast-launcher {
      --connected-color: #fff;
      --disconnected-color: #fff
    }

    .jw-nextup-container {
      bottom: 2.5em;
      padding: 5px .5em
    }

    .jw-nextup {
      border-radius: 0
    }

    .jw-color-active {
      color: #fff;
      stroke: #fff;
      border-color: #fff
    }

    :not(.jw-flag-touch) .jw-color-active-hover:hover,
    :not(.jw-flag-touch) .jw-color-active-hover:focus {
      color: #fff;
      stroke: #fff;
      border-color: #fff
    }

    .jw-color-inactive {
      color: rgba(255, 255, 255, 0.8);
      stroke: rgba(255, 255, 255, 0.8);
      border-color: rgba(255, 255, 255, 0.8)
    }

    :not(.jw-flag-touch) .jw-color-inactive-hover:hover {
      color: rgba(255, 255, 255, 0.8);
      stroke: rgba(255, 255, 255, 0.8);
      border-color: rgba(255, 255, 255, 0.8)
    }

    .jw-option {
      color: rgba(255, 255, 255, 0.8)
    }

    .jw-option.jw-active-option {
      color: #fff;
      background-color: rgba(255, 255, 255, 0.1)
    }

    :not(.jw-flag-touch) .jw-option:hover {
      color: #fff
    }

    .jwplayer {
      width: 100%;
      font-size: 16px;
      position: relative;
      display: block;
      min-height: 0;
      overflow: hidden;
      box-sizing: border-box;
      font-family: Arial, Helvetica, sans-serif;
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none;
      outline: none
    }

    .jwplayer * {
      box-sizing: inherit
    }

    .jwplayer.jw-tab-focus:focus {
      outline: solid 2px #4d90fe
    }

    .jwplayer.jw-flag-aspect-mode {
      height: auto !important
    }

    .jwplayer.jw-flag-aspect-mode .jw-aspect {
      display: block
    }

    .jwplayer .jw-aspect {
      display: none
    }

    .jwplayer .jw-swf {
      outline: none
    }

    .jw-media,
    .jw-preview {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0
    }

    .jw-media {
      overflow: hidden;
      cursor: pointer
    }

    .jw-plugin {
      position: absolute;
      bottom: 66px
    }

    .jw-breakpoint-7 .jw-plugin {
      bottom: 132px
    }

    .jw-plugin .jw-banner {
      max-width: 100%;
      opacity: 0;
      cursor: pointer;
      position: absolute;
      margin: auto auto 0;
      left: 0;
      right: 0;
      bottom: 0;
      display: block
    }

    .jw-preview,
    .jw-captions,
    .jw-title {
      pointer-events: none
    }

    .jw-media,
    .jw-logo {
      pointer-events: all
    }

    .jw-wrapper {
      background-color: #000;
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0
    }

    .jw-hidden-accessibility {
      border: 0;
      clip: rect(0 0 0 0);
      height: 1px;
      margin: -1px;
      overflow: hidden;
      padding: 0;
      position: absolute;
      width: 1px
    }

    .jw-contract-trigger::before {
      content: "";
      overflow: hidden;
      width: 200%;
      height: 200%;
      display: block;
      position: absolute;
      top: 0;
      left: 0
    }

    .jwplayer .jw-media video {
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 100%;
      margin: auto;
      background: transparent;
      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
      -webkit-focus-ring-color: rgba(0, 0, 0, 0);
      outline: none
    }

    .jwplayer .jw-media video::-webkit-media-controls-start-playback-button {
      display: none
    }

    .jwplayer.jw-stretch-uniform .jw-media video {
      object-fit: contain
    }

    .jwplayer.jw-stretch-none .jw-media video {
      object-fit: none
    }

    .jwplayer.jw-stretch-fill .jw-media video {
      object-fit: cover
    }

    .jwplayer.jw-stretch-exactfit .jw-media video {
      object-fit: fill
    }

    .jw-preview {
      position: absolute;
      display: none;
      opacity: 1;
      visibility: visible;
      width: 100%;
      height: 100%;
      background: #000 no-repeat 50% 50%
    }

    .jwplayer .jw-preview,
    .jw-error .jw-preview {
      background-size: contain
    }

    .jw-stretch-none .jw-preview {
      background-size: auto auto
    }

    .jw-stretch-fill .jw-preview {
      background-size: cover
    }

    .jw-stretch-exactfit .jw-preview {
      background-size: 100% 100%
    }

    .jw-title {
      display: none;
      padding-top: 20px;
      width: 100%;
      z-index: 1
    }

    .jw-title-primary,
    .jw-title-secondary {
      color: #fff;
      padding-left: 20px;
      padding-right: 20px;
      padding-bottom: .5em;
      overflow: hidden;
      text-overflow: ellipsis;
      direction: unset;
      white-space: nowrap;
      width: 100%
    }

    .jw-title-primary {
      font-size: 1.625em
    }

    .jw-breakpoint-2 .jw-title-primary,
    .jw-breakpoint-3 .jw-title-primary {
      font-size: 1.5em
    }

    .jw-flag-small-player .jw-title-primary {
      font-size: 1.25em
    }

    .jw-breakpoint-0 .jw-ab-truncated .jw-title-primary,
    .jw-breakpoint-1 .jw-ab-truncated .jw-title-primary,
    .jw-breakpoint-2 .jw-ab-truncated .jw-title-primary {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
      padding-bottom: 0;
      margin-bottom: .5em;
      white-space: pre-wrap;
      line-height: 1.2
    }

    .jw-breakpoint-1 .jw-ab-truncated .jw-title-primary {
      font-size: 1.25em
    }

    .jw-breakpoint-0 .jw-ab-truncated .jw-title-primary {
      font-size: 1em
    }

    .jw-flag-small-player .jw-title-secondary,
    .jw-breakpoint-0 .jw-ab-truncated .jw-title-secondary,
    .jw-breakpoint-1 .jw-ab-truncated .jw-title-secondary,
    .jw-breakpoint-2 .jw-ab-truncated .jw-title-secondary,
    .jw-title-secondary:empty {
      display: none
    }

    .jw-captions {
      position: absolute;
      width: 100%;
      height: 100%;
      text-align: center;
      display: none;
      letter-spacing: normal;
      word-spacing: normal;
      text-transform: none;
      text-indent: 0;
      text-decoration: none;
      pointer-events: none;
      overflow: hidden;
      top: 0
    }

    .jw-captions.jw-captions-enabled {
      display: block
    }

    .jw-captions-window {
      display: none;
      padding: .25em;
      border-radius: .25em
    }

    .jw-captions-window.jw-captions-window-active {
      display: inline-block
    }

    .jw-captions-text {
      display: inline-block;
      color: #fff;
      background-color: #000;
      word-wrap: normal;
      word-break: normal;
      white-space: pre-line;
      font-style: normal;
      font-weight: normal;
      text-align: center;
      text-decoration: none
    }

    .jw-text-track-display {
      font-size: inherit;
      line-height: 1.5
    }

    .jw-text-track-cue {
      background-color: rgba(0, 0, 0, 0.5);
      color: #fff;
      padding: .1em .3em
    }

    .jwplayer video::-webkit-media-controls {
      display: none;
      justify-content: flex-start
    }

    .jwplayer video::-webkit-media-text-track-display {
      min-width: -webkit-min-content
    }

    .jwplayer video::cue {
      background-color: rgba(0, 0, 0, 0.5)
    }

    .jwplayer video::-webkit-media-controls-panel-container {
      display: none
    }

    .jwplayer:not(.jw-flag-controls-hidden):not(.jw-state-playing) .jw-captions,
    .jwplayer.jw-flag-media-audio.jw-state-playing .jw-captions,
    .jwplayer.jw-state-playing:not(.jw-flag-user-inactive):not(.jw-flag-controls-hidden) .jw-captions {
      max-height: calc(100% - 60px)
    }

    .jwplayer:not(.jw-flag-controls-hidden):not(.jw-state-playing):not(.jw-flag-ios-fullscreen) video::-webkit-media-text-track-container,
    .jwplayer.jw-flag-media-audio.jw-state-playing:not(.jw-flag-ios-fullscreen) video::-webkit-media-text-track-container,
    .jwplayer.jw-state-playing:not(.jw-flag-user-inactive):not(.jw-flag-controls-hidden):not(.jw-flag-ios-fullscreen) video::-webkit-media-text-track-container {
      max-height: calc(100% - 60px)
    }

    .jw-logo {
      position: absolute;
      margin: 20px;
      cursor: pointer;
      pointer-events: all;
      background-repeat: no-repeat;
      background-size: contain;
      top: auto;
      right: auto;
      left: auto;
      bottom: auto;
      outline: none
    }

    .jw-logo.jw-tab-focus:focus {
      outline: solid 2px #4d90fe
    }

    .jw-flag-audio-player .jw-logo {
      display: none
    }

    .jw-logo-top-right {
      top: 0;
      right: 0
    }

    .jw-logo-top-left {
      top: 0;
      left: 0
    }

    .jw-logo-bottom-left {
      left: 0
    }

    .jw-logo-bottom-right {
      right: 0
    }

    .jw-logo-bottom-left,
    .jw-logo-bottom-right {
      bottom: 44px;
      transition: bottom 150ms cubic-bezier(0, .25, .25, 1)
    }

    .jw-state-idle .jw-logo {
      z-index: 1
    }

    .jw-state-setup .jw-wrapper {
      background-color: inherit
    }

    .jw-state-setup .jw-logo,
    .jw-state-setup .jw-controls,
    .jw-state-setup .jw-controls-backdrop {
      visibility: hidden
    }

    span.jw-break {
      display: block
    }

    body .jw-error,
    body .jwplayer.jw-state-error {
      background-color: #333;
      color: #fff;
      font-size: 16px;
      display: table;
      opacity: 1;
      position: relative
    }

    body .jw-error .jw-display,
    body .jwplayer.jw-state-error .jw-display {
      display: none
    }

    body .jw-error .jw-media,
    body .jwplayer.jw-state-error .jw-media {
      cursor: default
    }

    body .jw-error .jw-preview,
    body .jwplayer.jw-state-error .jw-preview {
      background-color: #333
    }

    body .jw-error .jw-error-msg,
    body .jwplayer.jw-state-error .jw-error-msg {
      background-color: #000;
      border-radius: 2px;
      display: flex;
      flex-direction: row;
      align-items: stretch;
      padding: 20px
    }

    body .jw-error .jw-error-msg .jw-icon,
    body .jwplayer.jw-state-error .jw-error-msg .jw-icon {
      height: 30px;
      width: 30px;
      margin-right: 20px;
      flex: 0 0 auto;
      align-self: center
    }

    body .jw-error .jw-error-msg .jw-icon:empty,
    body .jwplayer.jw-state-error .jw-error-msg .jw-icon:empty {
      display: none
    }

    body .jw-error .jw-error-msg .jw-info-container,
    body .jwplayer.jw-state-error .jw-error-msg .jw-info-container {
      margin: 0;
      padding: 0
    }

    body .jw-error:not(.jw-flag-audio-player).jw-flag-small-player .jw-error-msg,
    body .jwplayer.jw-state-error:not(.jw-flag-audio-player).jw-flag-small-player .jw-error-msg,
    body .jw-error:not(.jw-flag-audio-player).jw-breakpoint-2 .jw-error-msg,
    body .jwplayer.jw-state-error:not(.jw-flag-audio-player).jw-breakpoint-2 .jw-error-msg {
      flex-direction: column
    }

    body .jw-error:not(.jw-flag-audio-player).jw-flag-small-player .jw-error-msg .jw-error-text,
    body .jwplayer.jw-state-error:not(.jw-flag-audio-player).jw-flag-small-player .jw-error-msg .jw-error-text,
    body .jw-error:not(.jw-flag-audio-player).jw-breakpoint-2 .jw-error-msg .jw-error-text,
    body .jwplayer.jw-state-error:not(.jw-flag-audio-player).jw-breakpoint-2 .jw-error-msg .jw-error-text {
      text-align: center
    }

    body .jw-error:not(.jw-flag-audio-player).jw-flag-small-player .jw-error-msg .jw-icon,
    body .jwplayer.jw-state-error:not(.jw-flag-audio-player).jw-flag-small-player .jw-error-msg .jw-icon,
    body .jw-error:not(.jw-flag-audio-player).jw-breakpoint-2 .jw-error-msg .jw-icon,
    body .jwplayer.jw-state-error:not(.jw-flag-audio-player).jw-breakpoint-2 .jw-error-msg .jw-icon {
      flex: .5 0 auto;
      margin-right: 0;
      margin-bottom: 20px
    }

    .jwplayer.jw-state-error.jw-flag-audio-player .jw-error-msg .jw-break,
    .jwplayer.jw-state-error.jw-flag-small-player .jw-error-msg .jw-break,
    .jwplayer.jw-state-error.jw-breakpoint-2 .jw-error-msg .jw-break {
      display: inline
    }

    .jwplayer.jw-state-error.jw-flag-audio-player .jw-error-msg .jw-break:before,
    .jwplayer.jw-state-error.jw-flag-small-player .jw-error-msg .jw-break:before,
    .jwplayer.jw-state-error.jw-breakpoint-2 .jw-error-msg .jw-break:before {
      content: " "
    }

    .jwplayer.jw-state-error.jw-flag-audio-player .jw-error-msg {
      height: 100%;
      width: 100%;
      top: 0;
      position: absolute;
      left: 0;
      background: #000;
      -webkit-transform: none;
      transform: none;
      padding: 4px 16px;
      z-index: 1
    }

    .jwplayer.jw-state-error.jw-flag-audio-player .jw-error-msg.jw-info-overlay {
      max-width: none;
      max-height: none
    }

    body .jwplayer.jw-state-error .jw-title,
    .jw-state-idle .jw-title,
    .jwplayer.jw-state-complete:not(.jw-flag-casting):not(.jw-flag-audio-player):not(.jw-flag-overlay-open-related) .jw-title {
      display: block
    }

    body .jwplayer.jw-state-error .jw-preview,
    .jw-state-idle .jw-preview,
    .jwplayer.jw-state-complete:not(.jw-flag-casting):not(.jw-flag-audio-player):not(.jw-flag-overlay-open-related) .jw-preview {
      display: block
    }

    .jw-state-idle .jw-captions,
    .jwplayer.jw-state-complete .jw-captions,
    body .jwplayer.jw-state-error .jw-captions {
      display: none
    }

    .jw-state-idle video::-webkit-media-text-track-container,
    .jwplayer.jw-state-complete video::-webkit-media-text-track-container,
    body .jwplayer.jw-state-error video::-webkit-media-text-track-container {
      display: none
    }

    .jwplayer.jw-flag-fullscreen {
      width: 100% !important;
      height: 100% !important;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: 1000;
      margin: 0;
      position: fixed
    }

    body .jwplayer.jw-flag-flash-blocked .jw-title {
      display: block
    }

    .jwplayer.jw-flag-controls-hidden .jw-media {
      cursor: default
    }

    .jw-flag-audio-player:not(.jw-flag-flash-blocked) .jw-media {
      visibility: hidden
    }

    .jw-flag-audio-player .jw-title {
      background: none
    }

    .jw-flag-audio-player object {
      min-height: 45px
    }

    .jw-flag-floating {
      background-size: cover;
      background-color: #000
    }

    .jw-flag-floating .jw-wrapper {
      position: fixed;
      z-index: 2147483647;
      -webkit-animation: jw-float-to-bottom 150ms cubic-bezier(0, .25, .25, 1) forwards 1;
      animation: jw-float-to-bottom 150ms cubic-bezier(0, .25, .25, 1) forwards 1;
      top: auto;
      bottom: 1rem;
      left: auto;
      right: 1rem;
      max-width: 400px;
      max-height: 400px;
      margin: 0 auto
    }

    @media screen and (max-width:480px) {
      .jw-flag-floating .jw-wrapper {
        width: 100%;
        left: 0;
        right: 0
      }
    }

    .jw-flag-floating .jw-wrapper .jw-media {
      touch-action: none
    }

    @media screen and (max-device-width:480px) and (orientation:portrait) {
      .jw-flag-touch.jw-flag-floating .jw-wrapper {
        -webkit-animation: none;
        animation: none;
        top: 62px;
        bottom: auto;
        left: 0;
        right: 0;
        max-width: none;
        max-height: none
      }
    }

    .jw-flag-floating .jw-float-icon {
      pointer-events: all;
      cursor: pointer;
      display: none
    }

    .jw-flag-floating .jw-float-icon .jw-svg-icon {
      -webkit-filter: drop-shadow(0 0 1px #000);
      filter: drop-shadow(0 0 1px #000)
    }

    .jw-flag-floating.jw-floating-dismissible .jw-dismiss-icon {
      display: none
    }

    .jw-flag-floating.jw-floating-dismissible.jw-flag-ads .jw-float-icon {
      display: flex
    }

    .jw-flag-floating.jw-floating-dismissible.jw-state-paused .jw-logo,
    .jw-flag-floating.jw-floating-dismissible:not(.jw-flag-user-inactive) .jw-logo {
      display: none
    }

    .jw-flag-floating.jw-floating-dismissible.jw-state-paused .jw-float-icon,
    .jw-flag-floating.jw-floating-dismissible:not(.jw-flag-user-inactive) .jw-float-icon {
      display: flex
    }

    .jw-float-icon {
      display: none;
      position: absolute;
      top: 3px;
      right: 5px;
      align-items: center;
      justify-content: center
    }

    @-webkit-keyframes jw-float-to-bottom {
      from {
        -webkit-transform: translateY(100%);
        transform: translateY(100%)
      }

      to {
        -webkit-transform: translateY(0);
        transform: translateY(0)
      }
    }

    @keyframes jw-float-to-bottom {
      from {
        -webkit-transform: translateY(100%);
        transform: translateY(100%)
      }

      to {
        -webkit-transform: translateY(0);
        transform: translateY(0)
      }
    }

    .jw-flag-top {
      margin-top: 2em;
      overflow: visible
    }

    .jw-top {
      height: 2em;
      line-height: 2;
      pointer-events: none;
      text-align: center;
      opacity: .8;
      position: absolute;
      top: -2em;
      width: 100%
    }

    .jw-top .jw-icon {
      cursor: pointer;
      pointer-events: all;
      height: auto;
      width: auto
    }

    .jw-top .jw-text {
      color: #555
    }

    .jw-overlays,
    .jw-controls,
    .jw-controls-backdrop,
    .jw-flag-small-player .jw-settings-menu,
    .jw-settings-submenu {
      height: 100%;
      width: 100%
    }

    .jw-settings-menu .jw-icon::after,
    .jw-icon-settings::after,
    .jw-icon-volume::after,
    .jw-settings-menu .jw-icon.jw-button-color::after {
      position: absolute;
      right: 0
    }

    .jw-overlays,
    .jw-controls,
    .jw-controls-backdrop,
    .jw-settings-item-active::before {
      top: 0;
      position: absolute;
      left: 0
    }

    .jw-settings-menu .jw-icon::after,
    .jw-icon-settings::after,
    .jw-icon-volume::after,
    .jw-settings-menu .jw-icon.jw-button-color::after {
      position: absolute;
      bottom: 0;
      left: 0
    }

    .jw-nextup-close {
      position: absolute;
      top: 0;
      right: 0
    }

    .jw-overlays,
    .jw-controls,
    .jw-flag-small-player .jw-settings-menu {
      position: absolute;
      bottom: 0;
      right: 0
    }

    .jw-settings-menu .jw-icon::after,
    .jw-icon-settings::after,
    .jw-icon-volume::after,
    .jw-time-tip::after,
    .jw-settings-menu .jw-icon.jw-button-color::after,
    .jw-text-live::before,
    .jw-controlbar .jw-tooltip::after,
    .jw-settings-menu .jw-tooltip::after {
      content: "";
      display: block
    }

    .jw-svg-icon {
      height: 24px;
      width: 24px;
      fill: currentColor;
      pointer-events: none
    }

    .jw-icon {
      height: 44px;
      width: 44px;
      background-color: transparent;
      outline: none
    }

    .jw-icon.jw-tab-focus:focus {
      border: solid 2px #4d90fe
    }

    .jw-icon-airplay .jw-svg-icon-airplay-off {
      display: none
    }

    .jw-off.jw-icon-airplay .jw-svg-icon-airplay-off {
      display: block
    }

    .jw-icon-airplay .jw-svg-icon-airplay-on {
      display: block
    }

    .jw-off.jw-icon-airplay .jw-svg-icon-airplay-on {
      display: none
    }

    .jw-icon-cc .jw-svg-icon-cc-off {
      display: none
    }

    .jw-off.jw-icon-cc .jw-svg-icon-cc-off {
      display: block
    }

    .jw-icon-cc .jw-svg-icon-cc-on {
      display: block
    }

    .jw-off.jw-icon-cc .jw-svg-icon-cc-on {
      display: none
    }

    .jw-icon-fullscreen .jw-svg-icon-fullscreen-off {
      display: none
    }

    .jw-off.jw-icon-fullscreen .jw-svg-icon-fullscreen-off {
      display: block
    }

    .jw-icon-fullscreen .jw-svg-icon-fullscreen-on {
      display: block
    }

    .jw-off.jw-icon-fullscreen .jw-svg-icon-fullscreen-on {
      display: none
    }

    .jw-icon-volume .jw-svg-icon-volume-0 {
      display: none
    }

    .jw-off.jw-icon-volume .jw-svg-icon-volume-0 {
      display: block
    }

    .jw-icon-volume .jw-svg-icon-volume-100 {
      display: none
    }

    .jw-full.jw-icon-volume .jw-svg-icon-volume-100 {
      display: block
    }

    .jw-icon-volume .jw-svg-icon-volume-50 {
      display: block
    }

    .jw-off.jw-icon-volume .jw-svg-icon-volume-50,
    .jw-full.jw-icon-volume .jw-svg-icon-volume-50 {
      display: none
    }

    .jw-settings-menu .jw-icon::after,
    .jw-icon-settings::after,
    .jw-icon-volume::after {
      height: 100%;
      width: 24px;
      box-shadow: inset 0 -3px 0 -1px currentColor;
      margin: auto;
      opacity: 0;
      transition: opacity 150ms cubic-bezier(0, .25, .25, 1)
    }

    .jw-settings-menu .jw-icon[aria-checked="true"]::after,
    .jw-settings-open .jw-icon-settings::after,
    .jw-icon-volume.jw-open::after {
      opacity: 1
    }

    .jwplayer.jw-breakpoint--1:not(.jw-flag-audio-player) .jw-icon-cc,
    .jwplayer.jw-breakpoint--1:not(.jw-flag-audio-player) .jw-icon-settings,
    .jwplayer.jw-breakpoint--1:not(.jw-flag-audio-player) .jw-icon-audio-tracks,
    .jwplayer.jw-breakpoint--1:not(.jw-flag-audio-player) .jw-icon-hd,
    .jwplayer.jw-breakpoint--1:not(.jw-flag-audio-player) .jw-settings-sharing,
    .jwplayer.jw-breakpoint--1:not(.jw-flag-audio-player) .jw-icon-fullscreen,
    .jwplayer.jw-breakpoint--1:not(.jw-flag-audio-player).jw-flag-cast-available .jw-icon-airplay,
    .jwplayer.jw-breakpoint--1:not(.jw-flag-audio-player).jw-flag-cast-available .jw-icon-cast {
      display: none
    }

    .jwplayer.jw-breakpoint--1:not(.jw-flag-audio-player) .jw-icon-volume,
    .jwplayer.jw-breakpoint--1:not(.jw-flag-audio-player) .jw-text-live {
      bottom: 6px
    }

    .jwplayer.jw-breakpoint--1:not(.jw-flag-audio-player) .jw-icon-volume::after {
      display: none
    }

    .jw-overlays,
    .jw-controls {
      pointer-events: none
    }

    .jw-controls-backdrop {
      display: block;
      background: linear-gradient(to bottom, transparent, rgba(0, 0, 0, 0.4) 77%, rgba(0, 0, 0, 0.4) 100%) 100% 100% / 100% 240px no-repeat transparent;
      transition: opacity 250ms cubic-bezier(0, .25, .25, 1), background-size 250ms cubic-bezier(0, .25, .25, 1);
      pointer-events: none
    }

    .jw-overlays {
      cursor: auto
    }

    .jw-controls {
      overflow: hidden
    }

    .jw-flag-small-player .jw-controls {
      text-align: center
    }

    .jw-text {
      height: 1em;
      font-family: Arial, Helvetica, sans-serif;
      font-size: .75em;
      font-style: normal;
      font-weight: normal;
      color: #fff;
      text-align: center;
      font-variant: normal;
      font-stretch: normal
    }

    .jw-controlbar,
    .jw-skip,
    .jw-display-icon-container .jw-icon,
    .jw-nextup-container,
    .jw-autostart-mute,
    .jw-overlays .jw-plugin {
      pointer-events: all
    }

    .jwplayer .jw-display-icon-container,
    .jw-error .jw-display-icon-container {
      width: auto;
      height: auto;
      box-sizing: content-box
    }

    .jw-display {
      display: table;
      height: 100%;
      padding: 57px 0;
      position: relative;
      width: 100%
    }

    .jw-flag-dragging .jw-display {
      display: none
    }

    .jw-state-idle:not(.jw-flag-cast-available) .jw-display {
      padding: 0
    }

    .jw-display-container {
      display: table-cell;
      height: 100%;
      text-align: center;
      vertical-align: middle
    }

    .jw-display-controls {
      display: inline-block
    }

    .jwplayer .jw-display-icon-container {
      float: left
    }

    .jw-display-icon-container {
      display: inline-block;
      padding: 5.5px;
      margin: 0 22px
    }

    .jw-display-icon-container .jw-icon {
      height: 75px;
      width: 75px;
      cursor: pointer;
      display: flex;
      justify-content: center;
      align-items: center
    }

    .jw-display-icon-container .jw-icon .jw-svg-icon {
      height: 33px;
      width: 33px;
      padding: 0;
      position: relative
    }

    .jw-display-icon-container .jw-icon .jw-svg-icon-rewind {
      padding: .2em .05em
    }

    .jw-breakpoint--1 .jw-nextup-container {
      display: none
    }

    .jw-breakpoint-0 .jw-display-icon-next,
    .jw-breakpoint--1 .jw-display-icon-next,
    .jw-breakpoint-0 .jw-display-icon-rewind,
    .jw-breakpoint--1 .jw-display-icon-rewind {
      display: none
    }

    .jw-breakpoint-0.jw-flag-touch .jw-display .jw-icon,
    .jw-breakpoint--1.jw-flag-touch .jw-display .jw-icon,
    .jw-breakpoint-0.jw-flag-touch .jw-display .jw-svg-icon,
    .jw-breakpoint--1.jw-flag-touch .jw-display .jw-svg-icon {
      z-index: 100;
      position: relative
    }

    .jw-breakpoint-0 .jw-display .jw-icon,
    .jw-breakpoint--1 .jw-display .jw-icon,
    .jw-breakpoint-0 .jw-display .jw-svg-icon,
    .jw-breakpoint--1 .jw-display .jw-svg-icon {
      width: 44px;
      height: 44px;
      line-height: 44px
    }

    .jw-breakpoint-0 .jw-display .jw-icon:before,
    .jw-breakpoint--1 .jw-display .jw-icon:before,
    .jw-breakpoint-0 .jw-display .jw-svg-icon:before,
    .jw-breakpoint--1 .jw-display .jw-svg-icon:before {
      width: 22px;
      height: 22px
    }

    .jw-breakpoint-1 .jw-display .jw-icon,
    .jw-breakpoint-1 .jw-display .jw-svg-icon {
      width: 44px;
      height: 44px;
      line-height: 44px
    }

    .jw-breakpoint-1 .jw-display .jw-icon:before,
    .jw-breakpoint-1 .jw-display .jw-svg-icon:before {
      width: 22px;
      height: 22px
    }

    .jw-breakpoint-1 .jw-display .jw-icon.jw-icon-rewind:before {
      width: 33px;
      height: 33px
    }

    .jw-breakpoint-2 .jw-display .jw-icon,
    .jw-breakpoint-3 .jw-display .jw-icon,
    .jw-breakpoint-2 .jw-display .jw-svg-icon,
    .jw-breakpoint-3 .jw-display .jw-svg-icon {
      width: 77px;
      height: 77px;
      line-height: 77px
    }

    .jw-breakpoint-2 .jw-display .jw-icon:before,
    .jw-breakpoint-3 .jw-display .jw-icon:before,
    .jw-breakpoint-2 .jw-display .jw-svg-icon:before,
    .jw-breakpoint-3 .jw-display .jw-svg-icon:before {
      width: 38.5px;
      height: 38.5px
    }

    .jw-breakpoint-4 .jw-display .jw-icon,
    .jw-breakpoint-5 .jw-display .jw-icon,
    .jw-breakpoint-6 .jw-display .jw-icon,
    .jw-breakpoint-7 .jw-display .jw-icon,
    .jw-breakpoint-4 .jw-display .jw-svg-icon,
    .jw-breakpoint-5 .jw-display .jw-svg-icon,
    .jw-breakpoint-6 .jw-display .jw-svg-icon,
    .jw-breakpoint-7 .jw-display .jw-svg-icon {
      width: 88px;
      height: 88px;
      line-height: 88px
    }

    .jw-breakpoint-4 .jw-display .jw-icon:before,
    .jw-breakpoint-5 .jw-display .jw-icon:before,
    .jw-breakpoint-6 .jw-display .jw-icon:before,
    .jw-breakpoint-7 .jw-display .jw-icon:before,
    .jw-breakpoint-4 .jw-display .jw-svg-icon:before,
    .jw-breakpoint-5 .jw-display .jw-svg-icon:before,
    .jw-breakpoint-6 .jw-display .jw-svg-icon:before,
    .jw-breakpoint-7 .jw-display .jw-svg-icon:before {
      width: 44px;
      height: 44px
    }

    .jw-controlbar {
      display: flex;
      flex-flow: row wrap;
      align-items: center;
      justify-content: center;
      position: absolute;
      left: 0;
      bottom: 0;
      width: 100%;
      border: none;
      border-radius: 0;
      background-size: auto;
      box-shadow: none;
      max-height: 72px;
      transition: 250ms cubic-bezier(0, .25, .25, 1);
      transition-property: opacity, visibility;
      transition-delay: 0s
    }

    .jw-flag-touch.jw-breakpoint-0 .jw-controlbar .jw-icon-inline {
      height: 40px
    }

    .jw-breakpoint-7 .jw-controlbar {
      max-height: 140px
    }

    .jw-breakpoint-7 .jw-controlbar .jw-button-container {
      padding: 0 48px 20px
    }

    .jw-breakpoint-7 .jw-controlbar .jw-button-container .jw-tooltip {
      margin-bottom: -7px
    }

    .jw-breakpoint-7 .jw-controlbar .jw-button-container .jw-icon-volume .jw-overlay {
      padding-bottom: 40%
    }

    .jw-breakpoint-7 .jw-controlbar .jw-button-container .jw-text {
      font-size: 1em
    }

    .jw-breakpoint-7 .jw-controlbar .jw-button-container .jw-text.jw-text-elapsed {
      justify-content: flex-end
    }

    .jw-breakpoint-7 .jw-controlbar .jw-button-container .jw-icon-inline:not(.jw-text-live),
    .jw-breakpoint-7 .jw-controlbar .jw-button-container .jw-icon-volume {
      height: 60px;
      width: 60px
    }

    .jw-breakpoint-7 .jw-controlbar .jw-button-container .jw-icon-inline:not(.jw-text-live) .jw-svg-icon,
    .jw-breakpoint-7 .jw-controlbar .jw-button-container .jw-icon-volume .jw-svg-icon {
      height: 30px;
      width: 30px
    }

    .jw-breakpoint-7 .jw-controlbar .jw-slider-time {
      padding: 0 60px;
      height: 34px
    }

    .jw-breakpoint-7 .jw-controlbar .jw-slider-time .jw-slider-container {
      height: 10px
    }

    .jw-controlbar .jw-button-image {
      background: no-repeat 50% 50%;
      background-size: contain;
      max-height: 24px
    }

    .jw-controlbar .jw-spacer {
      flex: 1 1 auto;
      align-self: stretch
    }

    .jw-controlbar .jw-icon.jw-button-color:hover {
      color: #fff
    }

    .jw-button-container {
      display: flex;
      flex-flow: row nowrap;
      flex: 1 1 auto;
      align-items: center;
      justify-content: center;
      width: 100%;
      padding: 0 12px
    }

    .jw-slider-horizontal {
      background-color: transparent
    }

    .jw-icon-inline {
      position: relative
    }

    .jw-icon-inline,
    .jw-icon-tooltip {
      height: 44px;
      width: 44px;
      align-items: center;
      display: flex;
      justify-content: center
    }

    .jw-icon-inline:not(.jw-text),
    .jw-icon-tooltip,
    .jw-slider-horizontal {
      cursor: pointer
    }

    .jw-text-elapsed,
    .jw-text-duration {
      justify-content: flex-start;
      width: -webkit-fit-content;
      width: -moz-fit-content;
      width: fit-content
    }

    .jw-icon-tooltip {
      position: relative
    }

    .jw-knob:hover,
    .jw-icon-inline:hover,
    .jw-icon-tooltip:hover,
    .jw-icon-display:hover,
    .jw-option:before:hover {
      color: #fff
    }

    .jw-time-tip,
    .jw-controlbar .jw-tooltip,
    .jw-settings-menu .jw-tooltip {
      pointer-events: none
    }

    .jw-icon-cast {
      display: none;
      margin: 0;
      padding: 0
    }

    .jw-icon-cast google-cast-launcher {
      background-color: transparent;
      border: none;
      padding: 0;
      width: 24px;
      height: 24px;
      cursor: pointer
    }

    .jw-icon-inline.jw-icon-volume {
      display: none
    }

    .jwplayer .jw-text-countdown {
      display: none
    }

    .jw-flag-small-player .jw-display {
      padding-top: 0;
      padding-bottom: 0
    }

    .jw-flag-small-player:not(.jw-flag-audio-player):not(.jw-flag-ads) .jw-controlbar .jw-button-container>.jw-icon-rewind,
    .jw-flag-small-player:not(.jw-flag-audio-player):not(.jw-flag-ads) .jw-controlbar .jw-button-container>.jw-icon-next,
    .jw-flag-small-player:not(.jw-flag-audio-player):not(.jw-flag-ads) .jw-controlbar .jw-button-container>.jw-icon-playback {
      display: none
    }

    .jw-flag-ads-vpaid:not(.jw-flag-media-audio):not(.jw-flag-audio-player):not(.jw-flag-ads-vpaid-controls):not(.jw-flag-casting) .jw-controlbar,
    .jw-flag-user-inactive.jw-state-playing:not(.jw-flag-media-audio):not(.jw-flag-audio-player):not(.jw-flag-ads-vpaid-controls):not(.jw-flag-casting) .jw-controlbar,
    .jw-flag-user-inactive.jw-state-buffering:not(.jw-flag-media-audio):not(.jw-flag-audio-player):not(.jw-flag-ads-vpaid-controls):not(.jw-flag-casting) .jw-controlbar {
      visibility: hidden;
      pointer-events: none;
      opacity: 0;
      transition-delay: 0s, 250ms
    }

    .jw-flag-ads-vpaid:not(.jw-flag-media-audio):not(.jw-flag-audio-player):not(.jw-flag-ads-vpaid-controls):not(.jw-flag-casting) .jw-controls-backdrop,
    .jw-flag-user-inactive.jw-state-playing:not(.jw-flag-media-audio):not(.jw-flag-audio-player):not(.jw-flag-ads-vpaid-controls):not(.jw-flag-casting) .jw-controls-backdrop,
    .jw-flag-user-inactive.jw-state-buffering:not(.jw-flag-media-audio):not(.jw-flag-audio-player):not(.jw-flag-ads-vpaid-controls):not(.jw-flag-casting) .jw-controls-backdrop {
      opacity: 0
    }

    .jwplayer:not(.jw-flag-ads):not(.jw-flag-live).jw-breakpoint-0 .jw-text-countdown {
      display: flex
    }

    .jwplayer:not(.jw-flag-ads):not(.jw-flag-live).jw-breakpoint--1 .jw-text-elapsed,
    .jwplayer:not(.jw-flag-ads):not(.jw-flag-live).jw-breakpoint-0 .jw-text-elapsed,
    .jwplayer:not(.jw-flag-ads):not(.jw-flag-live).jw-breakpoint--1 .jw-text-duration,
    .jwplayer:not(.jw-flag-ads):not(.jw-flag-live).jw-breakpoint-0 .jw-text-duration {
      display: none
    }

    .jwplayer.jw-breakpoint--1:not(.jw-flag-ads):not(.jw-flag-audio-player) .jw-text-countdown,
    .jwplayer.jw-breakpoint--1:not(.jw-flag-ads):not(.jw-flag-audio-player) .jw-related-btn,
    .jwplayer.jw-breakpoint--1:not(.jw-flag-ads):not(.jw-flag-audio-player) .jw-slider-volume {
      display: none
    }

    .jwplayer.jw-breakpoint--1:not(.jw-flag-ads):not(.jw-flag-audio-player) .jw-controlbar {
      flex-direction: column-reverse
    }

    .jwplayer.jw-breakpoint--1:not(.jw-flag-ads):not(.jw-flag-audio-player) .jw-button-container {
      height: 30px
    }

    .jw-breakpoint--1.jw-flag-ads:not(.jw-flag-audio-player) .jw-icon-volume,
    .jw-breakpoint--1.jw-flag-ads:not(.jw-flag-audio-player) .jw-icon-fullscreen {
      display: none
    }

    .jwplayer:not(.jw-breakpoint-0) .jw-text-duration:before,
    .jwplayer:not(.jw-breakpoint--1) .jw-text-duration:before {
      content: "/";
      padding-right: 1ch;
      padding-left: 1ch
    }

    .jwplayer:not(.jw-flag-user-inactive) .jw-controlbar {
      will-change: transform
    }

    .jwplayer:not(.jw-flag-user-inactive) .jw-controlbar .jw-text {
      -webkit-transform-style: preserve-3d;
      transform-style: preserve-3d
    }

    .jw-slider-container {
      display: flex;
      align-items: center;
      position: relative;
      touch-action: none
    }

    .jw-rail,
    .jw-buffer,
    .jw-progress {
      position: absolute;
      cursor: pointer
    }

    .jw-progress {
      background-color: #f2f2f2
    }

    .jw-rail {
      background-color: rgba(255, 255, 255, 0.3)
    }

    .jw-buffer {
      background-color: rgba(255, 255, 255, 0.3)
    }

    .jw-knob {
      height: 13px;
      width: 13px;
      background-color: #fff;
      border-radius: 50%;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);
      opacity: 1;
      pointer-events: none;
      position: absolute;
      -webkit-transform: translate(-50%, -50%) scale(0);
      transform: translate(-50%, -50%) scale(0);
      transition: 150ms cubic-bezier(0, .25, .25, 1);
      transition-property: opacity, -webkit-transform;
      transition-property: opacity, transform;
      transition-property: opacity, transform, -webkit-transform
    }

    .jw-flag-dragging .jw-slider-time .jw-knob,
    .jw-icon-volume:active .jw-slider-volume .jw-knob {
      box-shadow: 0 0 26px rgba(0, 0, 0, 0.2), 0 0 10px rgba(0, 0, 0, 0.4), 0 0 0 6px rgba(255, 255, 255, 0.2)
    }

    .jw-slider-horizontal,
    .jw-slider-vertical {
      display: flex
    }

    .jw-slider-horizontal .jw-slider-container {
      height: 5px;
      width: 100%
    }

    .jw-slider-horizontal .jw-rail,
    .jw-slider-horizontal .jw-buffer,
    .jw-slider-horizontal .jw-progress,
    .jw-slider-horizontal .jw-cue,
    .jw-slider-horizontal .jw-knob {
      top: 50%
    }

    .jw-slider-horizontal .jw-rail,
    .jw-slider-horizontal .jw-buffer,
    .jw-slider-horizontal .jw-progress,
    .jw-slider-horizontal .jw-cue {
      -webkit-transform: translate(0, -50%);
      transform: translate(0, -50%)
    }

    .jw-slider-horizontal .jw-rail,
    .jw-slider-horizontal .jw-buffer,
    .jw-slider-horizontal .jw-progress {
      height: 5px
    }

    .jw-slider-horizontal .jw-rail {
      width: 100%
    }

    .jw-slider-vertical {
      align-items: center;
      flex-direction: column
    }

    .jw-slider-vertical .jw-slider-container {
      height: 88px;
      width: 5px
    }

    .jw-slider-vertical .jw-rail,
    .jw-slider-vertical .jw-buffer,
    .jw-slider-vertical .jw-progress,
    .jw-slider-vertical .jw-knob {
      left: 50%
    }

    .jw-slider-vertical .jw-rail,
    .jw-slider-vertical .jw-buffer,
    .jw-slider-vertical .jw-progress {
      height: 100%;
      width: 5px;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      -webkit-transform: translate(-50%, 0);
      transform: translate(-50%, 0);
      transition: -webkit-transform 150ms ease-in-out;
      transition: transform 150ms ease-in-out;
      transition: transform 150ms ease-in-out, -webkit-transform 150ms ease-in-out;
      bottom: 0
    }

    .jw-slider-vertical .jw-knob {
      -webkit-transform: translate(-50%, 50%);
      transform: translate(-50%, 50%)
    }

    .jw-slider-time.jw-tab-focus:focus .jw-rail {
      outline: solid 2px #4d90fe
    }

    .jw-slider-time,
    .jw-flag-audio-player .jw-slider-volume {
      height: 17px;
      width: 100%;
      align-items: center;
      background: transparent none;
      padding: 0 12px
    }

    .jw-slider-time .jw-cue {
      background-color: rgba(33, 33, 33, 0.8);
      cursor: pointer;
      position: absolute;
      width: 6px
    }

    .jw-slider-time,
    .jw-horizontal-volume-container {
      z-index: 1;
      outline: none
    }

    .jw-slider-time .jw-rail,
    .jw-horizontal-volume-container .jw-rail,
    .jw-slider-time .jw-buffer,
    .jw-horizontal-volume-container .jw-buffer,
    .jw-slider-time .jw-progress,
    .jw-horizontal-volume-container .jw-progress,
    .jw-slider-time .jw-cue,
    .jw-horizontal-volume-container .jw-cue {
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      height: 100%;
      -webkit-transform: translate(0, -50%) scale(1, .6);
      transform: translate(0, -50%) scale(1, .6);
      transition: -webkit-transform 150ms ease-in-out;
      transition: transform 150ms ease-in-out;
      transition: transform 150ms ease-in-out, -webkit-transform 150ms ease-in-out
    }

    .jw-slider-time:hover .jw-rail,
    .jw-horizontal-volume-container:hover .jw-rail,
    .jw-slider-time:focus .jw-rail,
    .jw-horizontal-volume-container:focus .jw-rail,
    .jw-flag-dragging .jw-slider-time .jw-rail,
    .jw-flag-dragging .jw-horizontal-volume-container .jw-rail,
    .jw-flag-touch .jw-slider-time .jw-rail,
    .jw-flag-touch .jw-horizontal-volume-container .jw-rail,
    .jw-slider-time:hover .jw-buffer,
    .jw-horizontal-volume-container:hover .jw-buffer,
    .jw-slider-time:focus .jw-buffer,
    .jw-horizontal-volume-container:focus .jw-buffer,
    .jw-flag-dragging .jw-slider-time .jw-buffer,
    .jw-flag-dragging .jw-horizontal-volume-container .jw-buffer,
    .jw-flag-touch .jw-slider-time .jw-buffer,
    .jw-flag-touch .jw-horizontal-volume-container .jw-buffer,
    .jw-slider-time:hover .jw-progress,
    .jw-horizontal-volume-container:hover .jw-progress,
    .jw-slider-time:focus .jw-progress,
    .jw-horizontal-volume-container:focus .jw-progress,
    .jw-flag-dragging .jw-slider-time .jw-progress,
    .jw-flag-dragging .jw-horizontal-volume-container .jw-progress,
    .jw-flag-touch .jw-slider-time .jw-progress,
    .jw-flag-touch .jw-horizontal-volume-container .jw-progress,
    .jw-slider-time:hover .jw-cue,
    .jw-horizontal-volume-container:hover .jw-cue,
    .jw-slider-time:focus .jw-cue,
    .jw-horizontal-volume-container:focus .jw-cue,
    .jw-flag-dragging .jw-slider-time .jw-cue,
    .jw-flag-dragging .jw-horizontal-volume-container .jw-cue,
    .jw-flag-touch .jw-slider-time .jw-cue,
    .jw-flag-touch .jw-horizontal-volume-container .jw-cue {
      -webkit-transform: translate(0, -50%) scale(1, 1);
      transform: translate(0, -50%) scale(1, 1)
    }

    .jw-slider-time:hover .jw-knob,
    .jw-horizontal-volume-container:hover .jw-knob,
    .jw-slider-time:focus .jw-knob,
    .jw-horizontal-volume-container:focus .jw-knob {
      -webkit-transform: translate(-50%, -50%) scale(1);
      transform: translate(-50%, -50%) scale(1)
    }

    .jw-slider-time .jw-rail,
    .jw-horizontal-volume-container .jw-rail {
      background-color: rgba(255, 255, 255, 0.2)
    }

    .jw-slider-time .jw-buffer,
    .jw-horizontal-volume-container .jw-buffer {
      background-color: rgba(255, 255, 255, 0.4)
    }

    .jw-flag-touch .jw-slider-time::before,
    .jw-flag-touch .jw-horizontal-volume-container::before {
      height: 44px;
      width: 100%;
      content: "";
      position: absolute;
      display: block;
      bottom: calc(100% - 17px);
      left: 0
    }

    .jw-breakpoint-0.jw-flag-touch .jw-slider-time::before,
    .jw-breakpoint-0.jw-flag-touch .jw-horizontal-volume-container::before {
      height: 34px
    }

    .jw-slider-time.jw-tab-focus:focus .jw-rail,
    .jw-horizontal-volume-container.jw-tab-focus:focus .jw-rail {
      outline: solid 2px #4d90fe
    }

    .jw-breakpoint--1:not(.jw-flag-audio-player) .jw-slider-time {
      height: 17px;
      padding: 0
    }

    .jw-breakpoint--1:not(.jw-flag-audio-player) .jw-slider-time .jw-slider-container {
      height: 10px
    }

    .jw-breakpoint--1:not(.jw-flag-audio-player) .jw-slider-time .jw-knob {
      border-radius: 0;
      border: 1px solid rgba(0, 0, 0, 0.75);
      height: 12px;
      width: 10px
    }

    .jw-breakpoint-0 .jw-slider-time {
      height: 11px
    }

    .jw-horizontal-volume-container {
      display: none
    }

    .jw-flag-audio-player .jw-horizontal-volume-container {
      display: flex
    }

    .jw-modal {
      width: 284px
    }

    .jw-breakpoint-7 .jw-modal,
    .jw-breakpoint-6 .jw-modal,
    .jw-breakpoint-5 .jw-modal {
      height: 232px
    }

    .jw-breakpoint-4 .jw-modal,
    .jw-breakpoint-3 .jw-modal {
      height: 192px
    }

    .jw-breakpoint-2 .jw-modal,
    .jw-flag-small-player .jw-modal {
      bottom: 0;
      right: 0;
      height: 100%;
      width: 100%;
      max-height: none;
      max-width: none;
      z-index: 2
    }

    .jwplayer .jw-rightclick {
      display: none;
      position: absolute;
      white-space: nowrap
    }

    .jwplayer .jw-rightclick.jw-open {
      display: block
    }

    .jwplayer .jw-rightclick .jw-rightclick-list {
      border-radius: 1px;
      list-style: none;
      margin: 0;
      padding: 0
    }

    .jwplayer .jw-rightclick .jw-rightclick-list .jw-rightclick-item {
      background-color: rgba(0, 0, 0, 0.8);
      border-bottom: 1px solid #444;
      margin: 0
    }

    .jwplayer .jw-rightclick .jw-rightclick-list .jw-rightclick-item .jw-rightclick-logo {
      color: #fff;
      display: inline-flex;
      padding: 0 10px 0 0;
      vertical-align: middle
    }

    .jwplayer .jw-rightclick .jw-rightclick-list .jw-rightclick-item .jw-rightclick-logo .jw-svg-icon {
      height: 20px;
      width: 20px
    }

    .jwplayer .jw-rightclick .jw-rightclick-list .jw-rightclick-item .jw-rightclick-link {
      border: none;
      color: #fff;
      display: block;
      font-size: 11px;
      font-weight: 400;
      line-height: 1em;
      padding: 15px 23px;
      text-align: start;
      text-decoration: none;
      width: 100%
    }

    .jwplayer .jw-rightclick .jw-rightclick-list .jw-rightclick-item:last-child {
      border-bottom: none
    }

    .jwplayer .jw-rightclick .jw-rightclick-list .jw-rightclick-item:hover {
      cursor: pointer
    }

    .jwplayer .jw-rightclick .jw-rightclick-list .jw-featured {
      vertical-align: middle
    }

    .jwplayer .jw-rightclick .jw-rightclick-list .jw-featured .jw-rightclick-link {
      color: #fff
    }

    .jwplayer .jw-rightclick .jw-rightclick-list .jw-featured .jw-rightclick-link span {
      color: #fff;
      font-size: 12px
    }

    .jwplayer .jw-rightclick .jw-info-overlay-item,
    .jwplayer .jw-rightclick .jw-share-item,
    .jwplayer .jw-rightclick .jw-shortcuts-item {
      border: none;
      background-color: transparent;
      outline: none;
      cursor: pointer
    }

    .jw-icon-tooltip.jw-open .jw-overlay {
      opacity: 1;
      pointer-events: auto;
      transition-delay: 0s
    }

    .jw-icon-tooltip.jw-open .jw-overlay:focus {
      outline: none
    }

    .jw-icon-tooltip.jw-open .jw-overlay:focus.jw-tab-focus {
      outline: solid 2px #4d90fe
    }

    .jw-slider-time .jw-overlay:before {
      height: 1em;
      top: auto
    }

    .jw-slider-time .jw-icon-tooltip.jw-open .jw-overlay {
      pointer-events: none
    }

    .jw-volume-tip {
      padding: 13px 0 26px
    }

    .jw-time-tip,
    .jw-controlbar .jw-tooltip,
    .jw-settings-menu .jw-tooltip {
      height: auto;
      width: 100%;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);
      color: #fff;
      display: block;
      margin: 0 0 14px;
      pointer-events: none;
      position: relative;
      z-index: 0
    }

    .jw-time-tip::after,
    .jw-controlbar .jw-tooltip::after,
    .jw-settings-menu .jw-tooltip::after {
      top: 100%;
      position: absolute;
      left: 50%;
      height: 14px;
      width: 14px;
      border-radius: 1px;
      background-color: currentColor;
      -webkit-transform-origin: 75% 50%;
      transform-origin: 75% 50%;
      -webkit-transform: translate(-50%, -50%) rotate(45deg);
      transform: translate(-50%, -50%) rotate(45deg);
      z-index: -1
    }

    .jw-time-tip .jw-text,
    .jw-controlbar .jw-tooltip .jw-text,
    .jw-settings-menu .jw-tooltip .jw-text {
      background-color: #fff;
      border-radius: 1px;
      color: #000;
      font-size: 10px;
      height: auto;
      line-height: 1;
      padding: 7px 10px;
      display: inline-block;
      min-width: 100%;
      vertical-align: middle
    }

    .jw-controlbar .jw-overlay {
      position: absolute;
      bottom: 100%;
      left: 50%;
      margin: 0;
      min-height: 44px;
      min-width: 44px;
      opacity: 0;
      pointer-events: none;
      transition: 150ms cubic-bezier(0, .25, .25, 1);
      transition-property: opacity, visibility;
      transition-delay: 0s, 150ms;
      -webkit-transform: translate(-50%, 0);
      transform: translate(-50%, 0);
      width: 100%;
      z-index: 1
    }

    .jw-controlbar .jw-overlay .jw-contents {
      position: relative
    }

    .jw-controlbar .jw-option {
      position: relative;
      white-space: nowrap;
      cursor: pointer;
      list-style: none;
      height: 1.5em;
      font-family: inherit;
      line-height: 1.5em;
      padding: 0 .5em;
      font-size: .8em;
      margin: 0
    }

    .jw-controlbar .jw-option::before {
      padding-right: .125em
    }

    .jw-controlbar .jw-tooltip,
    .jw-settings-menu .jw-tooltip {
      position: absolute;
      bottom: 100%;
      left: 50%;
      opacity: 0;
      -webkit-transform: translate(-50%, 0);
      transform: translate(-50%, 0);
      transition: 100ms 0s cubic-bezier(0, .25, .25, 1);
      transition-property: opacity, visibility, -webkit-transform;
      transition-property: opacity, transform, visibility;
      transition-property: opacity, transform, visibility, -webkit-transform;
      visibility: hidden;
      white-space: nowrap;
      width: auto;
      z-index: 1
    }

    .jw-controlbar .jw-tooltip.jw-open,
    .jw-settings-menu .jw-tooltip.jw-open {
      opacity: 1;
      -webkit-transform: translate(-50%, -10px);
      transform: translate(-50%, -10px);
      transition-duration: 150ms;
      transition-delay: 500ms, 0s, 500ms;
      visibility: visible
    }

    .jw-controlbar .jw-tooltip.jw-tooltip-fullscreen,
    .jw-settings-menu .jw-tooltip.jw-tooltip-fullscreen {
      left: auto;
      right: 0;
      -webkit-transform: translate(0, 0);
      transform: translate(0, 0)
    }

    .jw-controlbar .jw-tooltip.jw-tooltip-fullscreen.jw-open,
    .jw-settings-menu .jw-tooltip.jw-tooltip-fullscreen.jw-open {
      -webkit-transform: translate(0, -10px);
      transform: translate(0, -10px)
    }

    .jw-controlbar .jw-tooltip.jw-tooltip-fullscreen::after,
    .jw-settings-menu .jw-tooltip.jw-tooltip-fullscreen::after {
      left: auto;
      right: 9px
    }

    .jw-tooltip-time {
      height: auto;
      width: 0;
      bottom: 100%;
      line-height: normal;
      padding: 0;
      pointer-events: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none
    }

    .jw-tooltip-time .jw-overlay {
      bottom: 0;
      min-height: 0;
      width: auto
    }

    .jw-tooltip {
      bottom: 57px;
      display: none;
      position: absolute
    }

    .jw-tooltip .jw-text {
      height: 100%;
      white-space: nowrap;
      text-overflow: ellipsis;
      direction: unset;
      max-width: 246px;
      overflow: hidden
    }

    .jw-flag-audio-player .jw-tooltip {
      display: none
    }

    .jw-flag-small-player .jw-time-thumb {
      display: none
    }

    .jwplayer .jw-shortcuts-tooltip {
      top: 50%;
      position: absolute;
      left: 50%;
      background: #333;
      -webkit-transform: translate(-50%, -50%);
      transform: translate(-50%, -50%);
      display: none;
      color: #fff;
      pointer-events: all;
      -webkit-user-select: text;
      -moz-user-select: text;
      -ms-user-select: text;
      user-select: text;
      overflow: hidden;
      flex-direction: column;
      z-index: 1
    }

    .jwplayer .jw-shortcuts-tooltip.jw-open {
      display: flex
    }

    .jwplayer .jw-shortcuts-tooltip .jw-shortcuts-close {
      flex: 0 0 auto;
      margin: 5px 5px 5px auto
    }

    .jwplayer .jw-shortcuts-tooltip .jw-shortcuts-container {
      display: flex;
      flex: 1 1 auto;
      flex-flow: column;
      font-size: 12px;
      margin: 0 20px 20px;
      overflow-y: auto;
      padding: 5px
    }

    .jwplayer .jw-shortcuts-tooltip .jw-shortcuts-container::-webkit-scrollbar {
      background-color: transparent;
      width: 6px
    }

    .jwplayer .jw-shortcuts-tooltip .jw-shortcuts-container::-webkit-scrollbar-thumb {
      background-color: #fff;
      border: 1px solid #333;
      border-radius: 6px
    }

    .jwplayer .jw-shortcuts-tooltip .jw-shortcuts-container .jw-shortcuts-title {
      font-weight: bold
    }

    .jwplayer .jw-shortcuts-tooltip .jw-shortcuts-container .jw-shortcuts-header {
      align-items: center;
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px
    }

    .jwplayer .jw-shortcuts-tooltip .jw-shortcuts-container .jw-shortcuts-tooltip-list {
      display: flex;
      max-width: 340px;
      margin: 0 10px
    }

    .jwplayer .jw-shortcuts-tooltip .jw-shortcuts-container .jw-shortcuts-tooltip-list .jw-shortcuts-tooltip-descriptions {
      width: 100%
    }

    .jwplayer .jw-shortcuts-tooltip .jw-shortcuts-container .jw-shortcuts-tooltip-list .jw-shortcuts-row {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin: 10px 0;
      width: 100%
    }

    .jwplayer .jw-shortcuts-tooltip .jw-shortcuts-container .jw-shortcuts-tooltip-list .jw-shortcuts-row .jw-shortcuts-description {
      margin-right: 10px;
      max-width: 70%
    }

    .jwplayer .jw-shortcuts-tooltip .jw-shortcuts-container .jw-shortcuts-tooltip-list .jw-shortcuts-row .jw-shortcuts-key {
      background: #fefefe;
      color: #333;
      overflow: hidden;
      padding: 7px 10px;
      text-overflow: ellipsis;
      white-space: nowrap
    }

    .jw-skip {
      color: rgba(255, 255, 255, 0.8);
      cursor: default;
      position: absolute;
      display: flex;
      right: .75em;
      bottom: 56px;
      padding: .5em;
      border: 1px solid #333;
      background-color: #000;
      align-items: center;
      height: 2em
    }

    .jw-skip.jw-tab-focus:focus {
      outline: solid 2px #4d90fe
    }

    .jw-skip.jw-skippable {
      cursor: pointer;
      padding: .25em .75em
    }

    .jw-skip.jw-skippable:hover {
      cursor: pointer;
      color: #fff
    }

    .jw-skip.jw-skippable .jw-skip-icon {
      display: inline;
      height: 24px;
      width: 24px;
      margin: 0
    }

    .jw-breakpoint-7 .jw-skip {
      padding: 1.35em 1em;
      bottom: 130px
    }

    .jw-breakpoint-7 .jw-skip .jw-text {
      font-size: 1em;
      font-weight: normal
    }

    .jw-breakpoint-7 .jw-skip .jw-icon-inline {
      height: 30px;
      width: 30px
    }

    .jw-breakpoint-7 .jw-skip .jw-icon-inline .jw-svg-icon {
      height: 30px;
      width: 30px
    }

    .jw-skip .jw-skip-icon {
      display: none;
      margin-left: -0.75em;
      padding: 0 .5em;
      pointer-events: none
    }

    .jw-skip .jw-skip-icon .jw-svg-icon-next {
      display: block;
      padding: 0
    }

    .jw-skip .jw-text,
    .jw-skip .jw-skip-icon {
      vertical-align: middle;
      font-size: .7em
    }

    .jw-skip .jw-text {
      font-weight: bold
    }

    .jw-cast {
      background-size: cover;
      display: none;
      height: 100%;
      position: relative;
      width: 100%
    }

    .jw-cast-container {
      background: linear-gradient(180deg, rgba(25, 25, 25, 0.75), rgba(25, 25, 25, 0.25), rgba(25, 25, 25, 0));
      left: 0;
      padding: 20px 20px 80px;
      position: absolute;
      top: 0;
      width: 100%
    }

    .jw-cast-text {
      color: #fff;
      font-size: 1.6em
    }

    .jw-breakpoint--1 .jw-cast-text,
    .jw-breakpoint-0 .jw-cast-text {
      font-size: 1.15em
    }

    .jw-breakpoint-1 .jw-cast-text,
    .jw-breakpoint-2 .jw-cast-text,
    .jw-breakpoint-3 .jw-cast-text {
      font-size: 1.3em
    }

    .jw-nextup-container {
      position: absolute;
      bottom: 66px;
      left: 0;
      background-color: transparent;
      cursor: pointer;
      margin: 0 auto;
      padding: 12px;
      pointer-events: none;
      right: 0;
      text-align: right;
      visibility: hidden;
      width: 100%
    }

    .jw-settings-open .jw-nextup-container,
    .jw-info-open .jw-nextup-container {
      display: none
    }

    .jw-breakpoint-7 .jw-nextup-container {
      padding: 60px
    }

    .jw-flag-small-player .jw-nextup-container {
      padding: 0 12px 0 0
    }

    .jw-flag-small-player .jw-nextup-container .jw-nextup-title,
    .jw-flag-small-player .jw-nextup-container .jw-nextup-duration,
    .jw-flag-small-player .jw-nextup-container .jw-nextup-close {
      display: none
    }

    .jw-flag-small-player .jw-nextup-container .jw-nextup-tooltip {
      height: 30px
    }

    .jw-flag-small-player .jw-nextup-container .jw-nextup-header {
      font-size: 12px
    }

    .jw-flag-small-player .jw-nextup-container .jw-nextup-body {
      justify-content: center;
      align-items: center;
      padding: .75em .3em
    }

    .jw-flag-small-player .jw-nextup-container .jw-nextup-thumbnail {
      width: 50%
    }

    .jw-flag-small-player .jw-nextup-container .jw-nextup {
      max-width: 65px
    }

    .jw-flag-small-player .jw-nextup-container .jw-nextup.jw-nextup-thumbnail-visible {
      max-width: 120px
    }

    .jw-nextup {
      background: #333;
      border-radius: 0;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
      color: rgba(255, 255, 255, 0.8);
      display: inline-block;
      max-width: 280px;
      overflow: hidden;
      opacity: 0;
      position: relative;
      width: 64%;
      pointer-events: all;
      -webkit-transform: translate(0, -5px);
      transform: translate(0, -5px);
      transition: 150ms cubic-bezier(0, .25, .25, 1);
      transition-property: opacity, -webkit-transform;
      transition-property: opacity, transform;
      transition-property: opacity, transform, -webkit-transform;
      transition-delay: 0s
    }

    .jw-nextup:hover .jw-nextup-tooltip {
      color: #fff
    }

    .jw-nextup.jw-nextup-thumbnail-visible {
      max-width: 400px
    }

    .jw-nextup.jw-nextup-thumbnail-visible .jw-nextup-thumbnail {
      display: block
    }

    .jw-nextup-container-visible {
      visibility: visible
    }

    .jw-nextup-container-visible .jw-nextup {
      opacity: 1;
      -webkit-transform: translate(0, 0);
      transform: translate(0, 0);
      transition-delay: 0s, 0s, 150ms
    }

    .jw-nextup-tooltip {
      display: flex;
      height: 80px
    }

    .jw-nextup-thumbnail {
      width: 120px;
      background-position: center;
      background-size: cover;
      flex: 0 0 auto;
      display: none
    }

    .jw-nextup-body {
      flex: 1 1 auto;
      overflow: hidden;
      padding: .75em .875em;
      display: flex;
      flex-flow: column wrap;
      justify-content: space-between
    }

    .jw-nextup-header,
    .jw-nextup-title {
      font-size: 14px;
      line-height: 1.35
    }

    .jw-nextup-header {
      font-weight: bold
    }

    .jw-nextup-title {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      width: 100%
    }

    .jw-nextup-duration {
      align-self: flex-end;
      text-align: right;
      font-size: 12px
    }

    .jw-nextup-close {
      height: 24px;
      width: 24px;
      border: none;
      color: rgba(255, 255, 255, 0.8);
      cursor: pointer;
      margin: 6px;
      visibility: hidden
    }

    .jw-nextup-close:hover {
      color: #fff
    }

    .jw-nextup-sticky .jw-nextup-close {
      visibility: visible
    }

    .jw-autostart-mute {
      position: absolute;
      bottom: 0;
      right: 12px;
      height: 44px;
      width: 44px;
      background-color: rgba(33, 33, 33, 0.4);
      padding: 5px 4px 5px 6px;
      display: none
    }

    .jwplayer.jw-flag-autostart:not(.jw-flag-media-audio) .jw-nextup {
      display: none
    }

    .jw-settings-menu {
      position: absolute;
      bottom: 57px;
      right: 12px;
      align-items: flex-start;
      background-color: #333;
      display: none;
      flex-flow: column nowrap;
      max-width: 284px;
      pointer-events: auto
    }

    .jw-settings-open .jw-settings-menu {
      display: flex
    }

    .jw-breakpoint-7 .jw-settings-menu {
      bottom: 130px;
      right: 60px;
      max-height: none;
      max-width: none;
      height: 35%;
      width: 25%
    }

    .jw-breakpoint-7 .jw-settings-menu .jw-settings-topbar:not(.jw-nested-menu-open) .jw-icon-inline {
      height: 60px;
      width: 60px
    }

    .jw-breakpoint-7 .jw-settings-menu .jw-settings-topbar:not(.jw-nested-menu-open) .jw-icon-inline .jw-svg-icon {
      height: 30px;
      width: 30px
    }

    .jw-breakpoint-7 .jw-settings-menu .jw-settings-topbar:not(.jw-nested-menu-open) .jw-icon-inline .jw-tooltip .jw-text {
      font-size: 1em
    }

    .jw-breakpoint-7 .jw-settings-menu .jw-settings-back {
      min-width: 60px
    }

    .jw-breakpoint-6 .jw-settings-menu,
    .jw-breakpoint-5 .jw-settings-menu {
      height: 232px;
      width: 284px;
      max-height: 232px
    }

    .jw-breakpoint-4 .jw-settings-menu,
    .jw-breakpoint-3 .jw-settings-menu {
      height: 192px;
      width: 284px;
      max-height: 192px
    }

    .jw-breakpoint-2 .jw-settings-menu {
      height: 179px;
      width: 284px;
      max-height: 179px
    }

    .jw-flag-small-player .jw-settings-menu {
      max-width: none
    }

    .jw-settings-menu .jw-icon.jw-button-color::after {
      height: 100%;
      width: 24px;
      box-shadow: inset 0 -3px 0 -1px currentColor;
      margin: auto;
      opacity: 0;
      transition: opacity 150ms cubic-bezier(0, .25, .25, 1)
    }

    .jw-settings-menu .jw-icon.jw-button-color[aria-expanded="true"]::after {
      opacity: 1
    }

    .jw-settings-menu .jw-settings-reset {
      text-decoration: underline
    }

    .jw-settings-topbar {
      align-items: center;
      background-color: rgba(0, 0, 0, 0.4);
      display: flex;
      flex: 0 0 auto;
      padding: 3px 5px 0;
      width: 100%
    }

    .jw-settings-topbar.jw-nested-menu-open {
      padding: 0
    }

    .jw-settings-topbar.jw-nested-menu-open .jw-icon:not(.jw-settings-close):not(.jw-settings-back) {
      display: none
    }

    .jw-settings-topbar.jw-nested-menu-open .jw-svg-icon-close {
      width: 20px
    }

    .jw-settings-topbar.jw-nested-menu-open .jw-svg-icon-arrow-left {
      height: 12px
    }

    .jw-settings-topbar.jw-nested-menu-open .jw-settings-topbar-text {
      display: block;
      outline: none
    }

    .jw-settings-topbar .jw-settings-back {
      min-width: 44px
    }

    .jw-settings-topbar .jw-settings-topbar-buttons {
      display: inherit;
      width: 100%;
      height: 100%
    }

    .jw-settings-topbar .jw-settings-topbar-text {
      display: none;
      color: #fff;
      font-size: 13px;
      width: 100%
    }

    .jw-settings-topbar .jw-settings-close {
      margin-left: auto
    }

    .jw-settings-submenu {
      display: none;
      flex: 1 1 auto;
      overflow-y: auto;
      padding: 8px 20px 0 5px
    }

    .jw-settings-submenu::-webkit-scrollbar {
      background-color: transparent;
      width: 6px
    }

    .jw-settings-submenu::-webkit-scrollbar-thumb {
      background-color: #fff;
      border: 1px solid #333;
      border-radius: 6px
    }

    .jw-settings-submenu.jw-settings-submenu-active {
      display: block
    }

    .jw-settings-submenu .jw-submenu-topbar {
      box-shadow: 0 2px 9px 0 #1d1d1d;
      background-color: #2f2d2d;
      margin: -8px -20px 0 -5px
    }

    .jw-settings-submenu .jw-submenu-topbar .jw-settings-content-item {
      cursor: pointer;
      text-align: right;
      padding-right: 15px;
      text-decoration: underline
    }

    .jw-settings-submenu .jw-settings-value-wrapper {
      float: right;
      display: flex;
      align-items: center
    }

    .jw-settings-submenu .jw-settings-value-wrapper .jw-settings-content-item-arrow {
      display: flex
    }

    .jw-settings-submenu .jw-settings-value-wrapper .jw-svg-icon-arrow-right {
      width: 8px;
      margin-left: 5px;
      height: 12px
    }

    .jw-breakpoint-7 .jw-settings-submenu .jw-settings-content-item {
      font-size: 1em;
      padding: 11px 15px 11px 30px
    }

    .jw-breakpoint-7 .jw-settings-submenu .jw-settings-content-item .jw-settings-item-active::before {
      justify-content: flex-end
    }

    .jw-breakpoint-7 .jw-settings-submenu .jw-settings-content-item .jw-auto-label {
      font-size: .85em;
      padding-left: 10px
    }

    .jw-flag-touch .jw-settings-submenu {
      overflow-y: scroll;
      -webkit-overflow-scrolling: touch
    }

    .jw-auto-label {
      font-size: 10px;
      font-weight: initial;
      opacity: .75;
      padding-left: 5px
    }

    .jw-settings-content-item {
      position: relative;
      color: rgba(255, 255, 255, 0.8);
      cursor: pointer;
      font-size: 12px;
      line-height: 1;
      padding: 7px 0 7px 15px;
      width: 100%;
      text-align: left;
      outline: none
    }

    .jw-settings-content-item:hover {
      color: #fff
    }

    .jw-settings-content-item:focus {
      font-weight: bold
    }

    .jw-flag-small-player .jw-settings-content-item {
      line-height: 1.75
    }

    .jw-settings-content-item.jw-tab-focus:focus {
      border: solid 2px #4d90fe
    }

    .jw-settings-item-active {
      font-weight: bold;
      position: relative
    }

    .jw-settings-item-active::before {
      height: 100%;
      width: 1em;
      align-items: center;
      content: "\2022";
      display: inline-flex;
      justify-content: center
    }

    .jw-breakpoint-2 .jw-settings-open .jw-display-container,
    .jw-flag-small-player .jw-settings-open .jw-display-container,
    .jw-flag-touch .jw-settings-open .jw-display-container {
      display: none
    }

    .jw-breakpoint-2 .jw-settings-open.jw-controls,
    .jw-flag-small-player .jw-settings-open.jw-controls,
    .jw-flag-touch .jw-settings-open.jw-controls {
      z-index: 1
    }

    .jw-flag-small-player .jw-settings-open .jw-controlbar {
      display: none
    }

    .jw-settings-open .jw-icon-settings::after {
      opacity: 1
    }

    .jw-settings-open .jw-tooltip-settings {
      display: none
    }

    .jw-sharing-link {
      cursor: pointer
    }

    .jw-shortcuts-container .jw-switch {
      position: relative;
      display: flex;
      align-items: center;
      transition: ease-out .15s;
      transition-property: opacity, background;
      border-radius: 18px;
      width: 80px;
      height: 20px;
      padding: 10px;
      background: rgba(80, 80, 80, 0.8);
      cursor: pointer;
      font-size: inherit;
      vertical-align: middle;
      outline: none
    }

    .jw-shortcuts-container .jw-switch.jw-tab-focus {
      border: solid 2px #4d90fe
    }

    .jw-shortcuts-container .jw-switch .jw-switch-knob {
      position: absolute;
      left: 1px;
      transition: ease-out .15s;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.4);
      border-radius: 13px;
      width: 15px;
      height: 15px;
      background: #fefefe
    }

    .jw-shortcuts-container .jw-switch .jw-switch-disabled,
    .jw-shortcuts-container .jw-switch .jw-switch-enabled {
      position: absolute;
      transition: inherit;
      color: #fefefe
    }

    .jw-shortcuts-container .jw-switch .jw-switch-disabled {
      right: 8px
    }

    .jw-shortcuts-container .jw-switch .jw-switch-enabled {
      left: 8px;
      opacity: 0
    }

    .jw-shortcuts-container .jw-switch[aria-checked="true"] {
      background: #475470
    }

    .jw-shortcuts-container .jw-switch[aria-checked="true"] .jw-switch-disabled {
      opacity: 0
    }

    .jw-shortcuts-container .jw-switch[aria-checked="true"] .jw-switch-enabled {
      opacity: 1
    }

    .jw-shortcuts-container .jw-switch[aria-checked="true"] .jw-switch-knob {
      left: 60px
    }

    .jw-idle-icon-text {
      display: none;
      line-height: 1;
      position: absolute;
      text-align: center;
      text-indent: .35em;
      top: 100%;
      white-space: nowrap;
      left: 50%;
      -webkit-transform: translateX(-50%);
      transform: translateX(-50%)
    }

    .jw-idle-label {
      border-radius: 50%;
      color: #fff;
      -webkit-filter: drop-shadow(1px 1px 5px rgba(12, 26, 71, 0.25));
      filter: drop-shadow(1px 1px 5px rgba(12, 26, 71, 0.25));
      font: normal 16px/1 Arial, Helvetica, sans-serif;
      position: relative;
      transition: background-color 150ms cubic-bezier(0, .25, .25, 1);
      transition-property: background-color, -webkit-filter;
      transition-property: background-color, filter;
      transition-property: background-color, filter, -webkit-filter;
      -webkit-font-smoothing: antialiased
    }

    .jw-state-idle .jw-icon-display.jw-idle-label .jw-idle-icon-text {
      display: block
    }

    .jw-state-idle .jw-icon-display.jw-idle-label .jw-svg-icon-play {
      -webkit-transform: scale(.7, .7);
      transform: scale(.7, .7)
    }

    .jw-breakpoint-0.jw-state-idle .jw-icon-display.jw-idle-label,
    .jw-breakpoint--1.jw-state-idle .jw-icon-display.jw-idle-label {
      font-size: 12px
    }

    .jw-info-overlay {
      top: 50%;
      position: absolute;
      left: 50%;
      background: #333;
      -webkit-transform: translate(-50%, -50%);
      transform: translate(-50%, -50%);
      display: none;
      color: #fff;
      pointer-events: all;
      -webkit-user-select: text;
      -moz-user-select: text;
      -ms-user-select: text;
      user-select: text;
      overflow: hidden;
      flex-direction: column
    }

    .jw-info-overlay .jw-info-close {
      flex: 0 0 auto;
      margin: 5px 5px 5px auto
    }

    .jw-info-open .jw-info-overlay {
      display: flex
    }

    .jw-info-container {
      display: flex;
      flex: 1 1 auto;
      flex-flow: column;
      margin: 0 20px 20px;
      overflow-y: auto;
      padding: 5px
    }

    .jw-info-container [class*="jw-info"]:not(:first-of-type) {
      color: rgba(255, 255, 255, 0.8);
      padding-top: 10px;
      font-size: 12px
    }

    .jw-info-container .jw-info-description {
      margin-bottom: 30px;
      text-align: start
    }

    .jw-info-container .jw-info-description:empty {
      display: none
    }

    .jw-info-container .jw-info-duration {
      text-align: start
    }

    .jw-info-container .jw-info-title {
      text-align: start;
      font-size: 12px;
      font-weight: bold
    }

    .jw-info-container::-webkit-scrollbar {
      background-color: transparent;
      width: 6px
    }

    .jw-info-container::-webkit-scrollbar-thumb {
      background-color: #fff;
      border: 1px solid #333;
      border-radius: 6px
    }

    .jw-info-clientid {
      align-self: flex-end;
      font-size: 12px;
      color: rgba(255, 255, 255, 0.8);
      margin: 0 20px 20px 44px;
      text-align: right
    }

    .jw-flag-touch .jw-info-open .jw-display-container {
      display: none
    }

    @supports ((-webkit-filter: drop-shadow(0 0 3px #000)) or (filter: drop-shadow(0 0 3px #000))) {

      .jwplayer.jw-ab-drop-shadow .jw-controls .jw-svg-icon,
      .jwplayer.jw-ab-drop-shadow .jw-controls .jw-icon.jw-text,
      .jwplayer.jw-ab-drop-shadow .jw-slider-container .jw-rail,
      .jwplayer.jw-ab-drop-shadow .jw-title {
        text-shadow: none;
        box-shadow: none;
        -webkit-filter: drop-shadow(0 2px 3px rgba(0, 0, 0, 0.3));
        filter: drop-shadow(0 2px 3px rgba(0, 0, 0, 0.3))
      }

      .jwplayer.jw-ab-drop-shadow .jw-button-color {
        opacity: .8;
        transition-property: color, opacity
      }

      .jwplayer.jw-ab-drop-shadow .jw-button-color:not(:hover) {
        color: #fff;
        opacity: .8
      }

      .jwplayer.jw-ab-drop-shadow .jw-button-color:hover {
        opacity: 1
      }

      .jwplayer.jw-ab-drop-shadow .jw-controls-backdrop {
        background-image: linear-gradient(to bottom, hsla(0, 0%, 0%, 0), hsla(0, 0%, 0%, 0.00787) 10.79%, hsla(0, 0%, 0%, 0.02963) 21.99%, hsla(0, 0%, 0%, 0.0625) 33.34%, hsla(0, 0%, 0%, 0.1037) 44.59%, hsla(0, 0%, 0%, 0.15046) 55.48%, hsla(0, 0%, 0%, 0.2) 65.75%, hsla(0, 0%, 0%, 0.24954) 75.14%, hsla(0, 0%, 0%, 0.2963) 83.41%, hsla(0, 0%, 0%, 0.3375) 90.28%, hsla(0, 0%, 0%, 0.37037) 95.51%, hsla(0, 0%, 0%, 0.39213) 98.83%, hsla(0, 0%, 0%, 0.4));
        mix-blend-mode: multiply;
        transition-property: opacity
      }

      .jw-state-idle.jwplayer.jw-ab-drop-shadow .jw-controls-backdrop {
        background-image: linear-gradient(to bottom, hsla(0, 0%, 0%, 0.2), hsla(0, 0%, 0%, 0.19606) 1.17%, hsla(0, 0%, 0%, 0.18519) 4.49%, hsla(0, 0%, 0%, 0.16875) 9.72%, hsla(0, 0%, 0%, 0.14815) 16.59%, hsla(0, 0%, 0%, 0.12477) 24.86%, hsla(0, 0%, 0%, 0.1) 34.25%, hsla(0, 0%, 0%, 0.07523) 44.52%, hsla(0, 0%, 0%, 0.05185) 55.41%, hsla(0, 0%, 0%, 0.03125) 66.66%, hsla(0, 0%, 0%, 0.01481) 78.01%, hsla(0, 0%, 0%, 0.00394) 89.21%, hsla(0, 0%, 0%, 0));
        background-size: 100% 7rem;
        background-position: 50% 0
      }

      .jwplayer.jw-ab-drop-shadow.jw-state-idle .jw-controls {
        background-color: transparent
      }
    }

    .jw-video-thumbnail-container {
      position: relative;
      overflow: hidden
    }

    .jw-video-thumbnail-container:not(.jw-related-shelf-item-image) {
      height: 100%;
      width: 100%
    }

    .jw-video-thumbnail-container.jw-video-thumbnail-generated {
      position: absolute;
      top: 0;
      left: 0
    }

    .jw-video-thumbnail-container:hover,
    .jw-related-item-content:hover .jw-video-thumbnail-container,
    .jw-related-shelf-item:hover .jw-video-thumbnail-container {
      cursor: pointer
    }

    .jw-video-thumbnail-container:hover .jw-video-thumbnail:not(.jw-video-thumbnail-completed),
    .jw-related-item-content:hover .jw-video-thumbnail-container .jw-video-thumbnail:not(.jw-video-thumbnail-completed),
    .jw-related-shelf-item:hover .jw-video-thumbnail-container .jw-video-thumbnail:not(.jw-video-thumbnail-completed) {
      opacity: 1
    }

    .jw-video-thumbnail-container .jw-video-thumbnail {
      position: absolute;
      top: 50%;
      left: 50%;
      bottom: unset;
      -webkit-transform: translate(-50%, -50%);
      transform: translate(-50%, -50%);
      width: 100%;
      height: auto;
      min-width: 100%;
      min-height: 100%;
      opacity: 0;
      transition: opacity .3s ease;
      object-fit: cover;
      background: #000
    }

    .jw-related-item-next-up .jw-video-thumbnail-container .jw-video-thumbnail {
      height: 100%;
      width: auto
    }

    .jw-video-thumbnail-container .jw-video-thumbnail.jw-video-thumbnail-visible:not(.jw-video-thumbnail-completed) {
      opacity: 1
    }

    .jw-video-thumbnail-container .jw-video-thumbnail.jw-video-thumbnail-completed {
      opacity: 0
    }

    .jw-video-thumbnail-container .jw-video-thumbnail~.jw-svg-icon-play {
      display: none
    }

    .jw-video-thumbnail-container .jw-video-thumbnail+.jw-related-shelf-item-aspect {
      pointer-events: none
    }

    .jw-video-thumbnail-container .jw-video-thumbnail+.jw-related-item-poster-content {
      pointer-events: none
    }

    .jw-preview {
      overflow: hidden
    }

    .jw-preview .jw-ab-zoom-thumbnail {
      all: inherit;
      -webkit-animation: jw-ab-zoom-thumbnail-animation 10s infinite;
      animation: jw-ab-zoom-thumbnail-animation 10s infinite
    }

    @-webkit-keyframes jw-ab-zoom-thumbnail-animation {
      0% {
        -webkit-transform: scale(1, 1);
        transform: scale(1, 1)
      }

      50% {
        -webkit-transform: scale(1.25, 1.25);
        transform: scale(1.25, 1.25)
      }

      100% {
        -webkit-transform: scale(1, 1);
        transform: scale(1, 1)
      }
    }

    @keyframes jw-ab-zoom-thumbnail-animation {
      0% {
        -webkit-transform: scale(1, 1);
        transform: scale(1, 1)
      }

      50% {
        -webkit-transform: scale(1.25, 1.25);
        transform: scale(1.25, 1.25)
      }

      100% {
        -webkit-transform: scale(1, 1);
        transform: scale(1, 1)
      }
    }

    .jw-state-idle:not(.jw-flag-cast-available) .jw-display {
      padding: 0
    }

    .jw-state-idle .jw-controls {
      background: rgba(0, 0, 0, 0.4)
    }

    .jw-state-idle.jw-flag-cast-available:not(.jw-flag-audio-player) .jw-controlbar .jw-slider-time,
    .jw-state-idle.jw-flag-cardboard-available .jw-controlbar .jw-slider-time,
    .jw-state-idle.jw-flag-cast-available:not(.jw-flag-audio-player) .jw-controlbar .jw-icon:not(.jw-icon-cardboard):not(.jw-icon-cast):not(.jw-icon-airplay),
    .jw-state-idle.jw-flag-cardboard-available .jw-controlbar .jw-icon:not(.jw-icon-cardboard):not(.jw-icon-cast):not(.jw-icon-airplay) {
      display: none
    }

    .jwplayer.jw-state-buffering .jw-display-icon-display .jw-icon:focus {
      border: none
    }

    .jwplayer.jw-state-buffering .jw-display-icon-display .jw-icon .jw-svg-icon-buffer {
      -webkit-animation: jw-spin 2s linear infinite;
      animation: jw-spin 2s linear infinite;
      display: block
    }

    @-webkit-keyframes jw-spin {
      100% {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg)
      }
    }

    @keyframes jw-spin {
      100% {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg)
      }
    }

    .jwplayer.jw-state-buffering .jw-icon-playback .jw-svg-icon-play {
      display: none
    }

    .jwplayer.jw-state-buffering .jw-icon-display .jw-svg-icon-pause {
      display: none
    }

    .jwplayer.jw-state-playing .jw-display .jw-icon-display .jw-svg-icon-play,
    .jwplayer.jw-state-playing .jw-icon-playback .jw-svg-icon-play {
      display: none
    }

    .jwplayer.jw-state-playing .jw-display .jw-icon-display .jw-svg-icon-pause,
    .jwplayer.jw-state-playing .jw-icon-playback .jw-svg-icon-pause {
      display: block
    }

    .jwplayer.jw-state-playing.jw-flag-user-inactive:not(.jw-flag-audio-player):not(.jw-flag-casting):not(.jw-flag-media-audio) .jw-controls-backdrop {
      opacity: 0
    }

    .jwplayer.jw-state-playing.jw-flag-user-inactive:not(.jw-flag-audio-player):not(.jw-flag-casting):not(.jw-flag-media-audio) .jw-logo-bottom-left,
    .jwplayer.jw-state-playing.jw-flag-user-inactive:not(.jw-flag-audio-player):not(.jw-flag-casting):not(.jw-flag-media-audio):not(.jw-flag-autostart) .jw-logo-bottom-right {
      bottom: 0
    }

    .jwplayer .jw-icon-playback .jw-svg-icon-stop {
      display: none
    }

    .jwplayer.jw-state-paused .jw-svg-icon-pause,
    .jwplayer.jw-state-idle .jw-svg-icon-pause,
    .jwplayer.jw-state-error .jw-svg-icon-pause,
    .jwplayer.jw-state-complete .jw-svg-icon-pause {
      display: none
    }

    .jwplayer.jw-state-error .jw-icon-display .jw-svg-icon-play,
    .jwplayer.jw-state-complete .jw-icon-display .jw-svg-icon-play,
    .jwplayer.jw-state-buffering .jw-icon-display .jw-svg-icon-play {
      display: none
    }

    .jwplayer:not(.jw-state-buffering) .jw-svg-icon-buffer {
      display: none
    }

    .jwplayer:not(.jw-state-complete) .jw-svg-icon-replay {
      display: none
    }

    .jwplayer:not(.jw-state-error) .jw-svg-icon-error {
      display: none
    }

    .jwplayer.jw-state-complete .jw-display .jw-icon-display .jw-svg-icon-replay {
      display: block
    }

    .jwplayer.jw-state-complete .jw-display .jw-text {
      display: none
    }

    .jwplayer.jw-state-complete .jw-controls {
      background: rgba(0, 0, 0, 0.4);
      height: 100%
    }

    .jw-state-idle .jw-icon-display .jw-svg-icon-pause,
    .jwplayer.jw-state-paused .jw-icon-playback .jw-svg-icon-pause,
    .jwplayer.jw-state-paused .jw-icon-display .jw-svg-icon-pause,
    .jwplayer.jw-state-complete .jw-icon-playback .jw-svg-icon-pause {
      display: none
    }

    .jw-state-idle .jw-display-icon-rewind,
    .jwplayer.jw-state-buffering .jw-display-icon-rewind,
    .jwplayer.jw-state-complete .jw-display-icon-rewind,
    body .jw-error .jw-display-icon-rewind,
    body .jwplayer.jw-state-error .jw-display-icon-rewind,
    .jw-state-idle .jw-display-icon-next,
    .jwplayer.jw-state-buffering .jw-display-icon-next,
    .jwplayer.jw-state-complete .jw-display-icon-next,
    body .jw-error .jw-display-icon-next,
    body .jwplayer.jw-state-error .jw-display-icon-next {
      display: none
    }

    body .jw-error .jw-icon-display,
    body .jwplayer.jw-state-error .jw-icon-display {
      cursor: default
    }

    body .jw-error .jw-icon-display .jw-svg-icon-error,
    body .jwplayer.jw-state-error .jw-icon-display .jw-svg-icon-error {
      display: block
    }

    body .jw-error .jw-icon-container {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0
    }

    body .jwplayer.jw-state-error.jw-flag-audio-player .jw-preview {
      display: none
    }

    body .jwplayer.jw-state-error.jw-flag-audio-player .jw-title {
      padding-top: 4px
    }

    body .jwplayer.jw-state-error.jw-flag-audio-player .jw-title-primary {
      width: auto;
      display: inline-block;
      padding-right: .5ch
    }

    body .jwplayer.jw-state-error.jw-flag-audio-player .jw-title-secondary {
      width: auto;
      display: inline-block;
      padding-left: 0
    }

    body .jwplayer.jw-state-error .jw-controlbar,
    .jwplayer.jw-state-idle:not(.jw-flag-audio-player):not(.jw-flag-cast-available):not(.jw-flag-cardboard-available) .jw-controlbar {
      display: none
    }

    body .jwplayer.jw-state-error .jw-settings-menu,
    .jwplayer.jw-state-idle:not(.jw-flag-audio-player):not(.jw-flag-cast-available):not(.jw-flag-cardboard-available) .jw-settings-menu {
      height: 100%;
      top: 50%;
      left: 50%;
      -webkit-transform: translate(-50%, -50%);
      transform: translate(-50%, -50%)
    }

    body .jwplayer.jw-state-error .jw-display,
    .jwplayer.jw-state-idle:not(.jw-flag-audio-player):not(.jw-flag-cast-available):not(.jw-flag-cardboard-available) .jw-display {
      padding: 0
    }

    body .jwplayer.jw-state-error .jw-logo-bottom-left,
    .jwplayer.jw-state-idle:not(.jw-flag-audio-player):not(.jw-flag-cast-available):not(.jw-flag-cardboard-available) .jw-logo-bottom-left,
    body .jwplayer.jw-state-error .jw-logo-bottom-right,
    .jwplayer.jw-state-idle:not(.jw-flag-audio-player):not(.jw-flag-cast-available):not(.jw-flag-cardboard-available) .jw-logo-bottom-right {
      bottom: 0
    }

    .jwplayer.jw-state-playing.jw-flag-user-inactive .jw-display {
      visibility: hidden;
      pointer-events: none;
      opacity: 0
    }

    .jwplayer.jw-state-playing:not(.jw-flag-touch):not(.jw-flag-small-player):not(.jw-flag-casting) .jw-display,
    .jwplayer.jw-state-paused:not(.jw-flag-touch):not(.jw-flag-small-player):not(.jw-flag-casting):not(.jw-flag-play-rejected) .jw-display {
      display: none
    }

    .jwplayer.jw-state-paused.jw-flag-play-rejected:not(.jw-flag-touch):not(.jw-flag-small-player):not(.jw-flag-casting) .jw-display-icon-rewind,
    .jwplayer.jw-state-paused.jw-flag-play-rejected:not(.jw-flag-touch):not(.jw-flag-small-player):not(.jw-flag-casting) .jw-display-icon-next {
      display: none
    }

    .jwplayer.jw-state-buffering .jw-display-icon-display .jw-text,
    .jwplayer.jw-state-complete .jw-display .jw-text {
      display: none
    }

    .jwplayer.jw-flag-casting:not(.jw-flag-audio-player) .jw-cast {
      display: block
    }

    .jwplayer.jw-flag-casting.jw-flag-airplay-casting .jw-display-icon-container {
      display: none
    }

    .jwplayer.jw-flag-casting .jw-icon-hd,
    .jwplayer.jw-flag-casting .jw-captions,
    .jwplayer.jw-flag-casting .jw-icon-fullscreen,
    .jwplayer.jw-flag-casting .jw-icon-audio-tracks {
      display: none
    }

    .jwplayer.jw-flag-casting.jw-flag-airplay-casting .jw-icon-volume {
      display: none
    }

    .jwplayer.jw-flag-casting.jw-flag-airplay-casting .jw-icon-airplay {
      color: #fff
    }

    .jw-state-playing.jw-flag-casting:not(.jw-flag-audio-player) .jw-display,
    .jw-state-paused.jw-flag-casting:not(.jw-flag-audio-player) .jw-display {
      display: table
    }

    .jwplayer.jw-flag-cast-available .jw-icon-cast,
    .jwplayer.jw-flag-cast-available .jw-icon-airplay {
      display: flex
    }

    .jwplayer.jw-flag-cardboard-available .jw-icon-cardboard {
      display: flex
    }

    .jwplayer.jw-flag-live .jw-display-icon-rewind {
      visibility: hidden
    }

    .jwplayer.jw-flag-live .jw-controlbar .jw-text-elapsed,
    .jwplayer.jw-flag-live .jw-controlbar .jw-text-duration,
    .jwplayer.jw-flag-live .jw-controlbar .jw-text-countdown,
    .jwplayer.jw-flag-live .jw-controlbar .jw-slider-time {
      display: none
    }

    .jwplayer.jw-flag-live .jw-controlbar .jw-text-alt {
      display: flex
    }

    .jwplayer.jw-flag-live .jw-controlbar .jw-overlay:after {
      display: none
    }

    .jwplayer.jw-flag-live .jw-nextup-container {
      bottom: 44px
    }

    .jwplayer.jw-flag-live .jw-text-elapsed,
    .jwplayer.jw-flag-live .jw-text-duration {
      display: none
    }

    .jwplayer.jw-flag-live .jw-text-live {
      cursor: default
    }

    .jwplayer.jw-flag-live .jw-text-live:hover {
      color: rgba(255, 255, 255, 0.8)
    }

    .jwplayer.jw-flag-live.jw-state-playing .jw-icon-playback .jw-svg-icon-stop,
    .jwplayer.jw-flag-live.jw-state-buffering .jw-icon-playback .jw-svg-icon-stop {
      display: block
    }

    .jwplayer.jw-flag-live.jw-state-playing .jw-icon-playback .jw-svg-icon-pause,
    .jwplayer.jw-flag-live.jw-state-buffering .jw-icon-playback .jw-svg-icon-pause {
      display: none
    }

    .jw-text-live {
      height: 24px;
      width: auto;
      align-items: center;
      border-radius: 1px;
      color: rgba(255, 255, 255, 0.8);
      display: flex;
      font-size: 12px;
      font-weight: bold;
      margin-right: 10px;
      padding: 0 1ch;
      text-rendering: geometricPrecision;
      text-transform: uppercase;
      transition: 150ms cubic-bezier(0, .25, .25, 1);
      transition-property: box-shadow, color
    }

    .jw-text-live::before {
      height: 8px;
      width: 8px;
      background-color: currentColor;
      border-radius: 50%;
      margin-right: 6px;
      opacity: 1;
      transition: opacity 150ms cubic-bezier(0, .25, .25, 1)
    }

    .jw-text-live.jw-dvr-live {
      box-shadow: inset 0 0 0 2px currentColor
    }

    .jw-text-live.jw-dvr-live::before {
      opacity: .5
    }

    .jw-text-live.jw-dvr-live:hover {
      color: #fff
    }

    .jwplayer.jw-flag-controls-hidden .jw-logo.jw-hide {
      visibility: hidden;
      pointer-events: none;
      opacity: 0
    }

    .jwplayer.jw-flag-controls-hidden:not(.jw-flag-casting) .jw-logo-top-right {
      top: 0
    }

    .jwplayer.jw-flag-controls-hidden .jw-plugin {
      bottom: .5em
    }

    .jwplayer.jw-flag-controls-hidden .jw-nextup-container {
      bottom: 0
    }

    .jw-flag-controls-hidden .jw-controlbar,
    .jw-flag-controls-hidden .jw-display {
      visibility: hidden;
      pointer-events: none;
      opacity: 0;
      transition-delay: 0s, 250ms
    }

    .jw-flag-controls-hidden .jw-controls-backdrop {
      opacity: 0
    }

    .jw-flag-controls-hidden .jw-logo {
      visibility: visible
    }

    .jwplayer.jw-flag-user-inactive:not(.jw-flag-media-audio).jw-state-playing .jw-logo.jw-hide {
      visibility: hidden;
      pointer-events: none;
      opacity: 0
    }

    .jwplayer.jw-flag-user-inactive:not(.jw-flag-media-audio).jw-state-playing:not(.jw-flag-casting) .jw-logo-top-right {
      top: 0
    }

    .jwplayer.jw-flag-user-inactive:not(.jw-flag-media-audio).jw-state-playing .jw-plugin {
      bottom: .5em
    }

    .jwplayer.jw-flag-user-inactive:not(.jw-flag-media-audio).jw-state-playing .jw-nextup-container {
      bottom: 0
    }

    .jwplayer.jw-flag-user-inactive:not(.jw-flag-media-audio).jw-state-playing:not(.jw-flag-controls-hidden) .jw-media {
      cursor: none;
      -webkit-cursor-visibility: auto-hide
    }

    .jwplayer.jw-flag-user-inactive:not(.jw-flag-media-audio).jw-state-playing.jw-flag-casting .jw-display {
      display: table
    }

    .jwplayer.jw-flag-user-inactive:not(.jw-flag-media-audio).jw-state-playing:not(.jw-flag-ads) .jw-autostart-mute {
      display: flex
    }

    .jwplayer.jw-flag-user-inactive:not(.jw-flag-media-audio).jw-flag-casting .jw-nextup-container {
      bottom: 66px
    }

    .jwplayer.jw-flag-user-inactive:not(.jw-flag-media-audio).jw-flag-casting.jw-state-idle .jw-nextup-container {
      display: none
    }

    .jw-flag-media-audio .jw-preview {
      display: block
    }

    .jwplayer.jw-flag-ads .jw-preview,
    .jwplayer.jw-flag-ads .jw-logo,
    .jwplayer.jw-flag-ads .jw-captions.jw-captions-enabled,
    .jwplayer.jw-flag-ads .jw-nextup-container,
    .jwplayer.jw-flag-ads .jw-text-duration,
    .jwplayer.jw-flag-ads .jw-text-elapsed {
      display: none
    }

    .jwplayer.jw-flag-ads video::-webkit-media-text-track-container {
      display: none
    }

    .jwplayer.jw-flag-ads.jw-flag-small-player .jw-display-icon-rewind,
    .jwplayer.jw-flag-ads.jw-flag-small-player .jw-display-icon-next,
    .jwplayer.jw-flag-ads.jw-flag-small-player .jw-display-icon-display {
      display: none
    }

    .jwplayer.jw-flag-ads.jw-flag-small-player.jw-state-buffering .jw-display-icon-display {
      display: inline-block
    }

    .jwplayer.jw-flag-ads .jw-controlbar {
      flex-wrap: wrap-reverse
    }

    .jwplayer.jw-flag-ads .jw-controlbar .jw-slider-time {
      height: auto;
      padding: 0;
      pointer-events: none
    }

    .jwplayer.jw-flag-ads .jw-controlbar .jw-slider-time .jw-slider-container {
      height: 5px
    }

    .jwplayer.jw-flag-ads .jw-controlbar .jw-slider-time .jw-rail,
    .jwplayer.jw-flag-ads .jw-controlbar .jw-slider-time .jw-knob,
    .jwplayer.jw-flag-ads .jw-controlbar .jw-slider-time .jw-buffer,
    .jwplayer.jw-flag-ads .jw-controlbar .jw-slider-time .jw-cue,
    .jwplayer.jw-flag-ads .jw-controlbar .jw-slider-time .jw-icon-settings {
      display: none
    }

    .jwplayer.jw-flag-ads .jw-controlbar .jw-slider-time .jw-progress {
      -webkit-transform: none;
      transform: none;
      top: auto
    }

    .jwplayer.jw-flag-ads .jw-controlbar .jw-tooltip,
    .jwplayer.jw-flag-ads .jw-controlbar .jw-icon-tooltip:not(.jw-icon-volume),
    .jwplayer.jw-flag-ads .jw-controlbar .jw-icon-inline:not(.jw-icon-playback):not(.jw-icon-fullscreen):not(.jw-icon-volume) {
      display: none
    }

    .jwplayer.jw-flag-ads .jw-controlbar .jw-volume-tip {
      padding: 13px 0
    }

    .jwplayer.jw-flag-ads .jw-controlbar .jw-text-alt {
      display: flex
    }

    .jwplayer.jw-flag-ads.jw-flag-ads.jw-state-playing.jw-flag-touch:not(.jw-flag-ads-vpaid) .jw-controls .jw-controlbar,
    .jwplayer.jw-flag-ads.jw-flag-ads.jw-state-playing.jw-flag-touch:not(.jw-flag-ads-vpaid).jw-flag-autostart .jw-controls .jw-controlbar {
      display: flex;
      pointer-events: all;
      visibility: visible;
      opacity: 1
    }

    .jwplayer.jw-flag-ads.jw-flag-ads.jw-state-playing.jw-flag-touch:not(.jw-flag-ads-vpaid).jw-flag-user-inactive .jw-controls-backdrop,
    .jwplayer.jw-flag-ads.jw-flag-ads.jw-state-playing.jw-flag-touch:not(.jw-flag-ads-vpaid).jw-flag-autostart.jw-flag-user-inactive .jw-controls-backdrop {
      opacity: 1;
      background-size: 100% 60px
    }

    .jwplayer.jw-flag-ads-vpaid .jw-display-container,
    .jwplayer.jw-flag-touch.jw-flag-ads-vpaid .jw-display-container,
    .jwplayer.jw-flag-ads-vpaid .jw-skip,
    .jwplayer.jw-flag-touch.jw-flag-ads-vpaid .jw-skip {
      display: none
    }

    .jwplayer.jw-flag-ads-vpaid.jw-flag-small-player .jw-controls {
      background: none
    }

    .jwplayer.jw-flag-ads-vpaid.jw-flag-small-player .jw-controls::after {
      content: none
    }

    .jwplayer.jw-flag-ads-hide-controls .jw-controls-backdrop,
    .jwplayer.jw-flag-ads-hide-controls .jw-controls {
      display: none !important
    }

    .jw-flag-overlay-open-related .jw-controls,
    .jw-flag-overlay-open-related .jw-title,
    .jw-flag-overlay-open-related .jw-logo {
      display: none
    }

    .jwplayer.jw-flag-rightclick-open {
      overflow: visible
    }

    .jwplayer.jw-flag-rightclick-open .jw-rightclick {
      z-index: 16777215
    }

    body .jwplayer.jw-flag-flash-blocked .jw-controls,
    body .jwplayer.jw-flag-flash-blocked .jw-overlays,
    body .jwplayer.jw-flag-flash-blocked .jw-controls-backdrop,
    body .jwplayer.jw-flag-flash-blocked .jw-preview {
      display: none
    }

    body .jwplayer.jw-flag-flash-blocked .jw-error-msg {
      top: 25%
    }

    .jw-flag-touch.jw-breakpoint-7 .jw-captions,
    .jw-flag-touch.jw-breakpoint-6 .jw-captions,
    .jw-flag-touch.jw-breakpoint-5 .jw-captions,
    .jw-flag-touch.jw-breakpoint-4 .jw-captions,
    .jw-flag-touch.jw-breakpoint-7 .jw-nextup-container,
    .jw-flag-touch.jw-breakpoint-6 .jw-nextup-container,
    .jw-flag-touch.jw-breakpoint-5 .jw-nextup-container,
    .jw-flag-touch.jw-breakpoint-4 .jw-nextup-container {
      bottom: 4.25em
    }

    .jw-flag-touch .jw-controlbar .jw-icon-volume {
      display: flex
    }

    .jw-flag-touch .jw-display,
    .jw-flag-touch .jw-display-container,
    .jw-flag-touch .jw-display-controls {
      pointer-events: none
    }

    .jw-flag-touch.jw-state-paused:not(.jw-breakpoint-1) .jw-display-icon-next,
    .jw-flag-touch.jw-state-playing:not(.jw-breakpoint-1) .jw-display-icon-next,
    .jw-flag-touch.jw-state-paused:not(.jw-breakpoint-1) .jw-display-icon-rewind,
    .jw-flag-touch.jw-state-playing:not(.jw-breakpoint-1) .jw-display-icon-rewind {
      display: none
    }

    .jw-flag-touch.jw-state-paused.jw-flag-dragging .jw-display {
      display: none
    }

    .jw-flag-audio-player {
      background-color: #000
    }

    .jw-flag-audio-player:not(.jw-flag-flash-blocked) .jw-media {
      visibility: hidden
    }

    .jw-flag-audio-player .jw-title {
      background: none
    }

    .jw-flag-audio-player object {
      min-height: 44px
    }

    .jw-flag-audio-player:not(.jw-flag-live) .jw-spacer {
      display: none
    }

    .jw-flag-audio-player .jw-preview,
    .jw-flag-audio-player .jw-display,
    .jw-flag-audio-player .jw-title,
    .jw-flag-audio-player .jw-nextup-container {
      display: none
    }

    .jw-flag-audio-player .jw-controlbar {
      position: relative
    }

    .jw-flag-audio-player .jw-controlbar .jw-button-container {
      padding-right: 3px;
      padding-left: 0
    }

    .jw-flag-audio-player .jw-controlbar .jw-icon-tooltip,
    .jw-flag-audio-player .jw-controlbar .jw-icon-inline {
      display: none
    }

    .jw-flag-audio-player .jw-controlbar .jw-icon-volume,
    .jw-flag-audio-player .jw-controlbar .jw-icon-playback,
    .jw-flag-audio-player .jw-controlbar .jw-icon-next,
    .jw-flag-audio-player .jw-controlbar .jw-icon-rewind,
    .jw-flag-audio-player .jw-controlbar .jw-icon-cast,
    .jw-flag-audio-player .jw-controlbar .jw-text-live,
    .jw-flag-audio-player .jw-controlbar .jw-icon-airplay,
    .jw-flag-audio-player .jw-controlbar .jw-logo-button,
    .jw-flag-audio-player .jw-controlbar .jw-text-elapsed,
    .jw-flag-audio-player .jw-controlbar .jw-text-duration {
      display: flex;
      flex: 0 0 auto
    }

    .jw-flag-audio-player .jw-controlbar .jw-text-duration,
    .jw-flag-audio-player .jw-controlbar .jw-text-countdown {
      padding-right: 10px
    }

    .jw-flag-audio-player .jw-controlbar .jw-slider-time {
      flex: 0 1 auto;
      align-items: center;
      display: flex;
      order: 1
    }

    .jw-flag-audio-player .jw-controlbar .jw-icon-volume {
      margin-right: 0;
      transition: margin-right 150ms cubic-bezier(0, .25, .25, 1)
    }

    .jw-flag-audio-player .jw-controlbar .jw-icon-volume .jw-overlay {
      display: none
    }

    .jw-flag-audio-player .jw-controlbar .jw-horizontal-volume-container {
      transition: width 300ms cubic-bezier(0, .25, .25, 1);
      width: 0
    }

    .jw-flag-audio-player .jw-controlbar .jw-horizontal-volume-container.jw-open {
      width: 140px
    }

    .jw-flag-audio-player .jw-controlbar .jw-horizontal-volume-container.jw-open .jw-slider-volume {
      padding-right: 24px;
      transition: opacity 300ms;
      opacity: 1
    }

    .jw-flag-audio-player .jw-controlbar .jw-horizontal-volume-container.jw-open~.jw-slider-time {
      flex: 1 1 auto;
      width: auto;
      transition: opacity 300ms, width 300ms
    }

    .jw-flag-audio-player .jw-controlbar .jw-slider-volume {
      opacity: 0
    }

    .jw-flag-audio-player .jw-controlbar .jw-slider-volume .jw-knob {
      -webkit-transform: translate(-50%, -50%);
      transform: translate(-50%, -50%)
    }

    .jw-flag-audio-player .jw-controlbar .jw-slider-volume~.jw-icon-volume {
      margin-right: 140px
    }

    .jw-flag-audio-player.jw-breakpoint-1 .jw-horizontal-volume-container.jw-open~.jw-slider-time,
    .jw-flag-audio-player.jw-breakpoint-2 .jw-horizontal-volume-container.jw-open~.jw-slider-time {
      opacity: 0
    }

    .jw-flag-audio-player.jw-flag-small-player .jw-text-elapsed,
    .jw-flag-audio-player.jw-flag-small-player .jw-text-duration {
      display: none
    }

    .jw-flag-audio-player.jw-flag-ads .jw-slider-time {
      display: none
    }

    .jw-hidden {
      display: none
    }
  </style>
  <script charset="utf-8" src="//ssl.p.jwpcdn.com/player/v/8.17.7/provider.cast.js"></script>
  <script src="//www.gstatic.com/cast/sdk/libs/sender/1.0/cast_framework.js"></script>
  <script src="//www.gstatic.com/eureka/clank/118/cast_sender.js"></script>
</head>

<body>
  <div id="sidebar_menu_bg"></div>
  <div id="sidebar_menu">
    <button class="btn btn-radius btn-sm btn-secondary toggle-sidebar" id="fechar-menu-sidebar">
      <i class="fas fa-angle-left mr-2"></i>Fechar menu</button>
    <div class="sb-setting">
      <div class="header-setting">
        <div class="hs-toggles">
          <div class="row mb-3">
            <div class="col-4">
              <a href="https://animes.vision/login" class="hst-item" data-toggle="tooltip"
                data-original-title="Fazer Login">
                <div class="hst-icon"><i class="fas fa-user"></i></div>
                <div class="name"><span>Fazer Login</span></div>
              </a>
            </div>
          </div>
          <div class="row">
            <div class="col-7">
              <a href="https://animes.vision/assistir-em-grupo" class="hst-item" data-toggle="tooltip" title=""
                data-original-title="Assistir em Grupo">
                <div class="hst-icon">
                  <i class="zicon zicon-20 zicon-live"></i>
                </div>
                <div class="name"><span>Assista em Grupo</span></div>
              </a>
            </div>
            <div class="col-5">
              <a href="https://animes.vision/vision-tv" class="hst-item" data-toggle="tooltip" title=""
                data-original-title="Vision TV">
                <div class="hst-icon">
                  <i class="fas fa-tv"></i>
                </div>
                <div class="name"><span>Vision TV</span></div>
              </a>
            </div>
            <div class="col-6 mt-3">
              <a href="https://animes.vision/aleatorio" class="hst-item" data-toggle="tooltip"
                data-original-title="Assistir a um anime aleatório">
                <div class="hst-icon"><i class="fas fa-random"></i></div>
                <div class="name"><span>Aleatório</span></div>
              </a>
            </div>
            <div class="col-6 mt-3">
              <a href="https://animes.vision/acesso-vip" class="hst-item" data-toggle="tooltip"
                data-original-title="Premium VIP">
                <div class="hst-icon"><i class="fas fa-crown"></i></div>
                <div class="name"><span>Premium VIP</span></div>
              </a>
            </div>
          </div>
          <div class="clearfix"></div>
        </div>
      </div>
    </div>
    <ul class="nav sidebar_menu-list">
      <li class="nav-item active"><a class="nav-link" href="/" title="Home">Home</a></li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/filmes" title="Filmes">Filmes</a></li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/animes" title="Animes TV">Animes TV</a>
      </li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/doramas" title="Doramas">Doramas</a>
      </li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/cartoons" title="Cartoons">Cartoons</a>
      </li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/live-actions" title="Live Actions">Live
          Actions</a></li>
      <li class="nav-item"><a class="nav-link" href="https://hentaisvision.biz/" target="_blank"
          title="Hentais Vision">Hentais Vision</a></li>
      <li class="nav-item">
        <div class="nav-link" title="Genre"><strong>Gêneros</strong></div>
        <div class="sidebar_menu-sub show" id="sidebar_subs_genre">
          <ul class="nav color-list sub-menu">
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=acao">Ação</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=aventura">Aventura</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=artes-marciais">Artes
                Marciais</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=comedia">Comédia</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=cotidiano">Cotidiano</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=demonios">Demônios</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=drama">Drama</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=ecchi">Ecchi</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=escolar">Escolar</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=espacial">Espacial</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=esportes">Esportes</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=fantasia">Fantasia</a>
            </li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=ficcao-cientifica">Ficção Científica</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=harem">Harém</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=hentai">Hentai</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=historico">Histórico</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=horror">Horror</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=infantil">Infantil</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=game">Game</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=josei">Josei</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=magia">Magia</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=militar">Militar</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=misterio">Mistério</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=mecha">Mecha</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=musical">Musical</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=policial">Policial</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=parodia">Paródia</a>
            </li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=psicologico">Psicológico</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=romance">Romance</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=samurai">Samurai</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=seinen">Seinen</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=sci-fi">Sci-Fi</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=shoujo">Shoujo</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=shoujo-ai">Shoujo-Ai</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=shounen">Shounen</a>
            </li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=shounen-ai">Shounen-Ai</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=slice-of-life">Slice of
                Life</a></li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=sobrenatural">Sobrenatural</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=super-poderes">Super
                Poderes</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=suspense">Suspense</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=terror">Terror</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=tragedia">Tragédia</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=thriller">Thriller</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vampiros">Vampiros</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vida-escolar">Vida
                Escolar</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=yaoi">Yaoi</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=yuri">Yuri</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=fatia-de-vida">Fatia de
                vida</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=amor-de-meninas">Amor de
                meninas</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=amor-de-meninos">Amor de
                meninos</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=gourmet">Gourmet</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=avant-garde">Avant
                Garde</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vida-de-trabalho">Vida
                de trabalho</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=erotica">Erotica</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vanguarda">Vanguarda</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=garotos-amam">Garotos
                amam</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=isekai">Isekai</a></li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=reincarnation">Reincarnation</a></li>
            <li class="nav-item nav-more">
              <a class="nav-link" href="https://animes.vision/search?generos="><i class="fas fa-plus mr-2"></i>Mais</a>
            </li>
          </ul>
          <div class="clearfix"></div>
        </div>
      </li>
    </ul>
    <div class="clearfix"></div>
  </div>
  <div id="wrapper">
    <div id="header" class="header-home">
      <div class="container">
        <div id="mobile_menu">
          <i class="fa fa-bars"></i>
        </div>
        <a href="https://animes.vision" id="logo">
          <img src="https://animes.vision/v6/images/logo_vision.png" alt="Vision">
          <div class="clearfix"></div>
        </a>
        <div id="search">
          <div class="search-content">
            <form action="/search" autocomplete="off">
              <a href="https://animes.vision/search" class="filter-icon">Filtro</a>
              <input type="text" class="form-control search-input" name="nome" placeholder="Procure por um anime...">
              <button type="submit" class="search-icon"><i class="fas fa-search"></i></button>
            </form>
            <div class="nav search-result-pop" id="search-suggest" style="display: none;">
              <div class="loading-relative" id="search-loading" style="display: none;">
                <div class="loading">
                  <div class="span1"></div>
                  <div class="span2"></div>
                  <div class="span3"></div>
                </div>
              </div>
              <div class="result" style="display:none;"></div>
            </div>
          </div>
        </div>
        <div class="header-group">
          <div class="vision-group">
            <div class="zrg-title">
              <span class="top">Entre agora</span><span class="bottom">Grupos Vision</span>
            </div>
            <div class="zrg-list">
              <div class="item">
                <a href="https://discord.gg/Ey8YwNb" target="_blank" class="zr-social-button dc-btn"><i
                    class="fab fa-discord"></i></a>
              </div>
              <div class="item">
                <a href="https://t.me/+tNl_kGqSsHgyNWVh" target="_blank" class="zr-social-button tl-btn"><i
                    class="fab fa-telegram"></i></a>
              </div>
              <div class="item">
                <a href="https://facebook.com/animesvision.oficial" target="_blank" class="zr-social-button tl-btn"><i
                    class="fab fa-facebook-square"></i></a>
              </div>
              <div class="item">
                <a href="https://instagram.com/animesvisionoficial/" target="_blank" class="zr-social-button rd-btn"><i
                    class="fab fa-instagram"></i></a>
              </div>
              <div class="item">
                <a href="https://play.google.com/store/apps/details?id=com.anivision" target="_blank"
                  class="zr-social-button gr-btn"><i class="fab fa-android"></i></a>
              </div>
            </div>
            <div class="clearfix"></div>
          </div>
        </div>
        <div class="header-setting">
          <div class="hs-toggles">
            <a href="https://animes.vision/assistir-em-grupo" class="hst-item" data-toggle="tooltip" title=""
              data-original-title="Assistir em Grupo">
              <div class="hst-icon">
                <i class="zicon zicon-20 zicon-live"></i>
              </div>
              <div class="name"><span>Assista em Grupo</span></div>
            </a>
            <a href="https://animes.vision/acesso-vip" class="hst-item" data-toggle="tooltip"
              data-original-title="Premium VIP">
              <div class="hst-icon"><i class="fas fa-crown"></i></div>
              <div class="name"><span>Premium VIP</span></div>
            </a>
            <a href="https://animes.vision/aleatorio" class="hst-item" data-toggle="tooltip"
              data-original-title="Assistir a um anime aleatório">
              <div class="hst-icon"><i class="fas fa-random"></i></div>
              <div class="name"><span>Aleatório</span></div>
            </a>
            <div class="clearfix"></div>
          </div>
        </div>
        <div id="pick_menu">
          <div class="pick_menu-ul">
            <ul class="ulclear">
              <li class="pmu-item pmu-item-home">
                <a class="pmu-item-icon" href="/home" title="Home">
                  <img src="https://animes.vision/v6/images/pick-home.svg" data-toggle="tooltip" data-placement="right"
                    title="" data-original-title="Home">
                </a>
              </li>
              <li class="pmu-item pmu-item-movies">
                <a class="pmu-item-icon" href="/movie" title="Movies">
                  <img src="https://animes.vision/v6/images/pick-movies.svg" data-toggle="tooltip"
                    data-placement="right" title="" data-original-title="Movies">
                </a>
              </li>
              <li class="pmu-item pmu-item-show">
                <a class="pmu-item-icon" href="/tv" title="TV Series">
                  <img src="https://animes.vision/v6/images/pick-show.svg" data-toggle="tooltip" data-placement="right"
                    title="" data-original-title="TV Series">
                </a>
              </li>
              <li class="pmu-item pmu-item-popular">
                <a class="pmu-item-icon" href="/most-popular" title="Most Popular">
                  <img src="https://animes.vision/v6/images/pick-popular.svg" data-toggle="tooltip"
                    data-placement="right" title="" data-original-title="Most Popular">
                </a>
              </li>
            </ul>
          </div>
        </div>
        <div id="header_right">
          <a href="https://animes.vision/register" class="btn btn-dark btn-md botao-registre mr-2">Registre-se</a>
          <a href="https://animes.vision/login" class="btn btn-primary btn-md text-white">Fazer login</a>
        </div>
        <div id="mobile_search" class=""><i class="fa fa-search"></i></div>
        <div class="clearfix"></div>
      </div>
    </div>
    <div class="clearfix"></div>
    <div>
      <div id="main-wrapper" class="layout-page layout-page-detail layout-page-watchtv">
        <div id="ani_detail">
          <div class="ani_detail-stage">
            <div class="container">
              <div class="anis-cover-wrap">
                <div class="anis-cover"
                  style="background-image: url(https://animes.vision/storage/strike-the-blood-3-2019-06-21-5d0d4179452f3.jpg)">
                </div>
              </div>
              <div class="anis-watch-wrap">
                <div class="prebreadcrumb">
                  <nav aria-label="breadcrumb">
                    <ol class="breadcrumb">
                      <li class="breadcrumb-item">
                        <a href="https://animes.vision" title="Home">Home</a>
                      </li>
                      <li class="breadcrumb-item">
                        <a href="https://animes.vision/animes">Animes</a>
                      </li>

                      <li class="breadcrumb-item dynamic-name active"
                        title="Assistindo Strike the Blood 3 - Episodio 04">Assistindo Strike the Blood 3 - Episodio 04
                      </li>
                    </ol>
                  </nav>
                </div>
                <div wire:id="Jj4ifVGklvRtW5xAPTh8" class="anis-watch anis-watch-tv" wire:ignore.self="">
                  <div class="watch-player">
                    <div class="player-frame" style="padding-bottom: 0px !important;" wire:key="global">
                      <div wire:id="WC8UQO6qOgpvFjkjECMo">
                        <div id="playerglobalapi"
                          class="jwplayer jw-reset jw-state-idle jw-stretch-uniform jw-flag-aspect-mode jw-breakpoint-5 jw-floating-dismissible jw-flag-user-inactive jw-flag-cast-available"
                          tabindex="0" aria-label="Reprodutor de Vídeo" role="application" style="width: 100%;"
                          aria-describedby="jw-shortcuts-tooltip-explanation">
                          <div class="jw-aspect jw-reset" style="padding-top: 56.25%;"></div>
                          <div class="jw-wrapper jw-reset">
                            <div
                              style="opacity: 0; visibility: hidden; overflow: hidden; display: block; position: absolute; top: 0px; left: 0px; width: 100%; height: 100%;">
                              <div
                                style="overflow: auto; display: block; position: absolute; top: 0px; left: 0px; width: 100%; height: 100%;">
                                <div style="height: 1px; width: 848px;"></div>
                              </div>
                              <div class="jw-contract-trigger"
                                style="overflow: auto; display: block; position: absolute; top: 0px; left: 0px; width: 100%; height: 100%;">
                              </div>
                            </div>
                            <div class="jw-top jw-reset"></div>
                            <div class="jw-aspect jw-reset" style="padding-top: 56.25%;"></div>
                            <div class="jw-media jw-reset"><video class="jw-video jw-reset" tabindex="-1"
                                disableremoteplayback="" webkit-playsinline="" playsinline="" preload="metadata"
                                src="https://cdn-2.tanoshi.digital/stream/S/Strike_The_Blood_3/480p/AnV-04.mp4?md5=whZ1ilfTbPxzg9AWsnxmag&amp;expires=1698082555"></video>
                            </div>
                            <div class="jw-preview jw-reset"
                              style="background-image: url(&quot;https://animes.vision/v1/assets/images/vision-banner.png&quot;); background-size: cover;">
                            </div>
                            <div class="jw-controls-backdrop jw-reset"></div>
                            <div class="jw-captions jw-reset" style="font-size: 24px;">
                              <div class="jw-captions-window jw-reset"><span class="jw-captions-text jw-reset"></span>
                              </div>
                            </div>
                            <div class="jw-title jw-reset-text" dir="auto" style="display: none; padding-right: 172px;">
                              <div class="jw-title-primary jw-reset-text"></div>
                              <div class="jw-title-secondary jw-reset-text"></div>
                            </div>
                            <div class="jw-overlays jw-reset">
                              <div id="playerglobalapi_jwpsrv" class="jw-plugin jw-reset"></div>
                            </div>
                            <div class="jw-hidden-accessibility"><span class="jw-time-update"
                                aria-live="assertive"></span><span class="jw-volume-update" aria-live="assertive">Volume
                                90%</span></div>
                            <div class="jw-logo jw-logo-top-right jw-hide jw-reset" tabindex="0" aria-label="Logo"
                              style="background-image: url(&quot;https://animes.vision/v1/assets/images/logo-footer2.png&quot;); width: 154px; height: 40px;">
                            </div>
                            <div class="jw-shortcuts-tooltip jw-modal jw-reset" title="Atalhos de Teclado">
                              <div class="jw-icon jw-icon-inline jw-button-color jw-reset jw-shortcuts-close"
                                role="button" tabindex="0" aria-label="Fechar" style=""><svg
                                  xmlns="http://www.w3.org/2000/svg" class="jw-svg-icon jw-svg-icon-close"
                                  viewBox="0 0 240 240" focusable="false">
                                  <path
                                    d="M134.8,120l48.6-48.6c2-1.9,2.1-5.2,0.2-7.2c0,0-0.1-0.1-0.2-0.2l-7.4-7.4c-1.9-2-5.2-2.1-7.2-0.2c0,0-0.1,0.1-0.2,0.2L120,105.2L71.4,56.6c-1.9-2-5.2-2.1-7.2-0.2c0,0-0.1,0.1-0.2,0.2L56.6,64c-2,1.9-2.1,5.2-0.2,7.2c0,0,0.1,0.1,0.2,0.2l48.6,48.7l-48.6,48.6c-2,1.9-2.1,5.2-0.2,7.2c0,0,0.1,0.1,0.2,0.2l7.4,7.4c1.9,2,5.2,2.1,7.2,0.2c0,0,0.1-0.1,0.2-0.2l48.7-48.6l48.6,48.6c1.9,2,5.2,2.1,7.2,0.2c0,0,0.1-0.1,0.2-0.2l7.4-7.4c2-1.9,2.1-5.2,0.2-7.2c0,0-0.1-0.1-0.2-0.2L134.8,120z">
                                  </path>
                                </svg></div><span class="jw-hidden" id="jw-shortcuts-tooltip-explanation">Press shift
                                question mark to access a list of keyboard shortcuts</span>
                              <div class="jw-reset jw-shortcuts-container">
                                <div class="jw-reset jw-shortcuts-header"><span
                                    class="jw-reset jw-shortcuts-title">Atalhos de Teclado</span><button role="switch"
                                    aria-label="Atalhos de Teclado" class="jw-reset jw-switch"><span
                                      class="jw-reset jw-switch-knob"></span><span
                                      class="jw-reset-text jw-switch-enabled">Enabled</span><span
                                      class="jw-reset-text jw-switch-disabled">Disabled</span></button></div>
                                <div class="jw-reset jw-shortcuts-tooltip-list">
                                  <div class="jw-shortcuts-tooltip-descriptions jw-reset">
                                    <div class="jw-shortcuts-row jw-reset"><span
                                        class="jw-shortcuts-description jw-reset">Reproduzir/Pausar</span><span
                                        class="jw-shortcuts-key jw-reset">Espaço</span></div>
                                    <div class="jw-shortcuts-row jw-reset"><span
                                        class="jw-shortcuts-description jw-reset">Aumentar o Volume</span><span
                                        class="jw-shortcuts-key jw-reset">↑</span></div>
                                    <div class="jw-shortcuts-row jw-reset"><span
                                        class="jw-shortcuts-description jw-reset">Diminuir o Volume</span><span
                                        class="jw-shortcuts-key jw-reset">↓</span></div>
                                    <div class="jw-shortcuts-row jw-reset"><span
                                        class="jw-shortcuts-description jw-reset">Adiantar</span><span
                                        class="jw-shortcuts-key jw-reset">→</span></div>
                                    <div class="jw-shortcuts-row jw-reset"><span
                                        class="jw-shortcuts-description jw-reset">Retroceder</span><span
                                        class="jw-shortcuts-key jw-reset">←</span></div>
                                    <div class="jw-shortcuts-row jw-reset"><span
                                        class="jw-shortcuts-description jw-reset">Legendas Ativar/Desativar</span><span
                                        class="jw-shortcuts-key jw-reset">c</span></div>
                                    <div class="jw-shortcuts-row jw-reset"><span
                                        class="jw-shortcuts-description jw-reset">Tela Cheia/Sair da Tela
                                        Cheia</span><span class="jw-shortcuts-key jw-reset">f</span></div>
                                    <div class="jw-shortcuts-row jw-reset"><span
                                        class="jw-shortcuts-description jw-reset">Desativar Som/Ativar Som</span><span
                                        class="jw-shortcuts-key jw-reset">m</span></div>
                                    <div class="jw-shortcuts-row jw-reset"><span
                                        class="jw-shortcuts-description jw-reset">Adiantar %</span><span
                                        class="jw-shortcuts-key jw-reset">0-9</span></div>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div class="jw-controls jw-reset">
                              <div class="jw-display jw-reset">
                                <div class="jw-display-container jw-reset">
                                  <div class="jw-display-controls jw-reset">
                                    <div class="jw-display-icon-container jw-display-icon-rewind jw-reset">
                                      <div class="jw-icon jw-icon-rewind jw-button-color jw-reset" role="button"
                                        tabindex="0" aria-label="Voltar 10 Segundos"><svg
                                          xmlns="http://www.w3.org/2000/svg" class="jw-svg-icon jw-svg-icon-rewind"
                                          viewBox="0 0 240 240" focusable="false">
                                          <path
                                            d="M113.2,131.078a21.589,21.589,0,0,0-17.7-10.6,21.589,21.589,0,0,0-17.7,10.6,44.769,44.769,0,0,0,0,46.3,21.589,21.589,0,0,0,17.7,10.6,21.589,21.589,0,0,0,17.7-10.6,44.769,44.769,0,0,0,0-46.3Zm-17.7,47.2c-7.8,0-14.4-11-14.4-24.1s6.6-24.1,14.4-24.1,14.4,11,14.4,24.1S103.4,178.278,95.5,178.278Zm-43.4,9.7v-51l-4.8,4.8-6.8-6.8,13-13a4.8,4.8,0,0,1,8.2,3.4v62.7l-9.6-.1Zm162-130.2v125.3a4.867,4.867,0,0,1-4.8,4.8H146.6v-19.3h48.2v-96.4H79.1v19.3c0,5.3-3.6,7.2-8,4.3l-41.8-27.9a6.013,6.013,0,0,1-2.7-8,5.887,5.887,0,0,1,2.7-2.7l41.8-27.9c4.4-2.9,8-1,8,4.3v19.3H209.2A4.974,4.974,0,0,1,214.1,57.778Z">
                                          </path>
                                        </svg></div>
                                    </div>
                                    <div class="jw-display-icon-container jw-display-icon-display jw-reset">
                                      <div class="jw-icon jw-icon-display jw-button-color jw-reset" role="button"
                                        tabindex="0" aria-label="Reproduzir"><svg xmlns="http://www.w3.org/2000/svg"
                                          class="jw-svg-icon jw-svg-icon-buffer" viewBox="0 0 240 240"
                                          focusable="false">
                                          <path
                                            d="M120,186.667a66.667,66.667,0,0,1,0-133.333V40a80,80,0,1,0,80,80H186.667A66.846,66.846,0,0,1,120,186.667Z">
                                          </path>
                                        </svg><svg xmlns="http://www.w3.org/2000/svg"
                                          class="jw-svg-icon jw-svg-icon-replay" viewBox="0 0 240 240"
                                          focusable="false">
                                          <path
                                            d="M120,41.9v-20c0-5-4-8-8-4l-44,28a5.865,5.865,0,0,0-3.3,7.6A5.943,5.943,0,0,0,68,56.8l43,29c5,4,9,1,9-4v-20a60,60,0,1,1-60,60H40a80,80,0,1,0,80-79.9Z">
                                          </path>
                                        </svg><svg xmlns="http://www.w3.org/2000/svg"
                                          class="jw-svg-icon jw-svg-icon-play" viewBox="0 0 240 240" focusable="false">
                                          <path
                                            d="M62.8,199.5c-1,0.8-2.4,0.6-3.3-0.4c-0.4-0.5-0.6-1.1-0.5-1.8V42.6c-0.2-1.3,0.7-2.4,1.9-2.6c0.7-0.1,1.3,0.1,1.9,0.4l154.7,77.7c2.1,1.1,2.1,2.8,0,3.8L62.8,199.5z">
                                          </path>
                                        </svg><svg xmlns="http://www.w3.org/2000/svg"
                                          class="jw-svg-icon jw-svg-icon-pause" viewBox="0 0 240 240" focusable="false">
                                          <path
                                            d="M100,194.9c0.2,2.6-1.8,4.8-4.4,5c-0.2,0-0.4,0-0.6,0H65c-2.6,0.2-4.8-1.8-5-4.4c0-0.2,0-0.4,0-0.6V45c-0.2-2.6,1.8-4.8,4.4-5c0.2,0,0.4,0,0.6,0h30c2.6-0.2,4.8,1.8,5,4.4c0,0.2,0,0.4,0,0.6V194.9z M180,45.1c0.2-2.6-1.8-4.8-4.4-5c-0.2,0-0.4,0-0.6,0h-30c-2.6-0.2-4.8,1.8-5,4.4c0,0.2,0,0.4,0,0.6V195c-0.2,2.6,1.8,4.8,4.4,5c0.2,0,0.4,0,0.6,0h30c2.6,0.2,4.8-1.8,5-4.4c0-0.2,0-0.4,0-0.6V45.1z">
                                          </path>
                                        </svg></div>
                                    </div>
                                    <div class="jw-display-icon-container jw-display-icon-next jw-reset"
                                      style="visibility: hidden;">
                                      <div class="jw-icon jw-icon-next jw-button-color jw-reset" role="button"
                                        tabindex="0" aria-label="Próximo"><svg xmlns="http://www.w3.org/2000/svg"
                                          class="jw-svg-icon jw-svg-icon-next" viewBox="0 0 240 240" focusable="false">
                                          <path
                                            d="M165,60v53.3L59.2,42.8C56.9,41.3,55,42.3,55,45v150c0,2.7,1.9,3.8,4.2,2.2L165,126.6v53.3h20v-120L165,60L165,60z">
                                          </path>
                                        </svg></div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                              <div class="jw-nextup-container jw-reset">
                                <div class="jw-nextup jw-background-color jw-reset">
                                  <div class="jw-nextup-tooltip jw-reset">
                                    <div class="jw-nextup-thumbnail jw-reset"></div>
                                    <div class="jw-nextup-body jw-reset">
                                      <div class="jw-nextup-header jw-reset"></div>
                                      <div class="jw-nextup-title jw-reset-text" dir="auto"></div>
                                      <div class="jw-nextup-duration jw-reset"></div>
                                    </div>
                                  </div><button type="button" class="jw-icon jw-nextup-close jw-reset"
                                    aria-label="Fechar"><svg xmlns="http://www.w3.org/2000/svg"
                                      class="jw-svg-icon jw-svg-icon-close" viewBox="0 0 240 240" focusable="false">
                                      <path
                                        d="M134.8,120l48.6-48.6c2-1.9,2.1-5.2,0.2-7.2c0,0-0.1-0.1-0.2-0.2l-7.4-7.4c-1.9-2-5.2-2.1-7.2-0.2c0,0-0.1,0.1-0.2,0.2L120,105.2L71.4,56.6c-1.9-2-5.2-2.1-7.2-0.2c0,0-0.1,0.1-0.2,0.2L56.6,64c-2,1.9-2.1,5.2-0.2,7.2c0,0,0.1,0.1,0.2,0.2l48.6,48.7l-48.6,48.6c-2,1.9-2.1,5.2-0.2,7.2c0,0,0.1,0.1,0.2,0.2l7.4,7.4c1.9,2,5.2,2.1,7.2,0.2c0,0,0.1-0.1,0.2-0.2l48.7-48.6l48.6,48.6c1.9,2,5.2,2.1,7.2,0.2c0,0,0.1-0.1,0.2-0.2l7.4-7.4c2-1.9,2.1-5.2,0.2-7.2c0,0-0.1-0.1-0.2-0.2L134.8,120z">
                                      </path>
                                    </svg></button>
                                </div>
                              </div>
                              <div id="jw-settings-menu" class="jw-reset jw-settings-menu" role="menu"
                                aria-expanded="false">
                                <div class="jw-reset jw-settings-topbar" role="menubar">
                                  <div class="jw-reset jw-settings-topbar-text" tabindex="0"></div>
                                  <div class="jw-reset jw-settings-topbar-buttons">
                                    <div
                                      class="jw-icon jw-icon-inline jw-button-color jw-reset jw-settings-playbackRates jw-submenu-playbackRates"
                                      role="menuitemradio" tabindex="0" aria-label="Taxas de Reprodução"
                                      name="playbackRates" aria-expanded="false" aria-haspopup="true"
                                      aria-controls="jw-settings-submenu-playbackRates" style=""><svg
                                        xmlns="http://www.w3.org/2000/svg" class="jw-svg-icon jw-svg-icon-playback-rate"
                                        viewBox="0 0 240 240" focusable="false">
                                        <path
                                          d="M158.83,48.83A71.17,71.17,0,1,0,230,120,71.163,71.163,0,0,0,158.83,48.83Zm45.293,77.632H152.34V74.708h12.952v38.83h38.83ZM35.878,74.708h38.83V87.66H35.878ZM10,113.538H61.755V126.49H10Zm25.878,38.83h38.83V165.32H35.878Z">
                                        </path>
                                      </svg>
                                      <div class="jw-reset-text jw-tooltip jw-tooltip-playbackRates" dir="auto">
                                        <div class="jw-text"></div>
                                      </div>
                                    </div>
                                    <div class="jw-icon jw-icon-inline jw-button-color jw-reset jw-settings-close"
                                      role="button" tabindex="0" aria-label="Fechar" style=""><svg
                                        xmlns="http://www.w3.org/2000/svg" class="jw-svg-icon jw-svg-icon-close"
                                        viewBox="0 0 240 240" focusable="false">
                                        <path
                                          d="M134.8,120l48.6-48.6c2-1.9,2.1-5.2,0.2-7.2c0,0-0.1-0.1-0.2-0.2l-7.4-7.4c-1.9-2-5.2-2.1-7.2-0.2c0,0-0.1,0.1-0.2,0.2L120,105.2L71.4,56.6c-1.9-2-5.2-2.1-7.2-0.2c0,0-0.1,0.1-0.2,0.2L56.6,64c-2,1.9-2.1,5.2-0.2,7.2c0,0,0.1,0.1,0.2,0.2l48.6,48.7l-48.6,48.6c-2,1.9-2.1,5.2-0.2,7.2c0,0,0.1,0.1,0.2,0.2l7.4,7.4c1.9,2,5.2,2.1,7.2,0.2c0,0,0.1-0.1,0.2-0.2l48.7-48.6l48.6,48.6c1.9,2,5.2,2.1,7.2,0.2c0,0,0.1-0.1,0.2-0.2l7.4-7.4c2-1.9,2.1-5.2,0.2-7.2c0,0-0.1-0.1-0.2-0.2L134.8,120z">
                                        </path>
                                      </svg></div>
                                  </div>
                                </div>
                                <div id="jw-settings-submenu-playbackRates"
                                  class="jw-reset jw-settings-submenu jw-settings-submenu-playbackRates" role="menu"
                                  aria-expanded="false">
                                  <div class="jw-reset jw-settings-submenu-items"><button type="button"
                                      class="jw-reset-text jw-settings-content-item" aria-label="0.5x"
                                      role="menuitemradio" aria-checked="false" dir="auto">0.5x</button><button
                                      type="button" class="jw-reset-text jw-settings-content-item" aria-label="0.75x"
                                      role="menuitemradio" aria-checked="false" dir="auto">0.75x</button><button
                                      type="button"
                                      class="jw-reset-text jw-settings-content-item jw-settings-item-active"
                                      aria-label="1x" role="menuitemradio" aria-checked="true"
                                      dir="auto">1x</button><button type="button"
                                      class="jw-reset-text jw-settings-content-item" aria-label="1.25x"
                                      role="menuitemradio" aria-checked="false" dir="auto">1.25x</button><button
                                      type="button" class="jw-reset-text jw-settings-content-item" aria-label="1.5x"
                                      role="menuitemradio" aria-checked="false" dir="auto">1.5x</button><button
                                      type="button" class="jw-reset-text jw-settings-content-item" aria-label="2x"
                                      role="menuitemradio" aria-checked="false" dir="auto">2x</button></div>
                                </div>
                              </div>
                              <div class="jw-controlbar jw-reset">
                                <div class="jw-slider-time jw-background-color jw-reset jw-slider-horizontal jw-reset"
                                  tabindex="0" role="slider" aria-label="Controle de Posicionamento" aria-valuemin="0"
                                  aria-valuemax="1533.623">
                                  <div class="jw-slider-container jw-reset">
                                    <div class="jw-rail jw-reset"></div>
                                    <div class="jw-buffer jw-reset" style="width: 100%;"></div>
                                    <div class="jw-progress jw-reset" style="width: 0%;"></div>
                                    <div class="jw-knob jw-reset" style="left: 0%;"></div>
                                    <div class="jw-icon jw-icon-tooltip jw-tooltip-time jw-button-color jw-reset">
                                      <div class="jw-overlay jw-reset">
                                        <div class="jw-time-tip jw-reset">
                                          <div class="jw-time-thumb jw-reset" style="width: 0px; height: 0px;"></div>
                                          <span class="jw-text jw-reset"></span>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                                <div class="jw-reset jw-button-container">
                                  <div class="jw-icon jw-icon-inline jw-button-color jw-reset jw-icon-playback"
                                    role="button" tabindex="0" aria-label="Reproduzir" style=""><svg
                                      xmlns="http://www.w3.org/2000/svg" class="jw-svg-icon jw-svg-icon-play"
                                      viewBox="0 0 240 240" focusable="false">
                                      <path
                                        d="M62.8,199.5c-1,0.8-2.4,0.6-3.3-0.4c-0.4-0.5-0.6-1.1-0.5-1.8V42.6c-0.2-1.3,0.7-2.4,1.9-2.6c0.7-0.1,1.3,0.1,1.9,0.4l154.7,77.7c2.1,1.1,2.1,2.8,0,3.8L62.8,199.5z">
                                      </path>
                                    </svg><svg xmlns="http://www.w3.org/2000/svg" class="jw-svg-icon jw-svg-icon-pause"
                                      viewBox="0 0 240 240" focusable="false">
                                      <path
                                        d="M100,194.9c0.2,2.6-1.8,4.8-4.4,5c-0.2,0-0.4,0-0.6,0H65c-2.6,0.2-4.8-1.8-5-4.4c0-0.2,0-0.4,0-0.6V45c-0.2-2.6,1.8-4.8,4.4-5c0.2,0,0.4,0,0.6,0h30c2.6-0.2,4.8,1.8,5,4.4c0,0.2,0,0.4,0,0.6V194.9z M180,45.1c0.2-2.6-1.8-4.8-4.4-5c-0.2,0-0.4,0-0.6,0h-30c-2.6-0.2-4.8,1.8-5,4.4c0,0.2,0,0.4,0,0.6V195c-0.2,2.6,1.8,4.8,4.4,5c0.2,0,0.4,0,0.6,0h30c2.6,0.2,4.8-1.8,5-4.4c0-0.2,0-0.4,0-0.6V45.1z">
                                      </path>
                                    </svg><svg xmlns="http://www.w3.org/2000/svg" class="jw-svg-icon jw-svg-icon-stop"
                                      viewBox="0 0 240 240" focusable="false">
                                      <path
                                        d="M190,185c0.2,2.6-1.8,4.8-4.4,5c-0.2,0-0.4,0-0.6,0H55c-2.6,0.2-4.8-1.8-5-4.4c0-0.2,0-0.4,0-0.6V55c-0.2-2.6,1.8-4.8,4.4-5c0.2,0,0.4,0,0.6,0h130c2.6-0.2,4.8,1.8,5,4.4c0,0.2,0,0.4,0,0.6V185z">
                                      </path>
                                    </svg>
                                    <div class="jw-reset-text jw-tooltip jw-tooltip-play" dir="auto">
                                      <div class="jw-text"></div>
                                    </div>
                                  </div>
                                  <div class="jw-icon jw-icon-inline jw-button-color jw-reset jw-icon-rewind"
                                    role="button" tabindex="0" aria-label="Voltar 10 Segundos" style=""><svg
                                      xmlns="http://www.w3.org/2000/svg" class="jw-svg-icon jw-svg-icon-rewind"
                                      viewBox="0 0 240 240" focusable="false">
                                      <path
                                        d="M113.2,131.078a21.589,21.589,0,0,0-17.7-10.6,21.589,21.589,0,0,0-17.7,10.6,44.769,44.769,0,0,0,0,46.3,21.589,21.589,0,0,0,17.7,10.6,21.589,21.589,0,0,0,17.7-10.6,44.769,44.769,0,0,0,0-46.3Zm-17.7,47.2c-7.8,0-14.4-11-14.4-24.1s6.6-24.1,14.4-24.1,14.4,11,14.4,24.1S103.4,178.278,95.5,178.278Zm-43.4,9.7v-51l-4.8,4.8-6.8-6.8,13-13a4.8,4.8,0,0,1,8.2,3.4v62.7l-9.6-.1Zm162-130.2v125.3a4.867,4.867,0,0,1-4.8,4.8H146.6v-19.3h48.2v-96.4H79.1v19.3c0,5.3-3.6,7.2-8,4.3l-41.8-27.9a6.013,6.013,0,0,1-2.7-8,5.887,5.887,0,0,1,2.7-2.7l41.8-27.9c4.4-2.9,8-1,8,4.3v19.3H209.2A4.974,4.974,0,0,1,214.1,57.778Z">
                                      </path>
                                    </svg>
                                    <div class="jw-reset-text jw-tooltip jw-tooltip-rewind" dir="auto">
                                      <div class="jw-text"></div>
                                    </div>
                                  </div>
                                  <div class="jw-icon jw-icon-inline jw-button-color jw-reset jw-icon-next"
                                    role="button" tabindex="0" aria-label="Próximo" dir="auto" style="display: none;">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="jw-svg-icon jw-svg-icon-next"
                                      viewBox="0 0 240 240" focusable="false">
                                      <path
                                        d="M165,60v53.3L59.2,42.8C56.9,41.3,55,42.3,55,45v150c0,2.7,1.9,3.8,4.2,2.2L165,126.6v53.3h20v-120L165,60L165,60z">
                                      </path>
                                    </svg>
                                    <div class="jw-reset-text jw-tooltip jw-tooltip-next" dir="auto">
                                      <div class="jw-text"></div>
                                    </div>
                                  </div>
                                  <div aria-label="Desativar Som button" role="group" tabindex="0"
                                    class="jw-icon jw-icon-tooltip jw-icon-volume jw-button-color jw-reset jw-full">
                                    <div class="jw-overlay jw-reset" tabindex="0" aria-label="Controle de Volume"
                                      aria-orientation="vertical" aria-valuemin="0" aria-valuemax="100" role="slider"
                                      aria-valuenow="90" aria-valuetext="Volume 90%">
                                      <div class="jw-slider-volume jw-volume-tip jw-reset jw-slider-vertical"
                                        aria-hidden="true">
                                        <div class="jw-slider-container jw-reset">
                                          <div class="jw-rail jw-reset"></div>
                                          <div class="jw-buffer jw-reset"></div>
                                          <div class="jw-progress jw-reset" style="height: 90%;"></div>
                                          <div class="jw-knob jw-reset" style="bottom: 90%;"></div>
                                        </div>
                                      </div>
                                    </div><svg xmlns="http://www.w3.org/2000/svg"
                                      class="jw-svg-icon jw-svg-icon-volume-0" viewBox="0 0 240 240" focusable="false">
                                      <path
                                        d="M116.4,42.8v154.5c0,2.8-1.7,3.6-3.8,1.7l-54.1-48.1H28.9c-2.8,0-5.2-2.3-5.2-5.2V94.2c0-2.8,2.3-5.2,5.2-5.2h29.6l54.1-48.1C114.6,39.1,116.4,39.9,116.4,42.8z M212.3,96.4l-14.6-14.6l-23.6,23.6l-23.6-23.6l-14.6,14.6l23.6,23.6l-23.6,23.6l14.6,14.6l23.6-23.6l23.6,23.6l14.6-14.6L188.7,120L212.3,96.4z">
                                      </path>
                                    </svg><svg xmlns="http://www.w3.org/2000/svg"
                                      class="jw-svg-icon jw-svg-icon-volume-50" viewBox="0 0 240 240" focusable="false">
                                      <path
                                        d="M116.4,42.8v154.5c0,2.8-1.7,3.6-3.8,1.7l-54.1-48.1H28.9c-2.8,0-5.2-2.3-5.2-5.2V94.2c0-2.8,2.3-5.2,5.2-5.2h29.6l54.1-48.1C114.7,39.1,116.4,39.9,116.4,42.8z M178.2,120c0-22.7-18.5-41.2-41.2-41.2v20.6c11.4,0,20.6,9.2,20.6,20.6c0,11.4-9.2,20.6-20.6,20.6v20.6C159.8,161.2,178.2,142.7,178.2,120z">
                                      </path>
                                    </svg><svg xmlns="http://www.w3.org/2000/svg"
                                      class="jw-svg-icon jw-svg-icon-volume-100" viewBox="0 0 240 240"
                                      focusable="false">
                                      <path
                                        d="M116.5,42.8v154.4c0,2.8-1.7,3.6-3.8,1.7l-54.1-48H29c-2.8,0-5.2-2.3-5.2-5.2V94.3c0-2.8,2.3-5.2,5.2-5.2h29.6l54.1-48C114.8,39.2,116.5,39.9,116.5,42.8z">
                                      </path>
                                      <path
                                        d="M136.2,160v-20c11.1,0,20-8.9,20-20s-8.9-20-20-20V80c22.1,0,40,17.9,40,40S158.3,160,136.2,160z">
                                      </path>
                                      <path
                                        d="M216.2,120c0-44.2-35.8-80-80-80v20c33.1,0,60,26.9,60,60s-26.9,60-60,60v20C180.4,199.9,216.1,164.1,216.2,120z">
                                      </path>
                                    </svg>
                                  </div>
                                  <div class="jw-horizontal-volume-container" tabindex="-1"
                                    aria-label="Controle de Volume" aria-orientation="horizontal" aria-valuemin="0"
                                    aria-valuemax="100" role="slider" aria-valuenow="90" aria-valuetext="Volume 90%">
                                    <div class="jw-slider-volume jw-reset jw-slider-horizontal" aria-hidden="true">
                                      <div class="jw-slider-container jw-reset">
                                        <div class="jw-rail jw-reset"></div>
                                        <div class="jw-buffer jw-reset"></div>
                                        <div class="jw-progress jw-reset" style="width: 90%;"></div>
                                        <div class="jw-knob jw-reset" style="left: 90%;"></div>
                                      </div>
                                    </div>
                                  </div><span class="jw-text jw-reset-text jw-text-alt" role="status" dir="auto"></span>
                                  <div class="jw-icon jw-icon-inline jw-button-color jw-reset jw-text-live"
                                    role="button" tabindex="0" aria-label="Ao Vivo" style="display: none;">Ao Vivo</div>
                                  <div class="jw-icon jw-icon-inline jw-text jw-reset jw-text-elapsed" role="timer">
                                    00:00</div>
                                  <div class="jw-icon jw-icon-inline jw-text jw-reset jw-text-countdown" role="timer">
                                    00:00</div>
                                  <div class="jw-icon jw-icon-inline jw-text jw-reset jw-text-duration" role="timer">
                                    25:33</div>
                                  <div class="jw-reset jw-spacer"></div>
                                  <div class="jw-icon jw-icon-inline jw-button-color jw-reset "
                                    button="Pular Abertura (+85s)" role="button" tabindex="0"
                                    aria-label="Pular Abertura (+85s)"><svg xmlns="http://www.w3.org/2000/svg"
                                      width="16" height="16" fill="currentColor" class="bi bi-chevron-double-right"
                                      viewBox="0 0 16 16">
                                      <path fill-rule="evenodd"
                                        d="M3.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L9.293 8 3.646 2.354a.5.5 0 0 1 0-.708z">
                                      </path>
                                      <path fill-rule="evenodd"
                                        d="M7.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L13.293 8 7.646 2.354a.5.5 0 0 1 0-.708z">
                                      </path>
                                    </svg>
                                    <div class="jw-reset-text jw-tooltip jw-tooltip-Pular Abertura (+85s)" dir="auto">
                                      <div class="jw-text"></div>
                                    </div>
                                  </div>
                                  <div class="jw-icon jw-icon-inline jw-button-color jw-reset " button="pipPlayer"
                                    role="button" tabindex="0" aria-label="Soltar player"><svg
                                      xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor"
                                      class="bi bi-box-arrow-in-up-right" viewBox="0 0 16 16">
                                      <path fill-rule="evenodd"
                                        d="M6.364 13.5a.5.5 0 0 0 .5.5H13.5a1.5 1.5 0 0 0 1.5-1.5v-10A1.5 1.5 0 0 0 13.5 1h-10A1.5 1.5 0 0 0 2 2.5v6.636a.5.5 0 1 0 1 0V2.5a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v10a.5.5 0 0 1-.5.5H6.864a.5.5 0 0 0-.5.5z">
                                      </path>
                                      <path fill-rule="evenodd"
                                        d="M11 5.5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793l-8.147 8.146a.5.5 0 0 0 .708.708L10 6.707V10.5a.5.5 0 0 0 1 0v-5z">
                                      </path>
                                    </svg>
                                    <div class="jw-reset-text jw-tooltip jw-tooltip-pipPlayer" dir="auto">
                                      <div class="jw-text"></div>
                                    </div>
                                  </div>
                                  <div class="jw-icon jw-icon-inline jw-button-color jw-reset jw-icon-cast"
                                    role="button" tabindex="0" aria-label="Chromecast" style="cursor: pointer;">
                                    <google-cast-launcher tabindex="-1" class="jw-reset jw-off"
                                      style="display: inline;"></google-cast-launcher>
                                    <div class="jw-reset-text jw-tooltip jw-tooltip-chromecast" dir="auto">
                                      <div class="jw-text"></div>
                                    </div>
                                  </div>
                                  <div
                                    class="jw-icon jw-icon-inline jw-button-color jw-reset jw-icon-cc jw-settings-submenu-button jw-off"
                                    role="button" tabindex="0" aria-label="Legendas Ocultas" aria-haspopup="true"
                                    aria-controls="jw-settings-submenu-captions" style="display: none;"><svg
                                      xmlns="http://www.w3.org/2000/svg" class="jw-svg-icon jw-svg-icon-cc-on"
                                      viewBox="0 0 240 240" focusable="false">
                                      <path
                                        d="M215,40H25c-2.7,0-5,2.2-5,5v150c0,2.7,2.2,5,5,5h190c2.7,0,5-2.2,5-5V45C220,42.2,217.8,40,215,40z M108.1,137.7c0.7-0.7,1.5-1.5,2.4-2.3l6.6,7.8c-2.2,2.4-5,4.4-8,5.8c-8,3.5-17.3,2.4-24.3-2.9c-3.9-3.6-5.9-8.7-5.5-14v-25.6c0-2.7,0.5-5.3,1.5-7.8c0.9-2.2,2.4-4.3,4.2-5.9c5.7-4.5,13.2-6.2,20.3-4.6c3.3,0.5,6.3,2,8.7,4.3c1.3,1.3,2.5,2.6,3.5,4.2l-7.1,6.9c-2.4-3.7-6.5-5.9-10.9-5.9c-2.4-0.2-4.8,0.7-6.6,2.3c-1.7,1.7-2.5,4.1-2.4,6.5v25.6C90.4,141.7,102,143.5,108.1,137.7z M152.9,137.7c0.7-0.7,1.5-1.5,2.4-2.3l6.6,7.8c-2.2,2.4-5,4.4-8,5.8c-8,3.5-17.3,2.4-24.3-2.9c-3.9-3.6-5.9-8.7-5.5-14v-25.6c0-2.7,0.5-5.3,1.5-7.8c0.9-2.2,2.4-4.3,4.2-5.9c5.7-4.5,13.2-6.2,20.3-4.6c3.3,0.5,6.3,2,8.7,4.3c1.3,1.3,2.5,2.6,3.5,4.2l-7.1,6.9c-2.4-3.7-6.5-5.9-10.9-5.9c-2.4-0.2-4.8,0.7-6.6,2.3c-1.7,1.7-2.5,4.1-2.4,6.5v25.6C135.2,141.7,146.8,143.5,152.9,137.7z">
                                      </path>
                                    </svg><svg xmlns="http://www.w3.org/2000/svg" class="jw-svg-icon jw-svg-icon-cc-off"
                                      viewBox="0 0 240 240" focusable="false">
                                      <path
                                        d="M99.4,97.8c-2.4-0.2-4.8,0.7-6.6,2.3c-1.7,1.7-2.5,4.1-2.4,6.5v25.6c0,9.6,11.6,11.4,17.7,5.5c0.7-0.7,1.5-1.5,2.4-2.3l6.6,7.8c-2.2,2.4-5,4.4-8,5.8c-8,3.5-17.3,2.4-24.3-2.9c-3.9-3.6-5.9-8.7-5.5-14v-25.6c0-2.7,0.5-5.3,1.5-7.8c0.9-2.2,2.4-4.3,4.2-5.9c5.7-4.5,13.2-6.2,20.3-4.6c3.3,0.5,6.3,2,8.7,4.3c1.3,1.3,2.5,2.6,3.5,4.2l-7.1,6.9C107.9,100,103.8,97.8,99.4,97.8z M144.1,97.8c-2.4-0.2-4.8,0.7-6.6,2.3c-1.7,1.7-2.5,4.1-2.4,6.5v25.6c0,9.6,11.6,11.4,17.7,5.5c0.7-0.7,1.5-1.5,2.4-2.3l6.6,7.8c-2.2,2.4-5,4.4-8,5.8c-8,3.5-17.3,2.4-24.3-2.9c-3.9-3.6-5.9-8.7-5.5-14v-25.6c0-2.7,0.5-5.3,1.5-7.8c0.9-2.2,2.4-4.3,4.2-5.9c5.7-4.5,13.2-6.2,20.3-4.6c3.3,0.5,6.3,2,8.7,4.3c1.3,1.3,2.5,2.6,3.5,4.2l-7.1,6.9C152.6,100,148.5,97.8,144.1,97.8L144.1,97.8z M200,60v120H40V60H200 M215,40H25c-2.7,0-5,2.2-5,5v150c0,2.7,2.2,5,5,5h190c2.7,0,5-2.2,5-5V45C220,42.2,217.8,40,215,40z">
                                      </path>
                                    </svg>
                                    <div class="jw-reset-text jw-tooltip jw-tooltip-captions" dir="auto">
                                      <div class="jw-text"></div>
                                    </div>
                                  </div>
                                  <div
                                    class="jw-icon jw-icon-inline jw-button-color jw-reset jw-icon-settings jw-settings-submenu-button"
                                    role="button" tabindex="0" aria-label="Configurações" aria-haspopup="true"
                                    aria-controls="jw-settings-menu" style=""><svg xmlns="http://www.w3.org/2000/svg"
                                      class="jw-svg-icon jw-svg-icon-settings" viewBox="0 0 240 240" focusable="false">
                                      <path
                                        d="M204,145l-25-14c0.8-3.6,1.2-7.3,1-11c0.2-3.7-0.2-7.4-1-11l25-14c2.2-1.6,3.1-4.5,2-7l-16-26c-1.2-2.1-3.8-2.9-6-2l-25,14c-6-4.2-12.3-7.9-19-11V35c0.2-2.6-1.8-4.8-4.4-5c-0.2,0-0.4,0-0.6,0h-30c-2.6-0.2-4.8,1.8-5,4.4c0,0.2,0,0.4,0,0.6v28c-6.7,3.1-13,6.7-19,11L56,60c-2.2-0.9-4.8-0.1-6,2L35,88c-1.6,2.2-1.3,5.3,0.9,6.9c0,0,0.1,0,0.1,0.1l25,14c-0.8,3.6-1.2,7.3-1,11c-0.2,3.7,0.2,7.4,1,11l-25,14c-2.2,1.6-3.1,4.5-2,7l16,26c1.2,2.1,3.8,2.9,6,2l25-14c5.7,4.6,12.2,8.3,19,11v28c-0.2,2.6,1.8,4.8,4.4,5c0.2,0,0.4,0,0.6,0h30c2.6,0.2,4.8-1.8,5-4.4c0-0.2,0-0.4,0-0.6v-28c7-2.3,13.5-6,19-11l25,14c2.5,1.3,5.6,0.4,7-2l15-26C206.7,149.4,206,146.7,204,145z M120,149.9c-16.5,0-30-13.4-30-30s13.4-30,30-30s30,13.4,30,30c0.3,16.3-12.6,29.7-28.9,30C120.7,149.9,120.4,149.9,120,149.9z">
                                      </path>
                                    </svg>
                                    <div class="jw-reset-text jw-tooltip jw-tooltip-settings" dir="auto">
                                      <div class="jw-text"></div>
                                    </div>
                                  </div>
                                  <div class="jw-icon jw-icon-inline jw-button-color jw-reset jw-icon-fullscreen"
                                    role="button" tabindex="0" aria-label="Tela Cheia" style=""><svg
                                      xmlns="http://www.w3.org/2000/svg" class="jw-svg-icon jw-svg-icon-fullscreen-off"
                                      viewBox="0 0 240 240" focusable="false">
                                      <path
                                        d="M109.2,134.9l-8.4,50.1c-0.4,2.7-2.4,3.3-4.4,1.4L82,172l-27.9,27.9l-14.2-14.2l27.9-27.9l-14.4-14.4c-1.9-1.9-1.3-3.9,1.4-4.4l50.1-8.4c1.8-0.5,3.6,0.6,4.1,2.4C109.4,133.7,109.4,134.3,109.2,134.9L109.2,134.9z M172.1,82.1L200,54.2L185.8,40l-27.9,27.9l-14.4-14.4c-1.9-1.9-3.9-1.3-4.4,1.4l-8.4,50.1c-0.5,1.8,0.6,3.6,2.4,4.1c0.5,0.2,1.2,0.2,1.7,0l50.1-8.4c2.7-0.4,3.3-2.4,1.4-4.4L172.1,82.1z">
                                      </path>
                                    </svg><svg xmlns="http://www.w3.org/2000/svg"
                                      class="jw-svg-icon jw-svg-icon-fullscreen-on" viewBox="0 0 240 240"
                                      focusable="false">
                                      <path
                                        d="M96.3,186.1c1.9,1.9,1.3,4-1.4,4.4l-50.6,8.4c-1.8,0.5-3.7-0.6-4.2-2.4c-0.2-0.6-0.2-1.2,0-1.7l8.4-50.6c0.4-2.7,2.4-3.4,4.4-1.4l14.5,14.5l28.2-28.2l14.3,14.3l-28.2,28.2L96.3,186.1z M195.8,39.1l-50.6,8.4c-2.7,0.4-3.4,2.4-1.4,4.4l14.5,14.5l-28.2,28.2l14.3,14.3l28.2-28.2l14.5,14.5c1.9,1.9,4,1.3,4.4-1.4l8.4-50.6c0.5-1.8-0.6-3.6-2.4-4.2C197,39,196.4,39,195.8,39.1L195.8,39.1z">
                                      </path>
                                    </svg>
                                    <div class="jw-reset-text jw-tooltip jw-tooltip-fullscreen" dir="auto">
                                      <div class="jw-text"></div>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                          <div class="afs_ads"
                            style="width: 1px; height: 1px; position: absolute; background: transparent;">&nbsp;</div>
                        </div>
                        <script type="application/javascript">
                          // window.disableP2pEngineMP4AutoInit = true;

                          const playerGlobalVideo = jwplayer("playerglobalapi").setup({
                            playlist: [{
                              image: "https://animes.vision/v1/assets/images/vision-banner.png",
                              sources: [
                                { "file": "https:\/\/cdn-2.tanoshi.digital\/stream\/S\/Strike_The_Blood_3\/480p\/AnV-04.mp4?md5=whZ1ilfTbPxzg9AWsnxmag&expires=1698082555", "type": "video\/mp4", "label": "SD 480p" }, { "file": "https:\/\/cdn-2.tanoshi.digital\/stream\/S\/Strike_The_Blood_3\/720p\/AnV-04.mp4?md5=1TGyTcm1dKFnVld9Dmz7lA&expires=1698082555", "type": "video\/mp4", "label": "HD 720p" }, { "file": "https:\/\/cdn-2.tanoshi.digital\/stream\/S\/Strike_The_Blood_3\/1080p\/AnV-04.mp4?md5=MfT0zHQHUPai0RUnzxHeOg&expires=1698082555", "type": "video\/mp4", "label": "FHD 1080p" },
                              ]
                            }],
                            width: "100%",
                            aspectratio: "16:9",
                            responsive: true,
                            autostart: false,
                            startparam: "start",
                            primary: "html5",
                            preload: "metadata",
                            logo: {
                              file: "https://animes.vision/v1/assets/images/logo-footer2.png",
                              link: "https://animes.vision",
                              hide: "true",
                              position: "top-right",
                            },
                            playbackRateControls: [0.5, 0.75, 1, 1.25, 1.5, 2],
                            debug: false,
                            hlshtml: false,
                            // pluginOptions: {
                            //     mp4: {
                            //         p2pConfig: {
                            //             logLevel: 'debug',
                            //             // Other p2pConfig options provided by CDNBye
                            //         }
                            //     }
                            // },
                            // mp4Config: {
                            //     debug: false,
                            //     p2pConfig: {
                            //         logLevel: false,
                            //         live: false,
                            //         channelIdPrefix: 'animesvision',
                            //         channelId: function(url) {
                            //             var videoIdSd = 31786;
                            //             return videoIdSd;
                            //         },
                            //         segmentId: function(level, sn, url) {
                            //             return level + "-" + sn;
                            //         },
                            //         // wsSignalerAddr: 'wss://opensignal.cdnbye.com',
                            //     }
                            // },
                            cast: {},
                          });

                          // var engine = new P2PEngineMP4({
                          //     swFile: '/sw.js',
                          //     // logLevel: 'debug',
                          // });
                          // engine.registerServiceWorker().then(function (registration) {
                          //     console.info('ServiceWorker registrado com sucesso no escopo: ', registration.scope);
                          // }).catch((err) => {
                          //     console.info('ServiceWorker não carregado. ', err)
                          // });

                          var playerGlobalId = 'playerglobalapi';
                          var id = 31786;
                          var checkPosition = "";
                          if (checkPosition) {
                            var currentPosition = checkPosition;
                          } else {
                            var currentPosition = localStorage.getItem("w" + id);
                          }

                          var lock = false;

                          function millisToMinutesAndSeconds(time) {
                            var ms = time;
                            var min = ms * 1 / 60;
                            var r = min % 1;
                            var sec = Math.floor(r * 60);
                            if (sec < 10) {
                              sec = '0' + sec;
                            }
                            min = Math.floor(min);
                            return min + ':' + sec; /* parseInt() = numeric() */
                          }

                          jwplayer('playerglobalapi').on('play', function () {
                            playControl(31786, 1046);
                            if (lock == false) {
                              if (currentPosition && currentPosition > 0) {
                                jwplayer('playerglobalapi').pause();
                                var box =
                                  '<div class="resume"><p>Você já assistiu ' +
                                  millisToMinutesAndSeconds(currentPosition) +
                                  '. Gostaria de assistir de onde parou? </p></div>';
                                $("#" + playerGlobalId + "").append(box);
                                box = '.resume';
                                var bts = '<bt data-time="' + currentPosition + '">Sim</bt><bt data-time="0">Não</bt>';
                                $(box).append(bts);

                                $(document).on('click', '.resume > bt', function () {
                                  var startIn = $(this).attr('data-time');
                                  $(box).remove();
                                  jwplayer('playerglobalapi').play();
                                  playerGlobalVideo.seek(startIn);
                                  resetControl(31786);
                                });

                              }
                            }
                            lock = true;
                          });

                          let rewind_iconPath = "/assets/icon/replay-10s.svg";
                          let rewind_id = "rewind-video-button";
                          let rewind_tooltipText = "Voltar 10s";

                          let forward_iconPath = "/assets/icon/forward-30s.svg";
                          let forward_id = "forward-video-button";
                          let forward_tooltipText = "Avançar 30s";

                          // jwplayer('playerglobalapi').addButton(forward_iconPath, forward_tooltipText, forward_ButtonClickAction, forward_id);
                          // jwplayer('playerglobalapi').addButton(rewind_iconPath, rewind_tooltipText, rewind_ButtonClickAction, rewind_id)

                          // jwplayer('playerglobalapi').on('viewable', e => {
                          //     const old = document.querySelector('.jw-button-container > .jw-icon-rewind')
                          //     if (!old) return
                          //     const btn = query => document.querySelector(`div[button="${query}"]`)
                          //     const btnContainer = old.parentElement
                          //     btnContainer.insertBefore(btn(rewind_id), old)
                          //     btnContainer.insertBefore(btn(forward_id), old)
                          //     btnContainer.removeChild(old)
                          // });

                          jwplayer('playerglobalapi').on('pause', function () {
                            pauseControl(31786, jwplayer(playerGlobalId).getDuration(), jwplayer(playerGlobalId).getPosition(), jwplayer(playerGlobalId).getCurrentTime());
                          });

                          jwplayer('playerglobalapi').addButton(
                            '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-box-arrow-in-up-right" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M6.364 13.5a.5.5 0 0 0 .5.5H13.5a1.5 1.5 0 0 0 1.5-1.5v-10A1.5 1.5 0 0 0 13.5 1h-10A1.5 1.5 0 0 0 2 2.5v6.636a.5.5 0 1 0 1 0V2.5a.5.5 0 0 1 .5-.5h10a.5.5 0 0 1 .5.5v10a.5.5 0 0 1-.5.5H6.864a.5.5 0 0 0-.5.5z"/><path fill-rule="evenodd" d="M11 5.5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793l-8.147 8.146a.5.5 0 0 0 .708.708L10 6.707V10.5a.5.5 0 0 0 1 0v-5z"/></svg>',
                            "Soltar player",
                            function () {
                              var src = document.getElementsByClassName('jw-video'),
                                fileSrc = src[0];
                              const video = fileSrc;
                              if (!document.pictureInPictureElement) {
                                video.requestPictureInPicture().catch(error => { });
                              } else {
                                document.exitPictureInPicture().catch(error => { });
                              }
                            }, "pipPlayer"
                          );
                          jwplayer('playerglobalapi').addButton(
                            '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-double-right" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M3.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L9.293 8 3.646 2.354a.5.5 0 0 1 0-.708z"/><path fill-rule="evenodd" d="M7.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L13.293 8 7.646 2.354a.5.5 0 0 1 0-.708z"/></svg>',
                            'Pular Abertura (+85s)',
                            function () {
                              jwplayer('playerglobalapi').seek(jwplayer('playerglobalapi').getPosition() + 85)
                            }, 'Pular Abertura (+85s)');
                        </script>
                      </div>
                    </div>
                    <div class="player-controls">
                      <div class="pc-item pc-resize">
                        <a href="javascript:;" id="media-resize" class="btn btn-sm"><i
                            class="fas fa-expand mr-1"></i>Expandir</a>
                      </div>
                      <div class="pc-item pc-toggle pc-light">
                        <div id="turn-off-light" class="toggle-basic">
                          <span class="tb-name"><i class="fas fa-lightbulb mr-2"></i>Luzes</span>
                          <span class="tb-result"></span>
                        </div>
                      </div>
                      <div class="pc-item pc-control block-prev">
                        <a class="btn btn-sm btn-prev"
                          href="https://animes.vision/animes/strike-the-blood-3/episodio-03/legendado"><i
                            class="fas fa-backward mr-2"></i>Anterior</a>
                      </div>
                      <div class="pc-item pc-control block-next">
                        <a class="btn btn-sm btn-next"
                          href="https://animes.vision/animes/strike-the-blood-3/episodio-05/legendado">Próximo<i
                            class="fas fa-forward ml-2"></i></a>
                      </div>
                      <div class="pc-right">
                        <div class="pc-item pc-live">
                          <a href="https://animes.vision/animes/strike-the-blood-3/episodio-04/legendado/download"
                            target="_blank" class="btn btn-sm" title="Baixar Episódio">
                            <i class="fas fa-cloud-download-alt mr-1 pt-1"></i> <span class="m-hide">Download</span>
                          </a>
                          <a href="javascript:;" onclick="alert('Faça login para criar uma sala!');" class="btn btn-sm"
                            title="Assistir em Grupo">
                            <i class="zicon zicon-20 zicon-live mr-1"></i> <span class="m-hide">Assistir em Grupo</span>
                          </a>
                          <small><i class="fas fa-glasses mr-1"></i><span>6074 views</span></small>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                  </div>
                  <div class="player-servers">
                    <div id="servers-content">
                      <div class="ps_-status">
                        <div class="content">
                          <div class="server-notice">
                          </div>
                        </div>
                      </div>
                      <div class="">
                        <div class="ps_-block ps_-block-sub servers-mixed">
                          <div class="row justify-content-start">
                            <div class="col-12">
                              <div class="ps__-list display-inline ml-2">
                                <div class="row">
                                  <div class="col-12">
                                    <div class="item server-item">
                                      <a class="btn active" wire:click="mudarPlayer(1)"
                                        wire:key="global">CDN<small>v3</small> Vision</a>
                                    </div>
                                  </div>
                                  <div class="col-12 pt-2">
                                    <div class="item server-item">
                                      <a class="btn " wire:click="mudarPlayer(4)">Mixdrop</a>
                                    </div>
                                    <div class="item server-item">
                                      <a class="btn " wire:click="mudarPlayer(5)">Streamtape</a>
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div id="episodes-content">
                    <div class="seasons-block">
                      <div id="detail-ss-list" class="detail-seasons">
                        <div class="detail-infor-content">
                          <div class="ss-choice">
                            <div class="ssc-list">
                              <div id="ssc-list" class="ssc-button">
                                <div class="ssc-label">Lista de episódios:</div>
                              </div>
                            </div>
                            <div class="ssc-quick">
                              <div class="sscq-icon"><i class="fas fa-search"></i></div>
                              <input id="search-ep" class="form-control" type="text" placeholder="Pesquisar ep"
                                autocomplete="off">
                            </div>
                            <div class="clearfix"></div>
                          </div>
                          <div class="ss-list">
                            <a title="Episodio 01" id="episodio-31653" class="ssl-item ep-item" data-number="0"
                              data-id="31653"
                              href="https://animes.vision/animes/strike-the-blood-3/episodio-01/legendado">
                              <div class="ssli-order">1</div>
                              <div class="ssli-detail">
                                <div class="ep-name dynamic-name" title="Episodio 01">
                                  Episodio 01
                                </div>
                              </div>
                              <div class="ssli-btn">
                                <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                              </div>
                              <div class="clearfix"></div>
                            </a>
                            <a title="Episodio 02" id="episodio-31654" class="ssl-item ep-item" data-number="1"
                              data-id="31654"
                              href="https://animes.vision/animes/strike-the-blood-3/episodio-02/legendado">
                              <div class="ssli-order">2</div>
                              <div class="ssli-detail">
                                <div class="ep-name dynamic-name" title="Episodio 02">
                                  Episodio 02
                                </div>
                              </div>
                              <div class="ssli-btn">
                                <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                              </div>
                              <div class="clearfix"></div>
                            </a>
                            <a title="Episodio 03" id="episodio-31785" class="ssl-item ep-item" data-number="2"
                              data-id="31785"
                              href="https://animes.vision/animes/strike-the-blood-3/episodio-03/legendado">
                              <div class="ssli-order">3</div>
                              <div class="ssli-detail">
                                <div class="ep-name dynamic-name" title="Episodio 03">
                                  Episodio 03
                                </div>
                              </div>
                              <div class="ssli-btn">
                                <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                              </div>
                              <div class="clearfix"></div>
                            </a>
                            <a title="Episodio 04" id="episodio-31786" class="ssl-item ep-item active" data-number="3"
                              data-id="31786"
                              href="https://animes.vision/animes/strike-the-blood-3/episodio-04/legendado">
                              <div class="ssli-order">4</div>
                              <div class="ssli-detail">
                                <div class="ep-name dynamic-name" title="Episodio 04">
                                  Episodio 04
                                </div>
                              </div>
                              <div class="ssli-btn">
                                <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                              </div>
                              <div class="clearfix"></div>
                            </a>
                            <a title="Episodio 05" id="episodio-51399" class="ssl-item ep-item" data-number="4"
                              data-id="51399"
                              href="https://animes.vision/animes/strike-the-blood-3/episodio-05/legendado">
                              <div class="ssli-order">5</div>
                              <div class="ssli-detail">
                                <div class="ep-name dynamic-name" title="Episodio 05">
                                  Episodio 05
                                </div>
                              </div>
                              <div class="ssli-btn">
                                <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                              </div>
                              <div class="clearfix"></div>
                            </a>
                            <a title="Episodio 06" id="episodio-51400" class="ssl-item ep-item" data-number="5"
                              data-id="51400"
                              href="https://animes.vision/animes/strike-the-blood-3/episodio-06/legendado">
                              <div class="ssli-order">6</div>
                              <div class="ssli-detail">
                                <div class="ep-name dynamic-name" title="Episodio 06">
                                  Episodio 06
                                </div>
                              </div>
                              <div class="ssli-btn">
                                <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                              </div>
                              <div class="clearfix"></div>
                            </a>
                            <a title="Episodio 07" id="episodio-51401" class="ssl-item ep-item" data-number="6"
                              data-id="51401"
                              href="https://animes.vision/animes/strike-the-blood-3/episodio-07/legendado">
                              <div class="ssli-order">7</div>
                              <div class="ssli-detail">
                                <div class="ep-name dynamic-name" title="Episodio 07">
                                  Episodio 07
                                </div>
                              </div>
                              <div class="ssli-btn">
                                <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                              </div>
                              <div class="clearfix"></div>
                            </a>
                            <a title="Episodio 08" id="episodio-51402" class="ssl-item ep-item" data-number="7"
                              data-id="51402"
                              href="https://animes.vision/animes/strike-the-blood-3/episodio-08/legendado">
                              <div class="ssli-order">8</div>
                              <div class="ssli-detail">
                                <div class="ep-name dynamic-name" title="Episodio 08">
                                  Episodio 08
                                </div>
                              </div>
                              <div class="ssli-btn">
                                <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                              </div>
                              <div class="clearfix"></div>
                            </a>
                            <a title="Episodio 09" id="episodio-53583" class="ssl-item ep-item" data-number="8"
                              data-id="53583"
                              href="https://animes.vision/animes/strike-the-blood-3/episodio-09/legendado">
                              <div class="ssli-order">9</div>
                              <div class="ssli-detail">
                                <div class="ep-name dynamic-name" title="Episodio 09">
                                  Episodio 09
                                </div>
                              </div>
                              <div class="ssli-btn">
                                <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                              </div>
                              <div class="clearfix"></div>
                            </a>
                            <a title="Episodio 10" id="episodio-54542" class="ssl-item ep-item" data-number="9"
                              data-id="54542"
                              href="https://animes.vision/animes/strike-the-blood-3/episodio-10/legendado">
                              <div class="ssli-order">10</div>
                              <div class="ssli-detail">
                                <div class="ep-name dynamic-name" title="Episodio 10">
                                  Episodio 10
                                </div>
                              </div>
                              <div class="ssli-btn">
                                <div class="btn btn-circle"><i class="fas fa-play"></i></div>
                              </div>
                              <div class="clearfix"></div>
                            </a>
                          </div>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                  </div>
                </div>

                <div class="anis-watch-detail">
                  <div class="anis-content">
                    <div class="anisc-poster">
                      <div class="film-poster">
                        <img data-src="https://animes.vision/storage/capa/2YFQEqI9UwzOyAK3xTrvtWHcZx2OwmNnpBRI15Wq.jpg"
                          src="https://animes.vision/storage/capa/2YFQEqI9UwzOyAK3xTrvtWHcZx2OwmNnpBRI15Wq.jpg"
                          class="film-poster-img ls-is-cached lazyloaded" alt="Strike the Blood 3">
                      </div>
                    </div>
                    <div class="anisc-detail">
                      <h2 class="film-name">
                        <a href="https://animes.vision/animes/strike-the-blood-3" class="text-white dynamic-name"
                          title="Strike the Blood 3">Strike the Blood 3</a>
                      </h2>
                      <div class="film-stats">
                        <span class="item">
                          <div class="tick-item tick-pg">
                            Livre
                          </div>
                        </span>
                        <span class="item">
                          <div class="tick-item tick-quality">
                            FULL HD
                          </div>
                        </span>
                        <span class="item">
                          <div class="tick-item tick-dub">
                            Legendado
                          </div>
                        </span>
                        <span class="dot"></span>
                        <span class="item">BD</span>
                        <span class="dot"></span>
                        <span class="item">Episódios 10 / 10</span>
                        <span class="dot"></span>
                        <span class="item">26 min por ep</span>
                        <div class="clearfix"></div>
                      </div>
                      <div class="film-description m-hide">
                        <div class="text">
                          Foi anunciado em um evento de palco do Dengeki Game Festival que a série de romances leves
                          Strike the Blood terá um terceiro lançamento OVA. Cobrirá até o final do Seisen-hen. (Fonte:
                          notícias MAL)
                        </div>
                      </div>
                      <div class="film-text m-hide mb-3">
                        Assista <strong>Strike the Blood 3</strong> Legendado online de graça.
                      </div>
                      <div class="block">
                        <a href="https://animes.vision/animes/strike-the-blood-3" class="btn btn-xs btn-light">Ver
                          detalhes</a>
                      </div>
                      <div class="dt-rate mt-2">
                        <div id="vote-info">
                          <div class="block-rating">
                            <div class="rating-result">
                              <img class="img-responsive float-left"
                                src="https://animes.vision/storage/profile/gh22uzKIwyX1JMyE3vg3wAP6uLa1tKsQK3oW7P0I.png"
                                style="max-width: 70px; max-height: 70px; width: 70px; height: 70px; border-radius:50%;">
                              <div class="rr-title float-left pl-2 pt-3"
                                style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word;">
                                <div>
                                  Nults
                                </div>
                                <div style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word;">
                                  <small
                                    style="overflow-wrap: break-word; word-wrap: break-word; word-break: break-word;">Administrador
                                    da SubVision</small>
                                </div>
                              </div>
                              <div class="clearfix"></div>
                            </div>
                            <div class="clearfix"></div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="share-buttons share-buttons-detail">
          <div class="container">
            <div class="share-buttons-block">
              <div class="share-icon"></div>
              <div class="sbb-title">
                <span>Compartilhe esse título</span>
                <p class="mb-0">com seus amigos</p>
              </div>

              <div class="clearfix"></div>
            </div>
          </div>
        </div>
        <div class="container">
          <div id="main-content">
            <div class="doacao-container">
              <div class="doacao-content">
                <div class="doc-image">
                  <img src="https://animes.vision/img/anime-help_1.png">
                </div>
                <div class="doc-content">
                  <div class="doc-header">
                    <h2 class="h2-heading mb-3">Colabore com o Animes Vision</h2>
                    <p>Desde 2015, o Animes Vision vem trazendo animes com qualidade, trabalhamos todos os dias trazendo
                      lançamentos, blu-rays e remasterizados, além de ter um catálogo com quase 5 mil títulos.</p>
                    <p>Torne-se um Membro VIP e colabore com o nosso projeto!</p>
                  </div>
                  <div class="doc-tabs">
                    <ul class="nav">
                      <li class="nav-item">
                        <a href="https://animes.vision/acesso-vip" class="btn btn-md btn-danger"
                          title="DOE agora e seja VIP">
                          <div class="desc">DOE agora e seja VIP</div>
                        </a>
                      </li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
            <section class="block_area block_area-actors">
              <div class="block_area-header">
                <div class="float-left bah-heading mr-4">
                  <h2 class="cat-heading">Personagens &amp; Dubladores</h2>
                </div>
                <div class="float-right viewmore">
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="block-actors-content">
                <div class="bac-list-wrap">
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/akatsuki-kojou" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/3YcSJaNi58CVvuJj6bfnOjATJWjfPwlzR9VmPx0W.jpg"
                          src="https://animes.vision/storage/personagem/3YcSJaNi58CVvuJj6bfnOjATJWjfPwlzR9VmPx0W.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/akatsuki-kojou">Akatsuki, Kojou</a>
                        </h4>
                        <span class="pi-cast">Principal</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/hosoya-yoshimasa" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/q4A2AnGb79dli2Osq5DsjtwOdu9F3VbceXqeQGOP.jpg"
                          src="https://animes.vision/storage/pessoa/q4A2AnGb79dli2Osq5DsjtwOdu9F3VbceXqeQGOP.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/hosoya-yoshimasa">Hosoya,
                            Yoshimasa</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/himeragi-yukina" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/QKLrBcHK0BUi3yhH8ETKhoyVjYWaxiKVvTEvRnUU.jpg"
                          src="https://animes.vision/storage/personagem/QKLrBcHK0BUi3yhH8ETKhoyVjYWaxiKVvTEvRnUU.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/himeragi-yukina">Himeragi, Yukina</a>
                        </h4>
                        <span class="pi-cast">Principal</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/taneda-risa" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/S7Rgbc7IJizCBHUPyeSLJCh8g1hfanodLFACGveS.jpg"
                          src="https://animes.vision/storage/pessoa/S7Rgbc7IJizCBHUPyeSLJCh8g1hfanodLFACGveS.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/taneda-risa">Taneda, Risa</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/aiba-asagi" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/zD22zGD8zRutSfZ67BZ4QSKSXiDjBPwdhY6JY5Wn.jpg"
                          src="https://animes.vision/storage/personagem/zD22zGD8zRutSfZ67BZ4QSKSXiDjBPwdhY6JY5Wn.jpg"
                          alt="Lagusa, Angelo" class=" lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/aiba-asagi">Aiba, Asagi</a>
                        </h4>
                        <span class="pi-cast">De apoio</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/seto-asami" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/Xx5qbBoBL4FiHoko5MwaqfW4wm7NvkaT8J6VgznM.jpg"
                          src="https://animes.vision/storage/pessoa/Xx5qbBoBL4FiHoko5MwaqfW4wm7NvkaT8J6VgznM.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/seto-asami">Seto, Asami</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/akatsuki-mimori" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/nNjh0wbXviozNxnqRzqbErkBopTg8ihGbaC87MK1.jpg"
                          src="https://animes.vision/storage/personagem/nNjh0wbXviozNxnqRzqbErkBopTg8ihGbaC87MK1.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/akatsuki-mimori">Akatsuki, Mimori</a>
                        </h4>
                        <span class="pi-cast">De apoio</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/kobayashi-sanae" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/gBqcNRpGQ6Fg89Yo0eyo4kGvBsJyTkWJDmnBlakE.jpg"
                          src="https://animes.vision/storage/pessoa/gBqcNRpGQ6Fg89Yo0eyo4kGvBsJyTkWJDmnBlakE.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/kobayashi-sanae">Kobayashi, Sanae</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/akatsuki-gajou" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/pK4tA7IHnHNSck5TP4b8lLVqDvecv6XtMIvrOWFB.jpg"
                          src="https://animes.vision/storage/personagem/pK4tA7IHnHNSck5TP4b8lLVqDvecv6XtMIvrOWFB.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/akatsuki-gajou">Akatsuki, Gajou</a>
                        </h4>
                        <span class="pi-cast">De apoio</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/kase-yasuyuki" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/oDIuAbnMEiyXAmfMAhzCcw3pQN6FPiVjMbtSJYZy.jpg"
                          src="https://animes.vision/storage/pessoa/oDIuAbnMEiyXAmfMAhzCcw3pQN6FPiVjMbtSJYZy.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/kase-yasuyuki">Kase, Yasuyuki</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/akatsuki-nagisa" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/jI8pQv8xFslJQy1GzS1fN2PAXtnI0v2avEnnzwTM.jpg"
                          src="https://animes.vision/storage/personagem/jI8pQv8xFslJQy1GzS1fN2PAXtnI0v2avEnnzwTM.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/akatsuki-nagisa">Akatsuki, Nagisa</a>
                        </h4>
                        <span class="pi-cast">De apoio</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/hidaka-rina" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/ZHJB28cb3AZUgL34vgRnfFvgdZSJMEPfBlmAFMA0.jpg"
                          src="https://animes.vision/storage/pessoa/ZHJB28cb3AZUgL34vgRnfFvgdZSJMEPfBlmAFMA0.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/hidaka-rina">Hidaka, Rina</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="clearfix"></div>
                </div>
                <div class="clearfix"></div>
              </div>
            </section>
            <div class="row">
              <div class="col-12">
                <div class="alert alert-info">
                  Seja um membro VIP e ajude a manter o nosso projeto ❤
                </div>
              </div>
            </div>
            <section class="block_area block_area-comment">
              <div class="block_area-header block_area-header-tabs">
                <div class="float-left bah-heading mr-4">
                  <h2 class="cat-heading">Comentários</h2>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="tab-content">
                <div class="show-comments">
                  <div id="disqus_thread"></div>
                  <div class="text-center">
                    <button class="btn btn-sm btn-secondary sc-button btn-load-comment"><i
                        class="fas fa-comment mr-2"></i>Clique para carregar os comentários
                    </button>
                  </div>
                </div>
              </div>
            </section>
            <div class="clearfix"></div>
          </div>
          <div id="main-sidebar">
            <section wire:id="Ex0EdmV92U29Iua8D0EC" class="block_area block_area_sidebar block_area-realtime">
              <div class="block_area-header">
                <div class="float-left bah-heading mr-4">
                  <h2 class="cat-heading">Populares</h2>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="block_area-content">
                <div class="cbox cbox-list cbox-realtime">
                  <div class="cbox-content">
                    <div class="anif-block-ul">
                      <ul class="ulclear">
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/LJZJOMMZWO9A7uTphxK863jfXgTKBgeJKZnRHgEC.jpg"
                              class="film-poster-img lazyloaded" alt="One Piece"
                              src="https://animes.vision/storage/capa/LJZJOMMZWO9A7uTphxK863jfXgTKBgeJKZnRHgEC.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/one-piece" title="One Piece"
                                class="dynamic-name" data-jname="One Piece">One Piece</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">1090 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">24 min</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/lJYAlaX43KWP9Bq26Q4eq2hWzmwBkMxGbueb0R7k.jpg"
                              class="film-poster-img lazyloaded" alt="Boruto: Naruto Next Generations"
                              src="https://animes.vision/storage/capa/lJYAlaX43KWP9Bq26Q4eq2hWzmwBkMxGbueb0R7k.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/boruto-naruto-next-generations"
                                title="Boruto: Naruto Next Generations" class="dynamic-name"
                                data-jname="Boruto: Naruto Next Generations">Boruto: Naruto Next Generations</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">293 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/TPZYbqV1picmurT2CONFMswAtR66N3Tcak8Wfbbz.jpg"
                              class="film-poster-img lazyloaded" alt="Naruto Shippuuden"
                              src="https://animes.vision/storage/capa/TPZYbqV1picmurT2CONFMswAtR66N3Tcak8Wfbbz.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/naruto-shippuden"
                                title="Naruto Shippuuden" class="dynamic-name" data-jname="Naruto Shippuuden">Naruto
                                Shippuuden</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">500 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/I29J5wmoADzccoCY3flDe62AmGsVJzUMlS1t5dHu.jpg"
                              class="film-poster-img lazyloaded" alt="Kimetsu no Yaiba"
                              src="https://animes.vision/storage/capa/I29J5wmoADzccoCY3flDe62AmGsVJzUMlS1t5dHu.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/kimetsu-no-yaiba"
                                title="Kimetsu no Yaiba" class="dynamic-name" data-jname="Kimetsu no Yaiba">Kimetsu no
                                Yaiba</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">BD</span>
                              <span class="dot"></span>
                              <span class="fdi-item">26 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/feVbQep8ew2okFuPtixafURlt4D6oRFZVsRNMmKU.jpg"
                              class="film-poster-img lazyloaded" alt="Black Clover"
                              src="https://animes.vision/storage/capa/feVbQep8ew2okFuPtixafURlt4D6oRFZVsRNMmKU.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/black-clover"
                                title="Black Clover" class="dynamic-name" data-jname="Black Clover">Black Clover</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">170 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/PaMxC3yCZ1PA0J5BMf1uSzv5VlhCF5E2XiSRRzIC.jpg"
                              class="film-poster-img lazyloaded" alt="One Punch Man 2"
                              src="https://animes.vision/storage/capa/PaMxC3yCZ1PA0J5BMf1uSzv5VlhCF5E2XiSRRzIC.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/one-punch-man-2"
                                title="One Punch Man 2" class="dynamic-name" data-jname="One Punch Man 2">One Punch Man
                                2</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">BD (1-4) / TV (5-12)</span>
                              <span class="dot"></span>
                              <span class="fdi-item">18 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/GDdsfGDX8JfEDwV822hKZO6PptaI1WPEOn0Bm4JV.jpg"
                              class="film-poster-img lazyloaded" alt="Shingeki no Kyojin: The Final Season Part 2"
                              src="https://animes.vision/storage/capa/GDdsfGDX8JfEDwV822hKZO6PptaI1WPEOn0Bm4JV.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a
                                href="https://animes.vision/animes/shingeki-no-kyojin-the-final-season-part-2"
                                title="Shingeki no Kyojin: The Final Season Part 2" class="dynamic-name"
                                data-jname="Shingeki no Kyojin: The Final Season Part 2">Shingeki no Kyojin: The Final
                                Season Part 2</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">12 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 minutos por episódio</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/tZ07emovR5srz1Xt0CXzX074fF6D0iGyMnSNeT9P.jpg"
                              class="film-poster-img lazyloaded" alt="Boku no Hero Academia 4th Season"
                              src="https://animes.vision/storage/capa/tZ07emovR5srz1Xt0CXzX074fF6D0iGyMnSNeT9P.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/boku-no-hero-academia-4"
                                title="Boku no Hero Academia 4th Season" class="dynamic-name"
                                data-jname="Boku no Hero Academia 4th Season">Boku no Hero Academia 4th Season</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">25 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">24 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/Heva86kU0Xv9ce0wYjfhSsedS5YFcgbk6va3rnE4.jpg"
                              class="film-poster-img lazyloaded" alt="Shingeki no Kyojin Season 3 Part 2"
                              src="https://animes.vision/storage/capa/Heva86kU0Xv9ce0wYjfhSsedS5YFcgbk6va3rnE4.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a
                                href="https://animes.vision/animes/shingeki-no-kyojin-season-3-part-2"
                                title="Shingeki no Kyojin Season 3 Part 2" class="dynamic-name"
                                data-jname="Shingeki no Kyojin Season 3 Part 2">Shingeki no Kyojin Season 3 Part 2</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">10 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/1Am6fBnZ1nfz6TMroQS6m49Gsj7P28gKIF6Tnv0F.jpg"
                              class="film-poster-img lazyload" alt="Tate No Yuusha No Nariagari">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/tate-no-yuusha-no-nariagari"
                                title="Tate No Yuusha No Nariagari" class="dynamic-name"
                                data-jname="Tate No Yuusha No Nariagari">Tate No Yuusha No Nariagari</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">25 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">24 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                      </ul>
                      <div class="clearfix"></div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                </div>
              </div>
            </section>
          </div>
          <div class="clearfix"></div>
        </div>
      </div>
    </div>
  </div>
  <div id="footer" data-settings="">
    <div id="footer-about">
      <div class="container">
        <div class="footer-top">
          <a href="https://animes.vision" class="footer-logo">
            <img src="https://animes.vision/v6/images/logo_vision.png" alt="Vision">
            <div class="clearfix"></div>
          </a>
          <div class="footer-joingroup">
            <div class="vision-group">
              <div class="zrg-title"><span class="top">Entre agora</span><span class="bottom">Grupos Vision</span>
              </div>
              <div class="zrg-list">
                <div class="item">
                  <a href="https://discord.gg/Ey8YwNb" target="_blank" class="zr-social-button dc-btn"><i
                      class="fab fa-discord"></i></a>
                </div>
                <div class="item">
                  <a href="https://t.me/+tNl_kGqSsHgyNWVh" target="_blank" class="zr-social-button tl-btn"><i
                      class="fab fa-telegram"></i></a>
                </div>
                <div class="item">
                  <a href="https://www.facebook.com/animesvision.oficial" target="_blank"
                    class="zr-social-button tl-btn"><i class="fab fa-facebook-square"></i></a>
                </div>
                <div class="item">
                  <a href="https://www.instagram.com/animesvisionoficial/" target="_blank"
                    class="zr-social-button rd-btn"><i class="fab fa-instagram"></i></a>
                </div>
                <div class="item">
                  <a href="https://play.google.com/store/apps/details?id=com.anivision" target="_blank"
                    class="zr-social-button gr-btn"><i class="fab fa-android"></i></a>
                </div>
              </div>
              <div class="clearfix"></div>
            </div>
          </div>
          <div class="clearfix"></div>
        </div>
        <div class="footer-az">
          <div class="block mb-3">
            <span class="ftaz">Lista A-Z</span><span class="size-s">Pesquise seu título pela primeira letra do
              alfabeto.</span>
          </div>
          <ul class="ulclear az-list">
            <li class=""><a href="https://animes.vision/lista-a-z">Todos</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/A">A</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/B">B</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/C">C</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/D">D</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/E">E</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/F">F</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/G">G</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/H">H</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/I">I</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/J">J</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/K">K</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/L">L</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/M">M</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/N">N</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/O">O</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/P">P</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/Q">Q</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/R">R</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/S">S</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/T">T</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/U">U</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/V">V</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/W">W</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/X">X</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/Y">Y</a></li>
            <li class=""><a href="https://animes.vision/lista-a-z/Z">Z</a></li>
          </ul>
          <div class="clearfix"></div>
        </div>
        <div class="footer-links">
          <ul class="ulclear">
            <li><a href="https://animes.vision/estatisticas" title="Estatísticas">Estatísticas</a></li>
            <li><a href="https://animes.vision/terms" title="Terms of service">Termos de Serviços</a></li>
            <li><a href="https://animes.vision/dmca" title="DMCA">DMCA</a></li>
            <li><a href="https://animes.vision/contato" title="Contato">Contato</a></li>
          </ul>
          <div class="clearfix"></div>
        </div>
        <div class="about-text">
          Todos os direitos reservados aos seus respectivos proprietários.
        </div>
        <p class="copyright">Animes.Vision, 2013 ~ 2023
        </p>
      </div>
    </div>
  </div>

  <div id="mask-overlay"></div>
  <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script type="text/javascript" src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.bundle.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/js-cookie@rc/dist/js.cookie.min.js"></script>
  <div style="display:none;">
    <script id="_wauga9">var _wau = _wau || []; _wau.push(["small", "1bct79y7rk", "ga9"]);</script>
    <script async="" src="//waust.at/s.js"></script>
  </div>
  <script type="text/javascript" src="https://animes.vision/js/app.js"></script>
  <script type="text/javascript" src="https://animes.vision/v6/js/app.min.js"></script>
  <script type="text/javascript" src="https://animes.vision/v6/js/common.js"></script>
  <script type="text/javascript" src="https://animes.vision/v6/js/movie.js"></script>

  <script src="/vendor/livewire/livewire.js?id=21fa1dd78491a49255cd" data-turbo-eval="false"
    data-turbolinks-eval="false"></script>
  <script data-turbo-eval="false"
    data-turbolinks-eval="false">window.livewire = new Livewire(); window.Livewire = window.livewire; window.livewire_app_url = ''; window.livewire_token = 'kNp8FODuYIhU3aN0yqpqLBjJQcHggjKY8UUne7f4'; window.deferLoadingAlpine = function (callback) { window.addEventListener('livewire:load', function () { callback(); }); }; let started = false; window.addEventListener('alpine:initializing', function () { if (!started) { window.livewire.start(); started = true; } }); document.addEventListener("DOMContentLoaded", function () { if (!started) { window.livewire.start(); started = true; } });</script>
  <script>
    window.addEventListener('notificacao', event => {
      if (event.detail.tipo == 'success') {
        toastr.success(event.detail.mensagem, event.detail.titulo, {
          closeButton: true,
          progressBar: true,
          positionClass: "toast-bottom-right",
        });
      } else if (event.detail.tipo == 'error') {
        toastr.error(event.detail.mensagem, event.detail.titulo, {
          closeButton: true,
          progressBar: true,
          positionClass: "toast-bottom-right",
        });
      } else if (event.detail.tipo == 'warning') {
        toastr.warning(event.detail.mensagem, event.detail.titulo, {
          closeButton: true,
          progressBar: true,
          positionClass: "toast-bottom-right",
        });
      }
    });
  </script>
  <script>
    function playControl(episodio_id, post_id) {
      $.ajaxSetup({
        headers: {
          'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
        }
      });
      $.ajax({
        type: 'POST',
        url: "https://animes.vision/controle/play",
        data: { episodio_id: episodio_id, post_id: post_id },
      });
    }
    function pauseControl(episodio_id, duracao, posicao, tempo) {
      $.ajaxSetup({
        headers: {
          'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
        }
      });
      $.ajax({
        type: 'POST',
        url: "https://animes.vision/controle/pause",
        data: { episodio_id: episodio_id, duracao: duracao, posicao: posicao, tempo: tempo },
      });
    }
    function resetControl(episodio_id) {
      $.ajaxSetup({
        headers: {
          'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
        }
      });
      $.ajax({
        type: 'POST',
        url: "https://animes.vision/controle/reset",
        data: { episodio_id: episodio_id },
      });
    }
  </script>
  <script id="syncData" type="application/json">
    {"page":"episodio","name":"Strike the Blood 3","anime_id":1046,"mal_id":37449,"series_url":"https:\/\/animes.vision\/animes\/strike-the-blood-3","selector_position":"#mal-sync"}
</script>
  <script>
    var clickedLoadComment = false;

    $(document).ready(function () {

      // if (parseInt(userSettings.auto_play) === 1) {
      //     $('.quick-settings[data-option="auto_play"]').removeClass('off');
      // }
      // if (parseInt(userSettings.auto_next) === 1) {
      //     $('.quick-settings[data-option="auto_next"]').removeClass('off');
      // }

      $('.btn-load-comment').click(function () {
        clickedLoadComment = true;
        $(this).hide();
        loadDisqus();
      });

      var elmnt = document.getElementById("episodio-31786");
      elmnt.scrollIntoView();
    });

    var initDisqus = false;

    function loadDisqus() {
      let url = window.location.href;
      $('.btn-load-comment').hide();
      var disqus_config = function () {
        this.page.url = url;
      };

      (function () { // DON'T EDIT BELOW THIS LINE
        var d = document, s = d.createElement('script');
        s.src = 'https://animesvision-1.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
        initDisqus = true;
      })();
    }
    // $("")[0].scrollIntoView();
    // var elmnt = document.getElementsByClassName("ss-list ssl-item ep-item active");
    // elmnt.scrollIntoView();
    // console.log($(".ssl-item ep-item active").val());
  </script>
  <script data-cfasync="false" async="" type="text/javascript"
    src="//mi.toxaminbowtell.com/ra9mqAS7r6gMvL/WBkwn"></script>
  <script data-cfasync="false" async="" type="text/javascript"
    src="//mi.toxaminbowtell.com/ra9mqAS7r6gMvL/WBkwn"></script>


</body>

</html>
