<html lang="pt">

<head>

  <meta name="csrf-token" content="kNp8FODuYIhU3aN0yqpqLBjJQcHggjKY8UUne7f4">
  <meta http-equiv="content-language" content="pt-br">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="robots" content="index,follow">
  <meta http-equiv="content-language" content="pt-br">
  <meta name="hilltopads-site-verification" content="0fdfe236e6fa584b210950db3b9a44dec2370d54">
  <meta name="propeller" content="02da3e1fffbfcdc63a4336e5e3142d97">
  <meta name="a.validate.02" content="-0tTj7OiNo58w7qpGRd8I7GhXLEvjLgyJvH3">
  <title>Assistir Nanatsu no Taizai - Dublado - Animes Vision - Assistir Animes Online Grátis HD</title>
  <meta name="description"
    content="Em um mundo semelhante à Idade Média européia, os temidos mas reverenciados Cavaleiros Sagrados da Britannia usam uma magia imensamente poderosa para proteger a região da Britannia e seus reinos. No entanto, um pequeno subconjunto dos Cavaleiros supostamente traiu sua pátria e virou suas lâminas contra seus camaradas em uma tentativa de derrubar o governante de Liones. Eles foram derrotados pelos Cavaleiros Sagrados, mas continuaram os rumores de que esses lendários cavaleiros, chamados de &quot;Sete Pecados Capitais&quot;, ainda estavam vivos. Dez anos depois, os próprios Cavaleiros Sagrados organizaram um golpe de Estado e, assim, tornaram-se os novos governantes tirânicos do Reino de Liones. Baseado na série de mangás de mesmo nome, Nanatsu no Taizai segue as aventuras de Elizabeth, a terceira princesa do Reino de Liones, e sua busca pelos Sete Pecados Capitais. Com a ajuda deles, ela se esforça não apenas para retomar seu reino dos Cavaleiros Sagrados, mas também para buscar justiça em um mundo injusto. [Escrito por MAL Rewrite] animes vision">
  <meta name="keywords"
    content="acao,aventura,fantasia,sobrenatural, Nanatsu no Taizai - DubladoAnimes Vision, baixar Nanatsu no Taizai - Dublado animes vision">
  <meta property="article:published_time" content="2019-05-30 08:16:31">
  <meta property="article:section" content="Animes">
  <meta name="google-site-verification" content="WfHtIHgpKAIErWuzIFzYdVvgFnXBsjS2Q7HDfca4Xbc">
  <meta name="msvalidate.01" content="86CF0E4D516E4A44D36E8D43B35AB230">
  <meta name="pinterest" content="00ad7d282afdbbb749c81a6c5a32c0ab">
  <meta name="yandex-verification" content="264254be940fa95c">
  <meta name="robots" content="index,follow,noodp,noydir">
  <meta property="og:description"
    content="Em um mundo semelhante à Idade Média européia, os temidos mas reverenciados Cavaleiros Sagrados da Britannia usam uma magia imensamente poderosa para proteger a região da Britannia e seus reinos. No entanto, um pequeno subconjunto dos Cavaleiros supostamente traiu sua pátria e virou suas lâminas contra seus camaradas em uma tentativa de derrubar o governante de Liones. Eles foram derrotados pelos Cavaleiros Sagrados, mas continuaram os rumores de que esses lendários cavaleiros, chamados de &quot;Sete Pecados Capitais&quot;, ainda estavam vivos. Dez anos depois, os próprios Cavaleiros Sagrados organizaram um golpe de Estado e, assim, tornaram-se os novos governantes tirânicos do Reino de Liones. Baseado na série de mangás de mesmo nome, Nanatsu no Taizai segue as aventuras de Elizabeth, a terceira princesa do Reino de Liones, e sua busca pelos Sete Pecados Capitais. Com a ajuda deles, ela se esforça não apenas para retomar seu reino dos Cavaleiros Sagrados, mas também para buscar justiça em um mundo injusto. [Escrito por MAL Rewrite]">
  <meta property="og:title" content="Assistir Nanatsu no Taizai - Dublado">
  <meta property="og:type" content="article">
  <meta property="og:locale" content="pt-br">
  <meta property="og:url" content="https://animes.vision/animes/nanatsu-no-taizai-dublado">
  <meta property="og:site_name" content="Animes Vision">
  <meta property="og:image" content="https://animes.vision/storage/capa/yJo2x9dfu7tLe3S8Tq9K4HCV82CIqcTysd9EjBe4.jpg">
  <meta property="article:published_time" content="2019-05-30 08:16:31">
  <meta property="article:modified_time" content="2023-10-23 12:39:53">
  <meta property="article:author" content="GonFreecss">
  <meta property="article:section" content="Animes">
  <meta property="article:tag" content="acao,aventura,fantasia,sobrenatural">
  <meta name="twitter:card" content="summary">
  <meta name="twitter:site" content="@animesvision">
  <script async="" src="//www.google-analytics.com/analytics.js"></script>
  <script
    type="application/ld+json">{"@context":"https:\/\/schema.org","@type":"WebPage","name":"Over 9000 Thousand!","description":"For those who helped create the Genki Dama"}</script>
  <link rel="alternate" type="application/rss+xml" title="RSS Feed" href="https://animes.vision/rss">

  <script>
    (function (i, s, o, g, r, a, m) {
      i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments)
      }, i[r].l = 1 * new Date(); a = s.createElement(o),
        m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

    ga('create', 'UA-133650552-1', 'auto');
    ga('send', 'pageview');

  </script>
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1">
  <meta name="apple-mobile-web-app-status-bar" content="#202125">
  <meta name="theme-color" content="#202125">
  <link rel="stylesheet" href="//stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <link rel="stylesheet" href="//use.fontawesome.com/releases/v5.3.1/css/all.css">
  <link rel="stylesheet" href="https://animes.vision/v6/css/styles.css">
  <link rel="canonical" href="https://animes.vision/animes/nanatsu-no-taizai-dublado">
  <style>
    [wire\:loading],
    [wire\:loading\.delay],
    [wire\:loading\.inline-block],
    [wire\:loading\.inline],
    [wire\:loading\.block],
    [wire\:loading\.flex],
    [wire\:loading\.table],
    [wire\:loading\.grid] {
      display: none;
    }

    [wire\:loading\.delay\.shortest],
    [wire\:loading\.delay\.shorter],
    [wire\:loading\.delay\.short],
    [wire\:loading\.delay\.long],
    [wire\:loading\.delay\.longer],
    [wire\:loading\.delay\.longest] {
      display: none;
    }

    [wire\:offline] {
      display: none;
    }

    [wire\:dirty]:not(textarea):not(input):not(select) {
      display: none;
    }

    input:-webkit-autofill,
    select:-webkit-autofill,
    textarea:-webkit-autofill {
      animation-duration: 50000s;
      animation-name: livewireautofill;
    }

    @keyframes livewireautofill {
      from {}
    }
  </style>
  <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "url": "https://animes.vision/",
        "potentialAction": {
            "@type": "SearchAction",
            "target": "https://animes.vision/search?nome={nome}",
            "query-input": "required name=nome"
        }
    }
</script>
</head>

<body>
  <div id="sidebar_menu_bg"></div>
  <div id="sidebar_menu">
    <button class="btn btn-radius btn-sm btn-secondary toggle-sidebar" id="fechar-menu-sidebar">
      <i class="fas fa-angle-left mr-2"></i>Fechar menu</button>
    <div class="sb-setting">
      <div class="header-setting">
        <div class="hs-toggles">
          <div class="row mb-3">
            <div class="col-4">
              <a href="https://animes.vision/login" class="hst-item" data-toggle="tooltip"
                data-original-title="Fazer Login">
                <div class="hst-icon"><i class="fas fa-user"></i></div>
                <div class="name"><span>Fazer Login</span></div>
              </a>
            </div>
          </div>
          <div class="row">
            <div class="col-7">
              <a href="https://animes.vision/assistir-em-grupo" class="hst-item" data-toggle="tooltip" title=""
                data-original-title="Assistir em Grupo">
                <div class="hst-icon">
                  <i class="zicon zicon-20 zicon-live"></i>
                </div>
                <div class="name"><span>Assista em Grupo</span></div>
              </a>
            </div>
            <div class="col-5">
              <a href="https://animes.vision/vision-tv" class="hst-item" data-toggle="tooltip" title=""
                data-original-title="Vision TV">
                <div class="hst-icon">
                  <i class="fas fa-tv"></i>
                </div>
                <div class="name"><span>Vision TV</span></div>
              </a>
            </div>
            <div class="col-6 mt-3">
              <a href="https://animes.vision/aleatorio" class="hst-item" data-toggle="tooltip"
                data-original-title="Assistir a um anime aleatório">
                <div class="hst-icon"><i class="fas fa-random"></i></div>
                <div class="name"><span>Aleatório</span></div>
              </a>
            </div>
            <div class="col-6 mt-3">
              <a href="https://animes.vision/acesso-vip" class="hst-item" data-toggle="tooltip"
                data-original-title="Premium VIP">
                <div class="hst-icon"><i class="fas fa-crown"></i></div>
                <div class="name"><span>Premium VIP</span></div>
              </a>
            </div>
          </div>
          <div class="clearfix"></div>
        </div>
      </div>
    </div>
    <ul class="nav sidebar_menu-list">
      <li class="nav-item active"><a class="nav-link" href="/" title="Home">Home</a></li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/filmes" title="Filmes">Filmes</a></li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/animes" title="Animes TV">Animes TV</a>
      </li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/doramas" title="Doramas">Doramas</a>
      </li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/cartoons" title="Cartoons">Cartoons</a>
      </li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/live-actions" title="Live Actions">Live
          Actions</a></li>
      <li class="nav-item"><a class="nav-link" href="https://hentaisvision.biz/" target="_blank"
          title="Hentais Vision">Hentais Vision</a></li>
      <li class="nav-item">
        <div class="nav-link" title="Genre"><strong>Gêneros</strong></div>
        <div class="sidebar_menu-sub show" id="sidebar_subs_genre">
          <ul class="nav color-list sub-menu">
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=acao">Ação</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=aventura">Aventura</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=artes-marciais">Artes
                Marciais</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=comedia">Comédia</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=cotidiano">Cotidiano</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=demonios">Demônios</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=drama">Drama</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=ecchi">Ecchi</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=escolar">Escolar</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=espacial">Espacial</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=esportes">Esportes</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=fantasia">Fantasia</a>
            </li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=ficcao-cientifica">Ficção Científica</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=harem">Harém</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=hentai">Hentai</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=historico">Histórico</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=horror">Horror</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=infantil">Infantil</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=game">Game</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=josei">Josei</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=magia">Magia</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=militar">Militar</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=misterio">Mistério</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=mecha">Mecha</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=musical">Musical</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=policial">Policial</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=parodia">Paródia</a>
            </li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=psicologico">Psicológico</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=romance">Romance</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=samurai">Samurai</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=seinen">Seinen</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=sci-fi">Sci-Fi</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=shoujo">Shoujo</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=shoujo-ai">Shoujo-Ai</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=shounen">Shounen</a>
            </li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=shounen-ai">Shounen-Ai</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=slice-of-life">Slice of
                Life</a></li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=sobrenatural">Sobrenatural</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=super-poderes">Super
                Poderes</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=suspense">Suspense</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=terror">Terror</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=tragedia">Tragédia</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=thriller">Thriller</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vampiros">Vampiros</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vida-escolar">Vida
                Escolar</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=yaoi">Yaoi</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=yuri">Yuri</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=fatia-de-vida">Fatia de
                vida</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=amor-de-meninas">Amor de
                meninas</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=amor-de-meninos">Amor de
                meninos</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=gourmet">Gourmet</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=avant-garde">Avant
                Garde</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vida-de-trabalho">Vida
                de trabalho</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=erotica">Erotica</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vanguarda">Vanguarda</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=garotos-amam">Garotos
                amam</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=isekai">Isekai</a></li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=reincarnation">Reincarnation</a></li>
            <li class="nav-item nav-more">
              <a class="nav-link" href="https://animes.vision/search?generos="><i class="fas fa-plus mr-2"></i>Mais</a>
            </li>
          </ul>
          <div class="clearfix"></div>
        </div>
      </li>
    </ul>
    <div class="clearfix"></div>
  </div>
  <div id="wrapper">
    <div id="header" class="header-home">
      <div class="container">
        <div id="mobile_menu">
          <i class="fa fa-bars"></i>
        </div>
        <a href="https://animes.vision" id="logo">
          <img src="https://animes.vision/v6/images/logo_vision.png" alt="Vision">
          <div class="clearfix"></div>
        </a>
        <div id="search">
          <div class="search-content">
            <form action="/search" autocomplete="off">
              <a href="https://animes.vision/search" class="filter-icon">Filtro</a>
              <input type="text" class="form-control search-input" name="nome" placeholder="Procure por um anime...">
              <button type="submit" class="search-icon"><i class="fas fa-search"></i></button>
            </form>
            <div class="nav search-result-pop" id="search-suggest" style="display: none;">
              <div class="loading-relative" id="search-loading" style="display: none;">
                <div class="loading">
                  <div class="span1"></div>
                  <div class="span2"></div>
                  <div class="span3"></div>
                </div>
              </div>
              <div class="result" style="display:none;"></div>
            </div>
          </div>
        </div>
        <div class="header-group">
          <div class="vision-group">
            <div class="zrg-title">
              <span class="top">Entre agora</span><span class="bottom">Grupos Vision</span>
            </div>
            <div class="zrg-list">
              <div class="item">
                <a href="https://discord.gg/Ey8YwNb" target="_blank" class="zr-social-button dc-btn"><i
                    class="fab fa-discord"></i></a>
              </div>
              <div class="item">
                <a href="https://t.me/+tNl_kGqSsHgyNWVh" target="_blank" class="zr-social-button tl-btn"><i
                    class="fab fa-telegram"></i></a>
              </div>
              <div class="item">
                <a href="https://facebook.com/animesvision.oficial" target="_blank" class="zr-social-button tl-btn"><i
                    class="fab fa-facebook-square"></i></a>
              </div>
              <div class="item">
                <a href="https://instagram.com/animesvisionoficial/" target="_blank" class="zr-social-button rd-btn"><i
                    class="fab fa-instagram"></i></a>
              </div>
              <div class="item">
                <a href="https://play.google.com/store/apps/details?id=com.anivision" target="_blank"
                  class="zr-social-button gr-btn"><i class="fab fa-android"></i></a>
              </div>
            </div>
            <div class="clearfix"></div>
          </div>
        </div>
        <div class="header-setting">
          <div class="hs-toggles">
            <a href="https://animes.vision/assistir-em-grupo" class="hst-item" data-toggle="tooltip" title=""
              data-original-title="Assistir em Grupo">
              <div class="hst-icon">
                <i class="zicon zicon-20 zicon-live"></i>
              </div>
              <div class="name"><span>Assista em Grupo</span></div>
            </a>
            <a href="https://animes.vision/acesso-vip" class="hst-item" data-toggle="tooltip"
              data-original-title="Premium VIP">
              <div class="hst-icon"><i class="fas fa-crown"></i></div>
              <div class="name"><span>Premium VIP</span></div>
            </a>
            <a href="https://animes.vision/aleatorio" class="hst-item" data-toggle="tooltip"
              data-original-title="Assistir a um anime aleatório">
              <div class="hst-icon"><i class="fas fa-random"></i></div>
              <div class="name"><span>Aleatório</span></div>
            </a>
            <div class="clearfix"></div>
          </div>
        </div>
        <div id="pick_menu">
          <div class="pick_menu-ul">
            <ul class="ulclear">
              <li class="pmu-item pmu-item-home">
                <a class="pmu-item-icon" href="/home" title="Home">
                  <img src="https://animes.vision/v6/images/pick-home.svg" data-toggle="tooltip" data-placement="right"
                    title="" data-original-title="Home">
                </a>
              </li>
              <li class="pmu-item pmu-item-movies">
                <a class="pmu-item-icon" href="/movie" title="Movies">
                  <img src="https://animes.vision/v6/images/pick-movies.svg" data-toggle="tooltip"
                    data-placement="right" title="" data-original-title="Movies">
                </a>
              </li>
              <li class="pmu-item pmu-item-show">
                <a class="pmu-item-icon" href="/tv" title="TV Series">
                  <img src="https://animes.vision/v6/images/pick-show.svg" data-toggle="tooltip" data-placement="right"
                    title="" data-original-title="TV Series">
                </a>
              </li>
              <li class="pmu-item pmu-item-popular">
                <a class="pmu-item-icon" href="/most-popular" title="Most Popular">
                  <img src="https://animes.vision/v6/images/pick-popular.svg" data-toggle="tooltip"
                    data-placement="right" title="" data-original-title="Most Popular">
                </a>
              </li>
            </ul>
          </div>
        </div>
        <div id="header_right">
          <a href="https://animes.vision/register" class="btn btn-dark btn-md botao-registre mr-2">Registre-se</a>
          <a href="https://animes.vision/login" class="btn btn-primary btn-md text-white">Fazer login</a>
        </div>
        <div id="mobile_search" class=""><i class="fa fa-search"></i></div>
        <div class="clearfix"></div>
      </div>
    </div>
    <div class="clearfix"></div>
    <div>

      <div id="main-wrapper" class="layout-page layout-page-detail">

        <div id="ani_detail">
          <div class="ani_detail-stage">
            <div class="container">
              <div class="anis-cover-wrap">
                <div class="anis-cover"
                  style="background-image: url(https://animes.vision/storage/capa/yJo2x9dfu7tLe3S8Tq9K4HCV82CIqcTysd9EjBe4.jpg)">
                </div>
              </div>
              <div class="anis-content">
                <div class="anisc-poster">
                  <div class="film-poster">
                    <img src="https://animes.vision/storage/capa/yJo2x9dfu7tLe3S8Tq9K4HCV82CIqcTysd9EjBe4.jpg"
                      class="film-poster-img">
                  </div>
                </div>
                <div class="anisc-detail">
                  <div class="prebreadcrumb">
                    <nav aria-label="breadcrumb">
                      <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="https://animes.vision">Home</a></li>
                        <li class="breadcrumb-item"><a href="https://animes.vision/animes">Animes</a>
                        </li>
                        <li class="breadcrumb-item dynamic-name active" title="Nanatsu no Taizai - Dublado">Nanatsu no
                          Taizai - Dublado</li>
                      </ol>
                    </nav>
                  </div>
                  <h2 class="film-name dynamic-name" title="Nanatsu no Taizai - Dublado">Nanatsu no Taizai - Dublado
                  </h2>
                  <div id="mal-sync"></div>
                  <div class="film-stats">
                    <span class="item">
                      <div class="tick-item tick-pg">
                        +13
                      </div>
                    </span>
                    <span class="item">
                      <div class="tick-item tick-quality">
                        FULL HD
                      </div>
                    </span>
                    <span class="item">
                      <div class="tick-item tick-dub">
                        Dublado
                      </div>
                    </span>
                    <span class="dot"></span>
                    <span class="item">TV</span>
                    <span class="dot"></span>
                    <span class="item">Episódios 24</span>
                    <span class="dot"></span>
                    <span class="item">24 min por ep</span>
                    <div class="clearfix"></div>
                  </div>
                  <div class="film-buttons">
                    <a href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-01/dublado"
                      class="btn btn-radius btn-primary btn-play"><i class="fas fa-play mr-2"></i>Assistir agora</a>
                    <div class="dr-fav" id="watch-list-content">
                      <div wire:id="QgNpDeowBhnxpG7dl5rM" class="mb-2 favoritos-detalhes">
                        <a wire:click="favoritar(0)" class="btn btn-radius btn-danger btn-effect genero-link"><i
                            class="fas fa-heart-o" aria-hidden="true"></i> Favoritar</a>
                      </div>
                    </div>
                    <div class="dr-fav" id="watch-list-content">
                      <div wire:id="JgqmgSmhC4Q7MVJ3bN52" class="input-group mb-3 d-flex justify-content-center">
                        <div class="input-group-prepend" wire:loading.remove="">
                          <button type="button" class="btn btn-light butao1">Add à lista</button>
                          <button type="button" class="btn btn-light dropdown-toggle butao2" data-toggle="dropdown"
                            aria-haspopup="true" aria-expanded="false">
                            <span class="sr-only">Toggle Dropdown</span>
                          </button>
                          <div class="dropdown-menu">
                            <a class="dropdown-item" wire:click="addLista(1)">Assistindo</a>
                            <a class="dropdown-item" wire:click="addLista(2)">Pretendo assistir</a>
                            <a class="dropdown-item" wire:click="addLista(3)">Completo</a>
                            <a class="dropdown-item" wire:click="addLista(4)">Pausado</a>
                            <a class="dropdown-item" wire:click="addLista(5)">Dropado</a>
                          </div>
                        </div>
                        <div class="input-group-prepend" wire:loading="" wire:target="addLista">
                          <button type="button" class="btn btn-light butao1">Carregando...</button>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="film-description m-hide">
                    <div class="text">
                      Em um mundo semelhante à Idade Média européia, os temidos mas reverenciados Cavaleiros Sagrados da
                      Britannia usam uma magia imensamente poderosa para proteger a região da Britannia e seus reinos.
                      No entanto, um pequeno subconjunto dos Cavaleiros supostamente traiu sua pátria e virou suas
                      lâminas co...<span class="btn-more-desc more">+ Mais</span></div>
                  </div>
                </div>
                <div class="anisc-info-wrap">
                  <div class="anisc-info">
                    <div class="item item-title w-hide">
                      <span class="item-head">Sinopse:</span>
                      <div class="text">
                        Em um mundo semelhante à Idade Média européia, os temidos mas reverenciados Cavaleiros Sagrados
                        da Britannia usam uma magia imensamente poderosa para proteger a região da Britannia e seus
                        reinos. No entanto, um pequeno subconjunto dos Cavaleiros supostamente traiu sua pátria e virou
                        suas lâminas contra seus camaradas em uma tentativa de derrubar o governante de Liones. Eles
                        foram derrotados pelos Cavaleiros Sagrados, mas continuaram os rumores de que esses lendários
                        cavaleiros, chamados de "Sete Pecados Capitais", ainda estavam vivos. Dez anos depois, os
                        próprios Cavaleiros Sagrados organizaram um golpe de Estado e, assim, tornaram-se os novos
                        governantes tirânicos do Reino de Liones. Baseado na série de mangás de mesmo nome, Nanatsu no
                        Taizai segue as aventuras de Elizabeth, a terceira princesa do Reino de Liones, e sua busca
                        pelos Sete Pecados Capitais. Com a ajuda deles, ela se esforça não apenas para retomar seu reino
                        dos Cavaleiros Sagrados, mas também para buscar justiça em um mundo injusto. [Escrito por MAL
                        Rewrite]
                      </div>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Título em Inglês:</span>
                      <span class="name">The Seven Deadly Sins</span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Título Japonês:</span>
                      <span class="name">七つの大罪</span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Foi ao ar em:</span>
                      <span class="name">05 de Oct de 2014</span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Temporada:</span>
                      <span class="name">Fall 2014</span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Duração:</span>
                      <span class="name">24 min por ep</span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Status:</span>
                      <span class="name">Fim da exibição</span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Fansub:</span>
                      <span class="name"><a href="https://animes.vision/search?fansub="></a></span>
                    </div>
                    <div class="item item-list">
                      <span class="item-head">Gêneros:</span>
                      <a href="https://animes.vision/search?generos=acao" title="Ação">Ação</a>
                      <a href="https://animes.vision/search?generos=aventura" title="Aventura">Aventura</a>
                      <a href="https://animes.vision/search?generos=fantasia" title="Fantasia">Fantasia</a>
                      <a href="https://animes.vision/search?generos=sobrenatural" title="Sobrenatural">Sobrenatural</a>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Estúdios:</span>
                      <a class="name" href="https://animes.vision/search?estudios=39">A-1 Pictures</a>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Produtores:</span>
                      <a class="name" href="https://animes.vision/search?produtores=4">Aniplex</a>,
                      <a class="name" href="https://animes.vision/search?produtores=26">Dentsu</a>,
                      <a class="name" href="https://animes.vision/search?produtores=14">Mainichi Broadcasting
                        System</a>,
                      <a class="name" href="https://animes.vision/search?produtores=36">Kodansha</a>,
                      <a class="name" href="https://animes.vision/search?produtores=28">Movic</a>,
                    </div>
                    <div class="film-text w-hide">
                      Assista <strong>Nanatsu no Taizai - Dublado</strong> Dublado online de graça.
                    </div>
                  </div>
                  <div class="clearfix"></div>
                </div>
                <div class="clearfix"></div>
              </div>
            </div>
          </div>
        </div>
        <div class="container">
          <div id="main-content">
            <section class="block_area block_area-actors">
              <div class="block_area-header">
                <div class="float-left bah-heading mr-4">
                  <h2 class="cat-heading">Personagens &amp; Dubladores</h2>
                </div>
                <div class="float-right viewmore">
                  <a class="btn" data-toggle="modal" data-target="#modalPersonagens">Ver mais<i
                      class="fas fa-angle-right ml-2"></i></a>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="block-actors-content">
                <div class="bac-list-wrap">
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/ban" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/UsNMC3QByhWe8F6ssVIk7qLubIVF8fdYhPubXjnt.jpg"
                          src="https://animes.vision/storage/personagem/UsNMC3QByhWe8F6ssVIk7qLubIVF8fdYhPubXjnt.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/ban">Ban</a>
                        </h4>
                        <span class="pi-cast">Principal</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/suzuki-tatsuhisa" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/nbb0LPQdBERS7ju97Q4IpfkXCOu9GLrk8TUynFoc.jpg"
                          src="https://animes.vision/storage/pessoa/nbb0LPQdBERS7ju97Q4IpfkXCOu9GLrk8TUynFoc.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/suzuki-tatsuhisa">Suzuki,
                            Tatsuhisa</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/diane" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/M1kyO9ZP8aEeBMEOfhrO8bz6ln1LkPpylKP2QKxk.jpg"
                          src="https://animes.vision/storage/personagem/M1kyO9ZP8aEeBMEOfhrO8bz6ln1LkPpylKP2QKxk.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/diane">Diane</a>
                        </h4>
                        <span class="pi-cast">Principal</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/yuuki-aoi" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/WyG7AppFCt48OPQhy2iJFbSjpPlf4uBYUSatjcG9.jpg"
                          src="https://animes.vision/storage/pessoa/WyG7AppFCt48OPQhy2iJFbSjpPlf4uBYUSatjcG9.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/yuuki-aoi">Yuuki, Aoi</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/gowther" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/TJN5W0CRdOVWWzIFk9v6AJk2b9rrImFGNxcShyFF.jpg"
                          src="https://animes.vision/storage/personagem/TJN5W0CRdOVWWzIFk9v6AJk2b9rrImFGNxcShyFF.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/gowther">Gowther</a>
                        </h4>
                        <span class="pi-cast">Principal</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/takagi-yuuhei" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/AJDJmC6lytgMCr4Bs6PM9rDxUlwEedzKJStueugP.jpg"
                          src="https://animes.vision/storage/pessoa/AJDJmC6lytgMCr4Bs6PM9rDxUlwEedzKJStueugP.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/takagi-yuuhei">Takagi, Yuuhei</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/hawk" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/4zF6PsdrmZR5fOfAUtqt6gKpsSCSbnp0F2GEYdpr.jpg"
                          src="https://animes.vision/storage/personagem/4zF6PsdrmZR5fOfAUtqt6gKpsSCSbnp0F2GEYdpr.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/hawk">Hawk</a>
                        </h4>
                        <span class="pi-cast">Principal</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/kuno-misaki" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/YkAvKodtgwyWupOCgQNFPDchSxsX1qGTTpWzk30K.jpg"
                          src="https://animes.vision/storage/pessoa/YkAvKodtgwyWupOCgQNFPDchSxsX1qGTTpWzk30K.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/kuno-misaki">Kuno, Misaki</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/king" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/bFtG5EMmzYaFZRbgBFpf3Sp1HpEFJqni8LFtcVXk.jpg"
                          src="https://animes.vision/storage/personagem/bFtG5EMmzYaFZRbgBFpf3Sp1HpEFJqni8LFtcVXk.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/king">King</a>
                        </h4>
                        <span class="pi-cast">Principal</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/fukuyama-jun" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/MFWB4z4UeKxY6g0DhpaFUxqaAVrFb4Fw512DGou3.jpg"
                          src="https://animes.vision/storage/pessoa/MFWB4z4UeKxY6g0DhpaFUxqaAVrFb4Fw512DGou3.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/fukuyama-jun">Fukuyama, Jun</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/liones-elizabeth" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/8DGXLvljj7j01tegWdMWwi23wG3OqbGFoYbJsWRn.jpg"
                          src="https://animes.vision/storage/personagem/8DGXLvljj7j01tegWdMWwi23wG3OqbGFoYbJsWRn.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/liones-elizabeth">Liones, Elizabeth</a>
                        </h4>
                        <span class="pi-cast">Principal</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/amamiya-sora" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                          src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/amamiya-sora">Amamiya, Sora</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="clearfix"></div>
                </div>
                <div class="clearfix"></div>
              </div>
            </section>
            <section class="block_area block_area-promotions">
              <div class="block_area-header">
                <div class="float-left bah-heading mr-4">
                  <h2 class="cat-heading">Episódios</h2>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="block_area-content block_area-promotions-list">
                <div class="row justify-content-center">
                  <div class="loading-relative mt-5 mb-5" wire:loading="" wire:target="paginar">
                    <div class="loading">
                      <div class="span1"></div>
                      <div class="span2"></div>
                      <div class="span3"></div>
                    </div>
                  </div>
                </div>
                <div class="screen-items">
                  <div class="item" data-title="Episodio 01 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-01/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/sbgXWoejDwVNWBfVnu82tT8jLc6821K6OtHenjmv.png"
                        alt="Episodio 01 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 01 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 02 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-02/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/7OESLjl239hLoZvgQKlIuDKToJmTD02R8qlUPOfZ.png"
                        alt="Episodio 02 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 02 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 03 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-03/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/JayJUPmNYJdlHrb35YSdkZRy6uKaLo07AF3ce5ZC.png"
                        alt="Episodio 03 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 03 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 04 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-04/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/og1HIBVl0wQZ21HxHKlKChCWLc9P9JGkKOgS2o1s.png"
                        alt="Episodio 04 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 04 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 05 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-05/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/IzKcuDdxTLW9QAI73XwHwKNxRYlVQ01xIdib1nn6.png"
                        alt="Episodio 05 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 05 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 06 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-06/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/j05q3men6EHpH5k1xj76gSxdhiKAT1Pmr9esIpLz.png"
                        alt="Episodio 06 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 06 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 07 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-07/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/WaxjUrW7Qkk6wHNt50aZ40kWiYYxKZr1MUdzq1P6.png"
                        alt="Episodio 07 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 07 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 08 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-08/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/6OqdczuEilm3GTI48mTW0BGcwowxXVaY25TP6W22.png"
                        alt="Episodio 08 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 08 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 09 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-09/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/bNzNoXOciEJM8Sq6m6dfnIQxOxzrSQWqCSqu73wA.png"
                        alt="Episodio 09 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 09 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 10 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-10/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/eaTK4CTx7uSFuuqTFOT9MyaCaQ5M5Wj6fXjXD6B5.png"
                        alt="Episodio 10 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 10 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 11 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-11/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/5zbyZuYinIvpHg0VJrkrTvNhcgp39cE6v1nyXSAy.png"
                        alt="Episodio 11 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 11 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 12 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-12/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/ueYQ9MfNzNH69qPIMZuwscoOBrnuMSauf0MiYQrB.png"
                        alt="Episodio 12 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 12 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 13 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-13/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/iGodVtCLVVfHj6fvT2AzFblFjX9cVRiisxisUEA8.png"
                        alt="Episodio 13 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 13 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 14 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-14/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/DBDJPIKuL8Hn3MH9acHOwhIXgmmPZZfko0fr8nm1.png"
                        alt="Episodio 14 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 14 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 15 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-15/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/tShBKzLHalI2Duo2PsBio3OBdvpzxKdUEEG3HzKa.png"
                        alt="Episodio 15 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 15 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 16 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-16/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/TAj9zvjXmrrRQxREMJhrwCjsxyLNBwlMWKL3WYFv.png"
                        alt="Episodio 16 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 16 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 17 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-17/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/wv6OLtKZTjHThQI7tyjK1Mo5ckldXrx3RChp9WRP.png"
                        alt="Episodio 17 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 17 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 18 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-18/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/bhy5HIT7yQcHC4UkLfN0NNtodFMrRKMnQp9g0dVt.png"
                        alt="Episodio 18 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 18 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 19 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-19/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/bLn0JArAJtLskynLvM4ePBjdpnWkpIkLq3ji58Mr.png"
                        alt="Episodio 19 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 19 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 20 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-20/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/syTXPVmbZ4TDK4l4fZtuu7dW3A1dAhtDX2xFXkiI.png"
                        alt="Episodio 20 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 20 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 21 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-21/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/z0nCwm7WT8QmqKabLYHk1hSj4S54vQgIhXLy2CZo.png"
                        alt="Episodio 21 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 21 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 22 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-22/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/t9Qx7j78kckrKZOFdoVX7BXSzyLQ2ZCFXhLuYYmz.png"
                        alt="Episodio 22 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 22 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 23 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-23/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/5nqjY598ElsYdpPzBXo4zFRy7XERiWchNmicXIEz.png"
                        alt="Episodio 23 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 23 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="item" data-title="Episodio 24 ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/animes/nanatsu-no-taizai-dublado/episodio-24/dublado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/xsXJOXhyruMzClUN0Z64sVgUnRECDJE1eSijnR9Q.png"
                        alt="Episodio 24 " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Episodio 24 </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="clearfix"></div>
                </div>
                <div class="pre-pagination">
                  <nav aria-label="Page navigation">
                    <ul class="pagination mb-0">
                    </ul>
                  </nav>
                </div>
              </div>
            </section>
            <div class="clearfix"></div>
            <section class="block_area block_area-comment">
              <div class="block_area-header block_area-header-tabs">
                <div class="float-left bah-heading mr-4">
                  <h2 class="cat-heading">Comentários <small>beta</small></h2>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="tab-content">
                <div class="show-comments">
                  <div id="disqus_thread"></div>
                  <div class="text-center">
                    <button class="btn btn-sm btn-secondary sc-button btn-load-comment"><i
                        class="fas fa-comment mr-2"></i>Clique para carregar os comentários
                    </button>
                  </div>
                </div>
              </div>
            </section>
            <div class="clearfix"></div>
          </div>
          <div id="main-sidebar">
            <section wire:id="Cj17IDmGxEgwXj61DkE3" class="block_area block_area_sidebar block_area-realtime">
              <div class="block_area-header">
                <div class="float-left bah-heading mr-4">
                  <h2 class="cat-heading">Populares</h2>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="block_area-content">
                <div class="cbox cbox-list cbox-realtime">
                  <div class="cbox-content">
                    <div class="anif-block-ul">
                      <ul class="ulclear">
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/LJZJOMMZWO9A7uTphxK863jfXgTKBgeJKZnRHgEC.jpg"
                              class="film-poster-img ls-is-cached lazyloaded" alt="One Piece"
                              src="https://animes.vision/storage/capa/LJZJOMMZWO9A7uTphxK863jfXgTKBgeJKZnRHgEC.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/one-piece" title="One Piece"
                                class="dynamic-name" data-jname="One Piece">One Piece</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">1090 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">24 min</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/lJYAlaX43KWP9Bq26Q4eq2hWzmwBkMxGbueb0R7k.jpg"
                              class="film-poster-img ls-is-cached lazyloaded" alt="Boruto: Naruto Next Generations"
                              src="https://animes.vision/storage/capa/lJYAlaX43KWP9Bq26Q4eq2hWzmwBkMxGbueb0R7k.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/boruto-naruto-next-generations"
                                title="Boruto: Naruto Next Generations" class="dynamic-name"
                                data-jname="Boruto: Naruto Next Generations">Boruto: Naruto Next Generations</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">293 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/TPZYbqV1picmurT2CONFMswAtR66N3Tcak8Wfbbz.jpg"
                              class="film-poster-img ls-is-cached lazyloaded" alt="Naruto Shippuuden"
                              src="https://animes.vision/storage/capa/TPZYbqV1picmurT2CONFMswAtR66N3Tcak8Wfbbz.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/naruto-shippuden"
                                title="Naruto Shippuuden" class="dynamic-name" data-jname="Naruto Shippuuden">Naruto
                                Shippuuden</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">500 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/I29J5wmoADzccoCY3flDe62AmGsVJzUMlS1t5dHu.jpg"
                              class="film-poster-img ls-is-cached lazyloaded" alt="Kimetsu no Yaiba"
                              src="https://animes.vision/storage/capa/I29J5wmoADzccoCY3flDe62AmGsVJzUMlS1t5dHu.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/kimetsu-no-yaiba"
                                title="Kimetsu no Yaiba" class="dynamic-name" data-jname="Kimetsu no Yaiba">Kimetsu no
                                Yaiba</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">BD</span>
                              <span class="dot"></span>
                              <span class="fdi-item">26 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/feVbQep8ew2okFuPtixafURlt4D6oRFZVsRNMmKU.jpg"
                              class="film-poster-img ls-is-cached lazyloaded" alt="Black Clover"
                              src="https://animes.vision/storage/capa/feVbQep8ew2okFuPtixafURlt4D6oRFZVsRNMmKU.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/black-clover"
                                title="Black Clover" class="dynamic-name" data-jname="Black Clover">Black Clover</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">170 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/PaMxC3yCZ1PA0J5BMf1uSzv5VlhCF5E2XiSRRzIC.jpg"
                              class="film-poster-img ls-is-cached lazyloaded" alt="One Punch Man 2"
                              src="https://animes.vision/storage/capa/PaMxC3yCZ1PA0J5BMf1uSzv5VlhCF5E2XiSRRzIC.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/one-punch-man-2"
                                title="One Punch Man 2" class="dynamic-name" data-jname="One Punch Man 2">One Punch Man
                                2</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">BD (1-4) / TV (5-12)</span>
                              <span class="dot"></span>
                              <span class="fdi-item">18 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/GDdsfGDX8JfEDwV822hKZO6PptaI1WPEOn0Bm4JV.jpg"
                              class="film-poster-img ls-is-cached lazyloaded"
                              alt="Shingeki no Kyojin: The Final Season Part 2"
                              src="https://animes.vision/storage/capa/GDdsfGDX8JfEDwV822hKZO6PptaI1WPEOn0Bm4JV.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a
                                href="https://animes.vision/animes/shingeki-no-kyojin-the-final-season-part-2"
                                title="Shingeki no Kyojin: The Final Season Part 2" class="dynamic-name"
                                data-jname="Shingeki no Kyojin: The Final Season Part 2">Shingeki no Kyojin: The Final
                                Season Part 2</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">12 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 minutos por episódio</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/tZ07emovR5srz1Xt0CXzX074fF6D0iGyMnSNeT9P.jpg"
                              class="film-poster-img ls-is-cached lazyloaded" alt="Boku no Hero Academia 4th Season"
                              src="https://animes.vision/storage/capa/tZ07emovR5srz1Xt0CXzX074fF6D0iGyMnSNeT9P.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/boku-no-hero-academia-4"
                                title="Boku no Hero Academia 4th Season" class="dynamic-name"
                                data-jname="Boku no Hero Academia 4th Season">Boku no Hero Academia 4th Season</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">25 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">24 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/Heva86kU0Xv9ce0wYjfhSsedS5YFcgbk6va3rnE4.jpg"
                              class="film-poster-img ls-is-cached lazyloaded" alt="Shingeki no Kyojin Season 3 Part 2"
                              src="https://animes.vision/storage/capa/Heva86kU0Xv9ce0wYjfhSsedS5YFcgbk6va3rnE4.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a
                                href="https://animes.vision/animes/shingeki-no-kyojin-season-3-part-2"
                                title="Shingeki no Kyojin Season 3 Part 2" class="dynamic-name"
                                data-jname="Shingeki no Kyojin Season 3 Part 2">Shingeki no Kyojin Season 3 Part 2</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">10 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/1Am6fBnZ1nfz6TMroQS6m49Gsj7P28gKIF6Tnv0F.jpg"
                              class="film-poster-img lazyloaded" alt="Tate No Yuusha No Nariagari"
                              src="https://animes.vision/storage/capa/1Am6fBnZ1nfz6TMroQS6m49Gsj7P28gKIF6Tnv0F.jpg">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/tate-no-yuusha-no-nariagari"
                                title="Tate No Yuusha No Nariagari" class="dynamic-name"
                                data-jname="Tate No Yuusha No Nariagari">Tate No Yuusha No Nariagari</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">25 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">24 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                      </ul>
                      <div class="clearfix"></div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                </div>
              </div>
            </section>
          </div>
          <div class="clearfix"></div>
        </div>
      </div>
      <div wire:id="3AAAmPzkrxMjnWOOAIdN" wire:ignore.self="" class="modal fade premodal premodal-characters"
        id="modalPersonagens" tabindex="-1" role="dialog" aria-labelledby="modalcharacterstitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title text-left" id="modalcharacterstitle">Personagens &amp; Dubladores</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">×</span>
              </button>
            </div>
            <div class="modal-body">
              <div class="modal-characters">
                <div class="row justify-content-center">
                  <div class="loading-relative mt-5 mb-5" wire:loading="">
                    <div class="loading">
                      <div class="span1"></div>
                      <div class="span2"></div>
                      <div class="span3"></div>
                    </div>
                  </div>
                </div>
                <div id="characters-content" wire:loading.remove="">
                  <div class="bac-list-wrap" mb-3="" id="character-list">
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/ban" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/UsNMC3QByhWe8F6ssVIk7qLubIVF8fdYhPubXjnt.jpg"
                            src="https://animes.vision/storage/personagem/UsNMC3QByhWe8F6ssVIk7qLubIVF8fdYhPubXjnt.jpg"
                            alt="Ban">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/ban">Ban</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/suzuki-tatsuhisa" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Suzuki, Tatsuhisa">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/nbb0LPQdBERS7ju97Q4IpfkXCOu9GLrk8TUynFoc.jpg"
                              src="https://animes.vision/storage/pessoa/nbb0LPQdBERS7ju97Q4IpfkXCOu9GLrk8TUynFoc.jpg"
                              alt="Suzuki, Tatsuhisa">
                          </a>
                          <a href="https://animes.vision/pessoa/lisita-mckeidy" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Lisita, Mckeidy">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/e6wnjmdudJkFCZ93Xjl4mrhsVoSAeGmtEiEPawS2.jpg"
                              src="https://animes.vision/storage/pessoa/e6wnjmdudJkFCZ93Xjl4mrhsVoSAeGmtEiEPawS2.jpg"
                              alt="Lisita, Mckeidy">
                          </a>
                          <a href="https://animes.vision/pessoa/diskin-benjamin" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Diskin, Benjamin">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/6W5T3vNyWIbv7aBXRQR0HIJC4ycHMarP5yYn965h.jpg"
                              src="https://animes.vision/storage/pessoa/6W5T3vNyWIbv7aBXRQR0HIJC4ycHMarP5yYn965h.jpg"
                              alt="Diskin, Benjamin">
                          </a>
                          <a href="https://animes.vision/pessoa/meli-manuel" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Meli, Manuel">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/z4RkvfEG8A1w7TGwdOtKSS83gZfisenzUAOB6JVx.jpg"
                              src="https://animes.vision/storage/pessoa/z4RkvfEG8A1w7TGwdOtKSS83gZfisenzUAOB6JVx.jpg"
                              alt="Meli, Manuel">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/diane" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/M1kyO9ZP8aEeBMEOfhrO8bz6ln1LkPpylKP2QKxk.jpg"
                            src="https://animes.vision/storage/personagem/M1kyO9ZP8aEeBMEOfhrO8bz6ln1LkPpylKP2QKxk.jpg"
                            alt="Diane">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/diane">Diane</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/yuuki-aoi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Yuuki, Aoi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/WyG7AppFCt48OPQhy2iJFbSjpPlf4uBYUSatjcG9.jpg"
                              src="https://animes.vision/storage/pessoa/WyG7AppFCt48OPQhy2iJFbSjpPlf4uBYUSatjcG9.jpg"
                              alt="Yuuki, Aoi">
                          </a>
                          <a href="https://animes.vision/pessoa/saddy-flavia" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Saddy, Flávia">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/eJnhpRJUSg1UDVw4X4tbj7OWOXXV3MJm3YJ2vRRv.jpg"
                              src="https://animes.vision/storage/pessoa/eJnhpRJUSg1UDVw4X4tbj7OWOXXV3MJm3YJ2vRRv.jpg"
                              alt="Saddy, Flávia">
                          </a>
                          <a href="https://animes.vision/pessoa/mendez-erica" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Mendez, Erica">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ieLKjofZxY3j1gJPQ1j07clgwSGWpjTPGLqJ6xMi.jpg"
                              src="https://animes.vision/storage/pessoa/ieLKjofZxY3j1gJPQ1j07clgwSGWpjTPGLqJ6xMi.jpg"
                              alt="Mendez, Erica">
                          </a>
                          <a href="https://animes.vision/pessoa/marricchi-lucrezia" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Marricchi, Lucrezia">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/RgwZipDncb5txFme6UuzEp6KBwgdwIAKQdXp7tLp.jpg"
                              src="https://animes.vision/storage/pessoa/RgwZipDncb5txFme6UuzEp6KBwgdwIAKQdXp7tLp.jpg"
                              alt="Marricchi, Lucrezia">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/gowther" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/TJN5W0CRdOVWWzIFk9v6AJk2b9rrImFGNxcShyFF.jpg"
                            src="https://animes.vision/storage/personagem/TJN5W0CRdOVWWzIFk9v6AJk2b9rrImFGNxcShyFF.jpg"
                            alt="Gowther">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/gowther">Gowther</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/takagi-yuuhei" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Takagi, Yuuhei">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/AJDJmC6lytgMCr4Bs6PM9rDxUlwEedzKJStueugP.jpg"
                              src="https://animes.vision/storage/pessoa/AJDJmC6lytgMCr4Bs6PM9rDxUlwEedzKJStueugP.jpg"
                              alt="Takagi, Yuuhei">
                          </a>
                          <a href="https://animes.vision/pessoa/emmanuel-charles" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Emmanuel, Charles">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/aI7AyPNp3YSaIhqe6Bt5azs6ZlUBs3iLgt8soXJD.jpg"
                              src="https://animes.vision/storage/pessoa/aI7AyPNp3YSaIhqe6Bt5azs6ZlUBs3iLgt8soXJD.jpg"
                              alt="Emmanuel, Charles">
                          </a>
                          <a href="https://animes.vision/pessoa/kimerer-erik" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kimerer, Erik">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/S0HiSY6vx2cwXiusPffXD5QdP0pFjvnBMIc85Wpk.jpg"
                              src="https://animes.vision/storage/pessoa/S0HiSY6vx2cwXiusPffXD5QdP0pFjvnBMIc85Wpk.jpg"
                              alt="Kimerer, Erik">
                          </a>
                          <a href="https://animes.vision/pessoa/pages-jean-francois" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Pagès, Jean-François">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/n2biNBGs1QM9zbbsHzZ9giGpoWmJQwuc0vp2YcKC.jpg"
                              src="https://animes.vision/storage/pessoa/n2biNBGs1QM9zbbsHzZ9giGpoWmJQwuc0vp2YcKC.jpg"
                              alt="Pagès, Jean-François">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/hawk" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/4zF6PsdrmZR5fOfAUtqt6gKpsSCSbnp0F2GEYdpr.jpg"
                            src="https://animes.vision/storage/personagem/4zF6PsdrmZR5fOfAUtqt6gKpsSCSbnp0F2GEYdpr.jpg"
                            alt="Hawk">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/hawk">Hawk</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kuno-misaki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kuno, Misaki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/YkAvKodtgwyWupOCgQNFPDchSxsX1qGTTpWzk30K.jpg"
                              src="https://animes.vision/storage/pessoa/YkAvKodtgwyWupOCgQNFPDchSxsX1qGTTpWzk30K.jpg"
                              alt="Kuno, Misaki">
                          </a>
                          <a href="https://animes.vision/pessoa/rodrigues-pamella" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Rodrigues, Pamella">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/bXc1e89FYAxuFWhkZttxdd2mMyxPPgkvUOm7lmHx.jpg"
                              src="https://animes.vision/storage/pessoa/bXc1e89FYAxuFWhkZttxdd2mMyxPPgkvUOm7lmHx.jpg"
                              alt="Rodrigues, Pamella">
                          </a>
                          <a href="https://animes.vision/pessoa/valenzuela-cristina" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Valenzuela, Cristina">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/HGcspIhfKve6XQuzQjPhVQo1855RDiugc4IrJN0X.jpg"
                              src="https://animes.vision/storage/pessoa/HGcspIhfKve6XQuzQjPhVQo1855RDiugc4IrJN0X.jpg"
                              alt="Valenzuela, Cristina">
                          </a>
                          <a href="https://animes.vision/pessoa/bertolotti-monica" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Bertolotti, Monica">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Ge4qAG963PdcdJyM2GsUb9hEYnY8OhOU2rgziayv.jpg"
                              src="https://animes.vision/storage/pessoa/Ge4qAG963PdcdJyM2GsUb9hEYnY8OhOU2rgziayv.jpg"
                              alt="Bertolotti, Monica">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/king" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/bFtG5EMmzYaFZRbgBFpf3Sp1HpEFJqni8LFtcVXk.jpg"
                            src="https://animes.vision/storage/personagem/bFtG5EMmzYaFZRbgBFpf3Sp1HpEFJqni8LFtcVXk.jpg"
                            alt="King">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/king">King</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/fukuyama-jun" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Fukuyama, Jun">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/MFWB4z4UeKxY6g0DhpaFUxqaAVrFb4Fw512DGou3.jpg"
                              src="https://animes.vision/storage/pessoa/MFWB4z4UeKxY6g0DhpaFUxqaAVrFb4Fw512DGou3.jpg"
                              alt="Fukuyama, Jun">
                          </a>
                          <a href="https://animes.vision/pessoa/garcia-marcelo" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Garcia, Marcelo">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/eIve6bFplH3cu2IkyCGLhm5ikEPHnvf7ZNfztKiV.jpg"
                              src="https://animes.vision/storage/pessoa/eIve6bFplH3cu2IkyCGLhm5ikEPHnvf7ZNfztKiV.jpg"
                              alt="Garcia, Marcelo">
                          </a>
                          <a href="https://animes.vision/pessoa/mittelman-max" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Mittelman, Max">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/tewYf0iIRHWTdgZiehQQSoW5qSQwdcrRRbPMYHMN.jpg"
                              src="https://animes.vision/storage/pessoa/tewYf0iIRHWTdgZiehQQSoW5qSQwdcrRRbPMYHMN.jpg"
                              alt="Mittelman, Max">
                          </a>
                          <a href="https://animes.vision/pessoa/suarez-luis-leonardo" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Suárez, Luis Leonardo">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/AaAMAfytGTlvznQxmHRSA1xUaLwOPbkNLPLMIMPY.jpg"
                              src="https://animes.vision/storage/pessoa/AaAMAfytGTlvznQxmHRSA1xUaLwOPbkNLPLMIMPY.jpg"
                              alt="Suárez, Luis Leonardo">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/liones-elizabeth" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/8DGXLvljj7j01tegWdMWwi23wG3OqbGFoYbJsWRn.jpg"
                            src="https://animes.vision/storage/personagem/8DGXLvljj7j01tegWdMWwi23wG3OqbGFoYbJsWRn.jpg"
                            alt="Liones, Elizabeth">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/liones-elizabeth">Liones, Elizabeth</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/amamiya-sora" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Amamiya, Sora">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              alt="Amamiya, Sora">
                          </a>
                          <a href="https://animes.vision/pessoa/menezes-erika" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Menezes, Érika">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/KubpvtWNvTsk5H9ibpPfMfnMd6hYan1J0khruu9a.jpg"
                              src="https://animes.vision/storage/pessoa/KubpvtWNvTsk5H9ibpPfMfnMd6hYan1J0khruu9a.jpg"
                              alt="Menezes, Érika">
                          </a>
                          <a href="https://animes.vision/pessoa/harlacher-erika" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Harlacher, Erika">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/O8mQNp7r0MxewckRAbnH0KFmOoXmO7c9unaYsfcI.jpg"
                              src="https://animes.vision/storage/pessoa/O8mQNp7r0MxewckRAbnH0KFmOoXmO7c9unaYsfcI.jpg"
                              alt="Harlacher, Erika">
                          </a>
                          <a href="https://animes.vision/pessoa/volpe-monica" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Volpe, Monica">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/x9qbQJdbjihbrF1eIcK899uFBsTReiN6v6tBgZSF.jpg"
                              src="https://animes.vision/storage/pessoa/x9qbQJdbjihbrF1eIcK899uFBsTReiN6v6tBgZSF.jpg"
                              alt="Volpe, Monica">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/meliodas" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/8aK72rqRi4qY3hHESXEAphXihnD8CDrt6SRlhAnS.jpg"
                            src="https://animes.vision/storage/personagem/8aK72rqRi4qY3hHESXEAphXihnD8CDrt6SRlhAnS.jpg"
                            alt="Meliodas">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/meliodas">Meliodas</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kaji-yuki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kaji, Yuki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/1AdDJYfj9dAhlBTluUmxwMyyPImWecCtgq17Mrhx.jpg"
                              src="https://animes.vision/storage/pessoa/1AdDJYfj9dAhlBTluUmxwMyyPImWecCtgq17Mrhx.jpg"
                              alt="Kaji, Yuki">
                          </a>
                          <a href="https://animes.vision/pessoa/vila-verde-fabricio" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Vila Verde, Fabrício">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/X87Tr14dyIbYPriz1Ma392299hK82bnRMCkWQXig.jpg"
                              src="https://animes.vision/storage/pessoa/X87Tr14dyIbYPriz1Ma392299hK82bnRMCkWQXig.jpg"
                              alt="Vila Verde, Fabrício">
                          </a>
                          <a href="https://animes.vision/pessoa/papenbrook-bryce" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Papenbrook, Bryce">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/8YcGvsEnblLlHdcIR5ZsV7O1OsIvGLzMxKjxrqMJ.jpg"
                              src="https://animes.vision/storage/pessoa/8YcGvsEnblLlHdcIR5ZsV7O1OsIvGLzMxKjxrqMJ.jpg"
                              alt="Papenbrook, Bryce">
                          </a>
                          <a href="https://animes.vision/pessoa/puccio-alessio" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Puccio, Alessio">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/jyABVHN1SlHgJa9Pbs3a2wR4NWSBhmoAQpgs5KQi.jpg"
                              src="https://animes.vision/storage/pessoa/jyABVHN1SlHgJa9Pbs3a2wR4NWSBhmoAQpgs5KQi.jpg"
                              alt="Puccio, Alessio">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/alioni" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/pwPeJwTMuk9y6h6drEntqDzanZcx2KVcQ3FknFpZ.jpg"
                            src="https://animes.vision/storage/personagem/pwPeJwTMuk9y6h6drEntqDzanZcx2KVcQ3FknFpZ.jpg"
                            alt="Alioni">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/alioni">Alioni</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/nojima-hirofumi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nojima, Hirofumi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/eCCEfOdDrt6p2Ffx1iNRKl3h02wi0suUUo0DQ6ds.jpg"
                              src="https://animes.vision/storage/pessoa/eCCEfOdDrt6p2Ffx1iNRKl3h02wi0suUUo0DQ6ds.jpg"
                              alt="Nojima, Hirofumi">
                          </a>
                          <a href="https://animes.vision/pessoa/solis-adrien" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Solis, Adrien">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/l8vXMdMkBOu40BZSx6vh3WZzShYZH7MYu84tLX8Y.jpg"
                              src="https://animes.vision/storage/pessoa/l8vXMdMkBOu40BZSx6vh3WZzShYZH7MYu84tLX8Y.jpg"
                              alt="Solis, Adrien">
                          </a>
                          <a href="https://animes.vision/pessoa/drummond-felipe" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Drummond, Felipe">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/714gt42zHwsMdiTyUHQsfWaqJ7gVmBbQeCGz7TQx.jpg"
                              src="https://animes.vision/storage/pessoa/714gt42zHwsMdiTyUHQsfWaqJ7gVmBbQeCGz7TQx.jpg"
                              alt="Drummond, Felipe">
                          </a>
                          <a href="https://animes.vision/pessoa/nojima-hirofumi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nojima, Hirofumi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/eCCEfOdDrt6p2Ffx1iNRKl3h02wi0suUUo0DQ6ds.jpg"
                              src="https://animes.vision/storage/pessoa/eCCEfOdDrt6p2Ffx1iNRKl3h02wi0suUUo0DQ6ds.jpg"
                              alt="Nojima, Hirofumi">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/barzad-cain" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/cY2SDt06o9HLV7W5YEzVqOV1gLgVXaBJzC7KVKkc.jpg"
                            src="https://animes.vision/storage/personagem/cY2SDt06o9HLV7W5YEzVqOV1gLgVXaBJzC7KVKkc.jpg"
                            alt="Barzad, Cain">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/barzad-cain">Barzad, Cain</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/inagaki-takashi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Inagaki, Takashi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/WcykKKcTsVcByBxRwyXHFHMfbGwJh6cNPdKChVcf.jpg"
                              src="https://animes.vision/storage/pessoa/WcykKKcTsVcByBxRwyXHFHMfbGwJh6cNPdKChVcf.jpg"
                              alt="Inagaki, Takashi">
                          </a>
                          <a href="https://animes.vision/pessoa/beacock-brian" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Beacock, Brian">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ReXOVLVdCTuxgumcN6hphKpdO9yMxu2twrmSDnMn.jpg"
                              src="https://animes.vision/storage/pessoa/ReXOVLVdCTuxgumcN6hphKpdO9yMxu2twrmSDnMn.jpg"
                              alt="Beacock, Brian">
                          </a>
                          <a href="https://animes.vision/pessoa/dal-fabbro-luca" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Dal Fabbro, Luca">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/FyMoxrXvMoEhrdLE4QThgYvVNfU2IfI3gam3oPiw.jpg"
                              src="https://animes.vision/storage/pessoa/FyMoxrXvMoEhrdLE4QThgYvVNfU2IfI3gam3oPiw.jpg"
                              alt="Dal Fabbro, Luca">
                          </a>
                          <a href="https://animes.vision/pessoa/gesteira-carlos" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Gesteira, Carlos">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/L0k95ag2hme4LAKCHtnKzaG4zGvJi8b09rQAtxpJ.jpg"
                              src="https://animes.vision/storage/pessoa/L0k95ag2hme4LAKCHtnKzaG4zGvJi8b09rQAtxpJ.jpg"
                              alt="Gesteira, Carlos">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/dale" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/q892JjzvicLfRnnKBmEtMejWmTGyY4tYEIPXM8Ue.jpg"
                            src="https://animes.vision/storage/personagem/q892JjzvicLfRnnKBmEtMejWmTGyY4tYEIPXM8Ue.jpg"
                            alt="Dale">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/dale">Dale</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/miyamoto-mitsuru" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Miyamoto, Mitsuru">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/6dfYvkaj1e0WFND4yqhaxNlSwWP1do5V4H4X7nHP.jpg"
                              src="https://animes.vision/storage/pessoa/6dfYvkaj1e0WFND4yqhaxNlSwWP1do5V4H4X7nHP.jpg"
                              alt="Miyamoto, Mitsuru">
                          </a>
                          <a href="https://animes.vision/pessoa/hebert-kyle" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hebert, Kyle">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/VG9AbaMsJ6ifeL6WqytbSViiI5xNDnYzJNGWlwNo.jpg"
                              src="https://animes.vision/storage/pessoa/VG9AbaMsJ6ifeL6WqytbSViiI5xNDnYzJNGWlwNo.jpg"
                              alt="Hebert, Kyle">
                          </a>
                          <a href="https://animes.vision/pessoa/barros-gutemberg" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Barros, Gutemberg">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/tOv9FnYjsqkDSzjm0q29BiRWOhycPH5vJZIJfa8t.jpg"
                              src="https://animes.vision/storage/pessoa/tOv9FnYjsqkDSzjm0q29BiRWOhycPH5vJZIJfa8t.jpg"
                              alt="Barros, Gutemberg">
                          </a>
                          <a href="https://animes.vision/pessoa/miyamoto-mitsuru" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Miyamoto, Mitsuru">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/6dfYvkaj1e0WFND4yqhaxNlSwWP1do5V4H4X7nHP.jpg"
                              src="https://animes.vision/storage/pessoa/6dfYvkaj1e0WFND4yqhaxNlSwWP1do5V4H4X7nHP.jpg"
                              alt="Miyamoto, Mitsuru">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/dana" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/9dgQWJoMLbnhOOhdp5xL4aWnTHo9rbasiU5LvkFd.jpg"
                            src="https://animes.vision/storage/personagem/9dgQWJoMLbnhOOhdp5xL4aWnTHo9rbasiU5LvkFd.jpg"
                            alt="Dana">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/dana">Dana</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/shimura-tomoyuki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Shimura, Tomoyuki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/T3QMbzojzRtvvdCrkzU26wPO5sgVyJEoglL4w58M.jpg"
                              src="https://animes.vision/storage/pessoa/T3QMbzojzRtvvdCrkzU26wPO5sgVyJEoglL4w58M.jpg"
                              alt="Shimura, Tomoyuki">
                          </a>
                          <a href="https://animes.vision/pessoa/espinoza-duda" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Espinoza, Duda">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/m6FyrO5lwqG5NoBHbxIBEWvVBJHegmmEQJTSHzVr.jpg"
                              src="https://animes.vision/storage/pessoa/m6FyrO5lwqG5NoBHbxIBEWvVBJHegmmEQJTSHzVr.jpg"
                              alt="Espinoza, Duda">
                          </a>
                          <a href="https://animes.vision/pessoa/hebert-kyle" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hebert, Kyle">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/VG9AbaMsJ6ifeL6WqytbSViiI5xNDnYzJNGWlwNo.jpg"
                              src="https://animes.vision/storage/pessoa/VG9AbaMsJ6ifeL6WqytbSViiI5xNDnYzJNGWlwNo.jpg"
                              alt="Hebert, Kyle">
                          </a>
                          <a href="https://animes.vision/pessoa/moscoso-txema" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Moscoso, Txema">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Fn9rPdGCVktapkWZtZcFKppIHpExh8XnlnMOtTSX.jpg"
                              src="https://animes.vision/storage/pessoa/Fn9rPdGCVktapkWZtZcFKppIHpExh8XnlnMOtTSX.jpg"
                              alt="Moscoso, Txema">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/dreyfus" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/WldVNNXQyHf2fmBd1KMRYw3nQD4O7FkavlqzAnJV.jpg"
                            src="https://animes.vision/storage/personagem/WldVNNXQyHf2fmBd1KMRYw3nQD4O7FkavlqzAnJV.jpg"
                            alt="Dreyfus">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/dreyfus">Dreyfus</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/konishi-katsuyuki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Konishi, Katsuyuki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/5d4OfPlfuz1JtzpJ2UF34dAeXvQM74aJroLlHeDQ.jpg"
                              src="https://animes.vision/storage/pessoa/5d4OfPlfuz1JtzpJ2UF34dAeXvQM74aJroLlHeDQ.jpg"
                              alt="Konishi, Katsuyuki">
                          </a>
                          <a href="https://animes.vision/pessoa/price-jamieson" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Price, Jamieson">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/dwYZQmg5p4B8VSfnyH89DsMJWnuVfDzxWcrqE6Lt.jpg"
                              src="https://animes.vision/storage/pessoa/dwYZQmg5p4B8VSfnyH89DsMJWnuVfDzxWcrqE6Lt.jpg"
                              alt="Price, Jamieson">
                          </a>
                          <a href="https://animes.vision/pessoa/palmieri-raffaele" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Palmieri, Raffaele">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/NQLbjz6YZNcGb4rpmAJFEKczaVHV3hKp0s4EgNSi.jpg"
                              src="https://animes.vision/storage/pessoa/NQLbjz6YZNcGb4rpmAJFEKczaVHV3hKp0s4EgNSi.jpg"
                              alt="Palmieri, Raffaele">
                          </a>
                          <a href="https://animes.vision/pessoa/mahlich-holger" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Mahlich, Holger">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/kDU9IfsQaohyTwobhoOLOZIWNVq08hZrFwNInMAw.gif"
                              src="https://animes.vision/storage/pessoa/kDU9IfsQaohyTwobhoOLOZIWNVq08hZrFwNInMAw.gif"
                              alt="Mahlich, Holger">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/elaine" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/fubsxrpy7InaiHs7OMXpmpZoMOkkvaBHEZYg9apL.jpg"
                            src="https://animes.vision/storage/personagem/fubsxrpy7InaiHs7OMXpmpZoMOkkvaBHEZYg9apL.jpg"
                            alt="Elaine">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/elaine">Elaine</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/koiwai-kotori" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Koiwai, Kotori">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/gRSr8OnjwVYkiQvhwmPDnGsrpoAvREMyjlYXvVfN.jpg"
                              src="https://animes.vision/storage/pessoa/gRSr8OnjwVYkiQvhwmPDnGsrpoAvREMyjlYXvVfN.jpg"
                              alt="Koiwai, Kotori">
                          </a>
                          <a href="https://animes.vision/pessoa/knickerbocker-brianna" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Knickerbocker, Brianna">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/L5t6o18KTyDCETrMHK8OmmZIXH8XxJXs0XQJXcaG.jpg"
                              src="https://animes.vision/storage/pessoa/L5t6o18KTyDCETrMHK8OmmZIXH8XxJXs0XQJXcaG.jpg"
                              alt="Knickerbocker, Brianna">
                          </a>
                          <a href="https://animes.vision/pessoa/folster-julia" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Fölster, Julia">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/d0si5K4khXUhYhMLqVV7DOZ63ngl0eir6p4JFSs0.jpg"
                              src="https://animes.vision/storage/pessoa/d0si5K4khXUhYhMLqVV7DOZ63ngl0eir6p4JFSs0.jpg"
                              alt="Fölster, Julia">
                          </a>
                          <a href="https://animes.vision/pessoa/chirizzi-simona" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Chirizzi, Simona">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ev8gi3Fxw7OQP4ALPKHHTs9MLQcEbSRECNTBOuU1.gif"
                              src="https://animes.vision/storage/pessoa/ev8gi3Fxw7OQP4ALPKHHTs9MLQcEbSRECNTBOuU1.gif"
                              alt="Chirizzi, Simona">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/ellen" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/jHZwrIN1ya4HCENGgMXE4qMzFa1Mb21F0ZuVsqRf.jpg"
                            src="https://animes.vision/storage/personagem/jHZwrIN1ya4HCENGgMXE4qMzFa1Mb21F0ZuVsqRf.jpg"
                            alt="Ellen">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/ellen">Ellen</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/furuki-nozomi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Furuki, Nozomi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Bx9ysMwQoSsPYVuaB6XmsKkXeBceHPliYFaDOB6A.jpg"
                              src="https://animes.vision/storage/pessoa/Bx9ysMwQoSsPYVuaB6XmsKkXeBceHPliYFaDOB6A.jpg"
                              alt="Furuki, Nozomi">
                          </a>
                          <a href="https://animes.vision/pessoa/moreno-susana" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Moreno, Susana">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/GRUTyoyWIpy851HssEipUIAK4k9tg7BrkavzKftR.jpg"
                              src="https://animes.vision/storage/pessoa/GRUTyoyWIpy851HssEipUIAK4k9tg7BrkavzKftR.jpg"
                              alt="Moreno, Susana">
                          </a>
                          <a href="https://animes.vision/pessoa/bienaime-nathalie" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Bienaimé, Nathalie">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/wbXLBdyfRnhCG2f2551rsuOJb0Uvun14AJ1suE04.jpg"
                              src="https://animes.vision/storage/pessoa/wbXLBdyfRnhCG2f2551rsuOJb0Uvun14AJ1suE04.jpg"
                              alt="Bienaimé, Nathalie">
                          </a>
                          <a href="https://animes.vision/pessoa/furuki-nozomi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Furuki, Nozomi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Bx9ysMwQoSsPYVuaB6XmsKkXeBceHPliYFaDOB6A.jpg"
                              src="https://animes.vision/storage/pessoa/Bx9ysMwQoSsPYVuaB6XmsKkXeBceHPliYFaDOB6A.jpg"
                              alt="Furuki, Nozomi">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/friesia" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/80epJz7qaxPj0mjpeGW8dPEhQ9MsJOJoUgkITOCG.jpg"
                            src="https://animes.vision/storage/personagem/80epJz7qaxPj0mjpeGW8dPEhQ9MsJOJoUgkITOCG.jpg"
                            alt="Friesia">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/friesia">Friesia</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/han-megumi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Han, Megumi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/kRC7EfL7SlU9jzrilVq5A0cc2n4AEWTDEsPUMaWQ.jpg"
                              src="https://animes.vision/storage/pessoa/kRC7EfL7SlU9jzrilVq5A0cc2n4AEWTDEsPUMaWQ.jpg"
                              alt="Han, Megumi">
                          </a>
                          <a href="https://animes.vision/pessoa/fahn-melissa" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Fahn, Melissa">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/JnWvYoPF8cnAaDrpf2oLhpOzVUvIMWUVEGdw3Zyc.jpg"
                              src="https://animes.vision/storage/pessoa/JnWvYoPF8cnAaDrpf2oLhpOzVUvIMWUVEGdw3Zyc.jpg"
                              alt="Fahn, Melissa">
                          </a>
                          <a href="https://animes.vision/pessoa/dutron-olivia" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Dutron, Olivia">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/xJKxmIZiBoOsXIoqEiJZJxQPs6q44hOTMEekn6zC.gif"
                              src="https://animes.vision/storage/pessoa/xJKxmIZiBoOsXIoqEiJZJxQPs6q44hOTMEekn6zC.gif"
                              alt="Dutron, Olivia">
                          </a>
                          <a href="https://animes.vision/pessoa/dorfman-sheila" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Dorfman, Sheila">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/WWnKVZzV0puneluo34JJYneUqsQVOnET9mMy00j6.jpg"
                              src="https://animes.vision/storage/pessoa/WWnKVZzV0puneluo34JJYneUqsQVOnET9mMy00j6.jpg"
                              alt="Dorfman, Sheila">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/gilthunder" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/iwShVzzq5O3N3PPPR0YyQiCAdaBeltdjCDvi8IQC.jpg"
                            src="https://animes.vision/storage/personagem/iwShVzzq5O3N3PPPR0YyQiCAdaBeltdjCDvi8IQC.jpg"
                            alt="Gilthunder">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/gilthunder">Gilthunder</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/miyano-mamoru" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Miyano, Mamoru">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/kR2PstOeQcdt9YKgdfdMItlWA9BciAmmXMBUdvWv.jpg"
                              src="https://animes.vision/storage/pessoa/kR2PstOeQcdt9YKgdfdMItlWA9BciAmmXMBUdvWv.jpg"
                              alt="Miyano, Mamoru">
                          </a>
                          <a href="https://animes.vision/pessoa/yamamoto-kazutomi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Yamamoto, Kazutomi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/gU5dekLsj3LgxKVaYNdTG7Mt2kA0rzGdH9h8vLZc.jpg"
                              src="https://animes.vision/storage/pessoa/gU5dekLsj3LgxKVaYNdTG7Mt2kA0rzGdH9h8vLZc.jpg"
                              alt="Yamamoto, Kazutomi">
                          </a>
                          <a href="https://animes.vision/pessoa/souza-marcos" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Souza, Marcos">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/TPNtiYPHBdO3In9k0Ij2LwmpPaLWRJep1crr76JH.jpg"
                              src="https://animes.vision/storage/pessoa/TPNtiYPHBdO3In9k0Ij2LwmpPaLWRJep1crr76JH.jpg"
                              alt="Souza, Marcos">
                          </a>
                          <a href="https://animes.vision/pessoa/daymond-robbie" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Daymond, Robbie">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/uJ0MZhDw9uT5uPv6VqiPYuSz2YXnQoBjeI2qr6Ee.jpg"
                              src="https://animes.vision/storage/pessoa/uJ0MZhDw9uT5uPv6VqiPYuSz2YXnQoBjeI2qr6Ee.jpg"
                              alt="Daymond, Robbie">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/goddess-clan-member" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/ogRVxZ1BjnbgVJFhKp0meC5eSqPkmMKUtapfAUvF.gif"
                            src="https://animes.vision/storage/personagem/ogRVxZ1BjnbgVJFhKp0meC5eSqPkmMKUtapfAUvF.gif"
                            alt="Goddess Clan Member">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/goddess-clan-member">Goddess Clan Member</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/shiraishi-ryouko" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Shiraishi, Ryouko">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/3Qq0ozUuoG87v35sUZsJePx4s3x4gGu29NgEAejs.jpg"
                              src="https://animes.vision/storage/pessoa/3Qq0ozUuoG87v35sUZsJePx4s3x4gGu29NgEAejs.jpg"
                              alt="Shiraishi, Ryouko">
                          </a>
                          <a href="https://animes.vision/pessoa/forest-nayeli" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Forest, Nayéli">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/oYUY4j1bigHFHWwYzpf4UEaG7cLg0S6CvbSCtplO.jpg"
                              src="https://animes.vision/storage/pessoa/oYUY4j1bigHFHWwYzpf4UEaG7cLg0S6CvbSCtplO.jpg"
                              alt="Forest, Nayéli">
                          </a>
                          <a href="https://animes.vision/pessoa/shiraishi-ryouko" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Shiraishi, Ryouko">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/3Qq0ozUuoG87v35sUZsJePx4s3x4gGu29NgEAejs.jpg"
                              src="https://animes.vision/storage/pessoa/3Qq0ozUuoG87v35sUZsJePx4s3x4gGu29NgEAejs.jpg"
                              alt="Shiraishi, Ryouko">
                          </a>
                          <a href="https://animes.vision/pessoa/forest-nayeli" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Forest, Nayéli">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/oYUY4j1bigHFHWwYzpf4UEaG7cLg0S6CvbSCtplO.jpg"
                              src="https://animes.vision/storage/pessoa/oYUY4j1bigHFHWwYzpf4UEaG7cLg0S6CvbSCtplO.jpg"
                              alt="Forest, Nayéli">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/golgius" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/tYsWRTvZsFJmfKVRAavIYK9ywOlrFKa4al27ouNZ.jpg"
                            src="https://animes.vision/storage/personagem/tYsWRTvZsFJmfKVRAavIYK9ywOlrFKa4al27ouNZ.jpg"
                            alt="Golgius">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/golgius">Golgius</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/cho" data-toggle="tooltip" title="" class="pi-avatar"
                            data-original-title="Cho">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/PpJRkUmIqp6HDCvzv476hGnJWrQyC0F0yiVN7wpN.jpg"
                              src="https://animes.vision/storage/pessoa/PpJRkUmIqp6HDCvzv476hGnJWrQyC0F0yiVN7wpN.jpg"
                              alt="Cho">
                          </a>
                          <a href="https://animes.vision/pessoa/briggs-guilherme" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Briggs, Guilherme">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/HQ7KQ2HFMvJYqMJMqUwnu8CWaT6decc9KwgFjLES.jpg"
                              src="https://animes.vision/storage/pessoa/HQ7KQ2HFMvJYqMJMqUwnu8CWaT6decc9KwgFjLES.jpg"
                              alt="Briggs, Guilherme">
                          </a>
                          <a href="https://animes.vision/pessoa/mallow-dave" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Mallow, Dave">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/asmCjNQr29LdYzbAf54bh3v9u9OjeiX2F5f6KlFG.jpg"
                              src="https://animes.vision/storage/pessoa/asmCjNQr29LdYzbAf54bh3v9u9OjeiX2F5f6KlFG.jpg"
                              alt="Mallow, Dave">
                          </a>
                          <a href="https://animes.vision/pessoa/cho" data-toggle="tooltip" title="" class="pi-avatar"
                            data-original-title="Cho">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/PpJRkUmIqp6HDCvzv476hGnJWrQyC0F0yiVN7wpN.jpg"
                              src="https://animes.vision/storage/pessoa/PpJRkUmIqp6HDCvzv476hGnJWrQyC0F0yiVN7wpN.jpg"
                              alt="Cho">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/griamore" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/PeODLmqgIkgiHPwtc95agBl3M2FAMqE6BBl7KvkD.jpg"
                            src="https://animes.vision/storage/personagem/PeODLmqgIkgiHPwtc95agBl3M2FAMqE6BBl7KvkD.jpg"
                            alt="Griamore">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/griamore">Griamore</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/sakurai-takahiro" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Sakurai, Takahiro">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/mNhy2MIkiSOwPyjDcxstwg5aR7vZE3V5DEFOH7vF.jpg"
                              src="https://animes.vision/storage/pessoa/mNhy2MIkiSOwPyjDcxstwg5aR7vZE3V5DEFOH7vF.jpg"
                              alt="Sakurai, Takahiro">
                          </a>
                          <a href="https://animes.vision/pessoa/hara-yuuko" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hara, Yuuko">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/uaEGKpmYK6pIP8qZQLUvw9zuWn77EG3xEUH2vdLP.jpg"
                              src="https://animes.vision/storage/pessoa/uaEGKpmYK6pIP8qZQLUvw9zuWn77EG3xEUH2vdLP.jpg"
                              alt="Hara, Yuuko">
                          </a>
                          <a href="https://animes.vision/pessoa/marot-tony" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Marot, Tony">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/bCZvmqvJQj9ApBZiQlf1a4WaqCbgBJIYxEfaHDtn.jpg"
                              src="https://animes.vision/storage/pessoa/bCZvmqvJQj9ApBZiQlf1a4WaqCbgBJIYxEfaHDtn.jpg"
                              alt="Marot, Tony">
                          </a>
                          <a href="https://animes.vision/pessoa/seitz-patrick" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Seitz, Patrick">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/YgW1ixU3HmgBAgUP0LkH8RzsDCSEx0JhLOlULjSg.jpg"
                              src="https://animes.vision/storage/pessoa/YgW1ixU3HmgBAgUP0LkH8RzsDCSEx0JhLOlULjSg.jpg"
                              alt="Seitz, Patrick">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/guila" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/uG7Km8tKnGMy6dnnhcllj0zydQFXaZb8TIgEWoQ6.jpg"
                            src="https://animes.vision/storage/personagem/uG7Km8tKnGMy6dnnhcllj0zydQFXaZb8TIgEWoQ6.jpg"
                            alt="Guila">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/guila">Guila</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/ise-mariya" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Ise, Mariya">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/TEKuNSrUteLjbwNXpIHwu2h89Tz6QVYVcqckC55C.jpg"
                              src="https://animes.vision/storage/pessoa/TEKuNSrUteLjbwNXpIHwu2h89Tz6QVYVcqckC55C.jpg"
                              alt="Ise, Mariya">
                          </a>
                          <a href="https://animes.vision/pessoa/keranen-carrie" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Keranen, Carrie">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ht1CKDaXw3hKzjAx9XhAfmDOVYptS9Enr7WdgbyI.jpg"
                              src="https://animes.vision/storage/pessoa/ht1CKDaXw3hKzjAx9XhAfmDOVYptS9Enr7WdgbyI.jpg"
                              alt="Keranen, Carrie">
                          </a>
                          <a href="https://animes.vision/pessoa/amorim-priscila" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Amorim, Priscila">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Tunqtdq3IFhncTKbuW1z9sCuld8joTNgyWUTumdM.jpg"
                              src="https://animes.vision/storage/pessoa/Tunqtdq3IFhncTKbuW1z9sCuld8joTNgyWUTumdM.jpg"
                              alt="Amorim, Priscila">
                          </a>
                          <a href="https://animes.vision/pessoa/bienaime-nathalie" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Bienaimé, Nathalie">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/wbXLBdyfRnhCG2f2551rsuOJb0Uvun14AJ1suE04.jpg"
                              src="https://animes.vision/storage/pessoa/wbXLBdyfRnhCG2f2551rsuOJb0Uvun14AJ1suE04.jpg"
                              alt="Bienaimé, Nathalie">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/gustaf" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/aIGoFYUKc83v3lzDMIrVHUjeaJmGPSo8CwWWr5ks.jpg"
                            src="https://animes.vision/storage/personagem/aIGoFYUKc83v3lzDMIrVHUjeaJmGPSo8CwWWr5ks.jpg"
                            alt="Gustaf">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/gustaf">Gustaf</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/furukawa-makoto" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Furukawa, Makoto">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/XAskGO3gQJgBgXHm7MSTqQtJSDul7HLiUNazU9ha.jpg"
                              src="https://animes.vision/storage/pessoa/XAskGO3gQJgBgXHm7MSTqQtJSDul7HLiUNazU9ha.jpg"
                              alt="Furukawa, Makoto">
                          </a>
                          <a href="https://animes.vision/pessoa/hackney-christopher" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hackney, Christopher">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/SMD404ze8YwFIL5a224xEFwvPGH09rhsUyaxHcyc.jpg"
                              src="https://animes.vision/storage/pessoa/SMD404ze8YwFIL5a224xEFwvPGH09rhsUyaxHcyc.jpg"
                              alt="Hackney, Christopher">
                          </a>
                          <a href="https://animes.vision/pessoa/podesta-olivier" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Podesta, Olivier">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/GwOmgQjb9sPVbQseKqqbhd0zj1CBo6nKvoROKfNE.jpg"
                              src="https://animes.vision/storage/pessoa/GwOmgQjb9sPVbQseKqqbhd0zj1CBo6nKvoROKfNE.jpg"
                              alt="Podesta, Olivier">
                          </a>
                          <a href="https://animes.vision/pessoa/cappelli-joao" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Cappelli, João">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/QgpJnhnqm1mgMl5G3iCDfaDtcIIa2hpjynEogv3F.jpg"
                              src="https://animes.vision/storage/pessoa/QgpJnhnqm1mgMl5G3iCDfaDtcIIa2hpjynEogv3F.jpg"
                              alt="Cappelli, João">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/hawk-mama" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/K01h4EwreGPXSAweFboKEjaozTMBzRmDa2uL0p60.jpg"
                            src="https://animes.vision/storage/personagem/K01h4EwreGPXSAweFboKEjaozTMBzRmDa2uL0p60.jpg"
                            alt="Hawk Mama">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/hawk-mama">Hawk Mama</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/nakajima-kayou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakajima, Kayou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              alt="Nakajima, Kayou">
                          </a>
                          <a href="https://animes.vision/pessoa/nakajima-kayou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakajima, Kayou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              alt="Nakajima, Kayou">
                          </a>
                          <a href="https://animes.vision/pessoa/nakajima-kayou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakajima, Kayou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              alt="Nakajima, Kayou">
                          </a>
                          <a href="https://animes.vision/pessoa/nakajima-kayou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakajima, Kayou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              alt="Nakajima, Kayou">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/helbram" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/20h62oBs3GFXrdUIQDwRNdoT1Woa45AwhD7U5zkr.jpg"
                            src="https://animes.vision/storage/personagem/20h62oBs3GFXrdUIQDwRNdoT1Woa45AwhD7U5zkr.jpg"
                            alt="Helbram">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/helbram">Helbram</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kamiya-hiroshi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kamiya, Hiroshi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/dPSMgv794dRLd7OeMhMHEWTximmliDL1srNDjpTd.jpg"
                              src="https://animes.vision/storage/pessoa/dPSMgv794dRLd7OeMhMHEWTximmliDL1srNDjpTd.jpg"
                              alt="Kamiya, Hiroshi">
                          </a>
                          <a href="https://animes.vision/pessoa/okiayu-ryoutarou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Okiayu, Ryoutarou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/O4A1FwcRKct3vI4N4IHEMhce0qa9In0DgVCFudrR.jpg"
                              src="https://animes.vision/storage/pessoa/O4A1FwcRKct3vI4N4IHEMhce0qa9In0DgVCFudrR.jpg"
                              alt="Okiayu, Ryoutarou">
                          </a>
                          <a href="https://animes.vision/pessoa/mccarley-kyle" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="McCarley, Kyle">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/pl3QDKlSWJ2wUEkmbWAXuRHU0hmXftuwFPEv0hMk.jpg"
                              src="https://animes.vision/storage/pessoa/pl3QDKlSWJ2wUEkmbWAXuRHU0hmXftuwFPEv0hMk.jpg"
                              alt="McCarley, Kyle">
                          </a>
                          <a href="https://animes.vision/pessoa/epcar-richard" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Epcar, Richard">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/SgliTC9mE7aS301y1IBAjJu2myyD43Wuzyszw2K7.jpg"
                              src="https://animes.vision/storage/pessoa/SgliTC9mE7aS301y1IBAjJu2myyD43Wuzyszw2K7.jpg"
                              alt="Epcar, Richard">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/hendrickson" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/xM6dXzHKdzLbJxdwg2BE8pYFCPWMKQyciXgj63ia.jpg"
                            src="https://animes.vision/storage/personagem/xM6dXzHKdzLbJxdwg2BE8pYFCPWMKQyciXgj63ia.jpg"
                            alt="Hendrickson">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/hendrickson">Hendrickson</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/uchida-yuuya" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Uchida, Yuuya">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/i8MyzeV4Wafg0FJMM17JWuLLZPJEanxVuuq7RZ6n.jpg"
                              src="https://animes.vision/storage/pessoa/i8MyzeV4Wafg0FJMM17JWuLLZPJEanxVuuq7RZ6n.jpg"
                              alt="Uchida, Yuuya">
                          </a>
                          <a href="https://animes.vision/pessoa/tang-kaiji" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Tang, Kaiji">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/KizL04kATk7vxe8h76CK0bQJrV6Wr15aI2KzMhPV.jpg"
                              src="https://animes.vision/storage/pessoa/KizL04kATk7vxe8h76CK0bQJrV6Wr15aI2KzMhPV.jpg"
                              alt="Tang, Kaiji">
                          </a>
                          <a href="https://animes.vision/pessoa/solis-adrien" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Solis, Adrien">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/l8vXMdMkBOu40BZSx6vh3WZzShYZH7MYu84tLX8Y.jpg"
                              src="https://animes.vision/storage/pessoa/l8vXMdMkBOu40BZSx6vh3WZzShYZH7MYu84tLX8Y.jpg"
                              alt="Solis, Adrien">
                          </a>
                          <a href="https://animes.vision/pessoa/brusa-stefano" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Brusa, Stefano">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/jSFa7D3wkdqWbGXXeHN0PLj8KMqrkObcStcSgMjT.jpg"
                              src="https://animes.vision/storage/pessoa/jSFa7D3wkdqWbGXXeHN0PLj8KMqrkObcStcSgMjT.jpg"
                              alt="Brusa, Stefano">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/howzer" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/VZ4YImr4ImOjB8ucbeY9QZoeEmy2sYvXEOPgSBGH.jpg"
                            src="https://animes.vision/storage/personagem/VZ4YImr4ImOjB8ucbeY9QZoeEmy2sYvXEOPgSBGH.jpg"
                            alt="Howzer">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/howzer">Howzer</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kimura-ryouhei" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kimura, Ryouhei">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/azY5a5lKLssIOEHeUViTR72B1vkDtgCfO3hXLZUT.jpg"
                              src="https://animes.vision/storage/pessoa/azY5a5lKLssIOEHeUViTR72B1vkDtgCfO3hXLZUT.jpg"
                              alt="Kimura, Ryouhei">
                          </a>
                          <a href="https://animes.vision/pessoa/chase-ray" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Chase, Ray">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/mrkhhGdiR6Dd3SJVy34X60dpY8AMMMwi7FvhdfQd.jpg"
                              src="https://animes.vision/storage/pessoa/mrkhhGdiR6Dd3SJVy34X60dpY8AMMMwi7FvhdfQd.jpg"
                              alt="Chase, Ray">
                          </a>
                          <a href="https://animes.vision/pessoa/gravina-mauro" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Gravina, Mauro">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/KV9Tmm6oW0m0rLFbcKMV8HnO5KDfqoxQ2GdPKIxf.jpg"
                              src="https://animes.vision/storage/pessoa/KV9Tmm6oW0m0rLFbcKMV8HnO5KDfqoxQ2GdPKIxf.jpg"
                              alt="Gravina, Mauro">
                          </a>
                          <a href="https://animes.vision/pessoa/may-martin" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="May, Martin">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ZBtCZXPBLCGHAdN8ft982d1TAXQqHIFvHKoofl4p.jpg"
                              src="https://animes.vision/storage/pessoa/ZBtCZXPBLCGHAdN8ft982d1TAXQqHIFvHKoofl4p.jpg"
                              alt="May, Martin">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/jericho" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/sfk6tGunpdZy0a8AjGlGnf6kRRtUtD6MMWKdgo1U.jpg"
                            src="https://animes.vision/storage/personagem/sfk6tGunpdZy0a8AjGlGnf6kRRtUtD6MMWKdgo1U.jpg"
                            alt="Jericho">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/jericho">Jericho</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/inoue-marina" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Inoue, Marina">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/G3vogGPlhUeVxqAuTjklWws5N8eEZsYPPpButpC7.jpg"
                              src="https://animes.vision/storage/pessoa/G3vogGPlhUeVxqAuTjklWws5N8eEZsYPPpButpC7.jpg"
                              alt="Inoue, Marina">
                          </a>
                          <a href="https://animes.vision/pessoa/lindbeck-erica" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Lindbeck, Erica">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/pvheFjtoN4M5zd5agToKFPWtpHKdVktXdZarL2uq.jpg"
                              src="https://animes.vision/storage/pessoa/pvheFjtoN4M5zd5agToKFPWtpHKdVktXdZarL2uq.jpg"
                              alt="Lindbeck, Erica">
                          </a>
                          <a href="https://animes.vision/pessoa/margiotti-beatrice" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Margiotti, Beatrice">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/VUBvVOOiqCpZqtYT5v3jlE8T7abqAxsz2bhMSwOG.jpg"
                              src="https://animes.vision/storage/pessoa/VUBvVOOiqCpZqtYT5v3jlE8T7abqAxsz2bhMSwOG.jpg"
                              alt="Margiotti, Beatrice">
                          </a>
                          <a href="https://animes.vision/pessoa/volpe-isabelle" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Volpe, Isabelle">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/uMtWZjLN0IhMbKfE5CGYiDNj1AR1X4DF6fLhpLPq.jpg"
                              src="https://animes.vision/storage/pessoa/uMtWZjLN0IhMbKfE5CGYiDNj1AR1X4DF6fLhpLPq.jpg"
                              alt="Volpe, Isabelle">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/jude" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/7p4FzQ5yZrzzGpwtqiyhJ4Cak3jrbrXYGEUqJsmP.jpg"
                            src="https://animes.vision/storage/personagem/7p4FzQ5yZrzzGpwtqiyhJ4Cak3jrbrXYGEUqJsmP.jpg"
                            alt="Jude">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/jude">Jude</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/hiyama-nobuyuki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hiyama, Nobuyuki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/VWxC1HwEwENfpKLL77JPLUXHC08rXIQtSTjkChz9.jpg"
                              src="https://animes.vision/storage/pessoa/VWxC1HwEwENfpKLL77JPLUXHC08rXIQtSTjkChz9.jpg"
                              alt="Hiyama, Nobuyuki">
                          </a>
                          <a href="https://animes.vision/pessoa/cassell-jalen-k" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Cassell, Jalen K.">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Y9ikhCYxXc4nlSIJDgWFAMk0lEYx4uv7OPy9WHZn.jpg"
                              src="https://animes.vision/storage/pessoa/Y9ikhCYxXc4nlSIJDgWFAMk0lEYx4uv7OPy9WHZn.jpg"
                              alt="Cassell, Jalen K.">
                          </a>
                          <a href="https://animes.vision/pessoa/miquel-stephane" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Miquel, Stéphane">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/5TfiIv5XZFryc9suUiW9GGXp2dpPykWJ4Dy8Mzym.gif"
                              src="https://animes.vision/storage/pessoa/5TfiIv5XZFryc9suUiW9GGXp2dpPykWJ4Dy8Mzym.gif"
                              alt="Miquel, Stéphane">
                          </a>
                          <a href="https://animes.vision/pessoa/schaffler-erik" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Schäffler, Erik">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/tY3VS60CwRu4QsCQ96qAt7HjksMCpLzybplbotnR.jpg"
                              src="https://animes.vision/storage/pessoa/tY3VS60CwRu4QsCQ96qAt7HjksMCpLzybplbotnR.jpg"
                              alt="Schäffler, Erik">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/liones-bartra" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/5JL96Y9m6kxau04T4YlWIp3rckeEpeENHvpU8Hq4.jpg"
                            src="https://animes.vision/storage/personagem/5JL96Y9m6kxau04T4YlWIp3rckeEpeENHvpU8Hq4.jpg"
                            alt="Liones, Bartra">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/liones-bartra">Liones, Bartra</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/nishi-rintarou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nishi, Rintarou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/rBtdeWDRi2NNM9D9GB9saM9dJbkl2xhHjgU5HWiF.jpg"
                              src="https://animes.vision/storage/pessoa/rBtdeWDRi2NNM9D9GB9saM9dJbkl2xhHjgU5HWiF.jpg"
                              alt="Nishi, Rintarou">
                          </a>
                          <a href="https://animes.vision/pessoa/roullier-philippe" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Roullier, Philippe">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/mdPfACdZHHFlU2QU8y91RRGAPDmoiY527rE4WYKp.jpg"
                              src="https://animes.vision/storage/pessoa/mdPfACdZHHFlU2QU8y91RRGAPDmoiY527rE4WYKp.jpg"
                              alt="Roullier, Philippe">
                          </a>
                          <a href="https://animes.vision/pessoa/persy-luiz-carlos" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Persy, Luiz Carlos">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/f0eGSErZ0PIFPVsWVVEsQ2SA7wupxCsOCcE1NK1n.jpg"
                              src="https://animes.vision/storage/pessoa/f0eGSErZ0PIFPVsWVVEsQ2SA7wupxCsOCcE1NK1n.jpg"
                              alt="Persy, Luiz Carlos">
                          </a>
                          <a href="https://animes.vision/pessoa/stephan-bernd" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Stephan, Bernd">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/tuK0ID5Ei9wE6F0PTznsfmZugAfFEHZ3MBD6we37.jpg"
                              src="https://animes.vision/storage/pessoa/tuK0ID5Ei9wE6F0PTznsfmZugAfFEHZ3MBD6we37.jpg"
                              alt="Stephan, Bernd">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/liones-veronica" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/x8gshsZx9ZZ7eDRWENrW1faktZ3QK6qfY8wQepje.jpg"
                            src="https://animes.vision/storage/personagem/x8gshsZx9ZZ7eDRWENrW1faktZ3QK6qfY8wQepje.jpg"
                            alt="Liones, Veronica">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/liones-veronica">Liones, Veronica</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kanemoto-hisako" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kanemoto, Hisako">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/yJ4soXKoIlEpvTPsnKymavXv106ZCvOMDD2VdqIl.jpg"
                              src="https://animes.vision/storage/pessoa/yJ4soXKoIlEpvTPsnKymavXv106ZCvOMDD2VdqIl.jpg"
                              alt="Kanemoto, Hisako">
                          </a>
                          <a href="https://animes.vision/pessoa/trott-abby" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Trott, Abby">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/rUeNTWaC1acL4pkdw1htorrIxwN30YTaiGBql1wJ.jpg"
                              src="https://animes.vision/storage/pessoa/rUeNTWaC1acL4pkdw1htorrIxwN30YTaiGBql1wJ.jpg"
                              alt="Trott, Abby">
                          </a>
                          <a href="https://animes.vision/pessoa/bittarello-fabiola" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Bittarello, Fabiola">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ztGBr788YMMHiXKKq6GPbB6LQZhaviz6PvOgVMl0.jpg"
                              src="https://animes.vision/storage/pessoa/ztGBr788YMMHiXKKq6GPbB6LQZhaviz6PvOgVMl0.jpg"
                              alt="Bittarello, Fabiola">
                          </a>
                          <a href="https://animes.vision/pessoa/schumann-tanja" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Schumann, Tanja">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/dlb4mySpTLvJIeUnVWKbRKBg5ier6wLg6SmrmqTe.jpg"
                              src="https://animes.vision/storage/pessoa/dlb4mySpTLvJIeUnVWKbRKBg5ier6wLg6SmrmqTe.jpg"
                              alt="Schumann, Tanja">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/liones-margaret" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/2fqiJb0HQ6tlgF6vu7T8fktGNBMPXUa5z9ZXmUbz.jpg"
                            src="https://animes.vision/storage/personagem/2fqiJb0HQ6tlgF6vu7T8fktGNBMPXUa5z9ZXmUbz.jpg"
                            alt="Liones, Margaret">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/liones-margaret">Liones, Margaret</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/mizuki-nana" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Mizuki, Nana">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/fzZPnhtHToqJEeoPOuIGvSFNa7GOiUKOGykrOVUl.jpg"
                              src="https://animes.vision/storage/pessoa/fzZPnhtHToqJEeoPOuIGvSFNa7GOiUKOGykrOVUl.jpg"
                              alt="Mizuki, Nana">
                          </a>
                          <a href="https://animes.vision/pessoa/oliviero-chiara" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Oliviero, Chiara">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ZpAyxm7EEpDx2GYeLVsFhdGpa0HGMBBArbDWJWyP.gif"
                              src="https://animes.vision/storage/pessoa/ZpAyxm7EEpDx2GYeLVsFhdGpa0HGMBBArbDWJWyP.gif"
                              alt="Oliviero, Chiara">
                          </a>
                          <a href="https://animes.vision/pessoa/ferrari-sylvie" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Ferrari, Sylvie">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/O8Cn0pab2dcaDcHk8gcIWGvETd93TwhLImVmHzWW.jpg"
                              src="https://animes.vision/storage/pessoa/O8Cn0pab2dcaDcHk8gcIWGvETd93TwhLImVmHzWW.jpg"
                              alt="Ferrari, Sylvie">
                          </a>
                          <a href="https://animes.vision/pessoa/eschmann-tina" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Eschmann, Tina">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Y0rRAmexWq0O1lGLqtr2E9zFFOz9wUlIp7LQChpM.jpg"
                              src="https://animes.vision/storage/pessoa/Y0rRAmexWq0O1lGLqtr2E9zFFOz9wUlIp7LQChpM.jpg"
                              alt="Eschmann, Tina">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/liz" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/Inr1eqjIjKswOUfmL0mePNJJNQ2ym3ENv2CreK1q.jpg"
                            src="https://animes.vision/storage/personagem/Inr1eqjIjKswOUfmL0mePNJJNQ2ym3ENv2CreK1q.jpg"
                            alt="Liz">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/liz">Liz</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/amamiya-sora" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Amamiya, Sora">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              alt="Amamiya, Sora">
                          </a>
                          <a href="https://animes.vision/pessoa/leal-rodriguez-guadalupe" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Leal Rodríguez, Guadalupe">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/dknJWqp87RFWMFc3LAIJzCo1uQjHzC1z1bqWQaTK.jpg"
                              src="https://animes.vision/storage/pessoa/dknJWqp87RFWMFc3LAIJzCo1uQjHzC1z1bqWQaTK.jpg"
                              alt="Leal Rodríguez, Guadalupe">
                          </a>
                          <a href="https://animes.vision/pessoa/amamiya-sora" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Amamiya, Sora">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              alt="Amamiya, Sora">
                          </a>
                          <a href="https://animes.vision/pessoa/leal-rodriguez-guadalupe" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Leal Rodríguez, Guadalupe">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/dknJWqp87RFWMFc3LAIJzCo1uQjHzC1z1bqWQaTK.jpg"
                              src="https://animes.vision/storage/pessoa/dknJWqp87RFWMFc3LAIJzCo1uQjHzC1z1bqWQaTK.jpg"
                              alt="Leal Rodríguez, Guadalupe">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/luigi" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/4nk0MqccQIs8NTmvepUy0GVOoYMb4q1BMITyoQ0H.jpg"
                            src="https://animes.vision/storage/personagem/4nk0MqccQIs8NTmvepUy0GVOoYMb4q1BMITyoQ0H.jpg"
                            alt="Luigi">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/luigi">Luigi</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/katou-emiri" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Katou, Emiri">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qM5Ia7w8BZydpqKxyHtekIaXZUrPkWqby2IxES0w.jpg"
                              src="https://animes.vision/storage/pessoa/qM5Ia7w8BZydpqKxyHtekIaXZUrPkWqby2IxES0w.jpg"
                              alt="Katou, Emiri">
                          </a>
                          <a href="https://animes.vision/pessoa/sands-tara" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Sands, Tara">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/KmKOnXGJv0EBFQ7A9Ux0aqKaSt0imPrv71FGlZeK.jpg"
                              src="https://animes.vision/storage/pessoa/KmKOnXGJv0EBFQ7A9Ux0aqKaSt0imPrv71FGlZeK.jpg"
                              alt="Sands, Tara">
                          </a>
                          <a href="https://animes.vision/pessoa/salerno-arthur" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Salerno, Arthur">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/16dsZ05iEuRsg1u5aJyBwEyVCQratnG0pbrF261v.jpg"
                              src="https://animes.vision/storage/pessoa/16dsZ05iEuRsg1u5aJyBwEyVCQratnG0pbrF261v.jpg"
                              alt="Salerno, Arthur">
                          </a>
                          <a href="https://animes.vision/pessoa/katou-emiri" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Katou, Emiri">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qM5Ia7w8BZydpqKxyHtekIaXZUrPkWqby2IxES0w.jpg"
                              src="https://animes.vision/storage/pessoa/qM5Ia7w8BZydpqKxyHtekIaXZUrPkWqby2IxES0w.jpg"
                              alt="Katou, Emiri">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/marmas" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/DqG25HztxX6nr7YCUTbiXb1XZTs9ZOtINojDgB3e.jpg"
                            src="https://animes.vision/storage/personagem/DqG25HztxX6nr7YCUTbiXb1XZTs9ZOtINojDgB3e.jpg"
                            alt="Marmas">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/marmas">Marmas</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/matsuda-kenichirou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Matsuda, Kenichirou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/lQmpbqsXhKk14h8HnEDBmoOTk5jky6AnzWplSO60.jpg"
                              src="https://animes.vision/storage/pessoa/lQmpbqsXhKk14h8HnEDBmoOTk5jky6AnzWplSO60.jpg"
                              alt="Matsuda, Kenichirou">
                          </a>
                          <a href="https://animes.vision/pessoa/de-lisi-daniele" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="De Lisi, Daniele">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/JDkhfxLdvVJ9tQQzy5b0vIKoONpLpE7VD9tTkrWq.jpg"
                              src="https://animes.vision/storage/pessoa/JDkhfxLdvVJ9tQQzy5b0vIKoONpLpE7VD9tTkrWq.jpg"
                              alt="De Lisi, Daniele">
                          </a>
                          <a href="https://animes.vision/pessoa/rieke-nils" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Rieke, Nils">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/1df1F5lO170BIbGRd8Xa1CMBMwGj6wapO03sahnN.gif"
                              src="https://animes.vision/storage/pessoa/1df1F5lO170BIbGRd8Xa1CMBMwGj6wapO03sahnN.gif"
                              alt="Rieke, Nils">
                          </a>
                          <a href="https://animes.vision/pessoa/de-almeida-claudio-galvan" data-toggle="tooltip"
                            title="" class="pi-avatar" data-original-title="de Almeida, Cláudio Galvan">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/xWFFnZqkci9kI50IjhY95PDT4gtN0luzGCFtqzFB.jpg"
                              src="https://animes.vision/storage/pessoa/xWFFnZqkci9kI50IjhY95PDT4gtN0luzGCFtqzFB.jpg"
                              alt="de Almeida, Cláudio Galvan">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/mead" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/ykyiyplVSrl9olM8AFKQKlWkHP0GMv1FrGqjklHh.jpg"
                            src="https://animes.vision/storage/personagem/ykyiyplVSrl9olM8AFKQKlWkHP0GMv1FrGqjklHh.jpg"
                            alt="Mead">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/mead">Mead</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kobayashi-yumiko" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kobayashi, Yumiko">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/fZnYweJV14rFDTs5oG0hkMFOFRTYpKEDb3925rus.jpg"
                              src="https://animes.vision/storage/pessoa/fZnYweJV14rFDTs5oG0hkMFOFRTYpKEDb3925rus.jpg"
                              alt="Kobayashi, Yumiko">
                          </a>
                          <a href="https://animes.vision/pessoa/sampler-philece" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Sampler, Philece">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/NTE5TVXbtflmB3fYJSI27DuM42WyhrPycDLhVCME.jpg"
                              src="https://animes.vision/storage/pessoa/NTE5TVXbtflmB3fYJSI27DuM42WyhrPycDLhVCME.jpg"
                              alt="Sampler, Philece">
                          </a>
                          <a href="https://animes.vision/pessoa/de-bouard-vincent" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="De Boüard, Vincent">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/TUFqSCWJ2MSCky0X3ldeHMYsZqyff1ttRHtcxeYz.jpg"
                              src="https://animes.vision/storage/pessoa/TUFqSCWJ2MSCky0X3ldeHMYsZqyff1ttRHtcxeYz.jpg"
                              alt="De Boüard, Vincent">
                          </a>
                          <a href="https://animes.vision/pessoa/campaiola-federico" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Campaiola, Federico">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/5J33jVFt0QAyDkVl8K5reTMqPxtP9dqjbO9faXXE.jpg"
                              src="https://animes.vision/storage/pessoa/5J33jVFt0QAyDkVl8K5reTMqPxtP9dqjbO9faXXE.jpg"
                              alt="Campaiola, Federico">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/merlin" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/B6HKnUAKsPA9aBKuwgBIcBBFehhRnXQwWcLvOGqx.jpg"
                            src="https://animes.vision/storage/personagem/B6HKnUAKsPA9aBKuwgBIcBBFehhRnXQwWcLvOGqx.jpg"
                            alt="Merlin">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/merlin">Merlin</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/sakamoto-maaya" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Sakamoto, Maaya">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/MqKLhh6ukNhcyU1dAiSzLLbzQ4Uo63kteLVlCXcF.jpg"
                              src="https://animes.vision/storage/pessoa/MqKLhh6ukNhcyU1dAiSzLLbzQ4Uo63kteLVlCXcF.jpg"
                              alt="Sakamoto, Maaya">
                          </a>
                          <a href="https://animes.vision/pessoa/ficher-miriam" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Ficher, Miriam">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ESGxSprSPwZLUZQ4e7cvEKs66E6MOmHa5pj6feFS.jpg"
                              src="https://animes.vision/storage/pessoa/ESGxSprSPwZLUZQ4e7cvEKs66E6MOmHa5pj6feFS.jpg"
                              alt="Ficher, Miriam">
                          </a>
                          <a href="https://animes.vision/pessoa/landa-lauren" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Landa, Lauren">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Yb2JOl3kaTGr8XVoVpsFD32KaoAGbEtg7eleCpCR.jpg"
                              src="https://animes.vision/storage/pessoa/Yb2JOl3kaTGr8XVoVpsFD32KaoAGbEtg7eleCpCR.jpg"
                              alt="Landa, Lauren">
                          </a>
                          <a href="https://animes.vision/pessoa/padoan-eva" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Padoan, Eva">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/uO7pQFaqqDXb1c4Mq6shW733KTytVmYQf7Q6O95T.jpg"
                              src="https://animes.vision/storage/pessoa/uO7pQFaqqDXb1c4Mq6shW733KTytVmYQf7Q6O95T.jpg"
                              alt="Padoan, Eva">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/narrator" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/hS1AyZdLGH78EJ7vRBqf7bnQyMdtMK6CcvMzdfG2.gif"
                            src="https://animes.vision/storage/personagem/hS1AyZdLGH78EJ7vRBqf7bnQyMdtMK6CcvMzdfG2.gif"
                            alt="Narrator">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/narrator">Narrator</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/nishi-rintarou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nishi, Rintarou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/rBtdeWDRi2NNM9D9GB9saM9dJbkl2xhHjgU5HWiF.jpg"
                              src="https://animes.vision/storage/pessoa/rBtdeWDRi2NNM9D9GB9saM9dJbkl2xhHjgU5HWiF.jpg"
                              alt="Nishi, Rintarou">
                          </a>
                          <a href="https://animes.vision/pessoa/cason-chris" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Cason, Chris">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/e3BMKum7BVVb8K6DyYsACMF9kibDkBKW1icI2SIV.jpg"
                              src="https://animes.vision/storage/pessoa/e3BMKum7BVVb8K6DyYsACMF9kibDkBKW1icI2SIV.jpg"
                              alt="Cason, Chris">
                          </a>
                          <a href="https://animes.vision/pessoa/frass-wolf" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Frass, Wolf">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/YqBVy0XLgincaQAuxoPivkYRZ8s6dDlzA09AioBZ.jpg"
                              src="https://animes.vision/storage/pessoa/YqBVy0XLgincaQAuxoPivkYRZ8s6dDlzA09AioBZ.jpg"
                              alt="Frass, Wolf">
                          </a>
                          <a href="https://animes.vision/pessoa/maia-philippe" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Maia, Philippe">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/nPN2z7pRgRLduWuDtpeskMZjs8g4o2TxAZ0lhtJd.jpg"
                              src="https://animes.vision/storage/pessoa/nPN2z7pRgRLduWuDtpeskMZjs8g4o2TxAZ0lhtJd.jpg"
                              alt="Maia, Philippe">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/pendragon-arthur" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/bGu0o0IuTgklQhRoSqfZhFHAcNQJDX1IfmVgRfCP.jpg"
                            src="https://animes.vision/storage/personagem/bGu0o0IuTgklQhRoSqfZhFHAcNQJDX1IfmVgRfCP.jpg"
                            alt="Pendragon, Arthur">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/pendragon-arthur">Pendragon, Arthur</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kokuryu-sachi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kokuryu, Sachi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/BA2yqbeZJPGUt8oUwX5B15Ip2e4LFH951693Pcdc.jpg"
                              src="https://animes.vision/storage/pessoa/BA2yqbeZJPGUt8oUwX5B15Ip2e4LFH951693Pcdc.jpg"
                              alt="Kokuryu, Sachi">
                          </a>
                          <a href="https://animes.vision/pessoa/aguilar-zach" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Aguilar, Zach">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/7hPnmxA0v9BCL1jOhbLWE8JVkhMkaT682HoOorto.jpg"
                              src="https://animes.vision/storage/pessoa/7hPnmxA0v9BCL1jOhbLWE8JVkhMkaT682HoOorto.jpg"
                              alt="Aguilar, Zach">
                          </a>
                          <a href="https://animes.vision/pessoa/podesta-olivier" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Podesta, Olivier">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/GwOmgQjb9sPVbQseKqqbhd0zj1CBo6nKvoROKfNE.jpg"
                              src="https://animes.vision/storage/pessoa/GwOmgQjb9sPVbQseKqqbhd0zj1CBo6nKvoROKfNE.jpg"
                              alt="Podesta, Olivier">
                          </a>
                          <a href="https://animes.vision/pessoa/stein-flemming" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Stein, Flemming">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/nKLXjN4vxnXoyjpbGoG01EW3rfCYQaMemIPZRIhk.jpg"
                              src="https://animes.vision/storage/pessoa/nKLXjN4vxnXoyjpbGoG01EW3rfCYQaMemIPZRIhk.jpg"
                              alt="Stein, Flemming">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/ruin" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/xpQb9TUaiPYPQOPyjsquHnhzAiwiXkPKMEnFKAPA.jpg"
                            src="https://animes.vision/storage/personagem/xpQb9TUaiPYPQOPyjsquHnhzAiwiXkPKMEnFKAPA.jpg"
                            alt="Ruin">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/ruin">Ruin</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/ono-atsushi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Ono, Atsushi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Lxuzzt1V0wu8ttDHSUOrki8twNxLwrLeYK9x1wXZ.jpg"
                              src="https://animes.vision/storage/pessoa/Lxuzzt1V0wu8ttDHSUOrki8twNxLwrLeYK9x1wXZ.jpg"
                              alt="Ono, Atsushi">
                          </a>
                          <a href="https://animes.vision/pessoa/diraison-marc" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Diraison, Marc">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/xduFCKG3VvPHQvXBevIDkx2GPIlIOjrBz4FfyrNr.jpg"
                              src="https://animes.vision/storage/pessoa/xduFCKG3VvPHQvXBevIDkx2GPIlIOjrBz4FfyrNr.jpg"
                              alt="Diraison, Marc">
                          </a>
                          <a href="https://animes.vision/pessoa/marot-tony" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Marot, Tony">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/bCZvmqvJQj9ApBZiQlf1a4WaqCbgBJIYxEfaHDtn.jpg"
                              src="https://animes.vision/storage/pessoa/bCZvmqvJQj9ApBZiQlf1a4WaqCbgBJIYxEfaHDtn.jpg"
                              alt="Marot, Tony">
                          </a>
                          <a href="https://animes.vision/pessoa/schnetzer-ricardo" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Schnetzer, Ricardo">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/0BSYBECebNi44hAcuMhNJz6JhliO3KPq1cK7Eoum.jpg"
                              src="https://animes.vision/storage/pessoa/0BSYBECebNi44hAcuMhNJz6JhliO3KPq1cK7Eoum.jpg"
                              alt="Schnetzer, Ricardo">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/sennett" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/lPf3W6xXfJDMMhsV4LmWe7VeEjo2ms0erFDalXbb.jpg"
                            src="https://animes.vision/storage/personagem/lPf3W6xXfJDMMhsV4LmWe7VeEjo2ms0erFDalXbb.jpg"
                            alt="Sennett">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/sennett">Sennett</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kobori-yurie" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kobori, Yurie">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ltIMSac6NHcFMLlKi2r5Nbp0tkARlwyJYjqQfBRr.jpg"
                              src="https://animes.vision/storage/pessoa/ltIMSac6NHcFMLlKi2r5Nbp0tkARlwyJYjqQfBRr.jpg"
                              alt="Kobori, Yurie">
                          </a>
                          <a href="https://animes.vision/pessoa/menezes-ana-lucia" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Menezes, Ana Lúcia">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/PkDkEJHwuPjTskWGXyftn2nJ4utFJBdfcePxZarU.jpg"
                              src="https://animes.vision/storage/pessoa/PkDkEJHwuPjTskWGXyftn2nJ4utFJBdfcePxZarU.jpg"
                              alt="Menezes, Ana Lúcia">
                          </a>
                          <a href="https://animes.vision/pessoa/friede-franciska" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Friede, Franciska">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/6LqLAyTpnpW7BPJvsHZ2oF1ezLzV7D4IWBtPaz9Q.jpg"
                              src="https://animes.vision/storage/pessoa/6LqLAyTpnpW7BPJvsHZ2oF1ezLzV7D4IWBtPaz9Q.jpg"
                              alt="Friede, Franciska">
                          </a>
                          <a href="https://animes.vision/pessoa/marlot-frederique" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Marlot, Frédérique">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/KjyJkjLhk2SE1CsHWKitupmAjNNwizCzx0SoBbKu.jpg"
                              src="https://animes.vision/storage/pessoa/KjyJkjLhk2SE1CsHWKitupmAjNNwizCzx0SoBbKu.jpg"
                              alt="Marlot, Frédérique">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/simon" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/o5WqSPOjm5ztIZH9XEZSAljU0HlkRpT3EO8n3FgC.jpg"
                            src="https://animes.vision/storage/personagem/o5WqSPOjm5ztIZH9XEZSAljU0HlkRpT3EO8n3FgC.jpg"
                            alt="Simon">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/simon">Simon</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/campaiola-alessandro" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Campaiola, Alessandro">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/45k6T7oGrHfHBrU8r9zQpGBP4h5o1XNY0eiWocej.jpg"
                              src="https://animes.vision/storage/pessoa/45k6T7oGrHfHBrU8r9zQpGBP4h5o1XNY0eiWocej.jpg"
                              alt="Campaiola, Alessandro">
                          </a>
                          <a href="https://animes.vision/pessoa/kanemoto-ryousuke" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kanemoto, Ryousuke">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/9qdaLFxvrJsFMpPE9ti5cX7atF1Ws3Ydbzto0331.jpg"
                              src="https://animes.vision/storage/pessoa/9qdaLFxvrJsFMpPE9ti5cX7atF1Ws3Ydbzto0331.jpg"
                              alt="Kanemoto, Ryousuke">
                          </a>
                          <a href="https://animes.vision/pessoa/marot-tony" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Marot, Tony">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/bCZvmqvJQj9ApBZiQlf1a4WaqCbgBJIYxEfaHDtn.jpg"
                              src="https://animes.vision/storage/pessoa/bCZvmqvJQj9ApBZiQlf1a4WaqCbgBJIYxEfaHDtn.jpg"
                              alt="Marot, Tony">
                          </a>
                          <a href="https://animes.vision/pessoa/dodge-lucien" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Dodge, Lucien">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ZVtazcE5JKuDsj7ekhhyNaJrJk3iakpuZJ8T8FIZ.jpg"
                              src="https://animes.vision/storage/pessoa/ZVtazcE5JKuDsj7ekhhyNaJrJk3iakpuZJ8T8FIZ.jpg"
                              alt="Dodge, Lucien">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/slader" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/Sl3x6YFv713yZXztcdiMdZTALLTbZUU27EqZRcDL.jpg"
                            src="https://animes.vision/storage/personagem/Sl3x6YFv713yZXztcdiMdZTALLTbZUU27EqZRcDL.jpg"
                            alt="Slader">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/slader">Slader</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/miki-shinichiro" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Miki, Shinichiro">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/HAerJzjwNFA7x7o6pEtrpIprUEOvUHZFndCPYjSi.jpg"
                              src="https://animes.vision/storage/pessoa/HAerJzjwNFA7x7o6pEtrpIprUEOvUHZFndCPYjSi.jpg"
                              alt="Miki, Shinichiro">
                          </a>
                          <a href="https://animes.vision/pessoa/erholtz-doug" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Erholtz, Doug">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/xf5uTdQzb3UxQw14y3Nlce8pU8QQFEPKsdHPlB5I.jpg"
                              src="https://animes.vision/storage/pessoa/xf5uTdQzb3UxQw14y3Nlce8pU8QQFEPKsdHPlB5I.jpg"
                              alt="Erholtz, Doug">
                          </a>
                          <a href="https://animes.vision/pessoa/roullier-philippe" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Roullier, Philippe">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/mdPfACdZHHFlU2QU8y91RRGAPDmoiY527rE4WYKp.jpg"
                              src="https://animes.vision/storage/pessoa/mdPfACdZHHFlU2QU8y91RRGAPDmoiY527rE4WYKp.jpg"
                              alt="Roullier, Philippe">
                          </a>
                          <a href="https://animes.vision/pessoa/certoma-roberto" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Certoma, Roberto">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/pHPqhTDYRbWvrmgJzACAlr55XsDRJgnIMUBmSFIN.jpg"
                              src="https://animes.vision/storage/pessoa/pHPqhTDYRbWvrmgJzACAlr55XsDRJgnIMUBmSFIN.jpg"
                              alt="Certoma, Roberto">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/taizoo" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/RLWn4xpHcaZziOlqbNVvF8D4I4fP2gHXi3j48C1S.jpg"
                            src="https://animes.vision/storage/personagem/RLWn4xpHcaZziOlqbNVvF8D4I4fP2gHXi3j48C1S.jpg"
                            alt="Taizoo">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/taizoo">Taizoo</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/matsuda-kenichirou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Matsuda, Kenichirou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/lQmpbqsXhKk14h8HnEDBmoOTk5jky6AnzWplSO60.jpg"
                              src="https://animes.vision/storage/pessoa/lQmpbqsXhKk14h8HnEDBmoOTk5jky6AnzWplSO60.jpg"
                              alt="Matsuda, Kenichirou">
                          </a>
                          <a href="https://animes.vision/pessoa/lucas-jorge" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Lucas, Jorge">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Der2a8uqq5iNfhlfGExFurJKUuoiGlRcKDSr1g8u.jpg"
                              src="https://animes.vision/storage/pessoa/Der2a8uqq5iNfhlfGExFurJKUuoiGlRcKDSr1g8u.jpg"
                              alt="Lucas, Jorge">
                          </a>
                          <a href="https://animes.vision/pessoa/matsuda-kenichirou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Matsuda, Kenichirou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/lQmpbqsXhKk14h8HnEDBmoOTk5jky6AnzWplSO60.jpg"
                              src="https://animes.vision/storage/pessoa/lQmpbqsXhKk14h8HnEDBmoOTk5jky6AnzWplSO60.jpg"
                              alt="Matsuda, Kenichirou">
                          </a>
                          <a href="https://animes.vision/pessoa/lucas-jorge" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Lucas, Jorge">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Der2a8uqq5iNfhlfGExFurJKUuoiGlRcKDSr1g8u.jpg"
                              src="https://animes.vision/storage/pessoa/Der2a8uqq5iNfhlfGExFurJKUuoiGlRcKDSr1g8u.jpg"
                              alt="Lucas, Jorge">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/twigo" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/SvOpaNlCX4faBAh02O4Ihyg8b5rOfYexapnUBytj.jpg"
                            src="https://animes.vision/storage/personagem/SvOpaNlCX4faBAh02O4Ihyg8b5rOfYexapnUBytj.jpg"
                            alt="Twigo">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/twigo">Twigo</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/miyake-kenta" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Miyake, Kenta">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/TZyUZ33lK9NEHod1cvl0gyL3JM0iWpxkHAihAfZs.jpg"
                              src="https://animes.vision/storage/pessoa/TZyUZ33lK9NEHod1cvl0gyL3JM0iWpxkHAihAfZs.jpg"
                              alt="Miyake, Kenta">
                          </a>
                          <a href="https://animes.vision/pessoa/mcconnohie-michael" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="McConnohie, Michael">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Jh0BtOEaCJcXmMZHY1g1bLPQmXdd80ZhHOsdJ6gK.jpg"
                              src="https://animes.vision/storage/pessoa/Jh0BtOEaCJcXmMZHY1g1bLPQmXdd80ZhHOsdJ6gK.jpg"
                              alt="McConnohie, Michael">
                          </a>
                          <a href="https://animes.vision/pessoa/junior-francisco" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Júnior, Francisco">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/mhPDcoTJGr2k9nSw2bnzlCxC8z41zeneMc4AmIhI.jpg"
                              src="https://animes.vision/storage/pessoa/mhPDcoTJGr2k9nSw2bnzlCxC8z41zeneMc4AmIhI.jpg"
                              alt="Júnior, Francisco">
                          </a>
                          <a href="https://animes.vision/pessoa/wigand-walter" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Wigand, Walter">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/nFPIOiV3nYsa4u8FGyRDabYZL9MSh4pAXsMdlWp2.gif"
                              src="https://animes.vision/storage/pessoa/nFPIOiV3nYsa4u8FGyRDabYZL9MSh4pAXsMdlWp2.gif"
                              alt="Wigand, Walter">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/vivian" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/al2iFlQGabNNESSz5fLwMlp6MTyocCn3pN3gddt5.jpg"
                            src="https://animes.vision/storage/personagem/al2iFlQGabNNESSz5fLwMlp6MTyocCn3pN3gddt5.jpg"
                            alt="Vivian">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/vivian">Vivian</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kotobuki-minako" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kotobuki, Minako">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/QAVZIsE1fyITlQhfL9FKBnbuwbLpU9XAJaTc3L4b.jpg"
                              src="https://animes.vision/storage/pessoa/QAVZIsE1fyITlQhfL9FKBnbuwbLpU9XAJaTc3L4b.jpg"
                              alt="Kotobuki, Minako">
                          </a>
                          <a href="https://animes.vision/pessoa/bottcher-jennifer" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Böttcher, Jennifer">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/NCdCuBeoGxP9dbBbBF3fHQdE9jLewW0CUE56lD0l.jpg"
                              src="https://animes.vision/storage/pessoa/NCdCuBeoGxP9dbBbBF3fHQdE9jLewW0CUE56lD0l.jpg"
                              alt="Böttcher, Jennifer">
                          </a>
                          <a href="https://animes.vision/pessoa/herington-marieve" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Herington, Marieve">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/0ExVreewa4AYgBMnZPd69wS9olq3SN9XCv8aulir.jpg"
                              src="https://animes.vision/storage/pessoa/0ExVreewa4AYgBMnZPd69wS9olq3SN9XCv8aulir.jpg"
                              alt="Herington, Marieve">
                          </a>
                          <a href="https://animes.vision/pessoa/marlot-frederique" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Marlot, Frédérique">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/KjyJkjLhk2SE1CsHWKitupmAjNNwizCzx0SoBbKu.jpg"
                              src="https://animes.vision/storage/pessoa/KjyJkjLhk2SE1CsHWKitupmAjNNwizCzx0SoBbKu.jpg"
                              alt="Marlot, Frédérique">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/weinheidt" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/1qALd7yv0NMNFsNytVltTzUGYP53DctoK85UQgeu.jpg"
                            src="https://animes.vision/storage/personagem/1qALd7yv0NMNFsNytVltTzUGYP53DctoK85UQgeu.jpg"
                            alt="Weinheidt">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/weinheidt">Weinheidt</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/nakanishi-hideki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakanishi, Hideki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/FZ0b2LG1mt9VjXARfAIntXVgKWmIc4eI4RnNuObI.jpg"
                              src="https://animes.vision/storage/pessoa/FZ0b2LG1mt9VjXARfAIntXVgKWmIc4eI4RnNuObI.jpg"
                              alt="Nakanishi, Hideki">
                          </a>
                          <a href="https://animes.vision/pessoa/hebert-kyle" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hebert, Kyle">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/VG9AbaMsJ6ifeL6WqytbSViiI5xNDnYzJNGWlwNo.jpg"
                              src="https://animes.vision/storage/pessoa/VG9AbaMsJ6ifeL6WqytbSViiI5xNDnYzJNGWlwNo.jpg"
                              alt="Hebert, Kyle">
                          </a>
                          <a href="https://animes.vision/pessoa/rey-manolo" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Rey, Manolo">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Bxn9zkIu0kb97grSdKQfnbpCDER4AJpjrPMB3Pmx.jpg"
                              src="https://animes.vision/storage/pessoa/Bxn9zkIu0kb97grSdKQfnbpCDER4AJpjrPMB3Pmx.jpg"
                              alt="Rey, Manolo">
                          </a>
                          <a href="https://animes.vision/pessoa/jordan-frank" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Jordan, Frank">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Dsw0YuxSyzrQuvdE09DBld2NCxKvc8x2dYLSwTX4.jpg"
                              src="https://animes.vision/storage/pessoa/Dsw0YuxSyzrQuvdE09DBld2NCxKvc8x2dYLSwTX4.jpg"
                              alt="Jordan, Frank">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/zaratras" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/uulZR6a6pj10aqpXpLDEEclq2r2P131mwxmHWzza.jpg"
                            src="https://animes.vision/storage/personagem/uulZR6a6pj10aqpXpLDEEclq2r2P131mwxmHWzza.jpg"
                            alt="Zaratras">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/zaratras">Zaratras</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/koyama-rikiya" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Koyama, Rikiya">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/LbgV9h5vbrimMAUoIfEsEfTs9MWtQ42PRR43UldC.jpg"
                              src="https://animes.vision/storage/pessoa/LbgV9h5vbrimMAUoIfEsEfTs9MWtQ42PRR43UldC.jpg"
                              alt="Koyama, Rikiya">
                          </a>
                          <a href="https://animes.vision/pessoa/koyama-rikiya" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Koyama, Rikiya">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/LbgV9h5vbrimMAUoIfEsEfTs9MWtQ42PRR43UldC.jpg"
                              src="https://animes.vision/storage/pessoa/LbgV9h5vbrimMAUoIfEsEfTs9MWtQ42PRR43UldC.jpg"
                              alt="Koyama, Rikiya">
                          </a>
                          <a href="https://animes.vision/pessoa/koyama-rikiya" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Koyama, Rikiya">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/LbgV9h5vbrimMAUoIfEsEfTs9MWtQ42PRR43UldC.jpg"
                              src="https://animes.vision/storage/pessoa/LbgV9h5vbrimMAUoIfEsEfTs9MWtQ42PRR43UldC.jpg"
                              alt="Koyama, Rikiya">
                          </a>
                          <a href="https://animes.vision/pessoa/lang-lex" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Lang, Lex">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/tLCjVAFDniW8TZORkOVDs2DMcgEXAEv40LLj7okX.jpg"
                              src="https://animes.vision/storage/pessoa/tLCjVAFDniW8TZORkOVDs2DMcgEXAEv40LLj7okX.jpg"
                              alt="Lang, Lex">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/zeal" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/BanEwvjL2xRPmhyu19EH9ZSwAQLOWjwSwxGsjEWB.jpg"
                            src="https://animes.vision/storage/personagem/BanEwvjL2xRPmhyu19EH9ZSwAQLOWjwSwxGsjEWB.jpg"
                            alt="Zeal">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/zeal">Zeal</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/nakajima-yui" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakajima, Yui">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Bue4uERZTwMb08nbva598QVbgJM6kQqDxWwXsNtN.jpg"
                              src="https://animes.vision/storage/pessoa/Bue4uERZTwMb08nbva598QVbgJM6kQqDxWwXsNtN.jpg"
                              alt="Nakajima, Yui">
                          </a>
                          <a href="https://animes.vision/pessoa/bienaime-nathalie" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Bienaimé, Nathalie">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/wbXLBdyfRnhCG2f2551rsuOJb0Uvun14AJ1suE04.jpg"
                              src="https://animes.vision/storage/pessoa/wbXLBdyfRnhCG2f2551rsuOJb0Uvun14AJ1suE04.jpg"
                              alt="Bienaimé, Nathalie">
                          </a>
                          <a href="https://animes.vision/pessoa/bottcher-lino" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Böttcher, Lino">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/VY6N4LLAz9svIhZqdwFoKM4whBIeiucSx50IvMkw.gif"
                              src="https://animes.vision/storage/pessoa/VY6N4LLAz9svIhZqdwFoKM4whBIeiucSx50IvMkw.gif"
                              alt="Böttcher, Lino">
                          </a>
                          <a href="https://animes.vision/pessoa/nakajima-yui" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakajima, Yui">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Bue4uERZTwMb08nbva598QVbgJM6kQqDxWwXsNtN.jpg"
                              src="https://animes.vision/storage/pessoa/Bue4uERZTwMb08nbva598QVbgJM6kQqDxWwXsNtN.jpg"
                              alt="Nakajima, Yui">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/ban" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/UsNMC3QByhWe8F6ssVIk7qLubIVF8fdYhPubXjnt.jpg"
                            src="https://animes.vision/storage/personagem/UsNMC3QByhWe8F6ssVIk7qLubIVF8fdYhPubXjnt.jpg"
                            alt="Ban">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/ban">Ban</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/suzuki-tatsuhisa" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Suzuki, Tatsuhisa">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/nbb0LPQdBERS7ju97Q4IpfkXCOu9GLrk8TUynFoc.jpg"
                              src="https://animes.vision/storage/pessoa/nbb0LPQdBERS7ju97Q4IpfkXCOu9GLrk8TUynFoc.jpg"
                              alt="Suzuki, Tatsuhisa">
                          </a>
                          <a href="https://animes.vision/pessoa/lisita-mckeidy" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Lisita, Mckeidy">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/e6wnjmdudJkFCZ93Xjl4mrhsVoSAeGmtEiEPawS2.jpg"
                              src="https://animes.vision/storage/pessoa/e6wnjmdudJkFCZ93Xjl4mrhsVoSAeGmtEiEPawS2.jpg"
                              alt="Lisita, Mckeidy">
                          </a>
                          <a href="https://animes.vision/pessoa/diskin-benjamin" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Diskin, Benjamin">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/6W5T3vNyWIbv7aBXRQR0HIJC4ycHMarP5yYn965h.jpg"
                              src="https://animes.vision/storage/pessoa/6W5T3vNyWIbv7aBXRQR0HIJC4ycHMarP5yYn965h.jpg"
                              alt="Diskin, Benjamin">
                          </a>
                          <a href="https://animes.vision/pessoa/meli-manuel" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Meli, Manuel">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/z4RkvfEG8A1w7TGwdOtKSS83gZfisenzUAOB6JVx.jpg"
                              src="https://animes.vision/storage/pessoa/z4RkvfEG8A1w7TGwdOtKSS83gZfisenzUAOB6JVx.jpg"
                              alt="Meli, Manuel">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/diane" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/M1kyO9ZP8aEeBMEOfhrO8bz6ln1LkPpylKP2QKxk.jpg"
                            src="https://animes.vision/storage/personagem/M1kyO9ZP8aEeBMEOfhrO8bz6ln1LkPpylKP2QKxk.jpg"
                            alt="Diane">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/diane">Diane</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/yuuki-aoi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Yuuki, Aoi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/WyG7AppFCt48OPQhy2iJFbSjpPlf4uBYUSatjcG9.jpg"
                              src="https://animes.vision/storage/pessoa/WyG7AppFCt48OPQhy2iJFbSjpPlf4uBYUSatjcG9.jpg"
                              alt="Yuuki, Aoi">
                          </a>
                          <a href="https://animes.vision/pessoa/saddy-flavia" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Saddy, Flávia">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/eJnhpRJUSg1UDVw4X4tbj7OWOXXV3MJm3YJ2vRRv.jpg"
                              src="https://animes.vision/storage/pessoa/eJnhpRJUSg1UDVw4X4tbj7OWOXXV3MJm3YJ2vRRv.jpg"
                              alt="Saddy, Flávia">
                          </a>
                          <a href="https://animes.vision/pessoa/mendez-erica" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Mendez, Erica">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ieLKjofZxY3j1gJPQ1j07clgwSGWpjTPGLqJ6xMi.jpg"
                              src="https://animes.vision/storage/pessoa/ieLKjofZxY3j1gJPQ1j07clgwSGWpjTPGLqJ6xMi.jpg"
                              alt="Mendez, Erica">
                          </a>
                          <a href="https://animes.vision/pessoa/marricchi-lucrezia" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Marricchi, Lucrezia">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/RgwZipDncb5txFme6UuzEp6KBwgdwIAKQdXp7tLp.jpg"
                              src="https://animes.vision/storage/pessoa/RgwZipDncb5txFme6UuzEp6KBwgdwIAKQdXp7tLp.jpg"
                              alt="Marricchi, Lucrezia">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/gowther" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/TJN5W0CRdOVWWzIFk9v6AJk2b9rrImFGNxcShyFF.jpg"
                            src="https://animes.vision/storage/personagem/TJN5W0CRdOVWWzIFk9v6AJk2b9rrImFGNxcShyFF.jpg"
                            alt="Gowther">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/gowther">Gowther</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/takagi-yuuhei" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Takagi, Yuuhei">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/AJDJmC6lytgMCr4Bs6PM9rDxUlwEedzKJStueugP.jpg"
                              src="https://animes.vision/storage/pessoa/AJDJmC6lytgMCr4Bs6PM9rDxUlwEedzKJStueugP.jpg"
                              alt="Takagi, Yuuhei">
                          </a>
                          <a href="https://animes.vision/pessoa/emmanuel-charles" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Emmanuel, Charles">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/aI7AyPNp3YSaIhqe6Bt5azs6ZlUBs3iLgt8soXJD.jpg"
                              src="https://animes.vision/storage/pessoa/aI7AyPNp3YSaIhqe6Bt5azs6ZlUBs3iLgt8soXJD.jpg"
                              alt="Emmanuel, Charles">
                          </a>
                          <a href="https://animes.vision/pessoa/kimerer-erik" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kimerer, Erik">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/S0HiSY6vx2cwXiusPffXD5QdP0pFjvnBMIc85Wpk.jpg"
                              src="https://animes.vision/storage/pessoa/S0HiSY6vx2cwXiusPffXD5QdP0pFjvnBMIc85Wpk.jpg"
                              alt="Kimerer, Erik">
                          </a>
                          <a href="https://animes.vision/pessoa/pages-jean-francois" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Pagès, Jean-François">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/n2biNBGs1QM9zbbsHzZ9giGpoWmJQwuc0vp2YcKC.jpg"
                              src="https://animes.vision/storage/pessoa/n2biNBGs1QM9zbbsHzZ9giGpoWmJQwuc0vp2YcKC.jpg"
                              alt="Pagès, Jean-François">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/hawk" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/4zF6PsdrmZR5fOfAUtqt6gKpsSCSbnp0F2GEYdpr.jpg"
                            src="https://animes.vision/storage/personagem/4zF6PsdrmZR5fOfAUtqt6gKpsSCSbnp0F2GEYdpr.jpg"
                            alt="Hawk">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/hawk">Hawk</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kuno-misaki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kuno, Misaki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/YkAvKodtgwyWupOCgQNFPDchSxsX1qGTTpWzk30K.jpg"
                              src="https://animes.vision/storage/pessoa/YkAvKodtgwyWupOCgQNFPDchSxsX1qGTTpWzk30K.jpg"
                              alt="Kuno, Misaki">
                          </a>
                          <a href="https://animes.vision/pessoa/rodrigues-pamella" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Rodrigues, Pamella">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/bXc1e89FYAxuFWhkZttxdd2mMyxPPgkvUOm7lmHx.jpg"
                              src="https://animes.vision/storage/pessoa/bXc1e89FYAxuFWhkZttxdd2mMyxPPgkvUOm7lmHx.jpg"
                              alt="Rodrigues, Pamella">
                          </a>
                          <a href="https://animes.vision/pessoa/valenzuela-cristina" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Valenzuela, Cristina">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/HGcspIhfKve6XQuzQjPhVQo1855RDiugc4IrJN0X.jpg"
                              src="https://animes.vision/storage/pessoa/HGcspIhfKve6XQuzQjPhVQo1855RDiugc4IrJN0X.jpg"
                              alt="Valenzuela, Cristina">
                          </a>
                          <a href="https://animes.vision/pessoa/bertolotti-monica" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Bertolotti, Monica">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Ge4qAG963PdcdJyM2GsUb9hEYnY8OhOU2rgziayv.jpg"
                              src="https://animes.vision/storage/pessoa/Ge4qAG963PdcdJyM2GsUb9hEYnY8OhOU2rgziayv.jpg"
                              alt="Bertolotti, Monica">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/king" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/bFtG5EMmzYaFZRbgBFpf3Sp1HpEFJqni8LFtcVXk.jpg"
                            src="https://animes.vision/storage/personagem/bFtG5EMmzYaFZRbgBFpf3Sp1HpEFJqni8LFtcVXk.jpg"
                            alt="King">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/king">King</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/fukuyama-jun" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Fukuyama, Jun">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/MFWB4z4UeKxY6g0DhpaFUxqaAVrFb4Fw512DGou3.jpg"
                              src="https://animes.vision/storage/pessoa/MFWB4z4UeKxY6g0DhpaFUxqaAVrFb4Fw512DGou3.jpg"
                              alt="Fukuyama, Jun">
                          </a>
                          <a href="https://animes.vision/pessoa/garcia-marcelo" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Garcia, Marcelo">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/eIve6bFplH3cu2IkyCGLhm5ikEPHnvf7ZNfztKiV.jpg"
                              src="https://animes.vision/storage/pessoa/eIve6bFplH3cu2IkyCGLhm5ikEPHnvf7ZNfztKiV.jpg"
                              alt="Garcia, Marcelo">
                          </a>
                          <a href="https://animes.vision/pessoa/mittelman-max" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Mittelman, Max">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/tewYf0iIRHWTdgZiehQQSoW5qSQwdcrRRbPMYHMN.jpg"
                              src="https://animes.vision/storage/pessoa/tewYf0iIRHWTdgZiehQQSoW5qSQwdcrRRbPMYHMN.jpg"
                              alt="Mittelman, Max">
                          </a>
                          <a href="https://animes.vision/pessoa/suarez-luis-leonardo" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Suárez, Luis Leonardo">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/AaAMAfytGTlvznQxmHRSA1xUaLwOPbkNLPLMIMPY.jpg"
                              src="https://animes.vision/storage/pessoa/AaAMAfytGTlvznQxmHRSA1xUaLwOPbkNLPLMIMPY.jpg"
                              alt="Suárez, Luis Leonardo">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/liones-elizabeth" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/8DGXLvljj7j01tegWdMWwi23wG3OqbGFoYbJsWRn.jpg"
                            src="https://animes.vision/storage/personagem/8DGXLvljj7j01tegWdMWwi23wG3OqbGFoYbJsWRn.jpg"
                            alt="Liones, Elizabeth">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/liones-elizabeth">Liones, Elizabeth</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/amamiya-sora" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Amamiya, Sora">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              alt="Amamiya, Sora">
                          </a>
                          <a href="https://animes.vision/pessoa/menezes-erika" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Menezes, Érika">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/KubpvtWNvTsk5H9ibpPfMfnMd6hYan1J0khruu9a.jpg"
                              src="https://animes.vision/storage/pessoa/KubpvtWNvTsk5H9ibpPfMfnMd6hYan1J0khruu9a.jpg"
                              alt="Menezes, Érika">
                          </a>
                          <a href="https://animes.vision/pessoa/harlacher-erika" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Harlacher, Erika">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/O8mQNp7r0MxewckRAbnH0KFmOoXmO7c9unaYsfcI.jpg"
                              src="https://animes.vision/storage/pessoa/O8mQNp7r0MxewckRAbnH0KFmOoXmO7c9unaYsfcI.jpg"
                              alt="Harlacher, Erika">
                          </a>
                          <a href="https://animes.vision/pessoa/volpe-monica" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Volpe, Monica">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/x9qbQJdbjihbrF1eIcK899uFBsTReiN6v6tBgZSF.jpg"
                              src="https://animes.vision/storage/pessoa/x9qbQJdbjihbrF1eIcK899uFBsTReiN6v6tBgZSF.jpg"
                              alt="Volpe, Monica">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/meliodas" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/8aK72rqRi4qY3hHESXEAphXihnD8CDrt6SRlhAnS.jpg"
                            src="https://animes.vision/storage/personagem/8aK72rqRi4qY3hHESXEAphXihnD8CDrt6SRlhAnS.jpg"
                            alt="Meliodas">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/meliodas">Meliodas</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kaji-yuki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kaji, Yuki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/1AdDJYfj9dAhlBTluUmxwMyyPImWecCtgq17Mrhx.jpg"
                              src="https://animes.vision/storage/pessoa/1AdDJYfj9dAhlBTluUmxwMyyPImWecCtgq17Mrhx.jpg"
                              alt="Kaji, Yuki">
                          </a>
                          <a href="https://animes.vision/pessoa/vila-verde-fabricio" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Vila Verde, Fabrício">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/X87Tr14dyIbYPriz1Ma392299hK82bnRMCkWQXig.jpg"
                              src="https://animes.vision/storage/pessoa/X87Tr14dyIbYPriz1Ma392299hK82bnRMCkWQXig.jpg"
                              alt="Vila Verde, Fabrício">
                          </a>
                          <a href="https://animes.vision/pessoa/papenbrook-bryce" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Papenbrook, Bryce">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/8YcGvsEnblLlHdcIR5ZsV7O1OsIvGLzMxKjxrqMJ.jpg"
                              src="https://animes.vision/storage/pessoa/8YcGvsEnblLlHdcIR5ZsV7O1OsIvGLzMxKjxrqMJ.jpg"
                              alt="Papenbrook, Bryce">
                          </a>
                          <a href="https://animes.vision/pessoa/puccio-alessio" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Puccio, Alessio">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/jyABVHN1SlHgJa9Pbs3a2wR4NWSBhmoAQpgs5KQi.jpg"
                              src="https://animes.vision/storage/pessoa/jyABVHN1SlHgJa9Pbs3a2wR4NWSBhmoAQpgs5KQi.jpg"
                              alt="Puccio, Alessio">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/alioni" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/pwPeJwTMuk9y6h6drEntqDzanZcx2KVcQ3FknFpZ.jpg"
                            src="https://animes.vision/storage/personagem/pwPeJwTMuk9y6h6drEntqDzanZcx2KVcQ3FknFpZ.jpg"
                            alt="Alioni">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/alioni">Alioni</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/nojima-hirofumi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nojima, Hirofumi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/eCCEfOdDrt6p2Ffx1iNRKl3h02wi0suUUo0DQ6ds.jpg"
                              src="https://animes.vision/storage/pessoa/eCCEfOdDrt6p2Ffx1iNRKl3h02wi0suUUo0DQ6ds.jpg"
                              alt="Nojima, Hirofumi">
                          </a>
                          <a href="https://animes.vision/pessoa/solis-adrien" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Solis, Adrien">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/l8vXMdMkBOu40BZSx6vh3WZzShYZH7MYu84tLX8Y.jpg"
                              src="https://animes.vision/storage/pessoa/l8vXMdMkBOu40BZSx6vh3WZzShYZH7MYu84tLX8Y.jpg"
                              alt="Solis, Adrien">
                          </a>
                          <a href="https://animes.vision/pessoa/drummond-felipe" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Drummond, Felipe">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/714gt42zHwsMdiTyUHQsfWaqJ7gVmBbQeCGz7TQx.jpg"
                              src="https://animes.vision/storage/pessoa/714gt42zHwsMdiTyUHQsfWaqJ7gVmBbQeCGz7TQx.jpg"
                              alt="Drummond, Felipe">
                          </a>
                          <a href="https://animes.vision/pessoa/nojima-hirofumi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nojima, Hirofumi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/eCCEfOdDrt6p2Ffx1iNRKl3h02wi0suUUo0DQ6ds.jpg"
                              src="https://animes.vision/storage/pessoa/eCCEfOdDrt6p2Ffx1iNRKl3h02wi0suUUo0DQ6ds.jpg"
                              alt="Nojima, Hirofumi">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/barzad-cain" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/cY2SDt06o9HLV7W5YEzVqOV1gLgVXaBJzC7KVKkc.jpg"
                            src="https://animes.vision/storage/personagem/cY2SDt06o9HLV7W5YEzVqOV1gLgVXaBJzC7KVKkc.jpg"
                            alt="Barzad, Cain">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/barzad-cain">Barzad, Cain</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/inagaki-takashi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Inagaki, Takashi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/WcykKKcTsVcByBxRwyXHFHMfbGwJh6cNPdKChVcf.jpg"
                              src="https://animes.vision/storage/pessoa/WcykKKcTsVcByBxRwyXHFHMfbGwJh6cNPdKChVcf.jpg"
                              alt="Inagaki, Takashi">
                          </a>
                          <a href="https://animes.vision/pessoa/beacock-brian" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Beacock, Brian">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ReXOVLVdCTuxgumcN6hphKpdO9yMxu2twrmSDnMn.jpg"
                              src="https://animes.vision/storage/pessoa/ReXOVLVdCTuxgumcN6hphKpdO9yMxu2twrmSDnMn.jpg"
                              alt="Beacock, Brian">
                          </a>
                          <a href="https://animes.vision/pessoa/dal-fabbro-luca" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Dal Fabbro, Luca">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/FyMoxrXvMoEhrdLE4QThgYvVNfU2IfI3gam3oPiw.jpg"
                              src="https://animes.vision/storage/pessoa/FyMoxrXvMoEhrdLE4QThgYvVNfU2IfI3gam3oPiw.jpg"
                              alt="Dal Fabbro, Luca">
                          </a>
                          <a href="https://animes.vision/pessoa/gesteira-carlos" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Gesteira, Carlos">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/L0k95ag2hme4LAKCHtnKzaG4zGvJi8b09rQAtxpJ.jpg"
                              src="https://animes.vision/storage/pessoa/L0k95ag2hme4LAKCHtnKzaG4zGvJi8b09rQAtxpJ.jpg"
                              alt="Gesteira, Carlos">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/dale" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/q892JjzvicLfRnnKBmEtMejWmTGyY4tYEIPXM8Ue.jpg"
                            src="https://animes.vision/storage/personagem/q892JjzvicLfRnnKBmEtMejWmTGyY4tYEIPXM8Ue.jpg"
                            alt="Dale">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/dale">Dale</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/miyamoto-mitsuru" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Miyamoto, Mitsuru">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/6dfYvkaj1e0WFND4yqhaxNlSwWP1do5V4H4X7nHP.jpg"
                              src="https://animes.vision/storage/pessoa/6dfYvkaj1e0WFND4yqhaxNlSwWP1do5V4H4X7nHP.jpg"
                              alt="Miyamoto, Mitsuru">
                          </a>
                          <a href="https://animes.vision/pessoa/hebert-kyle" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hebert, Kyle">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/VG9AbaMsJ6ifeL6WqytbSViiI5xNDnYzJNGWlwNo.jpg"
                              src="https://animes.vision/storage/pessoa/VG9AbaMsJ6ifeL6WqytbSViiI5xNDnYzJNGWlwNo.jpg"
                              alt="Hebert, Kyle">
                          </a>
                          <a href="https://animes.vision/pessoa/barros-gutemberg" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Barros, Gutemberg">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/tOv9FnYjsqkDSzjm0q29BiRWOhycPH5vJZIJfa8t.jpg"
                              src="https://animes.vision/storage/pessoa/tOv9FnYjsqkDSzjm0q29BiRWOhycPH5vJZIJfa8t.jpg"
                              alt="Barros, Gutemberg">
                          </a>
                          <a href="https://animes.vision/pessoa/miyamoto-mitsuru" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Miyamoto, Mitsuru">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/6dfYvkaj1e0WFND4yqhaxNlSwWP1do5V4H4X7nHP.jpg"
                              src="https://animes.vision/storage/pessoa/6dfYvkaj1e0WFND4yqhaxNlSwWP1do5V4H4X7nHP.jpg"
                              alt="Miyamoto, Mitsuru">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/dana" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/9dgQWJoMLbnhOOhdp5xL4aWnTHo9rbasiU5LvkFd.jpg"
                            src="https://animes.vision/storage/personagem/9dgQWJoMLbnhOOhdp5xL4aWnTHo9rbasiU5LvkFd.jpg"
                            alt="Dana">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/dana">Dana</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/shimura-tomoyuki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Shimura, Tomoyuki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/T3QMbzojzRtvvdCrkzU26wPO5sgVyJEoglL4w58M.jpg"
                              src="https://animes.vision/storage/pessoa/T3QMbzojzRtvvdCrkzU26wPO5sgVyJEoglL4w58M.jpg"
                              alt="Shimura, Tomoyuki">
                          </a>
                          <a href="https://animes.vision/pessoa/espinoza-duda" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Espinoza, Duda">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/m6FyrO5lwqG5NoBHbxIBEWvVBJHegmmEQJTSHzVr.jpg"
                              src="https://animes.vision/storage/pessoa/m6FyrO5lwqG5NoBHbxIBEWvVBJHegmmEQJTSHzVr.jpg"
                              alt="Espinoza, Duda">
                          </a>
                          <a href="https://animes.vision/pessoa/hebert-kyle" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hebert, Kyle">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/VG9AbaMsJ6ifeL6WqytbSViiI5xNDnYzJNGWlwNo.jpg"
                              src="https://animes.vision/storage/pessoa/VG9AbaMsJ6ifeL6WqytbSViiI5xNDnYzJNGWlwNo.jpg"
                              alt="Hebert, Kyle">
                          </a>
                          <a href="https://animes.vision/pessoa/moscoso-txema" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Moscoso, Txema">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Fn9rPdGCVktapkWZtZcFKppIHpExh8XnlnMOtTSX.jpg"
                              src="https://animes.vision/storage/pessoa/Fn9rPdGCVktapkWZtZcFKppIHpExh8XnlnMOtTSX.jpg"
                              alt="Moscoso, Txema">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/dreyfus" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/WldVNNXQyHf2fmBd1KMRYw3nQD4O7FkavlqzAnJV.jpg"
                            src="https://animes.vision/storage/personagem/WldVNNXQyHf2fmBd1KMRYw3nQD4O7FkavlqzAnJV.jpg"
                            alt="Dreyfus">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/dreyfus">Dreyfus</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/konishi-katsuyuki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Konishi, Katsuyuki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/5d4OfPlfuz1JtzpJ2UF34dAeXvQM74aJroLlHeDQ.jpg"
                              src="https://animes.vision/storage/pessoa/5d4OfPlfuz1JtzpJ2UF34dAeXvQM74aJroLlHeDQ.jpg"
                              alt="Konishi, Katsuyuki">
                          </a>
                          <a href="https://animes.vision/pessoa/price-jamieson" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Price, Jamieson">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/dwYZQmg5p4B8VSfnyH89DsMJWnuVfDzxWcrqE6Lt.jpg"
                              src="https://animes.vision/storage/pessoa/dwYZQmg5p4B8VSfnyH89DsMJWnuVfDzxWcrqE6Lt.jpg"
                              alt="Price, Jamieson">
                          </a>
                          <a href="https://animes.vision/pessoa/palmieri-raffaele" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Palmieri, Raffaele">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/NQLbjz6YZNcGb4rpmAJFEKczaVHV3hKp0s4EgNSi.jpg"
                              src="https://animes.vision/storage/pessoa/NQLbjz6YZNcGb4rpmAJFEKczaVHV3hKp0s4EgNSi.jpg"
                              alt="Palmieri, Raffaele">
                          </a>
                          <a href="https://animes.vision/pessoa/mahlich-holger" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Mahlich, Holger">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/kDU9IfsQaohyTwobhoOLOZIWNVq08hZrFwNInMAw.gif"
                              src="https://animes.vision/storage/pessoa/kDU9IfsQaohyTwobhoOLOZIWNVq08hZrFwNInMAw.gif"
                              alt="Mahlich, Holger">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/elaine" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/fubsxrpy7InaiHs7OMXpmpZoMOkkvaBHEZYg9apL.jpg"
                            src="https://animes.vision/storage/personagem/fubsxrpy7InaiHs7OMXpmpZoMOkkvaBHEZYg9apL.jpg"
                            alt="Elaine">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/elaine">Elaine</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/koiwai-kotori" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Koiwai, Kotori">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/gRSr8OnjwVYkiQvhwmPDnGsrpoAvREMyjlYXvVfN.jpg"
                              src="https://animes.vision/storage/pessoa/gRSr8OnjwVYkiQvhwmPDnGsrpoAvREMyjlYXvVfN.jpg"
                              alt="Koiwai, Kotori">
                          </a>
                          <a href="https://animes.vision/pessoa/knickerbocker-brianna" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Knickerbocker, Brianna">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/L5t6o18KTyDCETrMHK8OmmZIXH8XxJXs0XQJXcaG.jpg"
                              src="https://animes.vision/storage/pessoa/L5t6o18KTyDCETrMHK8OmmZIXH8XxJXs0XQJXcaG.jpg"
                              alt="Knickerbocker, Brianna">
                          </a>
                          <a href="https://animes.vision/pessoa/folster-julia" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Fölster, Julia">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/d0si5K4khXUhYhMLqVV7DOZ63ngl0eir6p4JFSs0.jpg"
                              src="https://animes.vision/storage/pessoa/d0si5K4khXUhYhMLqVV7DOZ63ngl0eir6p4JFSs0.jpg"
                              alt="Fölster, Julia">
                          </a>
                          <a href="https://animes.vision/pessoa/chirizzi-simona" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Chirizzi, Simona">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ev8gi3Fxw7OQP4ALPKHHTs9MLQcEbSRECNTBOuU1.gif"
                              src="https://animes.vision/storage/pessoa/ev8gi3Fxw7OQP4ALPKHHTs9MLQcEbSRECNTBOuU1.gif"
                              alt="Chirizzi, Simona">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/ellen" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/jHZwrIN1ya4HCENGgMXE4qMzFa1Mb21F0ZuVsqRf.jpg"
                            src="https://animes.vision/storage/personagem/jHZwrIN1ya4HCENGgMXE4qMzFa1Mb21F0ZuVsqRf.jpg"
                            alt="Ellen">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/ellen">Ellen</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/furuki-nozomi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Furuki, Nozomi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Bx9ysMwQoSsPYVuaB6XmsKkXeBceHPliYFaDOB6A.jpg"
                              src="https://animes.vision/storage/pessoa/Bx9ysMwQoSsPYVuaB6XmsKkXeBceHPliYFaDOB6A.jpg"
                              alt="Furuki, Nozomi">
                          </a>
                          <a href="https://animes.vision/pessoa/moreno-susana" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Moreno, Susana">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/GRUTyoyWIpy851HssEipUIAK4k9tg7BrkavzKftR.jpg"
                              src="https://animes.vision/storage/pessoa/GRUTyoyWIpy851HssEipUIAK4k9tg7BrkavzKftR.jpg"
                              alt="Moreno, Susana">
                          </a>
                          <a href="https://animes.vision/pessoa/bienaime-nathalie" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Bienaimé, Nathalie">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/wbXLBdyfRnhCG2f2551rsuOJb0Uvun14AJ1suE04.jpg"
                              src="https://animes.vision/storage/pessoa/wbXLBdyfRnhCG2f2551rsuOJb0Uvun14AJ1suE04.jpg"
                              alt="Bienaimé, Nathalie">
                          </a>
                          <a href="https://animes.vision/pessoa/furuki-nozomi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Furuki, Nozomi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Bx9ysMwQoSsPYVuaB6XmsKkXeBceHPliYFaDOB6A.jpg"
                              src="https://animes.vision/storage/pessoa/Bx9ysMwQoSsPYVuaB6XmsKkXeBceHPliYFaDOB6A.jpg"
                              alt="Furuki, Nozomi">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/friesia" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/80epJz7qaxPj0mjpeGW8dPEhQ9MsJOJoUgkITOCG.jpg"
                            src="https://animes.vision/storage/personagem/80epJz7qaxPj0mjpeGW8dPEhQ9MsJOJoUgkITOCG.jpg"
                            alt="Friesia">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/friesia">Friesia</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/han-megumi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Han, Megumi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/kRC7EfL7SlU9jzrilVq5A0cc2n4AEWTDEsPUMaWQ.jpg"
                              src="https://animes.vision/storage/pessoa/kRC7EfL7SlU9jzrilVq5A0cc2n4AEWTDEsPUMaWQ.jpg"
                              alt="Han, Megumi">
                          </a>
                          <a href="https://animes.vision/pessoa/fahn-melissa" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Fahn, Melissa">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/JnWvYoPF8cnAaDrpf2oLhpOzVUvIMWUVEGdw3Zyc.jpg"
                              src="https://animes.vision/storage/pessoa/JnWvYoPF8cnAaDrpf2oLhpOzVUvIMWUVEGdw3Zyc.jpg"
                              alt="Fahn, Melissa">
                          </a>
                          <a href="https://animes.vision/pessoa/dutron-olivia" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Dutron, Olivia">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/xJKxmIZiBoOsXIoqEiJZJxQPs6q44hOTMEekn6zC.gif"
                              src="https://animes.vision/storage/pessoa/xJKxmIZiBoOsXIoqEiJZJxQPs6q44hOTMEekn6zC.gif"
                              alt="Dutron, Olivia">
                          </a>
                          <a href="https://animes.vision/pessoa/dorfman-sheila" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Dorfman, Sheila">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/WWnKVZzV0puneluo34JJYneUqsQVOnET9mMy00j6.jpg"
                              src="https://animes.vision/storage/pessoa/WWnKVZzV0puneluo34JJYneUqsQVOnET9mMy00j6.jpg"
                              alt="Dorfman, Sheila">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/gilthunder" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/iwShVzzq5O3N3PPPR0YyQiCAdaBeltdjCDvi8IQC.jpg"
                            src="https://animes.vision/storage/personagem/iwShVzzq5O3N3PPPR0YyQiCAdaBeltdjCDvi8IQC.jpg"
                            alt="Gilthunder">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/gilthunder">Gilthunder</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/miyano-mamoru" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Miyano, Mamoru">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/kR2PstOeQcdt9YKgdfdMItlWA9BciAmmXMBUdvWv.jpg"
                              src="https://animes.vision/storage/pessoa/kR2PstOeQcdt9YKgdfdMItlWA9BciAmmXMBUdvWv.jpg"
                              alt="Miyano, Mamoru">
                          </a>
                          <a href="https://animes.vision/pessoa/yamamoto-kazutomi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Yamamoto, Kazutomi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/gU5dekLsj3LgxKVaYNdTG7Mt2kA0rzGdH9h8vLZc.jpg"
                              src="https://animes.vision/storage/pessoa/gU5dekLsj3LgxKVaYNdTG7Mt2kA0rzGdH9h8vLZc.jpg"
                              alt="Yamamoto, Kazutomi">
                          </a>
                          <a href="https://animes.vision/pessoa/souza-marcos" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Souza, Marcos">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/TPNtiYPHBdO3In9k0Ij2LwmpPaLWRJep1crr76JH.jpg"
                              src="https://animes.vision/storage/pessoa/TPNtiYPHBdO3In9k0Ij2LwmpPaLWRJep1crr76JH.jpg"
                              alt="Souza, Marcos">
                          </a>
                          <a href="https://animes.vision/pessoa/daymond-robbie" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Daymond, Robbie">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/uJ0MZhDw9uT5uPv6VqiPYuSz2YXnQoBjeI2qr6Ee.jpg"
                              src="https://animes.vision/storage/pessoa/uJ0MZhDw9uT5uPv6VqiPYuSz2YXnQoBjeI2qr6Ee.jpg"
                              alt="Daymond, Robbie">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/goddess-clan-member" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/ogRVxZ1BjnbgVJFhKp0meC5eSqPkmMKUtapfAUvF.gif"
                            src="https://animes.vision/storage/personagem/ogRVxZ1BjnbgVJFhKp0meC5eSqPkmMKUtapfAUvF.gif"
                            alt="Goddess Clan Member">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/goddess-clan-member">Goddess Clan Member</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/shiraishi-ryouko" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Shiraishi, Ryouko">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/3Qq0ozUuoG87v35sUZsJePx4s3x4gGu29NgEAejs.jpg"
                              src="https://animes.vision/storage/pessoa/3Qq0ozUuoG87v35sUZsJePx4s3x4gGu29NgEAejs.jpg"
                              alt="Shiraishi, Ryouko">
                          </a>
                          <a href="https://animes.vision/pessoa/forest-nayeli" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Forest, Nayéli">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/oYUY4j1bigHFHWwYzpf4UEaG7cLg0S6CvbSCtplO.jpg"
                              src="https://animes.vision/storage/pessoa/oYUY4j1bigHFHWwYzpf4UEaG7cLg0S6CvbSCtplO.jpg"
                              alt="Forest, Nayéli">
                          </a>
                          <a href="https://animes.vision/pessoa/shiraishi-ryouko" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Shiraishi, Ryouko">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/3Qq0ozUuoG87v35sUZsJePx4s3x4gGu29NgEAejs.jpg"
                              src="https://animes.vision/storage/pessoa/3Qq0ozUuoG87v35sUZsJePx4s3x4gGu29NgEAejs.jpg"
                              alt="Shiraishi, Ryouko">
                          </a>
                          <a href="https://animes.vision/pessoa/forest-nayeli" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Forest, Nayéli">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/oYUY4j1bigHFHWwYzpf4UEaG7cLg0S6CvbSCtplO.jpg"
                              src="https://animes.vision/storage/pessoa/oYUY4j1bigHFHWwYzpf4UEaG7cLg0S6CvbSCtplO.jpg"
                              alt="Forest, Nayéli">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/golgius" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/tYsWRTvZsFJmfKVRAavIYK9ywOlrFKa4al27ouNZ.jpg"
                            src="https://animes.vision/storage/personagem/tYsWRTvZsFJmfKVRAavIYK9ywOlrFKa4al27ouNZ.jpg"
                            alt="Golgius">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/golgius">Golgius</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/cho" data-toggle="tooltip" title="" class="pi-avatar"
                            data-original-title="Cho">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/PpJRkUmIqp6HDCvzv476hGnJWrQyC0F0yiVN7wpN.jpg"
                              src="https://animes.vision/storage/pessoa/PpJRkUmIqp6HDCvzv476hGnJWrQyC0F0yiVN7wpN.jpg"
                              alt="Cho">
                          </a>
                          <a href="https://animes.vision/pessoa/briggs-guilherme" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Briggs, Guilherme">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/HQ7KQ2HFMvJYqMJMqUwnu8CWaT6decc9KwgFjLES.jpg"
                              src="https://animes.vision/storage/pessoa/HQ7KQ2HFMvJYqMJMqUwnu8CWaT6decc9KwgFjLES.jpg"
                              alt="Briggs, Guilherme">
                          </a>
                          <a href="https://animes.vision/pessoa/mallow-dave" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Mallow, Dave">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/asmCjNQr29LdYzbAf54bh3v9u9OjeiX2F5f6KlFG.jpg"
                              src="https://animes.vision/storage/pessoa/asmCjNQr29LdYzbAf54bh3v9u9OjeiX2F5f6KlFG.jpg"
                              alt="Mallow, Dave">
                          </a>
                          <a href="https://animes.vision/pessoa/cho" data-toggle="tooltip" title="" class="pi-avatar"
                            data-original-title="Cho">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/PpJRkUmIqp6HDCvzv476hGnJWrQyC0F0yiVN7wpN.jpg"
                              src="https://animes.vision/storage/pessoa/PpJRkUmIqp6HDCvzv476hGnJWrQyC0F0yiVN7wpN.jpg"
                              alt="Cho">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/griamore" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/PeODLmqgIkgiHPwtc95agBl3M2FAMqE6BBl7KvkD.jpg"
                            src="https://animes.vision/storage/personagem/PeODLmqgIkgiHPwtc95agBl3M2FAMqE6BBl7KvkD.jpg"
                            alt="Griamore">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/griamore">Griamore</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/sakurai-takahiro" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Sakurai, Takahiro">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/mNhy2MIkiSOwPyjDcxstwg5aR7vZE3V5DEFOH7vF.jpg"
                              src="https://animes.vision/storage/pessoa/mNhy2MIkiSOwPyjDcxstwg5aR7vZE3V5DEFOH7vF.jpg"
                              alt="Sakurai, Takahiro">
                          </a>
                          <a href="https://animes.vision/pessoa/hara-yuuko" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hara, Yuuko">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/uaEGKpmYK6pIP8qZQLUvw9zuWn77EG3xEUH2vdLP.jpg"
                              src="https://animes.vision/storage/pessoa/uaEGKpmYK6pIP8qZQLUvw9zuWn77EG3xEUH2vdLP.jpg"
                              alt="Hara, Yuuko">
                          </a>
                          <a href="https://animes.vision/pessoa/marot-tony" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Marot, Tony">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/bCZvmqvJQj9ApBZiQlf1a4WaqCbgBJIYxEfaHDtn.jpg"
                              src="https://animes.vision/storage/pessoa/bCZvmqvJQj9ApBZiQlf1a4WaqCbgBJIYxEfaHDtn.jpg"
                              alt="Marot, Tony">
                          </a>
                          <a href="https://animes.vision/pessoa/seitz-patrick" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Seitz, Patrick">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/YgW1ixU3HmgBAgUP0LkH8RzsDCSEx0JhLOlULjSg.jpg"
                              src="https://animes.vision/storage/pessoa/YgW1ixU3HmgBAgUP0LkH8RzsDCSEx0JhLOlULjSg.jpg"
                              alt="Seitz, Patrick">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/guila" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/uG7Km8tKnGMy6dnnhcllj0zydQFXaZb8TIgEWoQ6.jpg"
                            src="https://animes.vision/storage/personagem/uG7Km8tKnGMy6dnnhcllj0zydQFXaZb8TIgEWoQ6.jpg"
                            alt="Guila">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/guila">Guila</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/ise-mariya" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Ise, Mariya">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/TEKuNSrUteLjbwNXpIHwu2h89Tz6QVYVcqckC55C.jpg"
                              src="https://animes.vision/storage/pessoa/TEKuNSrUteLjbwNXpIHwu2h89Tz6QVYVcqckC55C.jpg"
                              alt="Ise, Mariya">
                          </a>
                          <a href="https://animes.vision/pessoa/keranen-carrie" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Keranen, Carrie">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ht1CKDaXw3hKzjAx9XhAfmDOVYptS9Enr7WdgbyI.jpg"
                              src="https://animes.vision/storage/pessoa/ht1CKDaXw3hKzjAx9XhAfmDOVYptS9Enr7WdgbyI.jpg"
                              alt="Keranen, Carrie">
                          </a>
                          <a href="https://animes.vision/pessoa/amorim-priscila" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Amorim, Priscila">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Tunqtdq3IFhncTKbuW1z9sCuld8joTNgyWUTumdM.jpg"
                              src="https://animes.vision/storage/pessoa/Tunqtdq3IFhncTKbuW1z9sCuld8joTNgyWUTumdM.jpg"
                              alt="Amorim, Priscila">
                          </a>
                          <a href="https://animes.vision/pessoa/bienaime-nathalie" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Bienaimé, Nathalie">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/wbXLBdyfRnhCG2f2551rsuOJb0Uvun14AJ1suE04.jpg"
                              src="https://animes.vision/storage/pessoa/wbXLBdyfRnhCG2f2551rsuOJb0Uvun14AJ1suE04.jpg"
                              alt="Bienaimé, Nathalie">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/gustaf" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/aIGoFYUKc83v3lzDMIrVHUjeaJmGPSo8CwWWr5ks.jpg"
                            src="https://animes.vision/storage/personagem/aIGoFYUKc83v3lzDMIrVHUjeaJmGPSo8CwWWr5ks.jpg"
                            alt="Gustaf">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/gustaf">Gustaf</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/furukawa-makoto" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Furukawa, Makoto">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/XAskGO3gQJgBgXHm7MSTqQtJSDul7HLiUNazU9ha.jpg"
                              src="https://animes.vision/storage/pessoa/XAskGO3gQJgBgXHm7MSTqQtJSDul7HLiUNazU9ha.jpg"
                              alt="Furukawa, Makoto">
                          </a>
                          <a href="https://animes.vision/pessoa/hackney-christopher" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hackney, Christopher">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/SMD404ze8YwFIL5a224xEFwvPGH09rhsUyaxHcyc.jpg"
                              src="https://animes.vision/storage/pessoa/SMD404ze8YwFIL5a224xEFwvPGH09rhsUyaxHcyc.jpg"
                              alt="Hackney, Christopher">
                          </a>
                          <a href="https://animes.vision/pessoa/podesta-olivier" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Podesta, Olivier">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/GwOmgQjb9sPVbQseKqqbhd0zj1CBo6nKvoROKfNE.jpg"
                              src="https://animes.vision/storage/pessoa/GwOmgQjb9sPVbQseKqqbhd0zj1CBo6nKvoROKfNE.jpg"
                              alt="Podesta, Olivier">
                          </a>
                          <a href="https://animes.vision/pessoa/cappelli-joao" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Cappelli, João">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/QgpJnhnqm1mgMl5G3iCDfaDtcIIa2hpjynEogv3F.jpg"
                              src="https://animes.vision/storage/pessoa/QgpJnhnqm1mgMl5G3iCDfaDtcIIa2hpjynEogv3F.jpg"
                              alt="Cappelli, João">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/hawk-mama" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/K01h4EwreGPXSAweFboKEjaozTMBzRmDa2uL0p60.jpg"
                            src="https://animes.vision/storage/personagem/K01h4EwreGPXSAweFboKEjaozTMBzRmDa2uL0p60.jpg"
                            alt="Hawk Mama">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/hawk-mama">Hawk Mama</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/nakajima-kayou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakajima, Kayou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              alt="Nakajima, Kayou">
                          </a>
                          <a href="https://animes.vision/pessoa/nakajima-kayou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakajima, Kayou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              alt="Nakajima, Kayou">
                          </a>
                          <a href="https://animes.vision/pessoa/nakajima-kayou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakajima, Kayou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              alt="Nakajima, Kayou">
                          </a>
                          <a href="https://animes.vision/pessoa/nakajima-kayou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakajima, Kayou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              src="https://animes.vision/storage/pessoa/vt9BzwUVcliwZbbxrOyFsMsVEbqJreBbHpsEezsq.jpg"
                              alt="Nakajima, Kayou">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/helbram" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/20h62oBs3GFXrdUIQDwRNdoT1Woa45AwhD7U5zkr.jpg"
                            src="https://animes.vision/storage/personagem/20h62oBs3GFXrdUIQDwRNdoT1Woa45AwhD7U5zkr.jpg"
                            alt="Helbram">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/helbram">Helbram</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kamiya-hiroshi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kamiya, Hiroshi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/dPSMgv794dRLd7OeMhMHEWTximmliDL1srNDjpTd.jpg"
                              src="https://animes.vision/storage/pessoa/dPSMgv794dRLd7OeMhMHEWTximmliDL1srNDjpTd.jpg"
                              alt="Kamiya, Hiroshi">
                          </a>
                          <a href="https://animes.vision/pessoa/okiayu-ryoutarou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Okiayu, Ryoutarou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/O4A1FwcRKct3vI4N4IHEMhce0qa9In0DgVCFudrR.jpg"
                              src="https://animes.vision/storage/pessoa/O4A1FwcRKct3vI4N4IHEMhce0qa9In0DgVCFudrR.jpg"
                              alt="Okiayu, Ryoutarou">
                          </a>
                          <a href="https://animes.vision/pessoa/mccarley-kyle" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="McCarley, Kyle">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/pl3QDKlSWJ2wUEkmbWAXuRHU0hmXftuwFPEv0hMk.jpg"
                              src="https://animes.vision/storage/pessoa/pl3QDKlSWJ2wUEkmbWAXuRHU0hmXftuwFPEv0hMk.jpg"
                              alt="McCarley, Kyle">
                          </a>
                          <a href="https://animes.vision/pessoa/epcar-richard" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Epcar, Richard">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/SgliTC9mE7aS301y1IBAjJu2myyD43Wuzyszw2K7.jpg"
                              src="https://animes.vision/storage/pessoa/SgliTC9mE7aS301y1IBAjJu2myyD43Wuzyszw2K7.jpg"
                              alt="Epcar, Richard">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/hendrickson" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/xM6dXzHKdzLbJxdwg2BE8pYFCPWMKQyciXgj63ia.jpg"
                            src="https://animes.vision/storage/personagem/xM6dXzHKdzLbJxdwg2BE8pYFCPWMKQyciXgj63ia.jpg"
                            alt="Hendrickson">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/hendrickson">Hendrickson</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/uchida-yuuya" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Uchida, Yuuya">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/i8MyzeV4Wafg0FJMM17JWuLLZPJEanxVuuq7RZ6n.jpg"
                              src="https://animes.vision/storage/pessoa/i8MyzeV4Wafg0FJMM17JWuLLZPJEanxVuuq7RZ6n.jpg"
                              alt="Uchida, Yuuya">
                          </a>
                          <a href="https://animes.vision/pessoa/tang-kaiji" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Tang, Kaiji">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/KizL04kATk7vxe8h76CK0bQJrV6Wr15aI2KzMhPV.jpg"
                              src="https://animes.vision/storage/pessoa/KizL04kATk7vxe8h76CK0bQJrV6Wr15aI2KzMhPV.jpg"
                              alt="Tang, Kaiji">
                          </a>
                          <a href="https://animes.vision/pessoa/solis-adrien" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Solis, Adrien">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/l8vXMdMkBOu40BZSx6vh3WZzShYZH7MYu84tLX8Y.jpg"
                              src="https://animes.vision/storage/pessoa/l8vXMdMkBOu40BZSx6vh3WZzShYZH7MYu84tLX8Y.jpg"
                              alt="Solis, Adrien">
                          </a>
                          <a href="https://animes.vision/pessoa/brusa-stefano" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Brusa, Stefano">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/jSFa7D3wkdqWbGXXeHN0PLj8KMqrkObcStcSgMjT.jpg"
                              src="https://animes.vision/storage/pessoa/jSFa7D3wkdqWbGXXeHN0PLj8KMqrkObcStcSgMjT.jpg"
                              alt="Brusa, Stefano">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/howzer" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/VZ4YImr4ImOjB8ucbeY9QZoeEmy2sYvXEOPgSBGH.jpg"
                            src="https://animes.vision/storage/personagem/VZ4YImr4ImOjB8ucbeY9QZoeEmy2sYvXEOPgSBGH.jpg"
                            alt="Howzer">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/howzer">Howzer</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kimura-ryouhei" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kimura, Ryouhei">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/azY5a5lKLssIOEHeUViTR72B1vkDtgCfO3hXLZUT.jpg"
                              src="https://animes.vision/storage/pessoa/azY5a5lKLssIOEHeUViTR72B1vkDtgCfO3hXLZUT.jpg"
                              alt="Kimura, Ryouhei">
                          </a>
                          <a href="https://animes.vision/pessoa/chase-ray" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Chase, Ray">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/mrkhhGdiR6Dd3SJVy34X60dpY8AMMMwi7FvhdfQd.jpg"
                              src="https://animes.vision/storage/pessoa/mrkhhGdiR6Dd3SJVy34X60dpY8AMMMwi7FvhdfQd.jpg"
                              alt="Chase, Ray">
                          </a>
                          <a href="https://animes.vision/pessoa/gravina-mauro" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Gravina, Mauro">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/KV9Tmm6oW0m0rLFbcKMV8HnO5KDfqoxQ2GdPKIxf.jpg"
                              src="https://animes.vision/storage/pessoa/KV9Tmm6oW0m0rLFbcKMV8HnO5KDfqoxQ2GdPKIxf.jpg"
                              alt="Gravina, Mauro">
                          </a>
                          <a href="https://animes.vision/pessoa/may-martin" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="May, Martin">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ZBtCZXPBLCGHAdN8ft982d1TAXQqHIFvHKoofl4p.jpg"
                              src="https://animes.vision/storage/pessoa/ZBtCZXPBLCGHAdN8ft982d1TAXQqHIFvHKoofl4p.jpg"
                              alt="May, Martin">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/jericho" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/sfk6tGunpdZy0a8AjGlGnf6kRRtUtD6MMWKdgo1U.jpg"
                            src="https://animes.vision/storage/personagem/sfk6tGunpdZy0a8AjGlGnf6kRRtUtD6MMWKdgo1U.jpg"
                            alt="Jericho">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/jericho">Jericho</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/inoue-marina" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Inoue, Marina">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/G3vogGPlhUeVxqAuTjklWws5N8eEZsYPPpButpC7.jpg"
                              src="https://animes.vision/storage/pessoa/G3vogGPlhUeVxqAuTjklWws5N8eEZsYPPpButpC7.jpg"
                              alt="Inoue, Marina">
                          </a>
                          <a href="https://animes.vision/pessoa/lindbeck-erica" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Lindbeck, Erica">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/pvheFjtoN4M5zd5agToKFPWtpHKdVktXdZarL2uq.jpg"
                              src="https://animes.vision/storage/pessoa/pvheFjtoN4M5zd5agToKFPWtpHKdVktXdZarL2uq.jpg"
                              alt="Lindbeck, Erica">
                          </a>
                          <a href="https://animes.vision/pessoa/margiotti-beatrice" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Margiotti, Beatrice">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/VUBvVOOiqCpZqtYT5v3jlE8T7abqAxsz2bhMSwOG.jpg"
                              src="https://animes.vision/storage/pessoa/VUBvVOOiqCpZqtYT5v3jlE8T7abqAxsz2bhMSwOG.jpg"
                              alt="Margiotti, Beatrice">
                          </a>
                          <a href="https://animes.vision/pessoa/volpe-isabelle" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Volpe, Isabelle">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/uMtWZjLN0IhMbKfE5CGYiDNj1AR1X4DF6fLhpLPq.jpg"
                              src="https://animes.vision/storage/pessoa/uMtWZjLN0IhMbKfE5CGYiDNj1AR1X4DF6fLhpLPq.jpg"
                              alt="Volpe, Isabelle">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/jude" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/7p4FzQ5yZrzzGpwtqiyhJ4Cak3jrbrXYGEUqJsmP.jpg"
                            src="https://animes.vision/storage/personagem/7p4FzQ5yZrzzGpwtqiyhJ4Cak3jrbrXYGEUqJsmP.jpg"
                            alt="Jude">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/jude">Jude</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/hiyama-nobuyuki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hiyama, Nobuyuki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/VWxC1HwEwENfpKLL77JPLUXHC08rXIQtSTjkChz9.jpg"
                              src="https://animes.vision/storage/pessoa/VWxC1HwEwENfpKLL77JPLUXHC08rXIQtSTjkChz9.jpg"
                              alt="Hiyama, Nobuyuki">
                          </a>
                          <a href="https://animes.vision/pessoa/cassell-jalen-k" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Cassell, Jalen K.">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Y9ikhCYxXc4nlSIJDgWFAMk0lEYx4uv7OPy9WHZn.jpg"
                              src="https://animes.vision/storage/pessoa/Y9ikhCYxXc4nlSIJDgWFAMk0lEYx4uv7OPy9WHZn.jpg"
                              alt="Cassell, Jalen K.">
                          </a>
                          <a href="https://animes.vision/pessoa/miquel-stephane" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Miquel, Stéphane">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/5TfiIv5XZFryc9suUiW9GGXp2dpPykWJ4Dy8Mzym.gif"
                              src="https://animes.vision/storage/pessoa/5TfiIv5XZFryc9suUiW9GGXp2dpPykWJ4Dy8Mzym.gif"
                              alt="Miquel, Stéphane">
                          </a>
                          <a href="https://animes.vision/pessoa/schaffler-erik" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Schäffler, Erik">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/tY3VS60CwRu4QsCQ96qAt7HjksMCpLzybplbotnR.jpg"
                              src="https://animes.vision/storage/pessoa/tY3VS60CwRu4QsCQ96qAt7HjksMCpLzybplbotnR.jpg"
                              alt="Schäffler, Erik">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/liones-bartra" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/5JL96Y9m6kxau04T4YlWIp3rckeEpeENHvpU8Hq4.jpg"
                            src="https://animes.vision/storage/personagem/5JL96Y9m6kxau04T4YlWIp3rckeEpeENHvpU8Hq4.jpg"
                            alt="Liones, Bartra">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/liones-bartra">Liones, Bartra</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/nishi-rintarou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nishi, Rintarou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/rBtdeWDRi2NNM9D9GB9saM9dJbkl2xhHjgU5HWiF.jpg"
                              src="https://animes.vision/storage/pessoa/rBtdeWDRi2NNM9D9GB9saM9dJbkl2xhHjgU5HWiF.jpg"
                              alt="Nishi, Rintarou">
                          </a>
                          <a href="https://animes.vision/pessoa/roullier-philippe" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Roullier, Philippe">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/mdPfACdZHHFlU2QU8y91RRGAPDmoiY527rE4WYKp.jpg"
                              src="https://animes.vision/storage/pessoa/mdPfACdZHHFlU2QU8y91RRGAPDmoiY527rE4WYKp.jpg"
                              alt="Roullier, Philippe">
                          </a>
                          <a href="https://animes.vision/pessoa/persy-luiz-carlos" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Persy, Luiz Carlos">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/f0eGSErZ0PIFPVsWVVEsQ2SA7wupxCsOCcE1NK1n.jpg"
                              src="https://animes.vision/storage/pessoa/f0eGSErZ0PIFPVsWVVEsQ2SA7wupxCsOCcE1NK1n.jpg"
                              alt="Persy, Luiz Carlos">
                          </a>
                          <a href="https://animes.vision/pessoa/stephan-bernd" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Stephan, Bernd">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/tuK0ID5Ei9wE6F0PTznsfmZugAfFEHZ3MBD6we37.jpg"
                              src="https://animes.vision/storage/pessoa/tuK0ID5Ei9wE6F0PTznsfmZugAfFEHZ3MBD6we37.jpg"
                              alt="Stephan, Bernd">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/liones-veronica" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/x8gshsZx9ZZ7eDRWENrW1faktZ3QK6qfY8wQepje.jpg"
                            src="https://animes.vision/storage/personagem/x8gshsZx9ZZ7eDRWENrW1faktZ3QK6qfY8wQepje.jpg"
                            alt="Liones, Veronica">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/liones-veronica">Liones, Veronica</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kanemoto-hisako" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kanemoto, Hisako">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/yJ4soXKoIlEpvTPsnKymavXv106ZCvOMDD2VdqIl.jpg"
                              src="https://animes.vision/storage/pessoa/yJ4soXKoIlEpvTPsnKymavXv106ZCvOMDD2VdqIl.jpg"
                              alt="Kanemoto, Hisako">
                          </a>
                          <a href="https://animes.vision/pessoa/trott-abby" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Trott, Abby">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/rUeNTWaC1acL4pkdw1htorrIxwN30YTaiGBql1wJ.jpg"
                              src="https://animes.vision/storage/pessoa/rUeNTWaC1acL4pkdw1htorrIxwN30YTaiGBql1wJ.jpg"
                              alt="Trott, Abby">
                          </a>
                          <a href="https://animes.vision/pessoa/bittarello-fabiola" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Bittarello, Fabiola">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ztGBr788YMMHiXKKq6GPbB6LQZhaviz6PvOgVMl0.jpg"
                              src="https://animes.vision/storage/pessoa/ztGBr788YMMHiXKKq6GPbB6LQZhaviz6PvOgVMl0.jpg"
                              alt="Bittarello, Fabiola">
                          </a>
                          <a href="https://animes.vision/pessoa/schumann-tanja" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Schumann, Tanja">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/dlb4mySpTLvJIeUnVWKbRKBg5ier6wLg6SmrmqTe.jpg"
                              src="https://animes.vision/storage/pessoa/dlb4mySpTLvJIeUnVWKbRKBg5ier6wLg6SmrmqTe.jpg"
                              alt="Schumann, Tanja">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/liones-margaret" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/2fqiJb0HQ6tlgF6vu7T8fktGNBMPXUa5z9ZXmUbz.jpg"
                            src="https://animes.vision/storage/personagem/2fqiJb0HQ6tlgF6vu7T8fktGNBMPXUa5z9ZXmUbz.jpg"
                            alt="Liones, Margaret">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/liones-margaret">Liones, Margaret</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/mizuki-nana" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Mizuki, Nana">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/fzZPnhtHToqJEeoPOuIGvSFNa7GOiUKOGykrOVUl.jpg"
                              src="https://animes.vision/storage/pessoa/fzZPnhtHToqJEeoPOuIGvSFNa7GOiUKOGykrOVUl.jpg"
                              alt="Mizuki, Nana">
                          </a>
                          <a href="https://animes.vision/pessoa/oliviero-chiara" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Oliviero, Chiara">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ZpAyxm7EEpDx2GYeLVsFhdGpa0HGMBBArbDWJWyP.gif"
                              src="https://animes.vision/storage/pessoa/ZpAyxm7EEpDx2GYeLVsFhdGpa0HGMBBArbDWJWyP.gif"
                              alt="Oliviero, Chiara">
                          </a>
                          <a href="https://animes.vision/pessoa/ferrari-sylvie" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Ferrari, Sylvie">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/O8Cn0pab2dcaDcHk8gcIWGvETd93TwhLImVmHzWW.jpg"
                              src="https://animes.vision/storage/pessoa/O8Cn0pab2dcaDcHk8gcIWGvETd93TwhLImVmHzWW.jpg"
                              alt="Ferrari, Sylvie">
                          </a>
                          <a href="https://animes.vision/pessoa/eschmann-tina" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Eschmann, Tina">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Y0rRAmexWq0O1lGLqtr2E9zFFOz9wUlIp7LQChpM.jpg"
                              src="https://animes.vision/storage/pessoa/Y0rRAmexWq0O1lGLqtr2E9zFFOz9wUlIp7LQChpM.jpg"
                              alt="Eschmann, Tina">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/liz" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/Inr1eqjIjKswOUfmL0mePNJJNQ2ym3ENv2CreK1q.jpg"
                            src="https://animes.vision/storage/personagem/Inr1eqjIjKswOUfmL0mePNJJNQ2ym3ENv2CreK1q.jpg"
                            alt="Liz">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/liz">Liz</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/amamiya-sora" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Amamiya, Sora">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              alt="Amamiya, Sora">
                          </a>
                          <a href="https://animes.vision/pessoa/leal-rodriguez-guadalupe" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Leal Rodríguez, Guadalupe">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/dknJWqp87RFWMFc3LAIJzCo1uQjHzC1z1bqWQaTK.jpg"
                              src="https://animes.vision/storage/pessoa/dknJWqp87RFWMFc3LAIJzCo1uQjHzC1z1bqWQaTK.jpg"
                              alt="Leal Rodríguez, Guadalupe">
                          </a>
                          <a href="https://animes.vision/pessoa/amamiya-sora" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Amamiya, Sora">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              alt="Amamiya, Sora">
                          </a>
                          <a href="https://animes.vision/pessoa/leal-rodriguez-guadalupe" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Leal Rodríguez, Guadalupe">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/dknJWqp87RFWMFc3LAIJzCo1uQjHzC1z1bqWQaTK.jpg"
                              src="https://animes.vision/storage/pessoa/dknJWqp87RFWMFc3LAIJzCo1uQjHzC1z1bqWQaTK.jpg"
                              alt="Leal Rodríguez, Guadalupe">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/luigi" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/4nk0MqccQIs8NTmvepUy0GVOoYMb4q1BMITyoQ0H.jpg"
                            src="https://animes.vision/storage/personagem/4nk0MqccQIs8NTmvepUy0GVOoYMb4q1BMITyoQ0H.jpg"
                            alt="Luigi">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/luigi">Luigi</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/katou-emiri" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Katou, Emiri">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qM5Ia7w8BZydpqKxyHtekIaXZUrPkWqby2IxES0w.jpg"
                              src="https://animes.vision/storage/pessoa/qM5Ia7w8BZydpqKxyHtekIaXZUrPkWqby2IxES0w.jpg"
                              alt="Katou, Emiri">
                          </a>
                          <a href="https://animes.vision/pessoa/sands-tara" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Sands, Tara">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/KmKOnXGJv0EBFQ7A9Ux0aqKaSt0imPrv71FGlZeK.jpg"
                              src="https://animes.vision/storage/pessoa/KmKOnXGJv0EBFQ7A9Ux0aqKaSt0imPrv71FGlZeK.jpg"
                              alt="Sands, Tara">
                          </a>
                          <a href="https://animes.vision/pessoa/salerno-arthur" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Salerno, Arthur">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/16dsZ05iEuRsg1u5aJyBwEyVCQratnG0pbrF261v.jpg"
                              src="https://animes.vision/storage/pessoa/16dsZ05iEuRsg1u5aJyBwEyVCQratnG0pbrF261v.jpg"
                              alt="Salerno, Arthur">
                          </a>
                          <a href="https://animes.vision/pessoa/katou-emiri" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Katou, Emiri">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qM5Ia7w8BZydpqKxyHtekIaXZUrPkWqby2IxES0w.jpg"
                              src="https://animes.vision/storage/pessoa/qM5Ia7w8BZydpqKxyHtekIaXZUrPkWqby2IxES0w.jpg"
                              alt="Katou, Emiri">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/marmas" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/DqG25HztxX6nr7YCUTbiXb1XZTs9ZOtINojDgB3e.jpg"
                            src="https://animes.vision/storage/personagem/DqG25HztxX6nr7YCUTbiXb1XZTs9ZOtINojDgB3e.jpg"
                            alt="Marmas">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/marmas">Marmas</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/matsuda-kenichirou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Matsuda, Kenichirou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/lQmpbqsXhKk14h8HnEDBmoOTk5jky6AnzWplSO60.jpg"
                              src="https://animes.vision/storage/pessoa/lQmpbqsXhKk14h8HnEDBmoOTk5jky6AnzWplSO60.jpg"
                              alt="Matsuda, Kenichirou">
                          </a>
                          <a href="https://animes.vision/pessoa/de-lisi-daniele" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="De Lisi, Daniele">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/JDkhfxLdvVJ9tQQzy5b0vIKoONpLpE7VD9tTkrWq.jpg"
                              src="https://animes.vision/storage/pessoa/JDkhfxLdvVJ9tQQzy5b0vIKoONpLpE7VD9tTkrWq.jpg"
                              alt="De Lisi, Daniele">
                          </a>
                          <a href="https://animes.vision/pessoa/rieke-nils" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Rieke, Nils">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/1df1F5lO170BIbGRd8Xa1CMBMwGj6wapO03sahnN.gif"
                              src="https://animes.vision/storage/pessoa/1df1F5lO170BIbGRd8Xa1CMBMwGj6wapO03sahnN.gif"
                              alt="Rieke, Nils">
                          </a>
                          <a href="https://animes.vision/pessoa/de-almeida-claudio-galvan" data-toggle="tooltip"
                            title="" class="pi-avatar" data-original-title="de Almeida, Cláudio Galvan">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/xWFFnZqkci9kI50IjhY95PDT4gtN0luzGCFtqzFB.jpg"
                              src="https://animes.vision/storage/pessoa/xWFFnZqkci9kI50IjhY95PDT4gtN0luzGCFtqzFB.jpg"
                              alt="de Almeida, Cláudio Galvan">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/mead" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/ykyiyplVSrl9olM8AFKQKlWkHP0GMv1FrGqjklHh.jpg"
                            src="https://animes.vision/storage/personagem/ykyiyplVSrl9olM8AFKQKlWkHP0GMv1FrGqjklHh.jpg"
                            alt="Mead">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/mead">Mead</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kobayashi-yumiko" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kobayashi, Yumiko">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/fZnYweJV14rFDTs5oG0hkMFOFRTYpKEDb3925rus.jpg"
                              src="https://animes.vision/storage/pessoa/fZnYweJV14rFDTs5oG0hkMFOFRTYpKEDb3925rus.jpg"
                              alt="Kobayashi, Yumiko">
                          </a>
                          <a href="https://animes.vision/pessoa/sampler-philece" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Sampler, Philece">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/NTE5TVXbtflmB3fYJSI27DuM42WyhrPycDLhVCME.jpg"
                              src="https://animes.vision/storage/pessoa/NTE5TVXbtflmB3fYJSI27DuM42WyhrPycDLhVCME.jpg"
                              alt="Sampler, Philece">
                          </a>
                          <a href="https://animes.vision/pessoa/de-bouard-vincent" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="De Boüard, Vincent">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/TUFqSCWJ2MSCky0X3ldeHMYsZqyff1ttRHtcxeYz.jpg"
                              src="https://animes.vision/storage/pessoa/TUFqSCWJ2MSCky0X3ldeHMYsZqyff1ttRHtcxeYz.jpg"
                              alt="De Boüard, Vincent">
                          </a>
                          <a href="https://animes.vision/pessoa/campaiola-federico" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Campaiola, Federico">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/5J33jVFt0QAyDkVl8K5reTMqPxtP9dqjbO9faXXE.jpg"
                              src="https://animes.vision/storage/pessoa/5J33jVFt0QAyDkVl8K5reTMqPxtP9dqjbO9faXXE.jpg"
                              alt="Campaiola, Federico">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/merlin" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/B6HKnUAKsPA9aBKuwgBIcBBFehhRnXQwWcLvOGqx.jpg"
                            src="https://animes.vision/storage/personagem/B6HKnUAKsPA9aBKuwgBIcBBFehhRnXQwWcLvOGqx.jpg"
                            alt="Merlin">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/merlin">Merlin</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/sakamoto-maaya" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Sakamoto, Maaya">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/MqKLhh6ukNhcyU1dAiSzLLbzQ4Uo63kteLVlCXcF.jpg"
                              src="https://animes.vision/storage/pessoa/MqKLhh6ukNhcyU1dAiSzLLbzQ4Uo63kteLVlCXcF.jpg"
                              alt="Sakamoto, Maaya">
                          </a>
                          <a href="https://animes.vision/pessoa/ficher-miriam" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Ficher, Miriam">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ESGxSprSPwZLUZQ4e7cvEKs66E6MOmHa5pj6feFS.jpg"
                              src="https://animes.vision/storage/pessoa/ESGxSprSPwZLUZQ4e7cvEKs66E6MOmHa5pj6feFS.jpg"
                              alt="Ficher, Miriam">
                          </a>
                          <a href="https://animes.vision/pessoa/landa-lauren" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Landa, Lauren">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Yb2JOl3kaTGr8XVoVpsFD32KaoAGbEtg7eleCpCR.jpg"
                              src="https://animes.vision/storage/pessoa/Yb2JOl3kaTGr8XVoVpsFD32KaoAGbEtg7eleCpCR.jpg"
                              alt="Landa, Lauren">
                          </a>
                          <a href="https://animes.vision/pessoa/padoan-eva" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Padoan, Eva">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/uO7pQFaqqDXb1c4Mq6shW733KTytVmYQf7Q6O95T.jpg"
                              src="https://animes.vision/storage/pessoa/uO7pQFaqqDXb1c4Mq6shW733KTytVmYQf7Q6O95T.jpg"
                              alt="Padoan, Eva">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/narrator" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/hS1AyZdLGH78EJ7vRBqf7bnQyMdtMK6CcvMzdfG2.gif"
                            src="https://animes.vision/storage/personagem/hS1AyZdLGH78EJ7vRBqf7bnQyMdtMK6CcvMzdfG2.gif"
                            alt="Narrator">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/narrator">Narrator</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/nishi-rintarou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nishi, Rintarou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/rBtdeWDRi2NNM9D9GB9saM9dJbkl2xhHjgU5HWiF.jpg"
                              src="https://animes.vision/storage/pessoa/rBtdeWDRi2NNM9D9GB9saM9dJbkl2xhHjgU5HWiF.jpg"
                              alt="Nishi, Rintarou">
                          </a>
                          <a href="https://animes.vision/pessoa/cason-chris" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Cason, Chris">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/e3BMKum7BVVb8K6DyYsACMF9kibDkBKW1icI2SIV.jpg"
                              src="https://animes.vision/storage/pessoa/e3BMKum7BVVb8K6DyYsACMF9kibDkBKW1icI2SIV.jpg"
                              alt="Cason, Chris">
                          </a>
                          <a href="https://animes.vision/pessoa/frass-wolf" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Frass, Wolf">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/YqBVy0XLgincaQAuxoPivkYRZ8s6dDlzA09AioBZ.jpg"
                              src="https://animes.vision/storage/pessoa/YqBVy0XLgincaQAuxoPivkYRZ8s6dDlzA09AioBZ.jpg"
                              alt="Frass, Wolf">
                          </a>
                          <a href="https://animes.vision/pessoa/maia-philippe" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Maia, Philippe">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/nPN2z7pRgRLduWuDtpeskMZjs8g4o2TxAZ0lhtJd.jpg"
                              src="https://animes.vision/storage/pessoa/nPN2z7pRgRLduWuDtpeskMZjs8g4o2TxAZ0lhtJd.jpg"
                              alt="Maia, Philippe">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/pendragon-arthur" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/bGu0o0IuTgklQhRoSqfZhFHAcNQJDX1IfmVgRfCP.jpg"
                            src="https://animes.vision/storage/personagem/bGu0o0IuTgklQhRoSqfZhFHAcNQJDX1IfmVgRfCP.jpg"
                            alt="Pendragon, Arthur">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/pendragon-arthur">Pendragon, Arthur</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kokuryu-sachi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kokuryu, Sachi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/BA2yqbeZJPGUt8oUwX5B15Ip2e4LFH951693Pcdc.jpg"
                              src="https://animes.vision/storage/pessoa/BA2yqbeZJPGUt8oUwX5B15Ip2e4LFH951693Pcdc.jpg"
                              alt="Kokuryu, Sachi">
                          </a>
                          <a href="https://animes.vision/pessoa/aguilar-zach" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Aguilar, Zach">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/7hPnmxA0v9BCL1jOhbLWE8JVkhMkaT682HoOorto.jpg"
                              src="https://animes.vision/storage/pessoa/7hPnmxA0v9BCL1jOhbLWE8JVkhMkaT682HoOorto.jpg"
                              alt="Aguilar, Zach">
                          </a>
                          <a href="https://animes.vision/pessoa/podesta-olivier" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Podesta, Olivier">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/GwOmgQjb9sPVbQseKqqbhd0zj1CBo6nKvoROKfNE.jpg"
                              src="https://animes.vision/storage/pessoa/GwOmgQjb9sPVbQseKqqbhd0zj1CBo6nKvoROKfNE.jpg"
                              alt="Podesta, Olivier">
                          </a>
                          <a href="https://animes.vision/pessoa/stein-flemming" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Stein, Flemming">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/nKLXjN4vxnXoyjpbGoG01EW3rfCYQaMemIPZRIhk.jpg"
                              src="https://animes.vision/storage/pessoa/nKLXjN4vxnXoyjpbGoG01EW3rfCYQaMemIPZRIhk.jpg"
                              alt="Stein, Flemming">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/ruin" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/xpQb9TUaiPYPQOPyjsquHnhzAiwiXkPKMEnFKAPA.jpg"
                            src="https://animes.vision/storage/personagem/xpQb9TUaiPYPQOPyjsquHnhzAiwiXkPKMEnFKAPA.jpg"
                            alt="Ruin">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/ruin">Ruin</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/ono-atsushi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Ono, Atsushi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Lxuzzt1V0wu8ttDHSUOrki8twNxLwrLeYK9x1wXZ.jpg"
                              src="https://animes.vision/storage/pessoa/Lxuzzt1V0wu8ttDHSUOrki8twNxLwrLeYK9x1wXZ.jpg"
                              alt="Ono, Atsushi">
                          </a>
                          <a href="https://animes.vision/pessoa/diraison-marc" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Diraison, Marc">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/xduFCKG3VvPHQvXBevIDkx2GPIlIOjrBz4FfyrNr.jpg"
                              src="https://animes.vision/storage/pessoa/xduFCKG3VvPHQvXBevIDkx2GPIlIOjrBz4FfyrNr.jpg"
                              alt="Diraison, Marc">
                          </a>
                          <a href="https://animes.vision/pessoa/marot-tony" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Marot, Tony">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/bCZvmqvJQj9ApBZiQlf1a4WaqCbgBJIYxEfaHDtn.jpg"
                              src="https://animes.vision/storage/pessoa/bCZvmqvJQj9ApBZiQlf1a4WaqCbgBJIYxEfaHDtn.jpg"
                              alt="Marot, Tony">
                          </a>
                          <a href="https://animes.vision/pessoa/schnetzer-ricardo" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Schnetzer, Ricardo">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/0BSYBECebNi44hAcuMhNJz6JhliO3KPq1cK7Eoum.jpg"
                              src="https://animes.vision/storage/pessoa/0BSYBECebNi44hAcuMhNJz6JhliO3KPq1cK7Eoum.jpg"
                              alt="Schnetzer, Ricardo">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/sennett" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/lPf3W6xXfJDMMhsV4LmWe7VeEjo2ms0erFDalXbb.jpg"
                            src="https://animes.vision/storage/personagem/lPf3W6xXfJDMMhsV4LmWe7VeEjo2ms0erFDalXbb.jpg"
                            alt="Sennett">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/sennett">Sennett</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kobori-yurie" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kobori, Yurie">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ltIMSac6NHcFMLlKi2r5Nbp0tkARlwyJYjqQfBRr.jpg"
                              src="https://animes.vision/storage/pessoa/ltIMSac6NHcFMLlKi2r5Nbp0tkARlwyJYjqQfBRr.jpg"
                              alt="Kobori, Yurie">
                          </a>
                          <a href="https://animes.vision/pessoa/menezes-ana-lucia" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Menezes, Ana Lúcia">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/PkDkEJHwuPjTskWGXyftn2nJ4utFJBdfcePxZarU.jpg"
                              src="https://animes.vision/storage/pessoa/PkDkEJHwuPjTskWGXyftn2nJ4utFJBdfcePxZarU.jpg"
                              alt="Menezes, Ana Lúcia">
                          </a>
                          <a href="https://animes.vision/pessoa/friede-franciska" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Friede, Franciska">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/6LqLAyTpnpW7BPJvsHZ2oF1ezLzV7D4IWBtPaz9Q.jpg"
                              src="https://animes.vision/storage/pessoa/6LqLAyTpnpW7BPJvsHZ2oF1ezLzV7D4IWBtPaz9Q.jpg"
                              alt="Friede, Franciska">
                          </a>
                          <a href="https://animes.vision/pessoa/marlot-frederique" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Marlot, Frédérique">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/KjyJkjLhk2SE1CsHWKitupmAjNNwizCzx0SoBbKu.jpg"
                              src="https://animes.vision/storage/pessoa/KjyJkjLhk2SE1CsHWKitupmAjNNwizCzx0SoBbKu.jpg"
                              alt="Marlot, Frédérique">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/simon" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/o5WqSPOjm5ztIZH9XEZSAljU0HlkRpT3EO8n3FgC.jpg"
                            src="https://animes.vision/storage/personagem/o5WqSPOjm5ztIZH9XEZSAljU0HlkRpT3EO8n3FgC.jpg"
                            alt="Simon">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/simon">Simon</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/campaiola-alessandro" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Campaiola, Alessandro">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/45k6T7oGrHfHBrU8r9zQpGBP4h5o1XNY0eiWocej.jpg"
                              src="https://animes.vision/storage/pessoa/45k6T7oGrHfHBrU8r9zQpGBP4h5o1XNY0eiWocej.jpg"
                              alt="Campaiola, Alessandro">
                          </a>
                          <a href="https://animes.vision/pessoa/kanemoto-ryousuke" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kanemoto, Ryousuke">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/9qdaLFxvrJsFMpPE9ti5cX7atF1Ws3Ydbzto0331.jpg"
                              src="https://animes.vision/storage/pessoa/9qdaLFxvrJsFMpPE9ti5cX7atF1Ws3Ydbzto0331.jpg"
                              alt="Kanemoto, Ryousuke">
                          </a>
                          <a href="https://animes.vision/pessoa/marot-tony" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Marot, Tony">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/bCZvmqvJQj9ApBZiQlf1a4WaqCbgBJIYxEfaHDtn.jpg"
                              src="https://animes.vision/storage/pessoa/bCZvmqvJQj9ApBZiQlf1a4WaqCbgBJIYxEfaHDtn.jpg"
                              alt="Marot, Tony">
                          </a>
                          <a href="https://animes.vision/pessoa/dodge-lucien" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Dodge, Lucien">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ZVtazcE5JKuDsj7ekhhyNaJrJk3iakpuZJ8T8FIZ.jpg"
                              src="https://animes.vision/storage/pessoa/ZVtazcE5JKuDsj7ekhhyNaJrJk3iakpuZJ8T8FIZ.jpg"
                              alt="Dodge, Lucien">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/slader" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/Sl3x6YFv713yZXztcdiMdZTALLTbZUU27EqZRcDL.jpg"
                            src="https://animes.vision/storage/personagem/Sl3x6YFv713yZXztcdiMdZTALLTbZUU27EqZRcDL.jpg"
                            alt="Slader">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/slader">Slader</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/miki-shinichiro" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Miki, Shinichiro">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/HAerJzjwNFA7x7o6pEtrpIprUEOvUHZFndCPYjSi.jpg"
                              src="https://animes.vision/storage/pessoa/HAerJzjwNFA7x7o6pEtrpIprUEOvUHZFndCPYjSi.jpg"
                              alt="Miki, Shinichiro">
                          </a>
                          <a href="https://animes.vision/pessoa/erholtz-doug" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Erholtz, Doug">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/xf5uTdQzb3UxQw14y3Nlce8pU8QQFEPKsdHPlB5I.jpg"
                              src="https://animes.vision/storage/pessoa/xf5uTdQzb3UxQw14y3Nlce8pU8QQFEPKsdHPlB5I.jpg"
                              alt="Erholtz, Doug">
                          </a>
                          <a href="https://animes.vision/pessoa/roullier-philippe" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Roullier, Philippe">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/mdPfACdZHHFlU2QU8y91RRGAPDmoiY527rE4WYKp.jpg"
                              src="https://animes.vision/storage/pessoa/mdPfACdZHHFlU2QU8y91RRGAPDmoiY527rE4WYKp.jpg"
                              alt="Roullier, Philippe">
                          </a>
                          <a href="https://animes.vision/pessoa/certoma-roberto" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Certoma, Roberto">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/pHPqhTDYRbWvrmgJzACAlr55XsDRJgnIMUBmSFIN.jpg"
                              src="https://animes.vision/storage/pessoa/pHPqhTDYRbWvrmgJzACAlr55XsDRJgnIMUBmSFIN.jpg"
                              alt="Certoma, Roberto">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/taizoo" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/RLWn4xpHcaZziOlqbNVvF8D4I4fP2gHXi3j48C1S.jpg"
                            src="https://animes.vision/storage/personagem/RLWn4xpHcaZziOlqbNVvF8D4I4fP2gHXi3j48C1S.jpg"
                            alt="Taizoo">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/taizoo">Taizoo</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/matsuda-kenichirou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Matsuda, Kenichirou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/lQmpbqsXhKk14h8HnEDBmoOTk5jky6AnzWplSO60.jpg"
                              src="https://animes.vision/storage/pessoa/lQmpbqsXhKk14h8HnEDBmoOTk5jky6AnzWplSO60.jpg"
                              alt="Matsuda, Kenichirou">
                          </a>
                          <a href="https://animes.vision/pessoa/lucas-jorge" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Lucas, Jorge">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Der2a8uqq5iNfhlfGExFurJKUuoiGlRcKDSr1g8u.jpg"
                              src="https://animes.vision/storage/pessoa/Der2a8uqq5iNfhlfGExFurJKUuoiGlRcKDSr1g8u.jpg"
                              alt="Lucas, Jorge">
                          </a>
                          <a href="https://animes.vision/pessoa/matsuda-kenichirou" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Matsuda, Kenichirou">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/lQmpbqsXhKk14h8HnEDBmoOTk5jky6AnzWplSO60.jpg"
                              src="https://animes.vision/storage/pessoa/lQmpbqsXhKk14h8HnEDBmoOTk5jky6AnzWplSO60.jpg"
                              alt="Matsuda, Kenichirou">
                          </a>
                          <a href="https://animes.vision/pessoa/lucas-jorge" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Lucas, Jorge">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Der2a8uqq5iNfhlfGExFurJKUuoiGlRcKDSr1g8u.jpg"
                              src="https://animes.vision/storage/pessoa/Der2a8uqq5iNfhlfGExFurJKUuoiGlRcKDSr1g8u.jpg"
                              alt="Lucas, Jorge">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/twigo" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/SvOpaNlCX4faBAh02O4Ihyg8b5rOfYexapnUBytj.jpg"
                            src="https://animes.vision/storage/personagem/SvOpaNlCX4faBAh02O4Ihyg8b5rOfYexapnUBytj.jpg"
                            alt="Twigo">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/twigo">Twigo</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/miyake-kenta" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Miyake, Kenta">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/TZyUZ33lK9NEHod1cvl0gyL3JM0iWpxkHAihAfZs.jpg"
                              src="https://animes.vision/storage/pessoa/TZyUZ33lK9NEHod1cvl0gyL3JM0iWpxkHAihAfZs.jpg"
                              alt="Miyake, Kenta">
                          </a>
                          <a href="https://animes.vision/pessoa/mcconnohie-michael" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="McConnohie, Michael">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Jh0BtOEaCJcXmMZHY1g1bLPQmXdd80ZhHOsdJ6gK.jpg"
                              src="https://animes.vision/storage/pessoa/Jh0BtOEaCJcXmMZHY1g1bLPQmXdd80ZhHOsdJ6gK.jpg"
                              alt="McConnohie, Michael">
                          </a>
                          <a href="https://animes.vision/pessoa/junior-francisco" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Júnior, Francisco">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/mhPDcoTJGr2k9nSw2bnzlCxC8z41zeneMc4AmIhI.jpg"
                              src="https://animes.vision/storage/pessoa/mhPDcoTJGr2k9nSw2bnzlCxC8z41zeneMc4AmIhI.jpg"
                              alt="Júnior, Francisco">
                          </a>
                          <a href="https://animes.vision/pessoa/wigand-walter" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Wigand, Walter">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/nFPIOiV3nYsa4u8FGyRDabYZL9MSh4pAXsMdlWp2.gif"
                              src="https://animes.vision/storage/pessoa/nFPIOiV3nYsa4u8FGyRDabYZL9MSh4pAXsMdlWp2.gif"
                              alt="Wigand, Walter">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/vivian" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/al2iFlQGabNNESSz5fLwMlp6MTyocCn3pN3gddt5.jpg"
                            src="https://animes.vision/storage/personagem/al2iFlQGabNNESSz5fLwMlp6MTyocCn3pN3gddt5.jpg"
                            alt="Vivian">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/vivian">Vivian</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kotobuki-minako" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kotobuki, Minako">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/QAVZIsE1fyITlQhfL9FKBnbuwbLpU9XAJaTc3L4b.jpg"
                              src="https://animes.vision/storage/pessoa/QAVZIsE1fyITlQhfL9FKBnbuwbLpU9XAJaTc3L4b.jpg"
                              alt="Kotobuki, Minako">
                          </a>
                          <a href="https://animes.vision/pessoa/bottcher-jennifer" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Böttcher, Jennifer">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/NCdCuBeoGxP9dbBbBF3fHQdE9jLewW0CUE56lD0l.jpg"
                              src="https://animes.vision/storage/pessoa/NCdCuBeoGxP9dbBbBF3fHQdE9jLewW0CUE56lD0l.jpg"
                              alt="Böttcher, Jennifer">
                          </a>
                          <a href="https://animes.vision/pessoa/herington-marieve" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Herington, Marieve">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/0ExVreewa4AYgBMnZPd69wS9olq3SN9XCv8aulir.jpg"
                              src="https://animes.vision/storage/pessoa/0ExVreewa4AYgBMnZPd69wS9olq3SN9XCv8aulir.jpg"
                              alt="Herington, Marieve">
                          </a>
                          <a href="https://animes.vision/pessoa/marlot-frederique" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Marlot, Frédérique">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/KjyJkjLhk2SE1CsHWKitupmAjNNwizCzx0SoBbKu.jpg"
                              src="https://animes.vision/storage/pessoa/KjyJkjLhk2SE1CsHWKitupmAjNNwizCzx0SoBbKu.jpg"
                              alt="Marlot, Frédérique">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/weinheidt" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/1qALd7yv0NMNFsNytVltTzUGYP53DctoK85UQgeu.jpg"
                            src="https://animes.vision/storage/personagem/1qALd7yv0NMNFsNytVltTzUGYP53DctoK85UQgeu.jpg"
                            alt="Weinheidt">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/weinheidt">Weinheidt</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/nakanishi-hideki" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakanishi, Hideki">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/FZ0b2LG1mt9VjXARfAIntXVgKWmIc4eI4RnNuObI.jpg"
                              src="https://animes.vision/storage/pessoa/FZ0b2LG1mt9VjXARfAIntXVgKWmIc4eI4RnNuObI.jpg"
                              alt="Nakanishi, Hideki">
                          </a>
                          <a href="https://animes.vision/pessoa/hebert-kyle" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hebert, Kyle">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/VG9AbaMsJ6ifeL6WqytbSViiI5xNDnYzJNGWlwNo.jpg"
                              src="https://animes.vision/storage/pessoa/VG9AbaMsJ6ifeL6WqytbSViiI5xNDnYzJNGWlwNo.jpg"
                              alt="Hebert, Kyle">
                          </a>
                          <a href="https://animes.vision/pessoa/rey-manolo" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Rey, Manolo">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Bxn9zkIu0kb97grSdKQfnbpCDER4AJpjrPMB3Pmx.jpg"
                              src="https://animes.vision/storage/pessoa/Bxn9zkIu0kb97grSdKQfnbpCDER4AJpjrPMB3Pmx.jpg"
                              alt="Rey, Manolo">
                          </a>
                          <a href="https://animes.vision/pessoa/jordan-frank" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Jordan, Frank">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Dsw0YuxSyzrQuvdE09DBld2NCxKvc8x2dYLSwTX4.jpg"
                              src="https://animes.vision/storage/pessoa/Dsw0YuxSyzrQuvdE09DBld2NCxKvc8x2dYLSwTX4.jpg"
                              alt="Jordan, Frank">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/zaratras" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/uulZR6a6pj10aqpXpLDEEclq2r2P131mwxmHWzza.jpg"
                            src="https://animes.vision/storage/personagem/uulZR6a6pj10aqpXpLDEEclq2r2P131mwxmHWzza.jpg"
                            alt="Zaratras">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/zaratras">Zaratras</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/koyama-rikiya" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Koyama, Rikiya">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/LbgV9h5vbrimMAUoIfEsEfTs9MWtQ42PRR43UldC.jpg"
                              src="https://animes.vision/storage/pessoa/LbgV9h5vbrimMAUoIfEsEfTs9MWtQ42PRR43UldC.jpg"
                              alt="Koyama, Rikiya">
                          </a>
                          <a href="https://animes.vision/pessoa/koyama-rikiya" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Koyama, Rikiya">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/LbgV9h5vbrimMAUoIfEsEfTs9MWtQ42PRR43UldC.jpg"
                              src="https://animes.vision/storage/pessoa/LbgV9h5vbrimMAUoIfEsEfTs9MWtQ42PRR43UldC.jpg"
                              alt="Koyama, Rikiya">
                          </a>
                          <a href="https://animes.vision/pessoa/koyama-rikiya" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Koyama, Rikiya">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/LbgV9h5vbrimMAUoIfEsEfTs9MWtQ42PRR43UldC.jpg"
                              src="https://animes.vision/storage/pessoa/LbgV9h5vbrimMAUoIfEsEfTs9MWtQ42PRR43UldC.jpg"
                              alt="Koyama, Rikiya">
                          </a>
                          <a href="https://animes.vision/pessoa/lang-lex" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Lang, Lex">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/tLCjVAFDniW8TZORkOVDs2DMcgEXAEv40LLj7okX.jpg"
                              src="https://animes.vision/storage/pessoa/tLCjVAFDniW8TZORkOVDs2DMcgEXAEv40LLj7okX.jpg"
                              alt="Lang, Lex">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/zeal" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/BanEwvjL2xRPmhyu19EH9ZSwAQLOWjwSwxGsjEWB.jpg"
                            src="https://animes.vision/storage/personagem/BanEwvjL2xRPmhyu19EH9ZSwAQLOWjwSwxGsjEWB.jpg"
                            alt="Zeal">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/zeal">Zeal</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/nakajima-yui" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakajima, Yui">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Bue4uERZTwMb08nbva598QVbgJM6kQqDxWwXsNtN.jpg"
                              src="https://animes.vision/storage/pessoa/Bue4uERZTwMb08nbva598QVbgJM6kQqDxWwXsNtN.jpg"
                              alt="Nakajima, Yui">
                          </a>
                          <a href="https://animes.vision/pessoa/bienaime-nathalie" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Bienaimé, Nathalie">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/wbXLBdyfRnhCG2f2551rsuOJb0Uvun14AJ1suE04.jpg"
                              src="https://animes.vision/storage/pessoa/wbXLBdyfRnhCG2f2551rsuOJb0Uvun14AJ1suE04.jpg"
                              alt="Bienaimé, Nathalie">
                          </a>
                          <a href="https://animes.vision/pessoa/bottcher-lino" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Böttcher, Lino">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/VY6N4LLAz9svIhZqdwFoKM4whBIeiucSx50IvMkw.gif"
                              src="https://animes.vision/storage/pessoa/VY6N4LLAz9svIhZqdwFoKM4whBIeiucSx50IvMkw.gif"
                              alt="Böttcher, Lino">
                          </a>
                          <a href="https://animes.vision/pessoa/nakajima-yui" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakajima, Yui">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/Bue4uERZTwMb08nbva598QVbgJM6kQqDxWwXsNtN.jpg"
                              src="https://animes.vision/storage/pessoa/Bue4uERZTwMb08nbva598QVbgJM6kQqDxWwXsNtN.jpg"
                              alt="Nakajima, Yui">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div id="footer" data-settings="">
      <div id="footer-about">
        <div class="container">
          <div class="footer-top">
            <a href="https://animes.vision" class="footer-logo">
              <img src="https://animes.vision/v6/images/logo_vision.png" alt="Vision">
              <div class="clearfix"></div>
            </a>
            <div class="footer-joingroup">
              <div class="vision-group">
                <div class="zrg-title"><span class="top">Entre agora</span><span class="bottom">Grupos Vision</span>
                </div>
                <div class="zrg-list">
                  <div class="item">
                    <a href="https://discord.gg/Ey8YwNb" target="_blank" class="zr-social-button dc-btn"><i
                        class="fab fa-discord"></i></a>
                  </div>
                  <div class="item">
                    <a href="https://t.me/+tNl_kGqSsHgyNWVh" target="_blank" class="zr-social-button tl-btn"><i
                        class="fab fa-telegram"></i></a>
                  </div>
                  <div class="item">
                    <a href="https://www.facebook.com/animesvision.oficial" target="_blank"
                      class="zr-social-button tl-btn"><i class="fab fa-facebook-square"></i></a>
                  </div>
                  <div class="item">
                    <a href="https://www.instagram.com/animesvisionoficial/" target="_blank"
                      class="zr-social-button rd-btn"><i class="fab fa-instagram"></i></a>
                  </div>
                  <div class="item">
                    <a href="https://play.google.com/store/apps/details?id=com.anivision" target="_blank"
                      class="zr-social-button gr-btn"><i class="fab fa-android"></i></a>
                  </div>
                </div>
                <div class="clearfix"></div>
              </div>
            </div>
            <div class="clearfix"></div>
          </div>
          <div class="footer-az">
            <div class="block mb-3">
              <span class="ftaz">Lista A-Z</span><span class="size-s">Pesquise seu título pela primeira letra do
                alfabeto.</span>
            </div>
            <ul class="ulclear az-list">
              <li class=""><a href="https://animes.vision/lista-a-z">Todos</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/A">A</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/B">B</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/C">C</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/D">D</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/E">E</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/F">F</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/G">G</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/H">H</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/I">I</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/J">J</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/K">K</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/L">L</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/M">M</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/N">N</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/O">O</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/P">P</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/Q">Q</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/R">R</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/S">S</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/T">T</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/U">U</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/V">V</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/W">W</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/X">X</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/Y">Y</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/Z">Z</a></li>
            </ul>
            <div class="clearfix"></div>
          </div>
          <div class="footer-links">
            <ul class="ulclear">
              <li><a href="https://animes.vision/estatisticas" title="Estatísticas">Estatísticas</a></li>
              <li><a href="https://animes.vision/terms" title="Terms of service">Termos de Serviços</a></li>
              <li><a href="https://animes.vision/dmca" title="DMCA">DMCA</a></li>
              <li><a href="https://animes.vision/contato" title="Contato">Contato</a></li>
            </ul>
            <div class="clearfix"></div>
          </div>
          <div class="about-text">
            Todos os direitos reservados aos seus respectivos proprietários.
          </div>
          <p class="copyright">Animes.Vision, 2013 ~ 2023
          </p>
        </div>
      </div>
    </div>
  </div>
  <div id="mask-overlay"></div>
  <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script type="text/javascript" src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.bundle.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/js-cookie@rc/dist/js.cookie.min.js"></script>
  <div style="display:none;">
    <script id="_wauga9">var _wau = _wau || []; _wau.push(["small", "1bct79y7rk", "ga9"]);</script>
    <script async="" src="//waust.at/s.js"></script>
  </div>
  <script type="text/javascript" src="https://animes.vision/js/app.js"></script>
  <script type="text/javascript" src="https://animes.vision/v6/js/app.min.js"></script>
  <script type="text/javascript" src="https://animes.vision/v6/js/common.js"></script>
  <script type="text/javascript" src="https://animes.vision/v6/js/movie.js"></script>

  <script src="/vendor/livewire/livewire.js?id=21fa1dd78491a49255cd" data-turbo-eval="false"
    data-turbolinks-eval="false"></script>
  <script data-turbo-eval="false"
    data-turbolinks-eval="false">window.livewire = new Livewire(); window.Livewire = window.livewire; window.livewire_app_url = ''; window.livewire_token = 'kNp8FODuYIhU3aN0yqpqLBjJQcHggjKY8UUne7f4'; window.deferLoadingAlpine = function (callback) { window.addEventListener('livewire:load', function () { callback(); }); }; let started = false; window.addEventListener('alpine:initializing', function () { if (!started) { window.livewire.start(); started = true; } }); document.addEventListener("DOMContentLoaded", function () { if (!started) { window.livewire.start(); started = true; } });</script>
  <script>
    window.addEventListener('notificacao', event => {
      if (event.detail.tipo == 'success') {
        toastr.success(event.detail.mensagem, event.detail.titulo, {
          closeButton: true,
          progressBar: true,
          positionClass: "toast-bottom-right",
        });
      } else if (event.detail.tipo == 'error') {
        toastr.error(event.detail.mensagem, event.detail.titulo, {
          closeButton: true,
          progressBar: true,
          positionClass: "toast-bottom-right",
        });
      } else if (event.detail.tipo == 'warning') {
        toastr.warning(event.detail.mensagem, event.detail.titulo, {
          closeButton: true,
          progressBar: true,
          positionClass: "toast-bottom-right",
        });
      }
    });
  </script>
  <script id="syncData" type="application/json">
    {"page":"anime","name":"Nanatsu no Taizai - Dublado","anime_id":742,"mal_id":23755,"series_url":"https:\/\/animes.vision\/animes\/nanatsu-no-taizai-dublado","selector_position":"#mal-sync"}
</script>
  <script>
    var clickedLoadComment = false;

    $(document).ready(function () {

      // if (parseInt(userSettings.auto_play) === 1) {
      //     $('.quick-settings[data-option="auto_play"]').removeClass('off');
      // }
      // if (parseInt(userSettings.auto_next) === 1) {
      //     $('.quick-settings[data-option="auto_next"]').removeClass('off');
      // }

      $('.btn-load-comment').click(function () {
        clickedLoadComment = true;
        $(this).hide();
        loadDisqus();
      });

      var elmnt = document.getElementById("post-742");
      elmnt.scrollIntoView();
    });

    var initDisqus = false;

    function loadDisqus() {
      let url = window.location.href;
      $('.btn-load-comment').hide();
      var disqus_config = function () {
        this.page.url = url;
      };

      (function () { // DON'T EDIT BELOW THIS LINE
        var d = document, s = d.createElement('script');
        s.src = 'https://animesvision-1.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
        initDisqus = true;
      })();
    }
    // $("")[0].scrollIntoView();
    // var elmnt = document.getElementsByClassName("ss-list ssl-item ep-item active");
    // elmnt.scrollIntoView();
    // console.log($(".ssl-item ep-item active").val());
  </script>


</body>

</html>
