<html lang="pt">

<head>

  <meta name="csrf-token" content="kNp8FODuYIhU3aN0yqpqLBjJQcHggjKY8UUne7f4">
  <meta http-equiv="content-language" content="pt-br">
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <meta name="robots" content="index,follow">
  <meta http-equiv="content-language" content="pt-br">
  <meta name="hilltopads-site-verification" content="0fdfe236e6fa584b210950db3b9a44dec2370d54">
  <meta name="propeller" content="02da3e1fffbfcdc63a4336e5e3142d97">
  <meta name="a.validate.02" content="-0tTj7OiNo58w7qpGRd8I7GhXLEvjLgyJvH3">
  <title>Assistir Mahouka Koukou no Rettousei Movie: Hoshi wo Yobu Shoujo - Animes Vision - Assistir Animes Online
    Grátis HD</title>
  <meta name="description"
    content="Na história, as estações mudaram e em breve será a segunda primavera. Tatsuya e Miyuki terminaram seu primeiro ano na First Magic High School e estão nas férias de primavera. Os dois vão para sua villa no arquipélago da Ilha Ogasawara. Depois de apenas um breve momento de paz, uma jovem solitária chamada Kokoa aparece diante deles. Ela abandonou a base naval e diz a Tatsuya seu único desejo. (Fonte: ANN) animes vision">
  <meta name="keywords"
    content="acao,ficcao-cientifica,sobrenatural, Mahouka Koukou no Rettousei Movie: Hoshi wo Yobu ShoujoAnimes Vision, baixar Mahouka Koukou no Rettousei Movie: Hoshi wo Yobu Shoujo animes vision">
  <meta property="article:published_time" content="2019-05-28 14:38:06">
  <meta property="article:section" content="Filmes">
  <meta name="google-site-verification" content="WfHtIHgpKAIErWuzIFzYdVvgFnXBsjS2Q7HDfca4Xbc">
  <meta name="msvalidate.01" content="86CF0E4D516E4A44D36E8D43B35AB230">
  <meta name="pinterest" content="00ad7d282afdbbb749c81a6c5a32c0ab">
  <meta name="yandex-verification" content="264254be940fa95c">
  <meta name="robots" content="index,follow,noodp,noydir">
  <meta property="og:description"
    content="Na história, as estações mudaram e em breve será a segunda primavera. Tatsuya e Miyuki terminaram seu primeiro ano na First Magic High School e estão nas férias de primavera. Os dois vão para sua villa no arquipélago da Ilha Ogasawara. Depois de apenas um breve momento de paz, uma jovem solitária chamada Kokoa aparece diante deles. Ela abandonou a base naval e diz a Tatsuya seu único desejo. (Fonte: ANN)">
  <meta property="og:title" content="Assistir Mahouka Koukou no Rettousei Movie: Hoshi wo Yobu Shoujo">
  <meta property="og:type" content="article">
  <meta property="og:locale" content="pt-br">
  <meta property="og:url" content="https://animes.vision/filmes/mahouka-koukou-no-rettousei-movie-hoshi-wo-yobu-shoujo">
  <meta property="og:site_name" content="Animes Vision">
  <meta property="og:image" content="https://animes.vision/storage/capa/de23IQb29DH8TO5ux969be4PtnKH4sL9Iq1ixHFk.jpg">
  <meta property="article:published_time" content="2019-05-28 14:38:06">
  <meta property="article:modified_time" content="2023-10-22 16:45:55">
  <meta property="article:author" content="GonFreecss">
  <meta property="article:section" content="Filmes">
  <meta property="article:tag" content="acao,ficcao-cientifica,sobrenatural">
  <meta name="twitter:card" content="summary">
  <meta name="twitter:site" content="@animesvision">
  <script async="" src="//www.google-analytics.com/analytics.js"></script>
  <script
    type="application/ld+json">{"@context":"https:\/\/schema.org","@type":"WebPage","name":"Over 9000 Thousand!","description":"For those who helped create the Genki Dama"}</script>
  <link rel="alternate" type="application/rss+xml" title="RSS Feed" href="https://animes.vision/rss">

  <script>
    (function (i, s, o, g, r, a, m) {
      i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments)
      }, i[r].l = 1 * new Date(); a = s.createElement(o),
        m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
    })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

    ga('create', 'UA-133650552-1', 'auto');
    ga('send', 'pageview');

  </script>
  <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1">
  <meta name="apple-mobile-web-app-status-bar" content="#202125">
  <meta name="theme-color" content="#202125">
  <link rel="stylesheet" href="//stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
  <link rel="stylesheet" href="//use.fontawesome.com/releases/v5.3.1/css/all.css">
  <link rel="stylesheet" href="https://animes.vision/v6/css/styles.css">
  <link rel="canonical" href="https://animes.vision/filmes/mahouka-koukou-no-rettousei-movie-hoshi-wo-yobu-shoujo">
  <style>
    [wire\:loading],
    [wire\:loading\.delay],
    [wire\:loading\.inline-block],
    [wire\:loading\.inline],
    [wire\:loading\.block],
    [wire\:loading\.flex],
    [wire\:loading\.table],
    [wire\:loading\.grid] {
      display: none;
    }

    [wire\:loading\.delay\.shortest],
    [wire\:loading\.delay\.shorter],
    [wire\:loading\.delay\.short],
    [wire\:loading\.delay\.long],
    [wire\:loading\.delay\.longer],
    [wire\:loading\.delay\.longest] {
      display: none;
    }

    [wire\:offline] {
      display: none;
    }

    [wire\:dirty]:not(textarea):not(input):not(select) {
      display: none;
    }

    input:-webkit-autofill,
    select:-webkit-autofill,
    textarea:-webkit-autofill {
      animation-duration: 50000s;
      animation-name: livewireautofill;
    }

    @keyframes livewireautofill {
      from {}
    }
  </style>
  <script type="application/ld+json">
    {
        "@context": "https://schema.org",
        "@type": "WebSite",
        "url": "https://animes.vision/",
        "potentialAction": {
            "@type": "SearchAction",
            "target": "https://animes.vision/search?nome={nome}",
            "query-input": "required name=nome"
        }
    }
</script>
</head>

<body>
  <div id="sidebar_menu_bg"></div>
  <div id="sidebar_menu">
    <button class="btn btn-radius btn-sm btn-secondary toggle-sidebar" id="fechar-menu-sidebar">
      <i class="fas fa-angle-left mr-2"></i>Fechar menu</button>
    <div class="sb-setting">
      <div class="header-setting">
        <div class="hs-toggles">
          <div class="row mb-3">
            <div class="col-4">
              <a href="https://animes.vision/login" class="hst-item" data-toggle="tooltip"
                data-original-title="Fazer Login">
                <div class="hst-icon"><i class="fas fa-user"></i></div>
                <div class="name"><span>Fazer Login</span></div>
              </a>
            </div>
          </div>
          <div class="row">
            <div class="col-7">
              <a href="https://animes.vision/assistir-em-grupo" class="hst-item" data-toggle="tooltip" title=""
                data-original-title="Assistir em Grupo">
                <div class="hst-icon">
                  <i class="zicon zicon-20 zicon-live"></i>
                </div>
                <div class="name"><span>Assista em Grupo</span></div>
              </a>
            </div>
            <div class="col-5">
              <a href="https://animes.vision/vision-tv" class="hst-item" data-toggle="tooltip" title=""
                data-original-title="Vision TV">
                <div class="hst-icon">
                  <i class="fas fa-tv"></i>
                </div>
                <div class="name"><span>Vision TV</span></div>
              </a>
            </div>
            <div class="col-6 mt-3">
              <a href="https://animes.vision/aleatorio" class="hst-item" data-toggle="tooltip"
                data-original-title="Assistir a um anime aleatório">
                <div class="hst-icon"><i class="fas fa-random"></i></div>
                <div class="name"><span>Aleatório</span></div>
              </a>
            </div>
            <div class="col-6 mt-3">
              <a href="https://animes.vision/acesso-vip" class="hst-item" data-toggle="tooltip"
                data-original-title="Premium VIP">
                <div class="hst-icon"><i class="fas fa-crown"></i></div>
                <div class="name"><span>Premium VIP</span></div>
              </a>
            </div>
          </div>
          <div class="clearfix"></div>
        </div>
      </div>
    </div>
    <ul class="nav sidebar_menu-list">
      <li class="nav-item active"><a class="nav-link" href="/" title="Home">Home</a></li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/filmes" title="Filmes">Filmes</a></li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/animes" title="Animes TV">Animes TV</a>
      </li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/doramas" title="Doramas">Doramas</a>
      </li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/cartoons" title="Cartoons">Cartoons</a>
      </li>
      <li class="nav-item"><a class="nav-link" href="https://animes.vision/lista/live-actions" title="Live Actions">Live
          Actions</a></li>
      <li class="nav-item"><a class="nav-link" href="https://hentaisvision.biz/" target="_blank"
          title="Hentais Vision">Hentais Vision</a></li>
      <li class="nav-item">
        <div class="nav-link" title="Genre"><strong>Gêneros</strong></div>
        <div class="sidebar_menu-sub show" id="sidebar_subs_genre">
          <ul class="nav color-list sub-menu">
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=acao">Ação</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=aventura">Aventura</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=artes-marciais">Artes
                Marciais</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=comedia">Comédia</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=cotidiano">Cotidiano</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=demonios">Demônios</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=drama">Drama</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=ecchi">Ecchi</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=escolar">Escolar</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=espacial">Espacial</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=esportes">Esportes</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=fantasia">Fantasia</a>
            </li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=ficcao-cientifica">Ficção Científica</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=harem">Harém</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=hentai">Hentai</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=historico">Histórico</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=horror">Horror</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=infantil">Infantil</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=game">Game</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=josei">Josei</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=magia">Magia</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=militar">Militar</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=misterio">Mistério</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=mecha">Mecha</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=musical">Musical</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=policial">Policial</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=parodia">Paródia</a>
            </li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=psicologico">Psicológico</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=romance">Romance</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=samurai">Samurai</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=seinen">Seinen</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=sci-fi">Sci-Fi</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=shoujo">Shoujo</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=shoujo-ai">Shoujo-Ai</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=shounen">Shounen</a>
            </li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=shounen-ai">Shounen-Ai</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=slice-of-life">Slice of
                Life</a></li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=sobrenatural">Sobrenatural</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=super-poderes">Super
                Poderes</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=suspense">Suspense</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=terror">Terror</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=tragedia">Tragédia</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=thriller">Thriller</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vampiros">Vampiros</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vida-escolar">Vida
                Escolar</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=yaoi">Yaoi</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=yuri">Yuri</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=fatia-de-vida">Fatia de
                vida</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=amor-de-meninas">Amor de
                meninas</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=amor-de-meninos">Amor de
                meninos</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=gourmet">Gourmet</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=avant-garde">Avant
                Garde</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vida-de-trabalho">Vida
                de trabalho</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=erotica">Erotica</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=vanguarda">Vanguarda</a>
            </li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=garotos-amam">Garotos
                amam</a></li>
            <li class="nav-item"><a class="nav-link" href="https://animes.vision/search?generos=isekai">Isekai</a></li>
            <li class="nav-item"><a class="nav-link"
                href="https://animes.vision/search?generos=reincarnation">Reincarnation</a></li>
            <li class="nav-item nav-more">
              <a class="nav-link" href="https://animes.vision/search?generos="><i class="fas fa-plus mr-2"></i>Mais</a>
            </li>
          </ul>
          <div class="clearfix"></div>
        </div>
      </li>
    </ul>
    <div class="clearfix"></div>
  </div>
  <div id="wrapper">
    <div id="header" class="header-home">
      <div class="container">
        <div id="mobile_menu">
          <i class="fa fa-bars"></i>
        </div>
        <a href="https://animes.vision" id="logo">
          <img src="https://animes.vision/v6/images/logo_vision.png" alt="Vision">
          <div class="clearfix"></div>
        </a>
        <div id="search">
          <div class="search-content">
            <form action="/search" autocomplete="off">
              <a href="https://animes.vision/search" class="filter-icon">Filtro</a>
              <input type="text" class="form-control search-input" name="nome" placeholder="Procure por um anime...">
              <button type="submit" class="search-icon"><i class="fas fa-search"></i></button>
            </form>
            <div class="nav search-result-pop" id="search-suggest" style="display: none;">
              <div class="loading-relative" id="search-loading" style="display: none;">
                <div class="loading">
                  <div class="span1"></div>
                  <div class="span2"></div>
                  <div class="span3"></div>
                </div>
              </div>
              <div class="result" style="display:none;"></div>
            </div>
          </div>
        </div>
        <div class="header-group">
          <div class="vision-group">
            <div class="zrg-title">
              <span class="top">Entre agora</span><span class="bottom">Grupos Vision</span>
            </div>
            <div class="zrg-list">
              <div class="item">
                <a href="https://discord.gg/Ey8YwNb" target="_blank" class="zr-social-button dc-btn"><i
                    class="fab fa-discord"></i></a>
              </div>
              <div class="item">
                <a href="https://t.me/+tNl_kGqSsHgyNWVh" target="_blank" class="zr-social-button tl-btn"><i
                    class="fab fa-telegram"></i></a>
              </div>
              <div class="item">
                <a href="https://facebook.com/animesvision.oficial" target="_blank" class="zr-social-button tl-btn"><i
                    class="fab fa-facebook-square"></i></a>
              </div>
              <div class="item">
                <a href="https://instagram.com/animesvisionoficial/" target="_blank" class="zr-social-button rd-btn"><i
                    class="fab fa-instagram"></i></a>
              </div>
              <div class="item">
                <a href="https://play.google.com/store/apps/details?id=com.anivision" target="_blank"
                  class="zr-social-button gr-btn"><i class="fab fa-android"></i></a>
              </div>
            </div>
            <div class="clearfix"></div>
          </div>
        </div>
        <div class="header-setting">
          <div class="hs-toggles">
            <a href="https://animes.vision/assistir-em-grupo" class="hst-item" data-toggle="tooltip" title=""
              data-original-title="Assistir em Grupo">
              <div class="hst-icon">
                <i class="zicon zicon-20 zicon-live"></i>
              </div>
              <div class="name"><span>Assista em Grupo</span></div>
            </a>
            <a href="https://animes.vision/acesso-vip" class="hst-item" data-toggle="tooltip"
              data-original-title="Premium VIP">
              <div class="hst-icon"><i class="fas fa-crown"></i></div>
              <div class="name"><span>Premium VIP</span></div>
            </a>
            <a href="https://animes.vision/aleatorio" class="hst-item" data-toggle="tooltip"
              data-original-title="Assistir a um anime aleatório">
              <div class="hst-icon"><i class="fas fa-random"></i></div>
              <div class="name"><span>Aleatório</span></div>
            </a>
            <div class="clearfix"></div>
          </div>
        </div>
        <div id="pick_menu">
          <div class="pick_menu-ul">
            <ul class="ulclear">
              <li class="pmu-item pmu-item-home">
                <a class="pmu-item-icon" href="/home" title="Home">
                  <img src="https://animes.vision/v6/images/pick-home.svg" data-toggle="tooltip" data-placement="right"
                    title="" data-original-title="Home">
                </a>
              </li>
              <li class="pmu-item pmu-item-movies">
                <a class="pmu-item-icon" href="/movie" title="Movies">
                  <img src="https://animes.vision/v6/images/pick-movies.svg" data-toggle="tooltip"
                    data-placement="right" title="" data-original-title="Movies">
                </a>
              </li>
              <li class="pmu-item pmu-item-show">
                <a class="pmu-item-icon" href="/tv" title="TV Series">
                  <img src="https://animes.vision/v6/images/pick-show.svg" data-toggle="tooltip" data-placement="right"
                    title="" data-original-title="TV Series">
                </a>
              </li>
              <li class="pmu-item pmu-item-popular">
                <a class="pmu-item-icon" href="/most-popular" title="Most Popular">
                  <img src="https://animes.vision/v6/images/pick-popular.svg" data-toggle="tooltip"
                    data-placement="right" title="" data-original-title="Most Popular">
                </a>
              </li>
            </ul>
          </div>
        </div>
        <div id="header_right">
          <a href="https://animes.vision/register" class="btn btn-dark btn-md botao-registre mr-2">Registre-se</a>
          <a href="https://animes.vision/login" class="btn btn-primary btn-md text-white">Fazer login</a>
        </div>
        <div id="mobile_search" class=""><i class="fa fa-search"></i></div>
        <div class="clearfix"></div>
      </div>
    </div>
    <div class="clearfix"></div>
    <div>

      <div id="main-wrapper" class="layout-page layout-page-detail">

        <div id="ani_detail">
          <div class="ani_detail-stage">
            <div class="container">
              <div class="anis-cover-wrap">
                <div class="anis-cover"
                  style="background-image: url(https://animes.vision/storage/capa/de23IQb29DH8TO5ux969be4PtnKH4sL9Iq1ixHFk.jpg)">
                </div>
              </div>
              <div class="anis-content">
                <div class="anisc-poster">
                  <div class="film-poster">
                    <img src="https://animes.vision/storage/capa/de23IQb29DH8TO5ux969be4PtnKH4sL9Iq1ixHFk.jpg"
                      class="film-poster-img">
                  </div>
                </div>
                <div class="anisc-detail">
                  <div class="prebreadcrumb">
                    <nav aria-label="breadcrumb">
                      <ol class="breadcrumb">
                        <li class="breadcrumb-item"><a href="https://animes.vision">Home</a></li>
                        <li class="breadcrumb-item"><a href="https://animes.vision/filmes">Filmes</a>
                        </li>
                        <li class="breadcrumb-item dynamic-name active"
                          title="Mahouka Koukou no Rettousei Movie: Hoshi wo Yobu Shoujo">Mahouka Koukou no Rettousei
                          Movie: Hoshi wo Yobu Shoujo</li>
                      </ol>
                    </nav>
                  </div>
                  <h2 class="film-name dynamic-name" title="Mahouka Koukou no Rettousei Movie: Hoshi wo Yobu Shoujo">
                    Mahouka Koukou no Rettousei Movie: Hoshi wo Yobu Shoujo</h2>
                  <div id="mal-sync"></div>
                  <div class="film-stats">
                    <span class="item">
                      <div class="tick-item tick-pg">
                        +17
                      </div>
                    </span>
                    <span class="item">
                      <div class="tick-item tick-quality">
                        FULL HD
                      </div>
                    </span>
                    <span class="item">
                      <div class="tick-item tick-dub">
                        Legendado
                      </div>
                    </span>
                    <span class="dot"></span>
                    <span class="item">Blu-ray</span>
                    <span class="dot"></span>
                    <span class="item">Episódios 1</span>
                    <span class="dot"></span>
                    <span class="item">1 hora e 30 minutos</span>
                    <div class="clearfix"></div>
                  </div>
                  <div class="film-buttons">
                    <a href="https://animes.vision/filmes/mahouka-koukou-no-rettousei-movie-hoshi-wo-yobu-shoujo/filme-legendado/legendado"
                      class="btn btn-radius btn-primary btn-play"><i class="fas fa-play mr-2"></i>Assistir agora</a>
                    <div class="dr-fav" id="watch-list-content">
                      <div wire:id="f6LKWet4ZI12gn1027qR" class="mb-2 favoritos-detalhes">
                        <a wire:click="favoritar(0)" class="btn btn-radius btn-danger btn-effect genero-link"><i
                            class="fas fa-heart-o" aria-hidden="true"></i> Favoritar</a>
                      </div>
                    </div>
                    <div class="dr-fav" id="watch-list-content">
                      <div wire:id="UiuRBQcNXrQsK2lz7mk3" class="input-group mb-3 d-flex justify-content-center">
                        <div class="input-group-prepend" wire:loading.remove="">
                          <button type="button" class="btn btn-light butao1">Add à lista</button>
                          <button type="button" class="btn btn-light dropdown-toggle butao2" data-toggle="dropdown"
                            aria-haspopup="true" aria-expanded="false">
                            <span class="sr-only">Toggle Dropdown</span>
                          </button>
                          <div class="dropdown-menu">
                            <a class="dropdown-item" wire:click="addLista(1)">Assistindo</a>
                            <a class="dropdown-item" wire:click="addLista(2)">Pretendo assistir</a>
                            <a class="dropdown-item" wire:click="addLista(3)">Completo</a>
                            <a class="dropdown-item" wire:click="addLista(4)">Pausado</a>
                            <a class="dropdown-item" wire:click="addLista(5)">Dropado</a>
                          </div>
                        </div>
                        <div class="input-group-prepend" wire:loading="" wire:target="addLista">
                          <button type="button" class="btn btn-light butao1">Carregando...</button>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="film-description m-hide">
                    <div class="text">
                      Na história, as estações mudaram e em breve será a segunda primavera. Tatsuya e Miyuki terminaram
                      seu primeiro ano na First Magic High School e estão nas férias de primavera. Os dois vão para sua
                      villa no arquipélago da Ilha Ogasawara. Depois de apenas um breve momento de paz, uma jovem
                      solitária c...<span class="btn-more-desc more">+ Mais</span></div>
                  </div>
                </div>
                <div class="anisc-info-wrap">
                  <div class="anisc-info">
                    <div class="item item-title w-hide">
                      <span class="item-head">Sinopse:</span>
                      <div class="text">
                        Na história, as estações mudaram e em breve será a segunda primavera. Tatsuya e Miyuki
                        terminaram seu primeiro ano na First Magic High School e estão nas férias de primavera. Os dois
                        vão para sua villa no arquipélago da Ilha Ogasawara. Depois de apenas um breve momento de paz,
                        uma jovem solitária chamada Kokoa aparece diante deles. Ela abandonou a base naval e diz a
                        Tatsuya seu único desejo. (Fonte: ANN)
                      </div>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Título em Inglês:</span>
                      <span class="name">The Irregular at Magic High School The Movie - The Girl Who Summons The
                        Stars</span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Título Japonês:</span>
                      <span class="name">劇場版 魔法科高校の劣等生 星を呼ぶ少女</span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Foi ao ar em:</span>
                      <span class="name">17 de Jun de 2017</span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Temporada:</span>
                      <span class="name"></span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Duração:</span>
                      <span class="name">1 hora e 30 minutos</span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Status:</span>
                      <span class="name">Fim da exibição</span>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Fansub:</span>
                      <span class="name"><a href="https://animes.vision/search?fansub=ECN Fansub">ECN Fansub</a></span>
                    </div>
                    <div class="item item-list">
                      <span class="item-head">Gêneros:</span>
                      <a href="https://animes.vision/search?generos=acao" title="Ação">Ação</a>
                      <a href="https://animes.vision/search?generos=ficcao-cientifica" title="Ficção Científica">Ficção
                        Científica</a>
                      <a href="https://animes.vision/search?generos=sobrenatural" title="Sobrenatural">Sobrenatural</a>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Estúdios:</span>
                      <a class="name" href="https://animes.vision/search?estudios=75">8bit</a>
                    </div>
                    <div class="item item-title">
                      <span class="item-head">Produtores:</span>
                      <a class="name" href="https://animes.vision/search?produtores=4">Aniplex</a>,
                      <a class="name" href="https://animes.vision/search?produtores=33">Studio Mausu</a>,
                    </div>
                    <div class="film-text w-hide">
                      Assista <strong>Mahouka Koukou no Rettousei Movie: Hoshi wo Yobu Shoujo</strong> Legendado online
                      de graça.
                    </div>
                  </div>
                  <div class="clearfix"></div>
                </div>
                <div class="clearfix"></div>
              </div>
            </div>
          </div>
        </div>
        <div class="container">
          <div id="main-content">
            <section class="block_area block_area-actors">
              <div class="block_area-header">
                <div class="float-left bah-heading mr-4">
                  <h2 class="cat-heading">Personagens &amp; Dubladores</h2>
                </div>
                <div class="float-right viewmore">
                  <a class="btn" data-toggle="modal" data-target="#modalPersonagens">Ver mais<i
                      class="fas fa-angle-right ml-2"></i></a>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="block-actors-content">
                <div class="bac-list-wrap">
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/shiba-tatsuya" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/jrTta8a8wDTQLhUBrN9sqeAz8JM71RXoZiP7ZLiK.jpg"
                          src="https://animes.vision/storage/personagem/jrTta8a8wDTQLhUBrN9sqeAz8JM71RXoZiP7ZLiK.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/shiba-tatsuya">Shiba, Tatsuya</a>
                        </h4>
                        <span class="pi-cast">De apoio</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/nakamura-yuuichi" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/GIo2IsnzXe54NnYYlMFB1uN3DIyVc2LzABU984Fp.jpg"
                          src="https://animes.vision/storage/pessoa/GIo2IsnzXe54NnYYlMFB1uN3DIyVc2LzABU984Fp.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/nakamura-yuuichi">Nakamura,
                            Yuuichi</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/shiba-miyuki" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/Wh9kkv89LpU9RFd0MNNDyakewNS0slWhWIrK5V7P.jpg"
                          src="https://animes.vision/storage/personagem/Wh9kkv89LpU9RFd0MNNDyakewNS0slWhWIrK5V7P.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/shiba-miyuki">Shiba, Miyuki</a>
                        </h4>
                        <span class="pi-cast">Principal</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/hayami-saori" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/7aJ5tWpUpCMwhznTzbfLvHzeGTvo4gCTwAlowflb.jpg"
                          src="https://animes.vision/storage/pessoa/7aJ5tWpUpCMwhznTzbfLvHzeGTvo4gCTwAlowflb.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/hayami-saori">Hayami, Saori</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/canopus-benjamin" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/Q04jV6CAsqUPbYRtM4N3Vh4ypCTaHvKaEXaDLsxS.jpg"
                          src="https://animes.vision/storage/personagem/Q04jV6CAsqUPbYRtM4N3Vh4ypCTaHvKaEXaDLsxS.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/canopus-benjamin">Canopus, Benjamin</a>
                        </h4>
                        <span class="pi-cast">De apoio</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/yamanoi-jin" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/yc7DlXwod1WBDVpY3RDarUyadI9vF7W9w39VKmhZ.jpg"
                          src="https://animes.vision/storage/pessoa/yc7DlXwod1WBDVpY3RDarUyadI9vF7W9w39VKmhZ.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/yamanoi-jin">Yamanoi, Jin</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/chiba-erika" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/LBpjbtvMQ5xKpFQs2VrdVaXVAQTKZ6pbEMdBAi6G.jpg"
                          src="https://animes.vision/storage/personagem/LBpjbtvMQ5xKpFQs2VrdVaXVAQTKZ6pbEMdBAi6G.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/chiba-erika">Chiba, Erika</a>
                        </h4>
                        <span class="pi-cast">De apoio</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/uchiyama-yumi" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/O5yqEF49fCp1tETdOuPSK2cyyVNkaa5aydbB1837.jpg"
                          src="https://animes.vision/storage/pessoa/O5yqEF49fCp1tETdOuPSK2cyyVNkaa5aydbB1837.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/uchiyama-yumi">Uchiyama, Yumi</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/juumonji-katsuto" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/B6qSHDT3EeZ8Ddr8jeunmh7jbvKRIFtdSXevAzxO.jpg"
                          src="https://animes.vision/storage/personagem/B6qSHDT3EeZ8Ddr8jeunmh7jbvKRIFtdSXevAzxO.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/juumonji-katsuto">Juumonji, Katsuto</a>
                        </h4>
                        <span class="pi-cast">De apoio</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/suwabe-junichi" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/qINAZFIs4WYpXuCgOr53hNLnz6syKM2vxpYrwqxz.jpg"
                          src="https://animes.vision/storage/pessoa/qINAZFIs4WYpXuCgOr53hNLnz6syKM2vxpYrwqxz.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/suwabe-junichi">Suwabe, Junichi</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="bac-item">
                    <div class="per-info ltr">
                      <a href="https://animes.vision/personagem/kitayama-shizuku" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/personagem/1Rxd1kwNvDSd5CrCc97IAXPoFPWsdeA9H0gygp1M.jpg"
                          src="https://animes.vision/storage/personagem/1Rxd1kwNvDSd5CrCc97IAXPoFPWsdeA9H0gygp1M.jpg"
                          alt="Lagusa, Angelo" class=" ls-is-cached lazyloaded"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name">
                          <a href="https://animes.vision/personagem/kitayama-shizuku">Kitayama, Shizuku</a>
                        </h4>
                        <span class="pi-cast">De apoio</span>
                      </div>
                    </div>
                    <div class="per-info rtl">
                      <a href="https://animes.vision/pessoa/tatsumi-yuiko" class="pi-avatar">
                        <img
                          data-src="https://animes.vision/storage/pessoa/F5qXJSACZ2mOhzxQwx8JexG9kGNLeJ9NCseTLJDK.jpg"
                          src="https://animes.vision/storage/pessoa/F5qXJSACZ2mOhzxQwx8JexG9kGNLeJ9NCseTLJDK.jpg"
                          class=" lazyloaded" alt="222"></a>
                      <div class="pi-detail">
                        <h4 class="pi-name"><a href="https://animes.vision/pessoa/tatsumi-yuiko">Tatsumi, Yuiko</a>
                        </h4>
                        <span class="pi-cast">
                          japonês
                        </span>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="clearfix"></div>
                </div>
                <div class="clearfix"></div>
              </div>
            </section>
            <section class="block_area block_area-promotions">
              <div class="block_area-header">
                <div class="float-left bah-heading mr-4">
                  <h2 class="cat-heading">Episódios</h2>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="block_area-content block_area-promotions-list">
                <div class="row justify-content-center">
                  <div class="loading-relative mt-5 mb-5" wire:loading="" wire:target="paginar">
                    <div class="loading">
                      <div class="span1"></div>
                      <div class="span2"></div>
                      <div class="span3"></div>
                    </div>
                  </div>
                </div>
                <div class="screen-items">
                  <div class="item" data-title="Filme Legendado ">
                    <a class="screen-item-thumbnail"
                      href="https://animes.vision/filmes/mahouka-koukou-no-rettousei-movie-hoshi-wo-yobu-shoujo/filme-legendado/legendado">
                      <span class="icon-play"><i class="fas fa-play"></i></span>
                      <img src="https://animes.vision/storage/screenshot/mDMxaHnwBG4kSR2tsCerDbXQavk7EJbhoAKbAqIE.png"
                        alt="Filme Legendado " class="sit-img">
                    </a>
                    <div class="screen-item-info">
                      <h3 class="sii-title">Filme Legendado </h3>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                  <div class="clearfix"></div>
                </div>
                <div class="pre-pagination">
                  <nav aria-label="Page navigation">
                    <ul class="pagination mb-0">
                    </ul>
                  </nav>
                </div>
              </div>
            </section>
            <div class="clearfix"></div>
            <section class="block_area block_area-comment">
              <div class="block_area-header block_area-header-tabs">
                <div class="float-left bah-heading mr-4">
                  <h2 class="cat-heading">Comentários <small>beta</small></h2>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="tab-content">
                <div class="show-comments">
                  <div id="disqus_thread"></div>
                  <div class="text-center">
                    <button class="btn btn-sm btn-secondary sc-button btn-load-comment"><i
                        class="fas fa-comment mr-2"></i>Clique para carregar os comentários
                    </button>
                  </div>
                </div>
              </div>
            </section>
            <div class="clearfix"></div>
          </div>
          <div id="main-sidebar">
            <section wire:id="IqNNQgNjK4OHmLBzZU8o" class="block_area block_area_sidebar block_area-realtime">
              <div class="block_area-header">
                <div class="float-left bah-heading mr-4">
                  <h2 class="cat-heading">Populares</h2>
                </div>
                <div class="clearfix"></div>
              </div>
              <div class="block_area-content">
                <div class="cbox cbox-list cbox-realtime">
                  <div class="cbox-content">
                    <div class="anif-block-ul">
                      <ul class="ulclear">
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/LJZJOMMZWO9A7uTphxK863jfXgTKBgeJKZnRHgEC.jpg"
                              class="film-poster-img lazyload" alt="One Piece">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/one-piece" title="One Piece"
                                class="dynamic-name" data-jname="One Piece">One Piece</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">1090 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">24 min</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/lJYAlaX43KWP9Bq26Q4eq2hWzmwBkMxGbueb0R7k.jpg"
                              class="film-poster-img lazyload" alt="Boruto: Naruto Next Generations">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/boruto-naruto-next-generations"
                                title="Boruto: Naruto Next Generations" class="dynamic-name"
                                data-jname="Boruto: Naruto Next Generations">Boruto: Naruto Next Generations</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">293 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/TPZYbqV1picmurT2CONFMswAtR66N3Tcak8Wfbbz.jpg"
                              class="film-poster-img lazyload" alt="Naruto Shippuuden">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/naruto-shippuden"
                                title="Naruto Shippuuden" class="dynamic-name" data-jname="Naruto Shippuuden">Naruto
                                Shippuuden</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">500 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/I29J5wmoADzccoCY3flDe62AmGsVJzUMlS1t5dHu.jpg"
                              class="film-poster-img lazyload" alt="Kimetsu no Yaiba">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/kimetsu-no-yaiba"
                                title="Kimetsu no Yaiba" class="dynamic-name" data-jname="Kimetsu no Yaiba">Kimetsu no
                                Yaiba</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">BD</span>
                              <span class="dot"></span>
                              <span class="fdi-item">26 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/feVbQep8ew2okFuPtixafURlt4D6oRFZVsRNMmKU.jpg"
                              class="film-poster-img lazyload" alt="Black Clover">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/black-clover"
                                title="Black Clover" class="dynamic-name" data-jname="Black Clover">Black Clover</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">170 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/PaMxC3yCZ1PA0J5BMf1uSzv5VlhCF5E2XiSRRzIC.jpg"
                              class="film-poster-img lazyload" alt="One Punch Man 2">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/one-punch-man-2"
                                title="One Punch Man 2" class="dynamic-name" data-jname="One Punch Man 2">One Punch Man
                                2</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">BD (1-4) / TV (5-12)</span>
                              <span class="dot"></span>
                              <span class="fdi-item">18 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/GDdsfGDX8JfEDwV822hKZO6PptaI1WPEOn0Bm4JV.jpg"
                              class="film-poster-img lazyload" alt="Shingeki no Kyojin: The Final Season Part 2">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a
                                href="https://animes.vision/animes/shingeki-no-kyojin-the-final-season-part-2"
                                title="Shingeki no Kyojin: The Final Season Part 2" class="dynamic-name"
                                data-jname="Shingeki no Kyojin: The Final Season Part 2">Shingeki no Kyojin: The Final
                                Season Part 2</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">12 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 minutos por episódio</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/tZ07emovR5srz1Xt0CXzX074fF6D0iGyMnSNeT9P.jpg"
                              class="film-poster-img lazyload" alt="Boku no Hero Academia 4th Season">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/boku-no-hero-academia-4"
                                title="Boku no Hero Academia 4th Season" class="dynamic-name"
                                data-jname="Boku no Hero Academia 4th Season">Boku no Hero Academia 4th Season</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">25 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">24 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/Heva86kU0Xv9ce0wYjfhSsedS5YFcgbk6va3rnE4.jpg"
                              class="film-poster-img lazyload" alt="Shingeki no Kyojin Season 3 Part 2">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a
                                href="https://animes.vision/animes/shingeki-no-kyojin-season-3-part-2"
                                title="Shingeki no Kyojin Season 3 Part 2" class="dynamic-name"
                                data-jname="Shingeki no Kyojin Season 3 Part 2">Shingeki no Kyojin Season 3 Part 2</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">10 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">23 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                        <li>
                          <div class="film-poster">
                            <img
                              data-src="https://animes.vision/storage/capa/1Am6fBnZ1nfz6TMroQS6m49Gsj7P28gKIF6Tnv0F.jpg"
                              class="film-poster-img lazyload" alt="Tate No Yuusha No Nariagari">
                          </div>
                          <div class="film-detail">
                            <h3 class="film-name"><a href="https://animes.vision/animes/tate-no-yuusha-no-nariagari"
                                title="Tate No Yuusha No Nariagari" class="dynamic-name"
                                data-jname="Tate No Yuusha No Nariagari">Tate No Yuusha No Nariagari</a>
                            </h3>
                            <div class="fd-infor">
                              <span class="fdi-item">TV</span>
                              <span class="dot"></span>
                              <span class="fdi-item">25 eps</span>
                              <span class="dot"></span>
                              <span class="fdi-item fdi-duration">24 min por ep</span>
                            </div>
                          </div>
                          <div class="film-fav list-wl-item"><i class="fa fa-plus"></i></div>
                          <div class="clearfix"></div>
                        </li>
                      </ul>
                      <div class="clearfix"></div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                </div>
              </div>
            </section>
          </div>
          <div class="clearfix"></div>
        </div>
      </div>
      <div wire:id="anqqxmZN1oqblR0meFeI" wire:ignore.self="" class="modal fade premodal premodal-characters"
        id="modalPersonagens" tabindex="-1" role="dialog" aria-labelledby="modalcharacterstitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title text-left" id="modalcharacterstitle">Personagens &amp; Dubladores</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">×</span>
              </button>
            </div>
            <div class="modal-body">
              <div class="modal-characters">
                <div class="row justify-content-center">
                  <div class="loading-relative mt-5 mb-5" wire:loading="">
                    <div class="loading">
                      <div class="span1"></div>
                      <div class="span2"></div>
                      <div class="span3"></div>
                    </div>
                  </div>
                </div>
                <div id="characters-content" wire:loading.remove="">
                  <div class="bac-list-wrap" mb-3="" id="character-list">
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/shiba-tatsuya" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/jrTta8a8wDTQLhUBrN9sqeAz8JM71RXoZiP7ZLiK.jpg"
                            src="https://animes.vision/storage/personagem/jrTta8a8wDTQLhUBrN9sqeAz8JM71RXoZiP7ZLiK.jpg"
                            alt="Shiba, Tatsuya">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/shiba-tatsuya">Shiba, Tatsuya</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/nakamura-yuuichi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakamura, Yuuichi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/GIo2IsnzXe54NnYYlMFB1uN3DIyVc2LzABU984Fp.jpg"
                              src="https://animes.vision/storage/pessoa/GIo2IsnzXe54NnYYlMFB1uN3DIyVc2LzABU984Fp.jpg"
                              alt="Nakamura, Yuuichi">
                          </a>
                          <a href="https://animes.vision/pessoa/nakamura-yuuichi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakamura, Yuuichi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/GIo2IsnzXe54NnYYlMFB1uN3DIyVc2LzABU984Fp.jpg"
                              src="https://animes.vision/storage/pessoa/GIo2IsnzXe54NnYYlMFB1uN3DIyVc2LzABU984Fp.jpg"
                              alt="Nakamura, Yuuichi">
                          </a>
                          <a href="https://animes.vision/pessoa/stark-christian" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Stark, Christian">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/QOCdTFyAbRPEOutT5tb3FUl1ofIUGTanD9R0Bw6Z.jpg"
                              src="https://animes.vision/storage/pessoa/QOCdTFyAbRPEOutT5tb3FUl1ofIUGTanD9R0Bw6Z.jpg"
                              alt="Stark, Christian">
                          </a>
                          <a href="https://animes.vision/pessoa/nakamura-yuuichi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Nakamura, Yuuichi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/GIo2IsnzXe54NnYYlMFB1uN3DIyVc2LzABU984Fp.jpg"
                              src="https://animes.vision/storage/pessoa/GIo2IsnzXe54NnYYlMFB1uN3DIyVc2LzABU984Fp.jpg"
                              alt="Nakamura, Yuuichi">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/shiba-miyuki" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/Wh9kkv89LpU9RFd0MNNDyakewNS0slWhWIrK5V7P.jpg"
                            src="https://animes.vision/storage/personagem/Wh9kkv89LpU9RFd0MNNDyakewNS0slWhWIrK5V7P.jpg"
                            alt="Shiba, Miyuki">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/shiba-miyuki">Shiba, Miyuki</a>
                          </h4>
                          <span class="pi-cast">Principal</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/hayami-saori" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hayami, Saori">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/7aJ5tWpUpCMwhznTzbfLvHzeGTvo4gCTwAlowflb.jpg"
                              src="https://animes.vision/storage/pessoa/7aJ5tWpUpCMwhznTzbfLvHzeGTvo4gCTwAlowflb.jpg"
                              alt="Hayami, Saori">
                          </a>
                          <a href="https://animes.vision/pessoa/hayami-saori" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hayami, Saori">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/7aJ5tWpUpCMwhznTzbfLvHzeGTvo4gCTwAlowflb.jpg"
                              src="https://animes.vision/storage/pessoa/7aJ5tWpUpCMwhznTzbfLvHzeGTvo4gCTwAlowflb.jpg"
                              alt="Hayami, Saori">
                          </a>
                          <a href="https://animes.vision/pessoa/diekow-mia" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Diekow, Mia">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/d7zLcTvN2D75Vy7ejXJ6ZEwWNojAw3EeGzPq1gSm.jpg"
                              src="https://animes.vision/storage/pessoa/d7zLcTvN2D75Vy7ejXJ6ZEwWNojAw3EeGzPq1gSm.jpg"
                              alt="Diekow, Mia">
                          </a>
                          <a href="https://animes.vision/pessoa/hayami-saori" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hayami, Saori">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/7aJ5tWpUpCMwhznTzbfLvHzeGTvo4gCTwAlowflb.jpg"
                              src="https://animes.vision/storage/pessoa/7aJ5tWpUpCMwhznTzbfLvHzeGTvo4gCTwAlowflb.jpg"
                              alt="Hayami, Saori">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/canopus-benjamin" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/Q04jV6CAsqUPbYRtM4N3Vh4ypCTaHvKaEXaDLsxS.jpg"
                            src="https://animes.vision/storage/personagem/Q04jV6CAsqUPbYRtM4N3Vh4ypCTaHvKaEXaDLsxS.jpg"
                            alt="Canopus, Benjamin">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/canopus-benjamin">Canopus, Benjamin</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/yamanoi-jin" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Yamanoi, Jin">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/yc7DlXwod1WBDVpY3RDarUyadI9vF7W9w39VKmhZ.jpg"
                              src="https://animes.vision/storage/pessoa/yc7DlXwod1WBDVpY3RDarUyadI9vF7W9w39VKmhZ.jpg"
                              alt="Yamanoi, Jin">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/chiba-erika" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/LBpjbtvMQ5xKpFQs2VrdVaXVAQTKZ6pbEMdBAi6G.jpg"
                            src="https://animes.vision/storage/personagem/LBpjbtvMQ5xKpFQs2VrdVaXVAQTKZ6pbEMdBAi6G.jpg"
                            alt="Chiba, Erika">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/chiba-erika">Chiba, Erika</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/uchiyama-yumi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Uchiyama, Yumi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/O5yqEF49fCp1tETdOuPSK2cyyVNkaa5aydbB1837.jpg"
                              src="https://animes.vision/storage/pessoa/O5yqEF49fCp1tETdOuPSK2cyyVNkaa5aydbB1837.jpg"
                              alt="Uchiyama, Yumi">
                          </a>
                          <a href="https://animes.vision/pessoa/schreier-nadine" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Schreier, Nadine">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/rPVIipd2MRDwMFMt5S1U5APB0zaB8oPxVfCr8p22.jpg"
                              src="https://animes.vision/storage/pessoa/rPVIipd2MRDwMFMt5S1U5APB0zaB8oPxVfCr8p22.jpg"
                              alt="Schreier, Nadine">
                          </a>
                          <a href="https://animes.vision/pessoa/uchiyama-yumi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Uchiyama, Yumi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/O5yqEF49fCp1tETdOuPSK2cyyVNkaa5aydbB1837.jpg"
                              src="https://animes.vision/storage/pessoa/O5yqEF49fCp1tETdOuPSK2cyyVNkaa5aydbB1837.jpg"
                              alt="Uchiyama, Yumi">
                          </a>
                          <a href="https://animes.vision/pessoa/uchiyama-yumi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Uchiyama, Yumi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/O5yqEF49fCp1tETdOuPSK2cyyVNkaa5aydbB1837.jpg"
                              src="https://animes.vision/storage/pessoa/O5yqEF49fCp1tETdOuPSK2cyyVNkaa5aydbB1837.jpg"
                              alt="Uchiyama, Yumi">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/juumonji-katsuto" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/B6qSHDT3EeZ8Ddr8jeunmh7jbvKRIFtdSXevAzxO.jpg"
                            src="https://animes.vision/storage/personagem/B6qSHDT3EeZ8Ddr8jeunmh7jbvKRIFtdSXevAzxO.jpg"
                            alt="Juumonji, Katsuto">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/juumonji-katsuto">Juumonji, Katsuto</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/suwabe-junichi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Suwabe, Junichi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qINAZFIs4WYpXuCgOr53hNLnz6syKM2vxpYrwqxz.jpg"
                              src="https://animes.vision/storage/pessoa/qINAZFIs4WYpXuCgOr53hNLnz6syKM2vxpYrwqxz.jpg"
                              alt="Suwabe, Junichi">
                          </a>
                          <a href="https://animes.vision/pessoa/schmidt-tobias" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Schmidt, Tobias">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/4iMItGh736AfKjsfjGI5E40S94XaXRWMZKinbaLO.gif"
                              src="https://animes.vision/storage/pessoa/4iMItGh736AfKjsfjGI5E40S94XaXRWMZKinbaLO.gif"
                              alt="Schmidt, Tobias">
                          </a>
                          <a href="https://animes.vision/pessoa/suwabe-junichi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Suwabe, Junichi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qINAZFIs4WYpXuCgOr53hNLnz6syKM2vxpYrwqxz.jpg"
                              src="https://animes.vision/storage/pessoa/qINAZFIs4WYpXuCgOr53hNLnz6syKM2vxpYrwqxz.jpg"
                              alt="Suwabe, Junichi">
                          </a>
                          <a href="https://animes.vision/pessoa/suwabe-junichi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Suwabe, Junichi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qINAZFIs4WYpXuCgOr53hNLnz6syKM2vxpYrwqxz.jpg"
                              src="https://animes.vision/storage/pessoa/qINAZFIs4WYpXuCgOr53hNLnz6syKM2vxpYrwqxz.jpg"
                              alt="Suwabe, Junichi">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/kitayama-shizuku" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/1Rxd1kwNvDSd5CrCc97IAXPoFPWsdeA9H0gygp1M.jpg"
                            src="https://animes.vision/storage/personagem/1Rxd1kwNvDSd5CrCc97IAXPoFPWsdeA9H0gygp1M.jpg"
                            alt="Kitayama, Shizuku">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/kitayama-shizuku">Kitayama, Shizuku</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/tatsumi-yuiko" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Tatsumi, Yuiko">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/F5qXJSACZ2mOhzxQwx8JexG9kGNLeJ9NCseTLJDK.jpg"
                              src="https://animes.vision/storage/pessoa/F5qXJSACZ2mOhzxQwx8JexG9kGNLeJ9NCseTLJDK.jpg"
                              alt="Tatsumi, Yuiko">
                          </a>
                          <a href="https://animes.vision/pessoa/tatsumi-yuiko" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Tatsumi, Yuiko">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/F5qXJSACZ2mOhzxQwx8JexG9kGNLeJ9NCseTLJDK.jpg"
                              src="https://animes.vision/storage/pessoa/F5qXJSACZ2mOhzxQwx8JexG9kGNLeJ9NCseTLJDK.jpg"
                              alt="Tatsumi, Yuiko">
                          </a>
                          <a href="https://animes.vision/pessoa/meyer-jenny-maria" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Meyer, Jenny Maria">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ERNCAvbfuyVDhCaTLibvh3ZCqczI1hoeyoIaqJvf.jpg"
                              src="https://animes.vision/storage/pessoa/ERNCAvbfuyVDhCaTLibvh3ZCqczI1hoeyoIaqJvf.jpg"
                              alt="Meyer, Jenny Maria">
                          </a>
                          <a href="https://animes.vision/pessoa/tatsumi-yuiko" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Tatsumi, Yuiko">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/F5qXJSACZ2mOhzxQwx8JexG9kGNLeJ9NCseTLJDK.jpg"
                              src="https://animes.vision/storage/pessoa/F5qXJSACZ2mOhzxQwx8JexG9kGNLeJ9NCseTLJDK.jpg"
                              alt="Tatsumi, Yuiko">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/kokoa" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/9otzT5U7ckqO6nJ6DLMApqVflhIGVMG7u8iNyuYb.jpg"
                            src="https://animes.vision/storage/personagem/9otzT5U7ckqO6nJ6DLMApqVflhIGVMG7u8iNyuYb.jpg"
                            alt="Kokoa">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/kokoa">Kokoa</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/kohara-konomi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kohara, Konomi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/A3DzlP3t8QaZF6fvoRzD8mugWH4pR89URmCmZK2i.jpg"
                              src="https://animes.vision/storage/pessoa/A3DzlP3t8QaZF6fvoRzD8mugWH4pR89URmCmZK2i.jpg"
                              alt="Kohara, Konomi">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/kudou-shields-angelina" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/bq7XEnweXurc2ny8JAQ7bY47QOrCttTrhuDOCMrY.jpg"
                            src="https://animes.vision/storage/personagem/bq7XEnweXurc2ny8JAQ7bY47QOrCttTrhuDOCMrY.jpg"
                            alt="Kudou Shields, Angelina">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/kudou-shields-angelina">Kudou Shields,
                              Angelina</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/hikasa-youko" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hikasa, Youko">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/5WAK8aGKU1qt8MO3rcvkIZqKHWBpuKUzw670RNri.jpg"
                              src="https://animes.vision/storage/pessoa/5WAK8aGKU1qt8MO3rcvkIZqKHWBpuKUzw670RNri.jpg"
                              alt="Hikasa, Youko">
                          </a>
                          <a href="https://animes.vision/pessoa/hikasa-youko" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hikasa, Youko">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/5WAK8aGKU1qt8MO3rcvkIZqKHWBpuKUzw670RNri.jpg"
                              src="https://animes.vision/storage/pessoa/5WAK8aGKU1qt8MO3rcvkIZqKHWBpuKUzw670RNri.jpg"
                              alt="Hikasa, Youko">
                          </a>
                          <a href="https://animes.vision/pessoa/yeung-suzie" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Yeung, Suzie">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/ehNzfOEi5YSlxNKQzjXTkA6x9gkV0frkLXEYp53R.jpg"
                              src="https://animes.vision/storage/pessoa/ehNzfOEi5YSlxNKQzjXTkA6x9gkV0frkLXEYp53R.jpg"
                              alt="Yeung, Suzie">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/mitsui-honoka" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/b3z3MRbOxjIl0VGBml3y2Yb2QPYFovQoMe4Z9rrZ.jpg"
                            src="https://animes.vision/storage/personagem/b3z3MRbOxjIl0VGBml3y2Yb2QPYFovQoMe4Z9rrZ.jpg"
                            alt="Mitsui, Honoka">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/mitsui-honoka">Mitsui, Honoka</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/amamiya-sora" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Amamiya, Sora">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              alt="Amamiya, Sora">
                          </a>
                          <a href="https://animes.vision/pessoa/amamiya-sora" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Amamiya, Sora">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              alt="Amamiya, Sora">
                          </a>
                          <a href="https://animes.vision/pessoa/folster-julia" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Fölster, Julia">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/d0si5K4khXUhYhMLqVV7DOZ63ngl0eir6p4JFSs0.jpg"
                              src="https://animes.vision/storage/pessoa/d0si5K4khXUhYhMLqVV7DOZ63ngl0eir6p4JFSs0.jpg"
                              alt="Fölster, Julia">
                          </a>
                          <a href="https://animes.vision/pessoa/amamiya-sora" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Amamiya, Sora">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              src="https://animes.vision/storage/pessoa/qLGvUOX3hSDAt6EdJ2L8hGxpYR1SxbrwuTOVQdI7.jpg"
                              alt="Amamiya, Sora">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/saegusa-mayumi" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/7BgAR6P7rND942Y067cxwxlboUP8NOSm8TJ77BuW.jpg"
                            src="https://animes.vision/storage/personagem/7BgAR6P7rND942Y067cxwxlboUP8NOSm8TJ77BuW.jpg"
                            alt="Saegusa, Mayumi">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/saegusa-mayumi">Saegusa, Mayumi</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/hanazawa-kana" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hanazawa, Kana">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/bx1tRYPfhGoh3tw0grOyYBuF7EW13XaWHvLkSdju.jpg"
                              src="https://animes.vision/storage/pessoa/bx1tRYPfhGoh3tw0grOyYBuF7EW13XaWHvLkSdju.jpg"
                              alt="Hanazawa, Kana">
                          </a>
                          <a href="https://animes.vision/pessoa/schmidt-josephine" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Schmidt, Josephine">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/bUb1zN1WxSmQTNMGIKpa17IwxRzw8g6hLCrygUAO.jpg"
                              src="https://animes.vision/storage/pessoa/bUb1zN1WxSmQTNMGIKpa17IwxRzw8g6hLCrygUAO.jpg"
                              alt="Schmidt, Josephine">
                          </a>
                          <a href="https://animes.vision/pessoa/hanazawa-kana" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hanazawa, Kana">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/bx1tRYPfhGoh3tw0grOyYBuF7EW13XaWHvLkSdju.jpg"
                              src="https://animes.vision/storage/pessoa/bx1tRYPfhGoh3tw0grOyYBuF7EW13XaWHvLkSdju.jpg"
                              alt="Hanazawa, Kana">
                          </a>
                          <a href="https://animes.vision/pessoa/hanazawa-kana" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Hanazawa, Kana">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/bx1tRYPfhGoh3tw0grOyYBuF7EW13XaWHvLkSdju.jpg"
                              src="https://animes.vision/storage/pessoa/bx1tRYPfhGoh3tw0grOyYBuF7EW13XaWHvLkSdju.jpg"
                              alt="Hanazawa, Kana">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/saijou-leonhart" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/XTosEIEACRh5zsIcy67EsxaQLYKxIW9J4UKW9Xrv.jpg"
                            src="https://animes.vision/storage/personagem/XTosEIEACRh5zsIcy67EsxaQLYKxIW9J4UKW9Xrv.jpg"
                            alt="Saijou, Leonhart">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/saijou-leonhart">Saijou, Leonhart</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/terashima-takuma" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Terashima, Takuma">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/8eDYDExW4zBozvTBK6mQdvrs5mKAcrLMjuzkExbP.jpg"
                              src="https://animes.vision/storage/pessoa/8eDYDExW4zBozvTBK6mQdvrs5mKAcrLMjuzkExbP.jpg"
                              alt="Terashima, Takuma">
                          </a>
                          <a href="https://animes.vision/pessoa/grimm-jesse" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Grimm, Jesse">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/N4BhIKCegIkWmQesDCUluMfQbk6jembfW3s6PYWe.jpg"
                              src="https://animes.vision/storage/pessoa/N4BhIKCegIkWmQesDCUluMfQbk6jembfW3s6PYWe.jpg"
                              alt="Grimm, Jesse">
                          </a>
                          <a href="https://animes.vision/pessoa/terashima-takuma" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Terashima, Takuma">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/8eDYDExW4zBozvTBK6mQdvrs5mKAcrLMjuzkExbP.jpg"
                              src="https://animes.vision/storage/pessoa/8eDYDExW4zBozvTBK6mQdvrs5mKAcrLMjuzkExbP.jpg"
                              alt="Terashima, Takuma">
                          </a>
                          <a href="https://animes.vision/pessoa/terashima-takuma" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Terashima, Takuma">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/8eDYDExW4zBozvTBK6mQdvrs5mKAcrLMjuzkExbP.jpg"
                              src="https://animes.vision/storage/pessoa/8eDYDExW4zBozvTBK6mQdvrs5mKAcrLMjuzkExbP.jpg"
                              alt="Terashima, Takuma">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/sakurai-honami" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/K2r7KfLGV1EHjYaf5hyUgvXZpSg8G6UgcbuV6zfe.jpg"
                            src="https://animes.vision/storage/personagem/K2r7KfLGV1EHjYaf5hyUgvXZpSg8G6UgcbuV6zfe.jpg"
                            alt="Sakurai, Honami">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/sakurai-honami">Sakurai, Honami</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/shibata-mizuki" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/KNLUajwXjPrdgPmscTJZEqIFaEEzq7XNJFE6UwH4.jpg"
                            src="https://animes.vision/storage/personagem/KNLUajwXjPrdgPmscTJZEqIFaEEzq7XNJFE6UwH4.jpg"
                            alt="Shibata, Mizuki">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/shibata-mizuki">Shibata, Mizuki</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/satou-satomi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Satou, Satomi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/UnWSI40yR9OkLJQ0lQIo1WsqA4naWRXqxCJc5JKb.jpg"
                              src="https://animes.vision/storage/pessoa/UnWSI40yR9OkLJQ0lQIo1WsqA4naWRXqxCJc5JKb.jpg"
                              alt="Satou, Satomi">
                          </a>
                          <a href="https://animes.vision/pessoa/brettschneider-merete" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Brettschneider, Merete">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/YWhQCwNKm47Sd4k5BXy2Nd2cpRubjgoYGlXzwY3M.jpg"
                              src="https://animes.vision/storage/pessoa/YWhQCwNKm47Sd4k5BXy2Nd2cpRubjgoYGlXzwY3M.jpg"
                              alt="Brettschneider, Merete">
                          </a>
                          <a href="https://animes.vision/pessoa/satou-satomi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Satou, Satomi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/UnWSI40yR9OkLJQ0lQIo1WsqA4naWRXqxCJc5JKb.jpg"
                              src="https://animes.vision/storage/pessoa/UnWSI40yR9OkLJQ0lQIo1WsqA4naWRXqxCJc5JKb.jpg"
                              alt="Satou, Satomi">
                          </a>
                          <a href="https://animes.vision/pessoa/satou-satomi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Satou, Satomi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/UnWSI40yR9OkLJQ0lQIo1WsqA4naWRXqxCJc5JKb.jpg"
                              src="https://animes.vision/storage/pessoa/UnWSI40yR9OkLJQ0lQIo1WsqA4naWRXqxCJc5JKb.jpg"
                              alt="Satou, Satomi">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/watanabe-mari" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/gNapOOaOxP1si9AdkfUzacLX92s5E70FaWUw98zP.jpg"
                            src="https://animes.vision/storage/personagem/gNapOOaOxP1si9AdkfUzacLX92s5E70FaWUw98zP.jpg"
                            alt="Watanabe, Mari">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/watanabe-mari">Watanabe, Mari</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/inoue-marina" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Inoue, Marina">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/G3vogGPlhUeVxqAuTjklWws5N8eEZsYPPpButpC7.jpg"
                              src="https://animes.vision/storage/pessoa/G3vogGPlhUeVxqAuTjklWws5N8eEZsYPPpButpC7.jpg"
                              alt="Inoue, Marina">
                          </a>
                          <a href="https://animes.vision/pessoa/fontanges-celine" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Fontanges, Celine">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/dilTlIEpIledWVRZVZPtXz1q9LbY3hg5WMy7n5E8.jpg"
                              src="https://animes.vision/storage/pessoa/dilTlIEpIledWVRZVZPtXz1q9LbY3hg5WMy7n5E8.jpg"
                              alt="Fontanges, Celine">
                          </a>
                          <a href="https://animes.vision/pessoa/inoue-marina" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Inoue, Marina">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/G3vogGPlhUeVxqAuTjklWws5N8eEZsYPPpButpC7.jpg"
                              src="https://animes.vision/storage/pessoa/G3vogGPlhUeVxqAuTjklWws5N8eEZsYPPpButpC7.jpg"
                              alt="Inoue, Marina">
                          </a>
                          <a href="https://animes.vision/pessoa/inoue-marina" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Inoue, Marina">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/G3vogGPlhUeVxqAuTjklWws5N8eEZsYPPpButpC7.jpg"
                              src="https://animes.vision/storage/pessoa/G3vogGPlhUeVxqAuTjklWws5N8eEZsYPPpButpC7.jpg"
                              alt="Inoue, Marina">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="bac-item">
                      <div class="per-info ltr">
                        <a href="https://animes.vision/personagem/yoshida-mikihiko" class="pi-avatar">
                          <img class="lazyload"
                            data-src="https://animes.vision/storage/personagem/Fspap2ish0tQZprLaK677Duy2gwYJMdGYLg1vDBg.jpg"
                            src="https://animes.vision/storage/personagem/Fspap2ish0tQZprLaK677Duy2gwYJMdGYLg1vDBg.jpg"
                            alt="Yoshida, Mikihiko">
                        </a>
                        <div class="pi-detail">
                          <h4 class="pi-name">
                            <a href="https://animes.vision/personagem/yoshida-mikihiko">Yoshida, Mikihiko</a>
                          </h4>
                          <span class="pi-cast">De apoio</span>
                        </div>
                      </div>
                      <div class="per-info per-info-xx">
                        <div class="pix-list">
                          <a href="https://animes.vision/pessoa/tamaru-atsushi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Tamaru, Atsushi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/SFgZlPlGSsU12lj6JlUpzoZe9UwvLZwiejD9tFUm.jpg"
                              src="https://animes.vision/storage/pessoa/SFgZlPlGSsU12lj6JlUpzoZe9UwvLZwiejD9tFUm.jpg"
                              alt="Tamaru, Atsushi">
                          </a>
                          <a href="https://animes.vision/pessoa/kaulbarsch-tammo" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Kaulbarsch, Tammo">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/mlYJ7944UTSOyXhaF10JPmTsEpOZWeKduz68x1nZ.jpg"
                              src="https://animes.vision/storage/pessoa/mlYJ7944UTSOyXhaF10JPmTsEpOZWeKduz68x1nZ.jpg"
                              alt="Kaulbarsch, Tammo">
                          </a>
                          <a href="https://animes.vision/pessoa/tamaru-atsushi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Tamaru, Atsushi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/SFgZlPlGSsU12lj6JlUpzoZe9UwvLZwiejD9tFUm.jpg"
                              src="https://animes.vision/storage/pessoa/SFgZlPlGSsU12lj6JlUpzoZe9UwvLZwiejD9tFUm.jpg"
                              alt="Tamaru, Atsushi">
                          </a>
                          <a href="https://animes.vision/pessoa/tamaru-atsushi" data-toggle="tooltip" title=""
                            class="pi-avatar" data-original-title="Tamaru, Atsushi">
                            <img class="lazyload"
                              data-src="https://animes.vision/storage/pessoa/SFgZlPlGSsU12lj6JlUpzoZe9UwvLZwiejD9tFUm.jpg"
                              src="https://animes.vision/storage/pessoa/SFgZlPlGSsU12lj6JlUpzoZe9UwvLZwiejD9tFUm.jpg"
                              alt="Tamaru, Atsushi">
                          </a>
                        </div>
                      </div>
                      <div class="clearfix"></div>
                    </div>
                    <div class="clearfix"></div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div id="footer" data-settings="">
      <div id="footer-about">
        <div class="container">
          <div class="footer-top">
            <a href="https://animes.vision" class="footer-logo">
              <img src="https://animes.vision/v6/images/logo_vision.png" alt="Vision">
              <div class="clearfix"></div>
            </a>
            <div class="footer-joingroup">
              <div class="vision-group">
                <div class="zrg-title"><span class="top">Entre agora</span><span class="bottom">Grupos Vision</span>
                </div>
                <div class="zrg-list">
                  <div class="item">
                    <a href="https://discord.gg/Ey8YwNb" target="_blank" class="zr-social-button dc-btn"><i
                        class="fab fa-discord"></i></a>
                  </div>
                  <div class="item">
                    <a href="https://t.me/+tNl_kGqSsHgyNWVh" target="_blank" class="zr-social-button tl-btn"><i
                        class="fab fa-telegram"></i></a>
                  </div>
                  <div class="item">
                    <a href="https://www.facebook.com/animesvision.oficial" target="_blank"
                      class="zr-social-button tl-btn"><i class="fab fa-facebook-square"></i></a>
                  </div>
                  <div class="item">
                    <a href="https://www.instagram.com/animesvisionoficial/" target="_blank"
                      class="zr-social-button rd-btn"><i class="fab fa-instagram"></i></a>
                  </div>
                  <div class="item">
                    <a href="https://play.google.com/store/apps/details?id=com.anivision" target="_blank"
                      class="zr-social-button gr-btn"><i class="fab fa-android"></i></a>
                  </div>
                </div>
                <div class="clearfix"></div>
              </div>
            </div>
            <div class="clearfix"></div>
          </div>
          <div class="footer-az">
            <div class="block mb-3">
              <span class="ftaz">Lista A-Z</span><span class="size-s">Pesquise seu título pela primeira letra do
                alfabeto.</span>
            </div>
            <ul class="ulclear az-list">
              <li class=""><a href="https://animes.vision/lista-a-z">Todos</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/A">A</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/B">B</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/C">C</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/D">D</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/E">E</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/F">F</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/G">G</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/H">H</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/I">I</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/J">J</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/K">K</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/L">L</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/M">M</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/N">N</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/O">O</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/P">P</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/Q">Q</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/R">R</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/S">S</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/T">T</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/U">U</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/V">V</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/W">W</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/X">X</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/Y">Y</a></li>
              <li class=""><a href="https://animes.vision/lista-a-z/Z">Z</a></li>
            </ul>
            <div class="clearfix"></div>
          </div>
          <div class="footer-links">
            <ul class="ulclear">
              <li><a href="https://animes.vision/estatisticas" title="Estatísticas">Estatísticas</a></li>
              <li><a href="https://animes.vision/terms" title="Terms of service">Termos de Serviços</a></li>
              <li><a href="https://animes.vision/dmca" title="DMCA">DMCA</a></li>
              <li><a href="https://animes.vision/contato" title="Contato">Contato</a></li>
            </ul>
            <div class="clearfix"></div>
          </div>
          <div class="about-text">
            Todos os direitos reservados aos seus respectivos proprietários.
          </div>
          <p class="copyright">Animes.Vision, 2013 ~ 2023
          </p>
        </div>
      </div>
    </div>
  </div>
  <div id="mask-overlay"></div>
  <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script type="text/javascript" src="//maxcdn.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.bundle.min.js"></script>
  <script src="//cdn.jsdelivr.net/npm/js-cookie@rc/dist/js.cookie.min.js"></script>
  <div style="display:none;">
    <script id="_wauga9">var _wau = _wau || []; _wau.push(["small", "1bct79y7rk", "ga9"]);</script>
    <script async="" src="//waust.at/s.js"></script>
  </div>
  <script type="text/javascript" src="https://animes.vision/js/app.js"></script>
  <script type="text/javascript" src="https://animes.vision/v6/js/app.min.js"></script>
  <script type="text/javascript" src="https://animes.vision/v6/js/common.js"></script>
  <script type="text/javascript" src="https://animes.vision/v6/js/movie.js"></script>

  <script src="/vendor/livewire/livewire.js?id=21fa1dd78491a49255cd" data-turbo-eval="false"
    data-turbolinks-eval="false"></script>
  <script data-turbo-eval="false"
    data-turbolinks-eval="false">window.livewire = new Livewire(); window.Livewire = window.livewire; window.livewire_app_url = ''; window.livewire_token = 'kNp8FODuYIhU3aN0yqpqLBjJQcHggjKY8UUne7f4'; window.deferLoadingAlpine = function (callback) { window.addEventListener('livewire:load', function () { callback(); }); }; let started = false; window.addEventListener('alpine:initializing', function () { if (!started) { window.livewire.start(); started = true; } }); document.addEventListener("DOMContentLoaded", function () { if (!started) { window.livewire.start(); started = true; } });</script>
  <script>
    window.addEventListener('notificacao', event => {
      if (event.detail.tipo == 'success') {
        toastr.success(event.detail.mensagem, event.detail.titulo, {
          closeButton: true,
          progressBar: true,
          positionClass: "toast-bottom-right",
        });
      } else if (event.detail.tipo == 'error') {
        toastr.error(event.detail.mensagem, event.detail.titulo, {
          closeButton: true,
          progressBar: true,
          positionClass: "toast-bottom-right",
        });
      } else if (event.detail.tipo == 'warning') {
        toastr.warning(event.detail.mensagem, event.detail.titulo, {
          closeButton: true,
          progressBar: true,
          positionClass: "toast-bottom-right",
        });
      }
    });
  </script>
  <script id="syncData" type="application/json">
    {"page":"anime","name":"Mahouka Koukou no Rettousei Movie: Hoshi wo Yobu Shoujo","anime_id":703,"mal_id":32900,"series_url":"https:\/\/animes.vision\/filmes\/mahouka-koukou-no-rettousei-movie-hoshi-wo-yobu-shoujo","selector_position":"#mal-sync"}
</script>
  <script>
    var clickedLoadComment = false;

    $(document).ready(function () {

      // if (parseInt(userSettings.auto_play) === 1) {
      //     $('.quick-settings[data-option="auto_play"]').removeClass('off');
      // }
      // if (parseInt(userSettings.auto_next) === 1) {
      //     $('.quick-settings[data-option="auto_next"]').removeClass('off');
      // }

      $('.btn-load-comment').click(function () {
        clickedLoadComment = true;
        $(this).hide();
        loadDisqus();
      });

      var elmnt = document.getElementById("post-703");
      elmnt.scrollIntoView();
    });

    var initDisqus = false;

    function loadDisqus() {
      let url = window.location.href;
      $('.btn-load-comment').hide();
      var disqus_config = function () {
        this.page.url = url;
      };

      (function () { // DON'T EDIT BELOW THIS LINE
        var d = document, s = d.createElement('script');
        s.src = 'https://animesvision-1.disqus.com/embed.js';
        s.setAttribute('data-timestamp', +new Date());
        (d.head || d.body).appendChild(s);
        initDisqus = true;
      })();
    }
    // $("")[0].scrollIntoView();
    // var elmnt = document.getElementsByClassName("ss-list ssl-item ep-item active");
    // elmnt.scrollIntoView();
    // console.log($(".ssl-item ep-item active").val());
  </script>


</body>

</html>
