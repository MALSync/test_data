<html lang="pl-PL">

<head>
  <meta http-equiv="origin-trial"
    content="Az520Inasey3TAyqLyojQa8MnmCALSEU29yQFW8dePZ7xQTvSt73pHazLFTK5f7SyLUJSo2uKLesEtEa9aUYcgMAAACPeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZS5jb206NDQzIiwiZmVhdHVyZSI6IkRpc2FibGVUaGlyZFBhcnR5U3RvcmFnZVBhcnRpdGlvbmluZyIsImV4cGlyeSI6MTcyNTQwNzk5OSwiaXNTdWJkb21haW4iOnRydWUsImlzVGhpcmRQYXJ0eSI6dHJ1ZX0=">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, viewport-fit=cover">
  <title>Cop Craft – Anime-Odcinki.pl (A-O)</title>
  <meta name="robots" content="max-image-preview:large, max-snippet:-1, max-video-preview:-1">
  <!-- <link rel='stylesheet' id='dashicons-css' href='https://anime-odcinki.pl/wp-includes/css/dashicons.min.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='admin-bar-css' href='https://anime-odcinki.pl/wp-includes/css/admin-bar.min.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='wp-block-library-css' href='https://anime-odcinki.pl/wp-includes/css/dist/block-library/style.min.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='bp-login-form-block-css' href='https://anime-odcinki.pl/wp-content/plugins/buddypress/bp-core/css/blocks/login-form.min.css?ver=11.2.0' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='bp-member-block-css' href='https://anime-odcinki.pl/wp-content/plugins/buddypress/bp-members/css/blocks/member.min.css?ver=11.2.0' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='bp-members-block-css' href='https://anime-odcinki.pl/wp-content/plugins/buddypress/bp-members/css/blocks/members.min.css?ver=11.2.0' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='bp-dynamic-members-block-css' href='https://anime-odcinki.pl/wp-content/plugins/buddypress/bp-members/css/blocks/dynamic-members.min.css?ver=11.2.0' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='bp-latest-activities-block-css' href='https://anime-odcinki.pl/wp-content/plugins/buddypress/bp-activity/css/blocks/latest-activities.min.css?ver=11.2.0' type='text/css' media='all' /> -->
  <link rel="stylesheet" type="text/css" href="//anime-odcinki.pl/wp-content/cache/wpfc-minified/mn1ivfw8/40dnt.css"
    media="all">
  <style id="classic-theme-styles-inline-css" type="text/css">
    /*! This file is auto-generated */
    .wp-block-button__link {
      color: #fff;
      background-color: #32373c;
      border-radius: 9999px;
      box-shadow: none;
      text-decoration: none;
      padding: calc(.667em + 2px) calc(1.333em + 2px);
      font-size: 1.125em
    }

    .wp-block-file__button {
      background: #32373c;
      color: #fff;
      text-decoration: none
    }
  </style>
  <style id="global-styles-inline-css" type="text/css">
    body {
      --wp--preset--color--black: #000000;
      --wp--preset--color--cyan-bluish-gray: #abb8c3;
      --wp--preset--color--white: #ffffff;
      --wp--preset--color--pale-pink: #f78da7;
      --wp--preset--color--vivid-red: #cf2e2e;
      --wp--preset--color--luminous-vivid-orange: #ff6900;
      --wp--preset--color--luminous-vivid-amber: #fcb900;
      --wp--preset--color--light-green-cyan: #7bdcb5;
      --wp--preset--color--vivid-green-cyan: #00d084;
      --wp--preset--color--pale-cyan-blue: #8ed1fc;
      --wp--preset--color--vivid-cyan-blue: #0693e3;
      --wp--preset--color--vivid-purple: #9b51e0;
      --wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg, rgba(6, 147, 227, 1) 0%, rgb(155, 81, 224) 100%);
      --wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg, rgb(122, 220, 180) 0%, rgb(0, 208, 130) 100%);
      --wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg, rgba(252, 185, 0, 1) 0%, rgba(255, 105, 0, 1) 100%);
      --wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg, rgba(255, 105, 0, 1) 0%, rgb(207, 46, 46) 100%);
      --wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg, rgb(238, 238, 238) 0%, rgb(169, 184, 195) 100%);
      --wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg, rgb(74, 234, 220) 0%, rgb(151, 120, 209) 20%, rgb(207, 42, 186) 40%, rgb(238, 44, 130) 60%, rgb(251, 105, 98) 80%, rgb(254, 248, 76) 100%);
      --wp--preset--gradient--blush-light-purple: linear-gradient(135deg, rgb(255, 206, 236) 0%, rgb(152, 150, 240) 100%);
      --wp--preset--gradient--blush-bordeaux: linear-gradient(135deg, rgb(254, 205, 165) 0%, rgb(254, 45, 45) 50%, rgb(107, 0, 62) 100%);
      --wp--preset--gradient--luminous-dusk: linear-gradient(135deg, rgb(255, 203, 112) 0%, rgb(199, 81, 192) 50%, rgb(65, 88, 208) 100%);
      --wp--preset--gradient--pale-ocean: linear-gradient(135deg, rgb(255, 245, 203) 0%, rgb(182, 227, 212) 50%, rgb(51, 167, 181) 100%);
      --wp--preset--gradient--electric-grass: linear-gradient(135deg, rgb(202, 248, 128) 0%, rgb(113, 206, 126) 100%);
      --wp--preset--gradient--midnight: linear-gradient(135deg, rgb(2, 3, 129) 0%, rgb(40, 116, 252) 100%);
      --wp--preset--font-size--small: 13px;
      --wp--preset--font-size--medium: 20px;
      --wp--preset--font-size--large: 36px;
      --wp--preset--font-size--x-large: 42px;
      --wp--preset--spacing--20: 0.44rem;
      --wp--preset--spacing--30: 0.67rem;
      --wp--preset--spacing--40: 1rem;
      --wp--preset--spacing--50: 1.5rem;
      --wp--preset--spacing--60: 2.25rem;
      --wp--preset--spacing--70: 3.38rem;
      --wp--preset--spacing--80: 5.06rem;
      --wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);
      --wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);
      --wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);
      --wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);
      --wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);
    }

    :where(.is-layout-flex) {
      gap: 0.5em;
    }

    :where(.is-layout-grid) {
      gap: 0.5em;
    }

    body .is-layout-flow>.alignleft {
      float: left;
      margin-inline-start: 0;
      margin-inline-end: 2em;
    }

    body .is-layout-flow>.alignright {
      float: right;
      margin-inline-start: 2em;
      margin-inline-end: 0;
    }

    body .is-layout-flow>.aligncenter {
      margin-left: auto !important;
      margin-right: auto !important;
    }

    body .is-layout-constrained>.alignleft {
      float: left;
      margin-inline-start: 0;
      margin-inline-end: 2em;
    }

    body .is-layout-constrained>.alignright {
      float: right;
      margin-inline-start: 2em;
      margin-inline-end: 0;
    }

    body .is-layout-constrained>.aligncenter {
      margin-left: auto !important;
      margin-right: auto !important;
    }

    body .is-layout-constrained> :where(:not(.alignleft):not(.alignright):not(.alignfull)) {
      max-width: var(--wp--style--global--content-size);
      margin-left: auto !important;
      margin-right: auto !important;
    }

    body .is-layout-constrained>.alignwide {
      max-width: var(--wp--style--global--wide-size);
    }

    body .is-layout-flex {
      display: flex;
    }

    body .is-layout-flex {
      flex-wrap: wrap;
      align-items: center;
    }

    body .is-layout-flex>* {
      margin: 0;
    }

    body .is-layout-grid {
      display: grid;
    }

    body .is-layout-grid>* {
      margin: 0;
    }

    :where(.wp-block-columns.is-layout-flex) {
      gap: 2em;
    }

    :where(.wp-block-columns.is-layout-grid) {
      gap: 2em;
    }

    :where(.wp-block-post-template.is-layout-flex) {
      gap: 1.25em;
    }

    :where(.wp-block-post-template.is-layout-grid) {
      gap: 1.25em;
    }

    .has-black-color {
      color: var(--wp--preset--color--black) !important;
    }

    .has-cyan-bluish-gray-color {
      color: var(--wp--preset--color--cyan-bluish-gray) !important;
    }

    .has-white-color {
      color: var(--wp--preset--color--white) !important;
    }

    .has-pale-pink-color {
      color: var(--wp--preset--color--pale-pink) !important;
    }

    .has-vivid-red-color {
      color: var(--wp--preset--color--vivid-red) !important;
    }

    .has-luminous-vivid-orange-color {
      color: var(--wp--preset--color--luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-amber-color {
      color: var(--wp--preset--color--luminous-vivid-amber) !important;
    }

    .has-light-green-cyan-color {
      color: var(--wp--preset--color--light-green-cyan) !important;
    }

    .has-vivid-green-cyan-color {
      color: var(--wp--preset--color--vivid-green-cyan) !important;
    }

    .has-pale-cyan-blue-color {
      color: var(--wp--preset--color--pale-cyan-blue) !important;
    }

    .has-vivid-cyan-blue-color {
      color: var(--wp--preset--color--vivid-cyan-blue) !important;
    }

    .has-vivid-purple-color {
      color: var(--wp--preset--color--vivid-purple) !important;
    }

    .has-black-background-color {
      background-color: var(--wp--preset--color--black) !important;
    }

    .has-cyan-bluish-gray-background-color {
      background-color: var(--wp--preset--color--cyan-bluish-gray) !important;
    }

    .has-white-background-color {
      background-color: var(--wp--preset--color--white) !important;
    }

    .has-pale-pink-background-color {
      background-color: var(--wp--preset--color--pale-pink) !important;
    }

    .has-vivid-red-background-color {
      background-color: var(--wp--preset--color--vivid-red) !important;
    }

    .has-luminous-vivid-orange-background-color {
      background-color: var(--wp--preset--color--luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-amber-background-color {
      background-color: var(--wp--preset--color--luminous-vivid-amber) !important;
    }

    .has-light-green-cyan-background-color {
      background-color: var(--wp--preset--color--light-green-cyan) !important;
    }

    .has-vivid-green-cyan-background-color {
      background-color: var(--wp--preset--color--vivid-green-cyan) !important;
    }

    .has-pale-cyan-blue-background-color {
      background-color: var(--wp--preset--color--pale-cyan-blue) !important;
    }

    .has-vivid-cyan-blue-background-color {
      background-color: var(--wp--preset--color--vivid-cyan-blue) !important;
    }

    .has-vivid-purple-background-color {
      background-color: var(--wp--preset--color--vivid-purple) !important;
    }

    .has-black-border-color {
      border-color: var(--wp--preset--color--black) !important;
    }

    .has-cyan-bluish-gray-border-color {
      border-color: var(--wp--preset--color--cyan-bluish-gray) !important;
    }

    .has-white-border-color {
      border-color: var(--wp--preset--color--white) !important;
    }

    .has-pale-pink-border-color {
      border-color: var(--wp--preset--color--pale-pink) !important;
    }

    .has-vivid-red-border-color {
      border-color: var(--wp--preset--color--vivid-red) !important;
    }

    .has-luminous-vivid-orange-border-color {
      border-color: var(--wp--preset--color--luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-amber-border-color {
      border-color: var(--wp--preset--color--luminous-vivid-amber) !important;
    }

    .has-light-green-cyan-border-color {
      border-color: var(--wp--preset--color--light-green-cyan) !important;
    }

    .has-vivid-green-cyan-border-color {
      border-color: var(--wp--preset--color--vivid-green-cyan) !important;
    }

    .has-pale-cyan-blue-border-color {
      border-color: var(--wp--preset--color--pale-cyan-blue) !important;
    }

    .has-vivid-cyan-blue-border-color {
      border-color: var(--wp--preset--color--vivid-cyan-blue) !important;
    }

    .has-vivid-purple-border-color {
      border-color: var(--wp--preset--color--vivid-purple) !important;
    }

    .has-vivid-cyan-blue-to-vivid-purple-gradient-background {
      background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;
    }

    .has-light-green-cyan-to-vivid-green-cyan-gradient-background {
      background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;
    }

    .has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background {
      background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-orange-to-vivid-red-gradient-background {
      background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;
    }

    .has-very-light-gray-to-cyan-bluish-gray-gradient-background {
      background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;
    }

    .has-cool-to-warm-spectrum-gradient-background {
      background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;
    }

    .has-blush-light-purple-gradient-background {
      background: var(--wp--preset--gradient--blush-light-purple) !important;
    }

    .has-blush-bordeaux-gradient-background {
      background: var(--wp--preset--gradient--blush-bordeaux) !important;
    }

    .has-luminous-dusk-gradient-background {
      background: var(--wp--preset--gradient--luminous-dusk) !important;
    }

    .has-pale-ocean-gradient-background {
      background: var(--wp--preset--gradient--pale-ocean) !important;
    }

    .has-electric-grass-gradient-background {
      background: var(--wp--preset--gradient--electric-grass) !important;
    }

    .has-midnight-gradient-background {
      background: var(--wp--preset--gradient--midnight) !important;
    }

    .has-small-font-size {
      font-size: var(--wp--preset--font-size--small) !important;
    }

    .has-medium-font-size {
      font-size: var(--wp--preset--font-size--medium) !important;
    }

    .has-large-font-size {
      font-size: var(--wp--preset--font-size--large) !important;
    }

    .has-x-large-font-size {
      font-size: var(--wp--preset--font-size--x-large) !important;
    }

    .wp-block-navigation a:where(:not(.wp-element-button)) {
      color: inherit;
    }

    :where(.wp-block-post-template.is-layout-flex) {
      gap: 1.25em;
    }

    :where(.wp-block-post-template.is-layout-grid) {
      gap: 1.25em;
    }

    :where(.wp-block-columns.is-layout-flex) {
      gap: 2em;
    }

    :where(.wp-block-columns.is-layout-grid) {
      gap: 2em;
    }

    .wp-block-pullquote {
      font-size: 1.5em;
      line-height: 1.6;
    }
  </style>
  <!-- <link rel='stylesheet' id='bp-admin-bar-css' href='https://anime-odcinki.pl/wp-content/plugins/buddypress/bp-core/css/admin-bar.min.css?ver=11.2.0' type='text/css' media='all' /> -->
  <link rel="stylesheet" type="text/css" href="//anime-odcinki.pl/wp-content/cache/wpfc-minified/l264pll8/40dnt.css"
    media="all">
  <!-- <link rel='stylesheet' id='bp-legacy-css-css' href='https://anime-odcinki.pl/wp-content/plugins/buddypress/bp-templates/bp-legacy/css/buddypress.min.css?ver=11.2.0' type='text/css' media='screen' /> -->
  <link rel="stylesheet" type="text/css" href="//anime-odcinki.pl/wp-content/cache/wpfc-minified/m7z8b859/40dnt.css"
    media="screen">
  <!-- <link rel='stylesheet' id='cwp-style-css' href='https://anime-odcinki.pl/wp-content/plugins/comments-widget-plus/assets/css/cwp.css?ver=1.3' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='post-views-counter-frontend-css' href='https://anime-odcinki.pl/wp-content/plugins/post-views-counter/css/frontend.min.css?ver=1.3.13' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='virp-style-css' href='https://anime-odcinki.pl/wp-content/plugins/vi-random-posts-widget/css/virp-frontend.css' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='wp-pagenavi-css' href='https://anime-odcinki.pl/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='wpdreams-asl-basic-css' href='https://anime-odcinki.pl/wp-content/plugins/ajax-search-lite/css/style.basic.css?ver=4.11.4' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='wpdreams-ajaxsearchlite-css' href='https://anime-odcinki.pl/wp-content/plugins/ajax-search-lite/css/style-curvy-red.css?ver=4.11.4' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='elementor-lazyload-css' href='https://anime-odcinki.pl/wp-content/plugins/elementor/assets/css/modules/lazyload/frontend.min.css?ver=3.16.4' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='elementor-frontend-css' href='https://anime-odcinki.pl/wp-content/plugins/elementor/assets/css/frontend-lite.min.css?ver=3.16.4' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='swiper-css' href='https://anime-odcinki.pl/wp-content/plugins/elementor/assets/lib/swiper/css/swiper.min.css?ver=5.3.6' type='text/css' media='all' /> -->
  <link rel="stylesheet" type="text/css" href="//anime-odcinki.pl/wp-content/cache/wpfc-minified/ld85saqs/40dnt.css"
    media="all">
  <link rel="stylesheet" id="elementor-post-49590-css"
    href="https://anime-odcinki.pl/wp-content/uploads/elementor/css/post-49590.css?ver=1695223727" type="text/css"
    media="all">
  <!-- <link rel='stylesheet' id='elementor-pro-css' href='https://anime-odcinki.pl/wp-content/plugins/elementor-pro/assets/css/frontend-lite.min.css?ver=3.13.2' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='font-awesome-5-all-css' href='https://anime-odcinki.pl/wp-content/plugins/elementor/assets/lib/font-awesome/css/all.min.css?ver=3.16.4' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='font-awesome-4-shim-css' href='https://anime-odcinki.pl/wp-content/plugins/elementor/assets/lib/font-awesome/css/v4-shims.min.css?ver=3.16.4' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='elementor-global-css' href='https://anime-odcinki.pl/wp-content/uploads/elementor/css/global.css?ver=1695223728' type='text/css' media='all' /> -->
  <link rel="stylesheet" type="text/css" href="//anime-odcinki.pl/wp-content/cache/wpfc-minified/friehyqu/40dnt.css"
    media="all">
  <link rel="stylesheet" id="elementor-post-63334-css"
    href="https://anime-odcinki.pl/wp-content/uploads/elementor/css/post-63334.css?ver=1695512687" type="text/css"
    media="all">
  <link rel="stylesheet" id="elementor-post-63316-css"
    href="https://anime-odcinki.pl/wp-content/uploads/elementor/css/post-63316.css?ver=1695223727" type="text/css"
    media="all">
  <!-- <link rel='stylesheet' id='confirm-css-css' href='https://anime-odcinki.pl/wp-content/plugins/adult-confirmation/css/jquery-confirm.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='srpw-style-css' href='https://anime-odcinki.pl/wp-content/plugins/smart-recent-posts-widget/assets/css/srpw-frontend.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='moove_gdpr_frontend-css' href='https://anime-odcinki.pl/wp-content/plugins/gdpr-cookie-compliance/dist/styles/gdpr-main.css?ver=4.12.7' type='text/css' media='all' /> -->
  <link rel="stylesheet" type="text/css" href="//anime-odcinki.pl/wp-content/cache/wpfc-minified/2r20azge/40dnt.css"
    media="all">
  <style id="moove_gdpr_frontend-inline-css" type="text/css">
    #moove_gdpr_cookie_modal,
    #moove_gdpr_cookie_info_bar,
    .gdpr_cookie_settings_shortcode_content {
      font-family: Nunito, sans-serif
    }

    #moove_gdpr_save_popup_settings_button {
      background-color: #373737;
      color: #fff
    }

    #moove_gdpr_save_popup_settings_button:hover {
      background-color: #000
    }

    #moove_gdpr_cookie_info_bar .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content a.mgbutton,
    #moove_gdpr_cookie_info_bar .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content button.mgbutton {
      background-color: #0C4DA2
    }

    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-footer-content .moove-gdpr-button-holder a.mgbutton,
    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-footer-content .moove-gdpr-button-holder button.mgbutton,
    .gdpr_cookie_settings_shortcode_content .gdpr-shr-button.button-green {
      background-color: #0C4DA2;
      border-color: #0C4DA2
    }

    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-footer-content .moove-gdpr-button-holder a.mgbutton:hover,
    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-footer-content .moove-gdpr-button-holder button.mgbutton:hover,
    .gdpr_cookie_settings_shortcode_content .gdpr-shr-button.button-green:hover {
      background-color: #fff;
      color: #0C4DA2
    }

    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-close i,
    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-close span.gdpr-icon {
      background-color: #0C4DA2;
      border: 1px solid #0C4DA2
    }

    #moove_gdpr_cookie_info_bar span.change-settings-button.focus-g,
    #moove_gdpr_cookie_info_bar span.change-settings-button:focus,
    #moove_gdpr_cookie_info_bar button.change-settings-button.focus-g,
    #moove_gdpr_cookie_info_bar button.change-settings-button:focus {
      -webkit-box-shadow: 0 0 1px 3px #0C4DA2;
      -moz-box-shadow: 0 0 1px 3px #0C4DA2;
      box-shadow: 0 0 1px 3px #0C4DA2
    }

    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-close i:hover,
    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-close span.gdpr-icon:hover,
    #moove_gdpr_cookie_info_bar span[data-href]>u.change-settings-button {
      color: #0C4DA2
    }

    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-left-content #moove-gdpr-menu li.menu-item-selected a span.gdpr-icon,
    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-left-content #moove-gdpr-menu li.menu-item-selected button span.gdpr-icon {
      color: inherit
    }

    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-left-content #moove-gdpr-menu li a span.gdpr-icon,
    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-left-content #moove-gdpr-menu li button span.gdpr-icon {
      color: inherit
    }

    #moove_gdpr_cookie_modal .gdpr-acc-link {
      line-height: 0;
      font-size: 0;
      color: transparent;
      position: absolute
    }

    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-close:hover i,
    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-left-content #moove-gdpr-menu li a,
    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-left-content #moove-gdpr-menu li button,
    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-left-content #moove-gdpr-menu li button i,
    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-modal-left-content #moove-gdpr-menu li a i,
    #moove_gdpr_cookie_modal .moove-gdpr-modal-content .moove-gdpr-tab-main .moove-gdpr-tab-main-content a:hover,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content a.mgbutton:hover,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content button.mgbutton:hover,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content a:hover,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content button:hover,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content span.change-settings-button:hover,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content button.change-settings-button:hover,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content u.change-settings-button:hover,
    #moove_gdpr_cookie_info_bar span[data-href]>u.change-settings-button,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content a.mgbutton.focus-g,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content button.mgbutton.focus-g,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content a.focus-g,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content button.focus-g,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content a.mgbutton:focus,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content button.mgbutton:focus,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content a:focus,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content button:focus,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content span.change-settings-button.focus-g,
    span.change-settings-button:focus,
    button.change-settings-button.focus-g,
    button.change-settings-button:focus,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content u.change-settings-button.focus-g,
    #moove_gdpr_cookie_info_bar.moove-gdpr-dark-scheme .moove-gdpr-info-bar-container .moove-gdpr-info-bar-content u.change-settings-button:focus {
      color: #0C4DA2
    }

    #moove_gdpr_cookie_modal.gdpr_lightbox-hide {
      display: none
    }
  </style>
  <!-- <link rel='stylesheet' id='bootstrap-style-css' href='https://anime-odcinki.pl/wp-content/themes/animeodcinki/css/bootstrap.min.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='font-awesome-style-css' href='https://anime-odcinki.pl/wp-content/themes/animeodcinki/css/font-awesome.min.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='jquery-ui-style-css' href='https://anime-odcinki.pl/wp-content/themes/animeodcinki/css/jquery-ui.min.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='system-base-style-css' href='https://anime-odcinki.pl/wp-content/themes/animeodcinki/css/system.base.min.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='field-style-css' href='https://anime-odcinki.pl/wp-content/themes/animeodcinki/css/field.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='views-style-css' href='https://anime-odcinki.pl/wp-content/themes/animeodcinki/css/views.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='drop_down_login-style-css' href='https://anime-odcinki.pl/wp-content/themes/animeodcinki/css/drop_down_login.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='owl-carousel-style-css' href='https://anime-odcinki.pl/wp-content/themes/animeodcinki/css/owl.carousel.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='overrides-style-css' href='https://anime-odcinki.pl/wp-content/themes/animeodcinki/css/overrides.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='styles-style-css' href='https://anime-odcinki.pl/wp-content/themes/animeodcinki/css/styles.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='video-player-style-css' href='https://anime-odcinki.pl/wp-content/themes/animeodcinki/css/video-player.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='dark-ao-css' href='https://anime-odcinki.pl/wp-content/themes/animeodcinki/css/dark.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='animeodcinki-style-css' href='https://anime-odcinki.pl/wp-content/themes/animeodcinki/style.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='codepress-foundation-css' href='https://anime-odcinki.pl/wp-content/plugins/ultimate-content-views/css/foundation.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='wpucv-style-css' href='https://anime-odcinki.pl/wp-content/plugins/ultimate-content-views/css/style.css?ver=1.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='owl-carousel-css' href='https://anime-odcinki.pl/wp-content/plugins/ultimate-content-views/css/owl.carousel.min.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='owl-carousel-theme-css' href='https://anime-odcinki.pl/wp-content/plugins/ultimate-content-views/css/owl.theme.default.min.css?ver=6.3.1' type='text/css' media='all' /> -->
  <!-- <link rel='stylesheet' id='font-awesome-css' href='https://anime-odcinki.pl/wp-content/plugins/elementor/assets/lib/font-awesome/css/font-awesome.min.css?ver=4.7.0' type='text/css' media='all' /> -->
  <link rel="stylesheet" type="text/css" href="//anime-odcinki.pl/wp-content/cache/wpfc-minified/9kmfqo4q/40dnt.css"
    media="all">
  <link rel="stylesheet" id="google-fonts-1-css"
    href="https://fonts.googleapis.com/css?family=Roboto%3A100%2C100italic%2C200%2C200italic%2C300%2C300italic%2C400%2C400italic%2C500%2C500italic%2C600%2C600italic%2C700%2C700italic%2C800%2C800italic%2C900%2C900italic%7CRoboto+Slab%3A100%2C100italic%2C200%2C200italic%2C300%2C300italic%2C400%2C400italic%2C500%2C500italic%2C600%2C600italic%2C700%2C700italic%2C800%2C800italic%2C900%2C900italic&amp;display=auto&amp;subset=latin-ext&amp;ver=6.3.1"
    type="text/css" media="all">
  <script type="text/javascript" async=""
    src="https://www.gstatic.com/recaptcha/releases/pxZcVU8Dk73FyvFvdCgp2MSG/recaptcha__pl.js" crossorigin="anonymous"
    integrity="sha384-3ddTyJAEhNtdAkVQvWQg+kOdKpImQ/shcsSjjkCvfZbG1fAVAMWhi9Oy/RZvjLiT"></script>
  <script>
    "use strict";
    var wpucv_admin_url = 'https://anime-odcinki.pl/wp-admin/admin-ajax.php';
  </script>
  <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="">
  <script src="https://anime-odcinki.pl/wp-content/themes/animeodcinki/js/jquery-1.12.3.min.js?ver=1.12.3"
    id="jquery-js"></script>
  <script type="text/javascript" id="bp-confirm-js-extra">
    /* <![CDATA[ */
    var BP_Confirm = { "are_you_sure": "Czy na pewno?" };
    /* ]]> */
  </script>
  <script src="https://anime-odcinki.pl/wp-content/plugins/buddypress/bp-core/js/confirm.min.js?ver=11.2.0"
    id="bp-confirm-js"></script>
  <script src="https://anime-odcinki.pl/wp-content/plugins/buddypress/bp-core/js/widget-members.min.js?ver=11.2.0"
    id="bp-widget-members-js"></script>
  <script src="https://anime-odcinki.pl/wp-content/plugins/buddypress/bp-core/js/jquery-query.min.js?ver=11.2.0"
    id="bp-jquery-query-js"></script>
  <script src="https://anime-odcinki.pl/wp-content/plugins/buddypress/bp-core/js/vendor/jquery-cookie.min.js?ver=11.2.0"
    id="bp-jquery-cookie-js"></script>
  <script
    src="https://anime-odcinki.pl/wp-content/plugins/buddypress/bp-core/js/vendor/jquery-scroll-to.min.js?ver=11.2.0"
    id="bp-jquery-scroll-to-js"></script>
  <script type="text/javascript" id="bp-legacy-js-js-extra">
    /* <![CDATA[ */
    var BP_DTheme = { "accepted": "Zaakceptowano", "close": "Zamknij", "comments": "komentarze", "leave_group_confirm": "Czy jeste\u015b pewien, \u017ce chcesz opu\u015bci\u0107 t\u0119 grup\u0119?", "mark_as_fav": "Ulubione", "my_favs": "Moje ulubione", "rejected": "Odrzucono", "remove_fav": "\ufeffUsu\u0144 ulubione", "show_all": "Poka\u017c wszystko", "show_all_comments": "Poka\u017c wszystkie komentarze w tym w\u0105tku", "show_x_comments": "Poka\u017c wszystkie komentarze (%d)", "unsaved_changes": "W Twoim profilu s\u0105 niezapisane zmiany. Je\u015bli opu\u015bcisz t\u0119 stron\u0119 zostan\u0105 utracone.", "view": "Zobacz", "store_filter_settings": "" };
    /* ]]> */
  </script>
  <script
    src="https://anime-odcinki.pl/wp-content/plugins/buddypress/bp-templates/bp-legacy/js/buddypress.min.js?ver=11.2.0"
    id="bp-legacy-js-js"></script>
  <script src="https://anime-odcinki.pl/wp-content/plugins/elementor-pro/assets/js/page-transitions.min.js?ver=3.13.2"
    id="page-transitions-js"></script>
  <script
    src="https://anime-odcinki.pl/wp-content/plugins/elementor/assets/lib/font-awesome/js/v4-shims.min.js?ver=3.16.4"
    id="font-awesome-4-shim-js"></script>
  <script src="https://anime-odcinki.pl/wp-content/plugins/adult-confirmation//js/confirm.js?ver=6.3.1"
    id="jquery-confirm-js"></script>
  <script src="https://anime-odcinki.pl/wp-content/themes/animeodcinki/js/owl.carousel.min.js?ver=6.3.1"
    id="owl-carousel-js"></script>
  <script src="https://anime-odcinki.pl/wp-content/themes/animeodcinki/js/bootstrap.min.js?ver=6.3.1"
    id="bootstrap-js"></script>
  <script src="https://anime-odcinki.pl/wp-content/plugins/ultimate-content-views/js/js.js?ver=6.3.1"
    id="wpucv-js-js"></script>
  <link rel="https://api.w.org/" href="https://anime-odcinki.pl/wp-json/">
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://anime-odcinki.pl/xmlrpc.php?rsd">
  <meta name="generator" content="WordPress 6.3.1">
  <link rel="shortlink" href="https://anime-odcinki.pl/?p=37663">
  <link rel="alternate" type="application/json+oembed"
    href="https://anime-odcinki.pl/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fanime-odcinki.pl%2Fanime%2Fcop-craft%2F">
  <link rel="alternate" type="text/xml+oembed"
    href="https://anime-odcinki.pl/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fanime-odcinki.pl%2Fanime%2Fcop-craft%2F&amp;format=xml">
  <script type="text/javascript">var ajaxurl = 'https://anime-odcinki.pl/wp-admin/admin-ajax.php';</script>
  <title>Anime-Odcinki.pl (A-O) - Anime emitowane</title>
  <meta name="description"
    content="Oglądaj najlepsze anime online na anime-odcinki.pl. Zapewniamy tysiące odcinków z różnych serii w wysokiej jakości za darmo!">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="">
  <link rel="preload" as="style" href="//fonts.googleapis.com/css?family=Open+Sans&amp;display=swap">
  <link rel="stylesheet" href="//fonts.googleapis.com/css?family=Open+Sans&amp;display=swap" media="all">
  <meta name="generator"
    content="Elementor 3.16.4; features: e_dom_optimization, e_optimized_assets_loading, e_optimized_css_loading, e_font_icon_svg, additional_custom_breakpoints; settings: css_print_method-external, google_font-enabled, font_display-auto">
  <style type="text/css">
    .cwp-li {
      overflow: hidden;
    }

    .cwp-avatar {
      float: left;
      margin-top: .2em;
      margin-right: 1em;
    }

    .cwp-avatar.rounded .avatar {
      border-radius: 50%;
    }

    .cwp-avatar.square .avatar {
      border-radius: 0;
    }

    .cwp-comment-excerpt {
      display: block;
      color: #787878;
    }
  </style>
  <link rel="canonical" href="https://anime-odcinki.pl/anime/cop-craft/">
  <meta name="description"
    content="Brama między wymiarowa otwiera się nad zachodnim wybrzeżem Ameryki. Po drugiej stronie leży świat wróżek i potworów. Ludzie, którzy tam mieszkają, nazywają to l">
  <meta property="og:title" content="Cop Craft – Anime-Odcinki.pl (A-O)">
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://anime-odcinki.pl/wp-content/uploads/2019/07/Cop_Craft.jpg">
  <meta property="og:image:width" content="680">
  <meta property="og:image:height" content="1000">
  <meta property="og:image:alt" content="Cop_Craft">
  <meta property="og:description"
    content="Brama między wymiarowa otwiera się nad zachodnim wybrzeżem Ameryki. Po drugiej stronie leży świat wróżek i potworów. Ludzie, którzy tam mieszkają, nazywają to l">
  <meta property="og:url" content="https://anime-odcinki.pl/anime/cop-craft/">
  <meta property="og:locale" content="pl_PL">
  <meta property="og:site_name" content="Anime-Odcinki.pl (A-O)">
  <meta property="article:published_time" content="2019-07-08T20:18:01+00:00">
  <meta property="article:modified_time" content="2019-10-05T21:04:54+00:00">
  <meta property="og:updated_time" content="2019-10-05T21:04:54+00:00">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:image" content="https://anime-odcinki.pl/wp-content/uploads/2019/07/Cop_Craft.jpg">
  <!-- BEGIN recaptcha, injected by plugin wp-recaptcha-integration  -->
  <!-- END recaptcha -->
  <style type="text/css" media="print">
    #wpadminbar {
      display: none;
    }
  </style>
  <style type="text/css" media="screen">
    html {
      margin-top: 32px !important;
    }

    @media screen and (max-width: 782px) {
      html {
        margin-top: 46px !important;
      }
    }
  </style>
  <style>
    div[id*='ajaxsearchlitesettings'].searchsettings .asl_option_inner label {
      font-size: 0px !important;
      color: rgba(0, 0, 0, 0);
    }

    div[id*='ajaxsearchlitesettings'].searchsettings .asl_option_inner label:after {
      font-size: 11px !important;
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1;
    }

    .asl_w_container {
      width: 100%;
      margin: 0px 0px 0px 0px;
      min-width: 200px;
    }

    div[id*='ajaxsearchlite'].asl_m {
      width: 100%;
    }

    div[id*='ajaxsearchliteres'].wpdreams_asl_results div.resdrg span.highlighted {
      font-weight: bold;
      color: rgb(34, 34, 34);
      background-color: rgba(238, 238, 238, 1);
    }

    div[id*='ajaxsearchliteres'].wpdreams_asl_results .results img.asl_image {
      width: 70px;
      height: 70px;
      object-fit: cover;
    }

    div.asl_r .results {
      max-height: none;
    }

    .asl_m,
    .asl_m .probox {
      background-color: rgb(231, 231, 231) !important;
      background-image: none !important;
      -webkit-background-image: none !important;
      -ms-background-image: none !important;
    }

    .asl_m .probox svg {
      fill: rgb(116, 116, 116) !important;
    }

    .asl_m .probox .innericon {
      background-color: rgba(255, 255, 255, 1) !important;
      background-image: none !important;
      -webkit-background-image: none !important;
      -ms-background-image: none !important;
    }

    div.asl_m.asl_w {
      border: 1px ridge rgb(252, 252, 252) !important;
      border-radius: 0px 0px 0px 0px !important;
      box-shadow: none !important;
    }

    div.asl_m.asl_w .probox {
      border: none !important;
    }

    .asl_r.asl_w {
      background-color: rgb(255, 255, 255) !important;
      background-image: none !important;
      -webkit-background-image: none !important;
      -ms-background-image: none !important;
    }

    .asl_r.asl_w .item {
      background-color: rgb(61, 61, 61) !important;
      background-image: none !important;
      -webkit-background-image: none !important;
      -ms-background-image: none !important;
    }

    div.asl_r.asl_w {
      border: 1px dotted rgb(255, 249, 249) !important;
      border-radius: 0px 0px 0px 0px !important;
      box-shadow: none !important;
    }

    .asl_s.asl_w {
      background-color: rgb(204, 203, 238) !important;
      background-image: none !important;
      -webkit-background-image: none !important;
      -ms-background-image: none !important;
    }

    div.asl_s.asl_w {
      border: 1px none rgb(0, 0, 0) !important;
      border-radius: 0px 0px 0px 0px !important;
      box-shadow: none !important;
    }

    div.asl_r.asl_w.vertical .results .item::after {
      display: block;
      position: absolute;
      bottom: 0;
      content: '';
      height: 1px;
      width: 100%;
      background: #D8D8D8;
    }

    div.asl_r.asl_w.vertical .results .item.asl_last_item::after {
      display: none;
    }
  </style>
  <style type="text/css">
    #wpadminbar li#wp-admin-bar-wp-logo>.ab-item .ab-icon:before {
      display: none !important;
    }

    #wpadminbar #wp-toolbar li#wp-admin-bar-wp-logo>.ab-item span.ab-icon {
      background-image: url('https://anime-odcinki.pl/wp-content/uploads/2023/07/A-O_logo-white.png') !important;
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center center;
      margin: 0% !important;
      max-width: 100%;
      height: 100%;
      top: 0;
      left: 0;
    }

    #aquilaAdminbarIcon {
      background-image: url('') !important;
      background-size: 40px;
      background-repeat: no-repeat;
      background-position: center center;
    }

    #aquilaAdminbarIcon:before {
      display: none !important;
    }

    body.folded #wpadminbar li#wp-admin-bar-wp-logo>.ab-item .ab-icon:before {
      display: none !important;
    }

    body.folded #wpadminbar #wp-toolbar li#wp-admin-bar-wp-logo>.ab-item span.ab-icon {
      background-image: url('') !important;
      background-size: contain;
      background-repeat: no-repeat;
      background-position: center center;
      margin: 0% !important;
      max-width: 100%;
      height: 100%;
      top: 0;
      left: 0;
    }
  </style>
  <style type="text/css" media="screen">
    html {
      margin-top: 50px !important;
    }

    * html body {
      margin-top: 50px !important;
    }

    @media screen and (max-width: 782px) {
      html {
        margin-top: 50px !important;
      }

      * html body {
        margin-top: 50px !important;
      }
    }
  </style>
  <style type="text/css" id="wp-custom-css">
    .ufw_btn.ufw_btn_48px {
      font-size: 16px;
      width: 116px;
      height: 56px;
      line-height: 48px;
    }

    .criterion h4 {
      font-weight: 600;
      Padding: 7px 10px;
      border: 1px solid #82888c;
      border-left: none;
      border-right: none;
      margin: 0;
      font-size: 14px;
      color: #ffffff;
      background: linear-gradient(to bottom, #125211 0%, #30c356 100%);
      box-shadow: inset 0 1px 0 0 #126c1d;
    }

    .btn-default {
      background-color: none;
      background: linear-gradient(to bottom, #125211 0%, #30c356 100%);
    }

    @media (max-width: 767px) {
      .field .field-label {
        font-size: 13px;
      }

      .dark .field {
        font-size: 13px;
      }

      .spolecznoscinet {
        width: 100%;
      }
    }

    div.asl_m.asl_w {
      border-radius: 8px !important;
    }

    .elementor-63334 .elementor-element.elementor-element-5d7c66ff img {
      width: 421px;
    }

    .wpucv .wpucv-image-link-wrapper img,
    .wpucv .wpucv-image-link-wrapper:visited img,
    .wpucv .wpucv-image-link-wrapper:hover img,
    .wpucv .wpucv-image-link-wrapper:active img {
      width: 73%;
      -webkit-border-radius: 32px;
    }

    .wpucv .wpucv-list.wpucv-style01 article {
      border-top: 0px solid #fff;
      border-bottom: 0px solid #eaeaea;
      padding-top: 2px;
      padding-bottom: 2px;
    }

    .wpucv .wpucv-list article h2.wpucv-post-title a,
    .wpucv .wpucv-list article h2.wpucv-post-title a:link,
    .wpucv .wpucv-list article h2.wpucv-post-title a:visited,
    .wpucv .wpucv-list article h2.wpucv-post-title a:hover,
    .wpucv .wpucv-list article h2.wpucv-post-title a:active {
      font-size: 10px !important;
      text-align: center;
      display: -webkit-box;
      -webkit-line-clamp: 1;
      -webkit-box-orient: vertical;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .widget.comments_widget_plus ul.cwp-ul {
      color: #8358b8;
    }

    .cwp-comment-excerpt {
      color: #f5b41e;
    }

    .srpw-block li {
      list-style-type: none;
      padding: 3px 0;
      font-weight: bold;
      font-size: 15px;
    }

    div.wpforms-container-full .wpforms-form .wpforms-field-label {
      color: white;
    }

    input,
    button,
    select,
    textarea {
      color: #696969;
    }
  </style>
  <!-- Global site tag (gtag.js) - Google Analytics -->
  <script data-gdpr="" async="" src="https://www.googletagmanager.com/gtag/js?id=UA-130410294-1"></script>
  <script data-gdpr="">
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'UA-130410294-1');
  </script>
</head>

<body
  class="bp-legacy anime-template-default single single-anime postid-37663 admin-bar no-customize-support wp-custom-logo  aquila aquilaFront aquilaOpenBar aquilaShowBarDefault dark e-lazyload elementor-default elementor-kit-49590 js e--ua-blink e--ua-chrome e--ua-webkit gdpr-infobar-visible"
  data-elementor-device-mode="desktop">
  <e-page-transition preloader-type="image"
    preloader-image-url="https://anime-odcinki.pl/wp-content/uploads/2021/02/anime-speed.gif"
    class="e-page-transition--entered" exclude="^https\:\/\/anime\-odcinki\.pl\/wp\-admin\/">
    <img class="e-page-transition--preloader" src="https://anime-odcinki.pl/wp-content/uploads/2021/02/anime-speed.gif">
    <style>
      e-page-transition {
        --preloader-fade-duration: .5s;
        --preloader-delay: calc(var(--e-page-transition-animation-duration, 0s) + var(--e-preloader-delay, 0s));
        --page-transition-delay: var(--preloader-fade-duration);
        position: fixed;
        inset: 0;
        display: grid;
        place-items: center;
        z-index: 10000;
        background: #fff;
        animation-fill-mode: both;
        animation-duration: var(--e-page-transition-animation-duration)
      }

      e-page-transition[disabled] {
        display: none
      }

      e-page-transition e-preloader,
      e-page-transition .e-page-transition--preloader {
        opacity: 0
      }

      e-page-transition .e-page-transition--preloader {
        position: absolute;
        font-size: var(--e-preloader-size);
        color: var(--e-preloader-color);
        fill: var(--e-preloader-color);
        width: var(--e-preloader-width);
        max-width: var(--e-preloader-max-width);
        transform: rotate(var(--e-preloader-rotate, 0deg));
        animation-name: var(--e-preloader-animation);
        animation-duration: var(--e-preloader-animation-duration, 1000ms);
        animation-iteration-count: infinite;
        animation-timing-function: linear
      }

      e-page-transition svg.e-page-transition--preloader {
        width: var(--e-preloader-size)
      }

      .e-page-transition--entering {
        animation-name: var(--e-page-transition-entrance-animation);
        animation-delay: var(--preloader-fade-duration, 0s)
      }

      .e-page-transition--entering e-preloader,
      .e-page-transition--entering .e-page-transition--preloader {
        animation: var(--e-preloader-animation, none) var(--e-preloader-animation-duration, 0s) linear infinite, e-page-transition-fade-out var(--preloader-fade-duration) both;
        transition: none
      }

      .e-page-transition--exiting {
        animation-name: var(--e-page-transition-exit-animation)
      }

      .e-page-transition--exiting e-preloader,
      .e-page-transition--exiting .e-page-transition--preloader {
        opacity: var(--e-preloader-opacity, 1);
        transition: var(--preloader-fade-duration) all;
        transition-delay: var(--preloader-delay, 0s)
      }

      .e-page-transition--entered:not(.e-page-transition--preview) {
        display: none
      }

      .e-page-transition--preview {
        animation-fill-mode: initial
      }

      .e-page-transition--preview.e-page-transition--entered e-preloader,
      .e-page-transition--preview.e-page-transition--entered .e-page-transition--preloader {
        opacity: var(--e-preloader-opacity, 1)
      }

      @media(prefers-reduced-motion: reduce) {
        e-page-transition {
          display: none
        }
      }

      @keyframes e-page-transition-fade-in {
        from {
          opacity: 0
        }

        to {
          opacity: 1
        }
      }

      @keyframes e-page-transition-fade-in-down {
        from {
          opacity: 0;
          transform: translate3d(0, -100%, 0)
        }

        to {
          opacity: 1;
          transform: none
        }
      }

      @keyframes e-page-transition-fade-in-left {
        from {
          opacity: 0;
          transform: translate3d(-100%, 0, 0)
        }

        to {
          opacity: 1;
          transform: none
        }
      }

      @keyframes e-page-transition-fade-in-right {
        from {
          opacity: 0;
          transform: translate3d(100%, 0, 0)
        }

        to {
          opacity: 1;
          transform: none
        }
      }

      @keyframes e-page-transition-fade-in-up {
        from {
          opacity: 0;
          transform: translate3d(0, 100%, 0)
        }

        to {
          opacity: 1;
          transform: none
        }
      }

      @keyframes e-page-transition-zoom-in {
        from {
          opacity: 0;
          transform: scale3d(0.3, 0.3, 0.3)
        }

        50% {
          opacity: 1
        }
      }

      @keyframes e-page-transition-slide-in-down {
        from {
          transform: translate3d(0, -100%, 0);
          visibility: visible
        }

        to {
          transform: translate3d(0, 0, 0)
        }
      }

      @keyframes e-page-transition-slide-in-left {
        from {
          transform: translate3d(-100%, 0, 0);
          visibility: visible
        }

        to {
          transform: translate3d(0, 0, 0)
        }
      }

      @keyframes e-page-transition-slide-in-right {
        from {
          transform: translate3d(100%, 0, 0);
          visibility: visible
        }

        to {
          transform: translate3d(0, 0, 0)
        }
      }

      @keyframes e-page-transition-slide-in-up {
        from {
          transform: translate3d(0, 100%, 0);
          visibility: visible
        }

        to {
          transform: translate3d(0, 0, 0)
        }
      }

      @keyframes e-page-transition-fade-out {
        from {
          opacity: 1
        }

        to {
          opacity: 0
        }
      }

      @keyframes e-page-transition-fade-out-up {
        from {
          opacity: 1;
          transform: none
        }

        to {
          opacity: 0;
          transform: translate3d(0, -100%, 0)
        }
      }

      @keyframes e-page-transition-fade-out-left {
        from {
          opacity: 1;
          transform: none
        }

        to {
          opacity: 0;
          transform: translate3d(-100%, 0, 0)
        }
      }

      @keyframes e-page-transition-fade-out-right {
        from {
          opacity: 1;
          transform: none
        }

        to {
          opacity: 0;
          transform: translate3d(100%, 0, 0)
        }
      }

      @keyframes e-page-transition-fade-out-down {
        from {
          opacity: 1;
          transform: none
        }

        to {
          opacity: 0;
          transform: translate3d(0, 100%, 0)
        }
      }

      @keyframes e-page-transition-slide-out-up {
        from {
          transform: translate3d(0, 0, 0)
        }

        to {
          transform: translate3d(0, -100%, 0);
          visibility: visible
        }
      }

      @keyframes e-page-transition-slide-out-left {
        from {
          transform: translate3d(0, 0, 0)
        }

        to {
          transform: translate3d(-100%, 0, 0);
          visibility: visible
        }
      }

      @keyframes e-page-transition-slide-out-right {
        from {
          transform: translate3d(0, 0, 0)
        }

        to {
          transform: translate3d(100%, 0, 0);
          visibility: visible
        }
      }

      @keyframes e-page-transition-slide-out-down {
        from {
          transform: translate3d(0, 0, 0)
        }

        to {
          transform: translate3d(0, 100%, 0);
          visibility: visible
        }
      }

      @keyframes e-page-transition-zoom-out {
        from {
          opacity: 1
        }

        50% {
          opacity: 0;
          transform: scale3d(0.3, 0.3, 0.3)
        }
      }
    </style>
  </e-page-transition>
  <div data-elementor-type="header" data-elementor-id="63334"
    class="elementor elementor-63334 elementor-location-header">
    <header
      class="elementor-section elementor-top-section elementor-element elementor-element-208b8f94 elementor-section-content-middle elementor-section-height-min-height elementor-section-boxed elementor-section-height-default elementor-section-items-middle"
      data-id="208b8f94" data-element_type="section"
      data-settings="{&quot;background_background&quot;:&quot;classic&quot;}">
      <div class="elementor-container elementor-column-gap-default">
        <div class="elementor-column elementor-col-50 elementor-top-column elementor-element elementor-element-24eb3c8c"
          data-id="24eb3c8c" data-element_type="column">
          <div class="elementor-widget-wrap elementor-element-populated">
            <div
              class="elementor-element elementor-element-5d7c66ff elementor-widget__width-inherit elementor-widget elementor-widget-theme-site-logo elementor-widget-image animated fadeInUp"
              data-id="5d7c66ff" data-element_type="widget"
              data-settings="{&quot;_animation&quot;:&quot;fadeInUp&quot;}" data-widget_type="theme-site-logo.default">
              <div class="elementor-widget-container">
                <style>
                  /*! elementor - v3.16.0 - 20-09-2023 */
                  .elementor-widget-image {
                    text-align: center
                  }

                  .elementor-widget-image a {
                    display: inline-block
                  }

                  .elementor-widget-image a img[src$=".svg"] {
                    width: 48px
                  }

                  .elementor-widget-image img {
                    vertical-align: middle;
                    display: inline-block
                  }
                </style> <a href="https://anime-odcinki.pl">
                  <img width="798" height="166" src="https://anime-odcinki.pl/wp-content/uploads/2021/02/LOGO_AO.png"
                    class="attachment-full size-full wp-image-64079" alt="LOGO_AO"
                    srcset="https://anime-odcinki.pl/wp-content/uploads/2021/02/LOGO_AO.png 798w, https://anime-odcinki.pl/wp-content/uploads/2021/02/LOGO_AO-350x73.png 350w"
                    sizes="(max-width: 798px) 100vw, 798px"> </a>
              </div>
            </div>
          </div>
        </div>
        <div class="elementor-column elementor-col-50 elementor-top-column elementor-element elementor-element-1af72417"
          data-id="1af72417" data-element_type="column">
          <div class="elementor-widget-wrap elementor-element-populated">
            <div
              class="elementor-element elementor-element-a5337be elementor-widget elementor-widget-wp-widget-ajaxsearchlitewidget"
              data-id="a5337be" data-element_type="widget" data-widget_type="wp-widget-ajaxsearchlitewidget.default">
              <div class="elementor-widget-container">
                <h5> </h5>
                <div class="asl_w_container asl_w_container_1">
                  <div id="ajaxsearchlite1" data-id="1" data-instance="1" class="asl_w asl_m asl_m_1 asl_m_1_1">
                    <div class="probox">
                      <div class="prosettings" style="display:none;" data-opened="0">
                        <div class="innericon">
                          <svg version="1.1" xmlns="http://www.w3.org/2000/svg"
                            xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="22" height="22"
                            viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve">
                            <polygon transform="rotate(90 256 256)"
                              points="142.332,104.886 197.48,50 402.5,256 197.48,462 142.332,407.113 292.727,256 ">
                            </polygon>
                          </svg>
                        </div>
                      </div>
                      <div class="proinput">
                        <form role="search" action="#" autocomplete="off" aria-label="Search form">
                          <input aria-label="Search input" type="search" class="orig" tabindex="0" name="phrase"
                            placeholder="Szukaj anime..." value="" autocomplete="off">
                          <input aria-label="Search autocomplete input" type="text" class="autocomplete" tabindex="-1"
                            name="phrase" value="" autocomplete="off" disabled="">
                          <input type="submit" value="Start search" style="width:0; height: 0; visibility: hidden;">
                        </form>
                      </div>
                      <button class="promagnifier" tabindex="0" aria-label="Search magnifier button">
                        <span class="innericon" style="display:block;">
                          <svg version="1.1" xmlns="http://www.w3.org/2000/svg"
                            xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="22" height="22"
                            viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve">
                            <path d="M460.355,421.59L353.844,315.078c20.041-27.553,31.885-61.437,31.885-98.037
C385.729,124.934,310.793,50,218.686,50C126.58,50,51.645,124.934,51.645,217.041c0,92.106,74.936,167.041,167.041,167.041
c34.912,0,67.352-10.773,94.184-29.158L419.945,462L460.355,421.59z M100.631,217.041c0-65.096,52.959-118.056,118.055-118.056
c65.098,0,118.057,52.959,118.057,118.056c0,65.096-52.959,118.056-118.057,118.056C153.59,335.097,100.631,282.137,100.631,217.041
z"></path>
                          </svg>
                        </span>
                      </button>
                      <div class="proloading">
                        <div class="asl_loader">
                          <div class="asl_loader-inner asl_simple-circle"></div>
                        </div>
                      </div>
                      <div class="proclose">
                        <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                          x="0px" y="0px" width="12" height="12" viewBox="0 0 512 512"
                          enable-background="new 0 0 512 512" xml:space="preserve">
                          <polygon
                            points="438.393,374.595 319.757,255.977 438.378,137.348 374.595,73.607 255.995,192.225 137.375,73.622 73.607,137.352 192.246,255.983 73.622,374.625 137.352,438.393 256.002,319.734 374.652,438.378 ">
                          </polygon>
                        </svg>
                      </div>
                    </div>
                  </div>
                  <div class="asl_data_container" style="display:none !important;">
                    <div class="asl_init_data wpdreams_asl_data_ct" style="display:none !important;" id="asl_init_id_1"
                      data-asl-id="1" data-asl-instance="1"
                      data-asldata="ew0KCSJob21ldXJsIjogImh0dHBzOi8vYW5pbWUtb2RjaW5raS5wbC8iLA0KCSJyZXN1bHRzdHlwZSI6ICJ2ZXJ0aWNhbCIsDQoJInJlc3VsdHNwb3NpdGlvbiI6ICJob3ZlciIsDQoJIml0ZW1zY291bnQiOiA0LA0KCSJjaGFyY291bnQiOiAgMCwNCgkiaGlnaGxpZ2h0IjogMSwNCgkiaGlnaGxpZ2h0d2hvbGV3b3JkcyI6IDEsDQoJInNpbmdsZUhpZ2hsaWdodCI6IDAsDQoJInNjcm9sbFRvUmVzdWx0cyI6IHsNCgkJImVuYWJsZWQiOiAwLA0KCQkib2Zmc2V0IjogMA0KCX0sDQoJInJlc3VsdGFyZWFjbGlja2FibGUiOiAxLA0KCSJhdXRvY29tcGxldGUiOiB7DQoJCSJlbmFibGVkIiA6IDAsDQoJCSJsYW5nIiA6ICJlbiIsDQoJCSJ0cmlnZ2VyX2NoYXJjb3VudCIgOiAwDQoJfSwNCgkibW9iaWxlIjogew0KCQkibWVudV9zZWxlY3RvciI6ICIjbWVudS10b2dnbGUiDQoJfSwNCgkidHJpZ2dlciI6IHsNCgkJImNsaWNrIjogInJlc3VsdHNfcGFnZSIsDQoJCSJjbGlja19sb2NhdGlvbiI6ICJzYW1lIiwNCgkJInVwZGF0ZV9ocmVmIjogMCwNCgkJInJldHVybiI6ICJyZXN1bHRzX3BhZ2UiLA0KCQkicmV0dXJuX2xvY2F0aW9uIjogInNhbWUiLA0KCQkiZmFjZXQiOiAxLA0KCQkidHlwZSI6IDEsDQoJCSJyZWRpcmVjdF91cmwiOiAiP3M9e3BocmFzZX0iLA0KCQkiZGVsYXkiOiAzMDANCgl9LA0KICAgICJhbmltYXRpb25zIjogew0KICAgICAgICAicGMiOiB7DQogICAgICAgICAgICAic2V0dGluZ3MiOiB7DQogICAgICAgICAgICAgICAgImFuaW0iIDogImZhZGVkcm9wIiwNCiAgICAgICAgICAgICAgICAiZHVyIiAgOiAzMDANCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAicmVzdWx0cyIgOiB7DQoJCQkJImFuaW0iIDogImZhZGVkcm9wIiwNCgkJCQkiZHVyIiAgOiAzMDANCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICAiaXRlbXMiIDogInZvaWRhbmltIg0KICAgICAgICB9LA0KICAgICAgICAibW9iIjogew0KICAgICAgICAgICAgInNldHRpbmdzIjogew0KICAgICAgICAgICAgICAgICJhbmltIiA6ICJmYWRlZHJvcCIsDQogICAgICAgICAgICAgICAgImR1ciIgIDogMzAwDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgInJlc3VsdHMiIDogew0KCQkJCSJhbmltIiA6ICJmYWRlZHJvcCIsDQoJCQkJImR1ciIgIDogMzAwDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgIml0ZW1zIiA6ICJ2b2lkYW5pbSINCiAgICAgICAgfQ0KICAgIH0sDQoJImF1dG9wIjogew0KCQkic3RhdGUiOiAiZGlzYWJsZWQiLA0KCQkicGhyYXNlIjogIiIsDQoJCSJjb3VudCI6IDEJfSwNCiAgICAicmVzUGFnZSI6IHsNCiAgICAgICAgInVzZUFqYXgiOiAwLA0KICAgICAgICAic2VsZWN0b3IiOiAiI21haW4iLA0KICAgICAgICAidHJpZ2dlcl90eXBlIjogMSwNCiAgICAgICAgInRyaWdnZXJfZmFjZXQiOiAxLA0KICAgICAgICAidHJpZ2dlcl9tYWduaWZpZXIiOiAwLA0KICAgICAgICAidHJpZ2dlcl9yZXR1cm4iOiAwICAgIH0sDQoJInJlc3VsdHNTbmFwVG8iOiAibGVmdCIsDQogICAgInJlc3VsdHMiOiB7DQogICAgICAgICJ3aWR0aCI6ICJhdXRvIiwNCiAgICAgICAgIndpZHRoX3RhYmxldCI6ICJhdXRvIiwNCiAgICAgICAgIndpZHRoX3Bob25lIjogImF1dG8iDQogICAgfSwNCgkic2V0dGluZ3NpbWFnZXBvcyI6ICJyaWdodCIsDQoJImNsb3NlT25Eb2NDbGljayI6IDEsDQoJIm92ZXJyaWRld3BkZWZhdWx0IjogMCwNCgkib3ZlcnJpZGVfbWV0aG9kIjogImdldCINCn0NCg==">
                    </div>
                    <div id="asl_hidden_data">
                      <svg style="position:absolute" height="0" width="0">
                        <filter id="aslblur">
                          <feGaussianBlur in="SourceGraphic" stdDeviation="4"></feGaussianBlur>
                        </filter>
                      </svg>
                      <svg style="position:absolute" height="0" width="0">
                        <filter id="no_aslblur"></filter>
                      </svg>
                    </div>
                  </div>
                  <div id="ajaxsearchliteres1" class="vertical wpdreams_asl_results asl_w asl_r asl_r_1 asl_r_1_1">
                    <div class="results">
                      <div class="resdrg">
                      </div>
                    </div>
                  </div>
                  <div id="__original__ajaxsearchlitesettings1" data-id="1"
                    class="searchsettings wpdreams_asl_settings asl_w asl_s asl_s_1">
                    <form name="options" aria-label="Search settings form" autocomplete="off">
                      <input type="hidden" name="filters_changed" style="display:none;" value="0">
                      <input type="hidden" name="filters_initial" style="display:none;" value="1">
                      <div class="asl_option_inner hiddend">
                        <input type="hidden" name="qtranslate_lang" id="qtranslate_lang1" value="0">
                      </div>
                      <fieldset class="asl_sett_scroll">
                        <legend style="display: none;">Generic selectors</legend>
                        <div class="asl_option" tabindex="0">
                          <div class="asl_option_inner">
                            <input type="checkbox" value="exact" aria-label="Exact matches only" name="asl_gen[]">
                            <div class="asl_option_checkbox"></div>
                          </div>
                          <div class="asl_option_label">
                            Exact matches only </div>
                        </div>
                        <div class="asl_option" tabindex="0">
                          <div class="asl_option_inner">
                            <input type="checkbox" value="title" aria-label="Search in title" name="asl_gen[]"
                              checked="checked">
                            <div class="asl_option_checkbox"></div>
                          </div>
                          <div class="asl_option_label">
                            Search in title </div>
                        </div>
                        <div class="asl_option" tabindex="0">
                          <div class="asl_option_inner">
                            <input type="checkbox" value="content" aria-label="Search in content" name="asl_gen[]"
                              checked="checked">
                            <div class="asl_option_checkbox"></div>
                          </div>
                          <div class="asl_option_label">
                            Search in content </div>
                        </div>
                        <div class="asl_option_inner hiddend">
                          <input type="checkbox" value="excerpt" aria-label="Search in excerpt" name="asl_gen[]"
                            checked="checked">
                          <div class="asl_option_checkbox"></div>
                        </div>
                      </fieldset>
                      <fieldset class="asl_sett_scroll">
                        <legend style="display: none;">Post Type Selectors</legend>
                        <div class="asl_option" tabindex="0">
                          <div class="asl_option_inner">
                            <input type="checkbox" value="post" aria-label="Search in posts" name="customset[]">
                            <div class="asl_option_checkbox"></div>
                          </div>
                          <div class="asl_option_label">
                            Search in posts </div>
                        </div>
                        <div class="asl_option" tabindex="0">
                          <div class="asl_option_inner">
                            <input type="checkbox" value="page" aria-label="Search in pages" name="customset[]"
                              checked="checked">
                            <div class="asl_option_checkbox"></div>
                          </div>
                          <div class="asl_option_label">
                            Search in pages </div>
                        </div>
                        <div class="asl_option_inner hiddend">
                          <input type="checkbox" value="anime" aria-label="Hidden option, ignore please"
                            name="customset[]" checked="checked">
                        </div>
                      </fieldset>
                    </form>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </header>
    <nav
      class="elementor-section elementor-top-section elementor-element elementor-element-34d7db5f elementor-section-boxed elementor-section-height-default elementor-section-height-default elementor-sticky"
      data-id="34d7db5f" data-element_type="section"
      data-settings="{&quot;background_background&quot;:&quot;classic&quot;,&quot;sticky&quot;:&quot;top&quot;,&quot;sticky_on&quot;:[&quot;desktop&quot;,&quot;tablet&quot;,&quot;mobile&quot;],&quot;sticky_offset&quot;:0,&quot;sticky_effects_offset&quot;:0}">
      <div class="elementor-container elementor-column-gap-no">
        <div
          class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-42b99da4"
          data-id="42b99da4" data-element_type="column">
          <div class="elementor-widget-wrap elementor-element-populated">
            <div
              class="elementor-element elementor-element-7515a9d9 elementor-nav-menu__align-justify elementor-nav-menu--dropdown-mobile elementor-nav-menu--stretch elementor-nav-menu__text-align-center elementor-nav-menu--toggle elementor-nav-menu--burger elementor-widget elementor-widget-nav-menu"
              data-id="7515a9d9" data-element_type="widget"
              data-settings="{&quot;full_width&quot;:&quot;stretch&quot;,&quot;layout&quot;:&quot;horizontal&quot;,&quot;submenu_icon&quot;:{&quot;value&quot;:&quot;<svg class=\&quot;e-font-icon-svg e-fas-caret-down\&quot; viewBox=\&quot;0 0 320 512\&quot; xmlns=\&quot;http:\/\/www.w3.org\/2000\/svg\&quot;><path d=\&quot;M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z\&quot;><\/path><\/svg>&quot;,&quot;library&quot;:&quot;fa-solid&quot;},&quot;toggle&quot;:&quot;burger&quot;}"
              data-widget_type="nav-menu.default">
              <div class="elementor-widget-container">
                <!-- <link rel="stylesheet" href="https://anime-odcinki.pl/wp-content/plugins/elementor-pro/assets/css/widget-nav-menu.min.css"> -->
                <link rel="stylesheet" type="text/css"
                  href="//anime-odcinki.pl/wp-content/cache/wpfc-minified/86q1zper/40dnt.css" media="all">
                <nav
                  class="elementor-nav-menu--main elementor-nav-menu__container elementor-nav-menu--layout-horizontal e--pointer-background e--animation-sweep-right">
                  <ul id="menu-1-7515a9d9" class="elementor-nav-menu" data-smartmenus-id="1696265462316289">
                    <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-57527">
                      <a href="https://anime-odcinki.pl" class="elementor-item">Strona główna</a></li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-23423"><a
                        href="https://anime-odcinki.pl/anime/" class="elementor-item">A-Z TV</a></li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-23422"><a
                        href="https://anime-odcinki.pl/filmy/" class="elementor-item">A-Z FILMY</a></li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-23421"><a
                        href="https://anime-odcinki.pl/gatunki/" class="elementor-item">Szukaj po gatunkach</a></li>
                    <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-31478"><a
                        href="https://kitsune-subs.anime-odcinki.pl" class="elementor-item">Fansubbing</a></li>
                    <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-59391"><a
                        href="https://harajuku.pl" class="elementor-item">Harajuku News</a></li>
                    <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-59579"><a
                        href="https://discord.gg/Yjca3vVsWA" class="elementor-item">Discord</a></li>
                    <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-23434"><a
                        href="/pomoc-w-utrzymaniu-strony" class="elementor-item"><b>WSPIERAJ STRONĘ</b></a></li>
                  </ul>
                </nav>
                <div class="elementor-menu-toggle" role="button" tabindex="0" aria-label="Menu Toggle"
                  aria-expanded="false" style="">
                  <svg aria-hidden="true" role="presentation"
                    class="elementor-menu-toggle__icon--open e-font-icon-svg e-eicon-menu-bar" viewBox="0 0 1000 1000"
                    xmlns="http://www.w3.org/2000/svg">
                    <path
                      d="M104 333H896C929 333 958 304 958 271S929 208 896 208H104C71 208 42 237 42 271S71 333 104 333ZM104 583H896C929 583 958 554 958 521S929 458 896 458H104C71 458 42 487 42 521S71 583 104 583ZM104 833H896C929 833 958 804 958 771S929 708 896 708H104C71 708 42 737 42 771S71 833 104 833Z">
                    </path>
                  </svg><svg aria-hidden="true" role="presentation"
                    class="elementor-menu-toggle__icon--close e-font-icon-svg e-eicon-close" viewBox="0 0 1000 1000"
                    xmlns="http://www.w3.org/2000/svg">
                    <path
                      d="M742 167L500 408 258 167C246 154 233 150 217 150 196 150 179 158 167 167 154 179 150 196 150 212 150 229 154 242 171 254L408 500 167 742C138 771 138 800 167 829 196 858 225 858 254 829L496 587 738 829C750 842 767 846 783 846 800 846 817 842 829 829 842 817 846 804 846 783 846 767 842 750 829 737L588 500 833 258C863 229 863 200 833 171 804 137 775 137 742 167Z">
                    </path>
                  </svg> <span class="elementor-screen-only">Menu</span>
                </div>
                <nav class="elementor-nav-menu--dropdown elementor-nav-menu__container" aria-hidden="true"
                  style="width: 1071px; left: 0px; top: 58px;">
                  <ul id="menu-2-7515a9d9" class="elementor-nav-menu" data-smartmenus-id="16962654623169053">
                    <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-57527">
                      <a href="https://anime-odcinki.pl" class="elementor-item" tabindex="-1">Strona główna</a></li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-23423"><a
                        href="https://anime-odcinki.pl/anime/" class="elementor-item" tabindex="-1">A-Z TV</a></li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-23422"><a
                        href="https://anime-odcinki.pl/filmy/" class="elementor-item" tabindex="-1">A-Z FILMY</a></li>
                    <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-23421"><a
                        href="https://anime-odcinki.pl/gatunki/" class="elementor-item" tabindex="-1">Szukaj po
                        gatunkach</a></li>
                    <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-31478"><a
                        href="https://kitsune-subs.anime-odcinki.pl" class="elementor-item" tabindex="-1">Fansubbing</a>
                    </li>
                    <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-59391"><a
                        href="https://harajuku.pl" class="elementor-item" tabindex="-1">Harajuku News</a></li>
                    <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-59579"><a
                        href="https://discord.gg/Yjca3vVsWA" class="elementor-item" tabindex="-1">Discord</a></li>
                    <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-23434"><a
                        href="/pomoc-w-utrzymaniu-strony" class="elementor-item" tabindex="-1"><b>WSPIERAJ
                          STRONĘ</b></a></li>
                  </ul>
                </nav>
              </div>
            </div>
          </div>
        </div>
      </div>
    </nav>
    <div
      class="elementor-section elementor-top-section elementor-element elementor-element-f1173dc elementor-section-full_width elementor-section-stretched elementor-hidden-tablet elementor-hidden-mobile elementor-section-height-default elementor-section-height-default"
      data-id="f1173dc" data-element_type="section"
      data-settings="{&quot;stretch_section&quot;:&quot;section-stretched&quot;,&quot;background_background&quot;:&quot;gradient&quot;}"
      style="width: 1071px; left: 0px;">
      <div class="elementor-container elementor-column-gap-default">
        <div class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-3bd786d"
          data-id="3bd786d" data-element_type="column">
          <div class="elementor-widget-wrap elementor-element-populated">
            <div
              class="elementor-element elementor-element-6ab637b elementor-widget__width-initial elementor-absolute elementor-hidden-tablet elementor-hidden-mobile elementor-widget elementor-widget-sidebar"
              data-id="6ab637b" data-element_type="widget" data-settings="{&quot;_position&quot;:&quot;absolute&quot;}"
              data-widget_type="sidebar.default">
              <div class="elementor-widget-container">
                <section id="block-views-anime-emitowane-block" class="block block-views clearfix">
                  <h2 class="block-title">Emitowane</h2>
                  <div class="view view-anime-emitowane view-id-anime_emitowane view-display-id-block nav">
                    <div class="view-content">
                      <div class="item-list">
                        <ul>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/ai-no-idenshi/">AI no Idenshi</a></span>
                            </div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/aishang-ta-de-liyou/">Aishang Ta de
                                  Liyou</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/aiyou-de-mishi/">Aiyou De
                                  Mishi</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/ao-no-orchestra/">Ao no
                                  Orchestra</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/ayaka/">Ayaka</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/bang-dream-its-mygo/">BanG Dream! It’s
                                  MyGO!!!!!</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/boku-to-roboko/">Boku to
                                  Roboko</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/boukensha-ni-naritai-to-miyako-ni-deteitta-musume-ga-s-rank-ni-natteta/">Boukensha
                                  ni Naritai to Miyako ni Deteitta Musume ga S-Rank ni Natteta</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/boushoku-no-berserk/">Boushoku no
                                  Berserk</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/bungou-stray-dogs-5/">Bungou Stray Dogs
                                  5</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/class-de-otoko-wa-boku-hitori/">Class de
                                  Otoko wa Boku Hitori!?</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/dark-gathering/">Dark
                                  Gathering</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/dekiru-neko-wa-kyou-mo-yuuutsu/">Dekiru
                                  Neko wa Kyou mo Yuuutsu</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/dekoboko-majo-no-oyako-jijou/">Dekoboko
                                  Majo no Oyako Jijou</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/edens-zero-2/">Edens Zero 2</a></span>
                            </div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/eiyuu-kyoushitsu/">Eiyuu
                                  Kyoushitsu</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/flcl-grunge/">FLCL: Grunge</a></span>
                            </div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/genjitsu-no-yohane-sunshine-in-the-mirror/">Genjitsu
                                  no Yohane: Sunshine in the Mirror</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/hataraku-maou-sama-2-2/">Hataraku
                                  Maou-sama!! 2</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/helck/">Helck</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/higeki-no-genkyou-to-naru-saikyou-gedou-last-boss-joou-wa-tami-no-tame-ni-tsukushimasu/">Higeki
                                  no Genkyou to Naru Saikyou Gedou Last Boss Joou wa Tami no Tame ni
                                  Tsukushimasu.</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/hirogaru-sky-precure/">Hirogaru Sky!
                                  Precure</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/horimiya-piece/">Horimiya:
                                  Piece</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/jidouhanbaiki-ni-umarekawatta-ore-wa-meikyuu-o-samayou/">Jidouhanbaiki
                                  ni Umarekawatta Ore wa Meikyuu o Samayou</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/jitsu-wa-ore-saikyou-deshita/">Jitsu wa
                                  Ore, Saikyou deshita?</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/kanojo-okarishimasu-3/">Kanojo,
                                  Okarishimasu 3</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/king-of-martial-arts/">King of Martial
                                  Arts</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/level-1-dakedo-unique-skill-de-saikyou-desu/">Level
                                  1 Dakedo Unique Skill de Saikyou Desu</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/liar-liar/">Liar Liar</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/lv1-maou-to-one-room-yuusha/">Lv1 Maou to
                                  One Room Yuusha</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/majo-wa-kekkyoku-sono-kyaku-to-the-animation/">Majo
                                  wa Kekkyoku Sono Kyaku to… The Animation</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/maou-gakuin-no-futekigousha-shijou-saikyou-no-maou-no-shiso-tensei-shite-shison-tachi-no-gakkou-e-kayou-ii/">Maou
                                  Gakuin no Futekigousha: Shijou Saikyou no Maou no Shiso, Tensei shite Shison-tachi no
                                  Gakkou e Kayou II</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/masamune-kun-no-revenge-r/">Masamune-kun
                                  no Revenge R</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/megumi-no-daigo-kyuukoku-no-orange/">Megumi no
                                  Daigo: Kyuukoku no Orange</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/mononogatari-2/">Mononogatari
                                  2</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/mushoku-tensei-ii-isekai-ittara-honki-dasu/">Mushoku
                                  Tensei II: Isekai Ittara Honki Dasu</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/nanatsu-no-maken-ga-shihai-suru/">Nanatsu
                                  no Maken ga Shihai suru</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/niehime-to-kemono-no-ou/">Niehime to
                                  Kemono no Ou</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/nierautomata-ver1-1a/">NieR:Automata
                                  Ver1.1a</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/ojou-to-banken-kun/">Ojou to
                                  Banken-kun</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/okashi-na-tensei/">Okashi na
                                  Tensei</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/op/">One Piece</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/one-piece-specjalne/">One Piece – odcinki
                                  specjalne tv</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/ooku-the-inner-chambers/">Ōoku: The Inner
                                  Chambers</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/overtake/">Overtake!</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/pokemon-2023/">Pokemon (2023)</a></span>
                            </div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/przeklete-jujutsu-2/">Przeklęte jujutsu
                                  2</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/ragna-crimson/">Ragna Crimson</a></span>
                            </div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/rurouni-kenshin-meiji-kenkaku-romantan-2023/">Rurouni
                                  Kenshin: Meiji Kenkaku Romantan (2023)</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/ryza-no-atelier-tokoyami-no-joou-to-himitsu-no-kakurega/">Ryza
                                  no Atelier: Tokoyami no Joou to Himitsu no Kakurega</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/seija-musou-salaryman-isekai-de-ikinokoru-tame-ni-ayumu-michi/">Seija
                                  Musou: Salaryman, Isekai de Ikinokoru Tame ni Ayumu Michi</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/shangri-la-frontier-kusoge-hunter-kamige-ni-idoman-to-su/">Shangri-La
                                  Frontier: Kusoge Hunter, Kamige ni Idoman to su</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/shiguang-dailiren-ii/">Shiguang Dailiren
                                  II</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/shingeki-no-kyojin-the-final-season-2023/">Shingeki
                                  no Kyojin: The Final Season (2023)</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/shinigami-bocchan-to-kuro-maid-2/">Shinigami
                                  Bocchan to Kuro Maid 2</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/shiro-seijo-to-kuro-bokushi/">Shiro Seijo
                                  to Kuro Bokushi</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/si-ge-yongzhe/">Si Ge Yongzhe</a></span>
                            </div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/sousou-no-frieren/">Sousou no
                                  Frieren</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/spy-kyoushitsu-2/">Spy Kyoushitsu
                                  2</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/sugar-apple-fairy-tale/">Sugar Apple
                                  Fairy Tale</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/suki-na-ko-ga-megane-wo-wasureta/">Suki
                                  na Ko ga Megane wo Wasureta</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/synduality-noir/">Synduality:
                                  Noir</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/temple/">Temple</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/uchi-no-kaisha-no-chiisai-senpai-no-hanashi/">Uchi
                                  no Kaisha no Chiisai Senpai no Hanashi</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/undead-girl-murder-farce/">Undead Girl
                                  Murder Farce</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/wanmei-shijie/">Wanmei Shijie</a></span>
                            </div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/watashi-no-shiawase-na-kekkon/">Watashi
                                  no Shiawase na Kekkon</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/yumemiru-danshi-wa-genjitsushugisha/">Yumemiru
                                  Danshi wa Genjitsushugisha</a></span></div>
                          </li>
                          <li>
                            <div><span><a href="https://anime-odcinki.pl/anime/recenzje-anime-2020/">ZAPOWIEDZI
                                  ANIME</a></span></div>
                          </li>
                          <li>
                            <div><span><a
                                  href="https://anime-odcinki.pl/anime/zom-100-zombie-ni-naru-made-ni-shitai-100-no-koto/">Zom
                                  100: Zombie ni Naru made ni Shitai 100 no Koto</a></span></div>
                          </li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </section>
                <li id="custom_html-24" class="widget_text widget widget_custom_html">
                  <div class="textwidget custom-html-widget">
                    <div class="spolecznoscinet" id="spolecznosci-5466"></div>
                  </div>
                </li>
                <li id="custom_html-26" class="widget_text widget widget_custom_html">
                  <div class="textwidget custom-html-widget"><iframe
                      src="https://discord.com/widget?id=408001655402004480&amp;theme=dark" width="350" height="500"
                      allowtransparency="true" frameborder="0"
                      sandbox="allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts"></iframe>
                  </div>
                </li>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      class="elementor-section elementor-top-section elementor-element elementor-element-31047e9 elementor-section-full_width elementor-section-stretched elementor-hidden-tablet elementor-hidden-mobile elementor-section-height-default elementor-section-height-default"
      data-id="31047e9" data-element_type="section"
      data-settings="{&quot;stretch_section&quot;:&quot;section-stretched&quot;,&quot;background_background&quot;:&quot;gradient&quot;}"
      style="width: 1071px; left: 0px;">
      <div class="elementor-background-overlay"></div>
      <div class="elementor-container elementor-column-gap-default">
        <div
          class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-a965540 elementor-hidden-tablet elementor-hidden-mobile"
          data-id="a965540" data-element_type="column"
          data-settings="{&quot;background_background&quot;:&quot;gradient&quot;}">
          <div class="elementor-widget-wrap elementor-element-populated">
            <div
              class="elementor-element elementor-element-77449ed elementor-widget__width-initial elementor-absolute elementor-hidden-tablet elementor-hidden-mobile elementor-widget elementor-widget-sidebar"
              data-id="77449ed" data-element_type="widget" data-settings="{&quot;_position&quot;:&quot;absolute&quot;}"
              data-widget_type="sidebar.default">
              <div class="elementor-widget-container">
                <li id="custom_html-19" class="widget_text widget widget_custom_html">
                  <div class="textwidget custom-html-widget">
                    <center>
                      <div class="spolecznoscinet" id="spolecznosci-5472"></div>
                    </center>
                  </div>
                </li>
                <li id="ao_user_anime-4" class="widget widget_ao_user_anime">
                  <div id="user-anime">
                    <div id="user-anime-top">
                      <div id="anime-rate">
                        <span class="rate">
                          <i class="fa star active" aria-hidden="true"></i>
                          <span style="color: #ebebeb;"><strong>7.72</strong></span><strong>
                          </strong></span><strong><span class="max">/10</span>
                        </strong>
                      </div><strong>
                        <div id="anime-fav">
                          <a href="#" title="Dodaj do ulubionych">
                            <i class="fa heart " aria-hidden="true" data-post_id="37663">
                            </i>
                          </a>
                          <span style="color: #ebebeb;"><strong>10</strong></span><strong>
                          </strong>
                        </div><strong>
                          <div id="anime-rating">
                            <i class="fa star " data-rate="1" aria-hidden="true"></i>
                            <i class="fa star " data-rate="2" aria-hidden="true"></i>
                            <i class="fa star " data-rate="3" aria-hidden="true"></i>
                            <i class="fa star " data-rate="4" aria-hidden="true"></i>
                            <i class="fa star " data-rate="5" aria-hidden="true"></i>
                            <i class="fa star " data-rate="6" aria-hidden="true"></i>
                            <i class="fa star " data-rate="7" aria-hidden="true"></i>
                            <i class="fa star " data-rate="8" aria-hidden="true"></i>
                            <i class="fa star " data-rate="9" aria-hidden="true"></i>
                            <i class="fa star " data-rate="10" aria-hidden="true"></i>
                            <input type="hidden" id="current-rate" value="0">
                          </div>
                          <!--             <div id="anime-views">
<i class="fa fa-line-chart "></i>
Wyświetleń: 86            </div>  -->
                        </strong>
                        <div id="anime-votes"><strong>
                            <i class="fa fa-star-half-o" style="color: #ffffff;"></i>
                            <span style="color: #ebebeb;"><strong>Liczba ocen:</strong></span> <span
                              style="color: #ebebeb;">47</span></strong>
                        </div>
                        <div id="user-anime-loading">
                          <i class="fa fa-refresh fa-spin fa-fw"></i>
                        </div>
                      </strong>
                    </div><strong>
                      <div class="user-anime-nav">
                        <a class="user-anime-nav-button watching">Ogląda <span class="label">15</span></a>
                        <a class="user-anime-nav-button watched">Obejrzało <span class="label">57</span></a>
                        <a class="user-anime-nav-button planed">Planuje <span class="label">42</span></a>
                        <a class="user-anime-nav-button onhold">Wstrzymało <span class="label">4</span></a>
                        <a class="user-anime-nav-button abandoned">Porzuciło <span class="label">0</span></a>
                      </div>
                      <input type="hidden" id="user-anime-nonce" value="41246ee6ba">
                      <input type="hidden" id="user-anime-rest-nonce" value="f7c58982d5">
                      <input type="hidden" id="user-anime-id" value="37663">
                    </strong>
                  </div><strong>
                    <script>
                      var jq2 = window.jQuery;
                      jq2('#anime-rating .star').on('mouseover', function () {
                        rate = jq2(this).data('rate');
                        adjust_rate(rate);
                      })
                      jq2('#anime-rating .star').on('mouseout', function () {
                        rate = jq2('#current-rate').val();
                        adjust_rate(rate);
                      });
                      jq2('#anime-rating .star').on('click', function () {
                        rate = jq2(this).data('rate');
                        update_user_anime_field('rate', rate);
                      });
                      jq2('#user-anime-del-rate a').on('click', function (e) {
                        e.preventDefault();
                        update_user_anime_field('rate', '0');
                      })
                      jq2('#user-anime-select').on('change', function () {
                        update_user_anime_field('status', this.value);
                      });
                      jq2('#user-anime-del-fav a').on('click', function (e) {
                        e.preventDefault();
                        update_user_anime_field('fav', '0');
                      })
                      jq2('#user-anime-top .fa.heart').on('click', function (e) {
                        e.preventDefault();
                        if (jq2(this).hasClass('active')) {
                          fav_status = 0;
                        } else {
                          fav_status = 1;
                        };
                        update_user_anime_field('fav', fav_status);
                      })
                      function adjust_rate(rate) {
                        jq2('#anime-rating .star').each(function () {
                          $this = jq2(this);
                          if ($this.data('rate') <= rate) {
                            $this.addClass('active');
                          };
                          if ($this.data('rate') > rate) {
                            $this.removeClass('active');
                          };
                        })
                      }
                      function update_user_anime_field(field, value) {
                        rnonce = jq2('#user-anime-rest-nonce').val();
                        nonce = jq2('#user-anime-nonce').val();
                        post_id = jq2('#user-anime-id').val();
                        jq2.ajax({
                          url: "https://anime-odcinki.pl/wp-json/ua/" + field,
                          method: "POST",
                          data: { post_id: post_id, data: value, nonce: nonce },
                          async: true,
                          cache: false,
                          beforeSend: function (xhr) {
                            jq2('#user-anime-loading').show();
                            xhr.setRequestHeader('X-WP-Nonce', rnonce);
                          },
                          error: function (xhr) {
                            if (xhr.responseJSON.code == 'rest_forbidden') {
                              jq2('#user-anime-loading').hide();
                              if (field == 'rate') {
                                jq2('#ua-nolog-rate-dialog').dialog();
                              };
                              if (field == 'fav') {
                                jq2('#ua-nolog-fav-dialog').dialog();
                              };
                              return;
                            };
                            if (xhr.responseJSON.code == 'rest_invalid_data') {
                              jq2('#user-anime-loading').hide();
                              jq2('#err-dialog').dialog();
                              return;
                            };
                          },
                          success: function (response) {
                            // console.log(response);
                            user_anime_after_ajax(field, value, response)
                            jq2('#user-anime-loading').hide();
                          },
                        });
                      }
                      function user_anime_after_ajax(field, value, data) {
                        if (field == 'fav') {
                          jq2('#anime-fav .fav-count').text(data);
                          if (value == 1) {
                            jq2('#user-anime-top .fa.heart').addClass('active').prop('title', 'Usuń z ulubionych');
                            jq2('#user-anime-del-fav').slideDown();
                          } else {
                            jq2('#user-anime-top .fa.heart').removeClass('active').prop('title', 'Dodaj do ulubionych');
                            jq2('#user-anime-del-fav').slideUp();
                          };
                        };
                        if (field == 'rate') {
                          jq2('#current-rate').val(value);
                          adjust_rate(value);
                          jq2('#anime-rate .rate span').text(data.score);
                          jq2('#anime-votes span').text(data.count);
                          jq2('#anime-my-vote span').text(value);
                          if (value > 0) {
                            jq2('#anime-my-vote').slideDown();
                            jq2('#user-anime-del-rate').slideDown();
                          } else {
                            jq2('#anime-my-vote').slideUp();
                            jq2('#user-anime-del-rate').slideUp();
                          };
                        };
                      }
                    </script>
                  </strong>
                </li><strong>
                  <li id="srpw_widget-3" class="widget widget_smart_recent_entries smart_recent_posts">
                    <h2 class="widgettitle">Nowe/Update</h2>
                    <div class="srpw-block srpw-default-style ">
                      <style>
                        .srpw-thumbnail {
                          width: 50px;
                          height: 65px;
                        }
                      </style>
                      <ul class="srpw-ul">
                        <li class="srpw-li srpw-clearfix"><a class="srpw-img srpw-alignleft"
                            href="https://anime-odcinki.pl/anime/boushoku-no-berserk/" target="_blank"><img width="107"
                              height="150" src="https://anime-odcinki.pl/wp-content/uploads/2023/10/138462l.jpg"
                              class=" srpw-thumbnail wp-post-image" alt="Boushoku no Berserk" decoding="async"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/2023/10/138462l.jpg 426w, https://anime-odcinki.pl/wp-content/uploads/2023/10/138462l-350x493.jpg 350w"
                              sizes="(max-width: 107px) 100vw, 107px"></a>
                          <div class="srpw-content"><a class="srpw-title"
                              href="https://anime-odcinki.pl/anime/boushoku-no-berserk/" target="_blank">Boushoku no
                              Berserk</a>
                            <div class="srpw-meta"></div>
                          </div>
                        </li>
                        <li class="srpw-li srpw-clearfix"><a class="srpw-img srpw-alignleft"
                            href="https://anime-odcinki.pl/anime/shangri-la-frontier-kusoge-hunter-kamige-ni-idoman-to-su/"
                            target="_blank"><img width="107" height="150"
                              src="https://anime-odcinki.pl/wp-content/uploads/2023/09/137973l.jpg"
                              class=" srpw-thumbnail wp-post-image"
                              alt="Shangri-La Frontier: Kusoge Hunter, Kamige ni Idoman to su" decoding="async"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/2023/09/137973l.jpg 428w, https://anime-odcinki.pl/wp-content/uploads/2023/09/137973l-350x491.jpg 350w"
                              sizes="(max-width: 107px) 100vw, 107px"></a>
                          <div class="srpw-content"><a class="srpw-title"
                              href="https://anime-odcinki.pl/anime/shangri-la-frontier-kusoge-hunter-kamige-ni-idoman-to-su/"
                              target="_blank">Shangri-La Frontier: Kusoge Hunter, Kamige ni Idoman to su</a>
                            <div class="srpw-meta"></div>
                          </div>
                        </li>
                        <li class="srpw-li srpw-clearfix"><a class="srpw-img srpw-alignleft"
                            href="https://anime-odcinki.pl/anime/dekoboko-majo-no-oyako-jijou/" target="_blank"><img
                              width="106" height="150"
                              src="https://anime-odcinki.pl/wp-content/uploads/2023/09/138185l.jpg"
                              class=" srpw-thumbnail wp-post-image" alt="Dekoboko Majo no Oyako Jijou" decoding="async"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/2023/09/138185l.jpg 425w, https://anime-odcinki.pl/wp-content/uploads/2023/09/138185l-350x495.jpg 350w"
                              sizes="(max-width: 106px) 100vw, 106px"></a>
                          <div class="srpw-content"><a class="srpw-title"
                              href="https://anime-odcinki.pl/anime/dekoboko-majo-no-oyako-jijou/"
                              target="_blank">Dekoboko Majo no Oyako Jijou</a>
                            <div class="srpw-meta"></div>
                          </div>
                        </li>
                        <li class="srpw-li srpw-clearfix"><a class="srpw-img srpw-alignleft"
                            href="https://anime-odcinki.pl/anime/overtake/" target="_blank"><img width="106"
                              height="150" src="https://anime-odcinki.pl/wp-content/uploads/2023/09/134735l.jpg"
                              class=" srpw-thumbnail wp-post-image" alt="Overtake!" decoding="async"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/2023/09/134735l.jpg 424w, https://anime-odcinki.pl/wp-content/uploads/2023/09/134735l-350x495.jpg 350w"
                              sizes="(max-width: 106px) 100vw, 106px"></a>
                          <div class="srpw-content"><a class="srpw-title"
                              href="https://anime-odcinki.pl/anime/overtake/" target="_blank">Overtake!</a>
                            <div class="srpw-meta"></div>
                          </div>
                        </li>
                        <li class="srpw-li srpw-clearfix"><a class="srpw-img srpw-alignleft"
                            href="https://anime-odcinki.pl/anime/megumi-no-daigo-kyuukoku-no-orange/"
                            target="_blank"><img width="105" height="150"
                              src="https://anime-odcinki.pl/wp-content/uploads/2023/09/136793l.jpg"
                              class=" srpw-thumbnail wp-post-image" alt="Megumi no Daigo: Kyuukoku no Orange"
                              decoding="async"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/2023/09/136793l.jpg 420w, https://anime-odcinki.pl/wp-content/uploads/2023/09/136793l-347x495.jpg 347w"
                              sizes="(max-width: 105px) 100vw, 105px"></a>
                          <div class="srpw-content"><a class="srpw-title"
                              href="https://anime-odcinki.pl/anime/megumi-no-daigo-kyuukoku-no-orange/"
                              target="_blank">Megumi no Daigo: Kyuukoku no Orange</a>
                            <div class="srpw-meta"></div>
                          </div>
                        </li>
                      </ul>
                    </div><!-- Generated by http://wordpress.org/plugins/smart-recent-posts-widget/ -->
                  </li>
                  <li id="virp-widget-3" class="widget virp-random-widget">
                    <h2 class="widgettitle">Losowa seria</h2>
                    <div id="virp-random-posts" class="virp-random-anime">
                      <ul class="virp-ul">
                        <li class="virp-li virp-clearfix wpucv-grid-three "><a
                            href="https://anime-odcinki.pl/anime/watashi-no-shiawase-na-kekkon/" rel="bookmark"><img
                              width="360" height="240"
                              src="https://anime-odcinki.pl/wp-content/uploads/2023/07/132259l-2-360x240.jpg"
                              class="virp-thumbnail align fdfgleft wp-post-image" alt="Watashi no Shiawase na Kekkon"
                              decoding="async"></a><a class="virp-title"
                            href="https://anime-odcinki.pl/anime/watashi-no-shiawase-na-kekkon/"
                            title="Permalink to Watashi no Shiawase na Kekkon" rel="bookmark">Watashi no Shiawase na
                            Kekkon</a>
                          <div class="virp-clear"></div>
                          <div class="virp-clear"></div>
                        </li>
                      </ul>
                    </div>
                  </li>
                  <li id="custom_html-23" class="widget_text widget widget_custom_html">
                    <div class="textwidget custom-html-widget">
                      <center>
                        <div class="spolecznoscinet" id="spolecznosci-5510"></div>
                      </center>
                    </div>
                  </li>
                  <li id="custom_html-25" class="widget_text widget widget_custom_html">
                    <div class="textwidget custom-html-widget"><iframe src="https://mmorpg24.pl/media.php"
                        style="border:0px #ffffff none;" name="reklama" scrolling="no" frameborder="0"
                        marginheight="0px" marginwidth="0px" height="300px" width="300px" allowfullscreen=""></iframe>
                    </div>
                  </li>
                </strong>
              </div><strong>
              </strong>
            </div><strong>
            </strong>
          </div><strong>
          </strong>
        </div><strong>
        </strong>
      </div><strong>
      </strong>
    </div><strong>
      <section
        class="elementor-section elementor-top-section elementor-element elementor-element-c7eabbe elementor-section-full_width elementor-section-content-top elementor-hidden-tablet elementor-hidden-mobile elementor-section-height-default elementor-section-height-default"
        data-id="c7eabbe" data-element_type="section">
        <div class="elementor-container elementor-column-gap-default">
          <div
            class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-cf76c39"
            data-id="cf76c39" data-element_type="column">
            <div class="elementor-widget-wrap">
            </div>
          </div>
        </div>
      </section>
      <section
        class="elementor-section elementor-top-section elementor-element elementor-element-d3632b0 elementor-section-boxed elementor-section-height-default elementor-section-height-default"
        data-id="d3632b0" data-element_type="section">
        <div class="elementor-container elementor-column-gap-default">
          <div
            class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-13b91e8"
            data-id="13b91e8" data-element_type="column">
            <div class="elementor-widget-wrap elementor-element-populated">
              <div
                class="elementor-element elementor-element-7eb237c elementor-blockquote--skin-border elementor-blockquote--button-color-official elementor-widget elementor-widget-blockquote"
                data-id="7eb237c" data-element_type="widget" data-widget_type="blockquote.default">
                <div class="elementor-widget-container">
                  <style>
                    /*! elementor-pro - v3.13.2 - 22-05-2023 */
                    @charset "UTF-8";

                    .entry-content blockquote.elementor-blockquote:not(.alignright):not(.alignleft),
                    .entry-summary blockquote.elementor-blockquote {
                      margin-right: 0;
                      margin-left: 0
                    }

                    .elementor-widget-blockquote blockquote {
                      margin: 0;
                      padding: 0;
                      outline: 0;
                      font-size: 100%;
                      vertical-align: baseline;
                      background: transparent;
                      quotes: none;
                      border: 0;
                      font-style: normal;
                      color: #3f444b
                    }

                    .elementor-widget-blockquote blockquote .e-q-footer:after,
                    .elementor-widget-blockquote blockquote .e-q-footer:before,
                    .elementor-widget-blockquote blockquote:after,
                    .elementor-widget-blockquote blockquote:before,
                    .elementor-widget-blockquote blockquote cite:after,
                    .elementor-widget-blockquote blockquote cite:before {
                      content: none
                    }

                    .elementor-blockquote {
                      transition: .3s
                    }

                    .elementor-blockquote__author,
                    .elementor-blockquote__content {
                      margin-bottom: 0;
                      font-style: normal
                    }

                    .elementor-blockquote__author {
                      font-weight: 700
                    }

                    .elementor-blockquote .e-q-footer {
                      margin-top: 12px;
                      display: flex;
                      justify-content: space-between
                    }

                    .elementor-blockquote__tweet-button {
                      display: flex;
                      transition: .3s;
                      color: #1da1f2;
                      align-self: flex-end;
                      line-height: 1;
                      position: relative;
                      width: -moz-max-content;
                      width: max-content
                    }

                    .elementor-blockquote__tweet-button:hover {
                      color: #0967a0
                    }

                    .elementor-blockquote__tweet-button span {
                      font-weight: 600
                    }

                    .elementor-blockquote__tweet-button i,
                    .elementor-blockquote__tweet-button span {
                      vertical-align: middle
                    }

                    .elementor-blockquote__tweet-button i+span,
                    .elementor-blockquote__tweet-button svg+span {
                      margin-left: .5em
                    }

                    .elementor-blockquote__tweet-button svg {
                      fill: #1da1f2;
                      height: 1em;
                      width: 1em
                    }

                    .elementor-blockquote__tweet-label {
                      white-space: pre-wrap
                    }

                    .elementor-blockquote--button-skin-bubble .elementor-blockquote__tweet-button,
                    .elementor-blockquote--button-skin-classic .elementor-blockquote__tweet-button {
                      padding: .7em 1.2em;
                      border-radius: 100em;
                      background-color: #1da1f2;
                      color: #fff;
                      font-size: 15px
                    }

                    .elementor-blockquote--button-skin-bubble .elementor-blockquote__tweet-button:hover,
                    .elementor-blockquote--button-skin-classic .elementor-blockquote__tweet-button:hover {
                      background-color: #0967a0;
                      color: #fff
                    }

                    .elementor-blockquote--button-skin-bubble .elementor-blockquote__tweet-button:hover:before,
                    .elementor-blockquote--button-skin-classic .elementor-blockquote__tweet-button:hover:before {
                      border-right-color: #0967a0
                    }

                    .elementor-blockquote--button-skin-bubble .elementor-blockquote__tweet-button svg,
                    .elementor-blockquote--button-skin-classic .elementor-blockquote__tweet-button svg {
                      fill: #fff;
                      height: 1em;
                      width: 1em
                    }

                    .elementor-blockquote--button-skin-bubble.elementor-blockquote--button-view-icon .elementor-blockquote__tweet-button,
                    .elementor-blockquote--button-skin-classic.elementor-blockquote--button-view-icon .elementor-blockquote__tweet-button {
                      padding: 0;
                      width: 2em;
                      height: 2em
                    }

                    .elementor-blockquote--button-skin-bubble.elementor-blockquote--button-view-icon .elementor-blockquote__tweet-button i,
                    .elementor-blockquote--button-skin-classic.elementor-blockquote--button-view-icon .elementor-blockquote__tweet-button i {
                      position: absolute;
                      left: 50%;
                      top: 50%;
                      transform: translate(-50%, -50%)
                    }

                    .elementor-blockquote--button-skin-bubble .elementor-blockquote__tweet-button:before {
                      content: "";
                      border: .5em solid transparent;
                      border-right-color: #1da1f2;
                      position: absolute;
                      left: -.8em;
                      top: 50%;
                      transform: translateY(-50%) scaleY(.65);
                      transition: .3s
                    }

                    .elementor-blockquote--button-skin-bubble.elementor-blockquote--align-left .elementor-blockquote__tweet-button:before {
                      right: auto;
                      left: -.8em;
                      border-right-color: #1da1f2;
                      border-left-color: transparent
                    }

                    .elementor-blockquote--button-skin-bubble.elementor-blockquote--align-left .elementor-blockquote__tweet-button:hover:before {
                      border-right-color: #0967a0
                    }

                    .elementor-blockquote--button-skin-bubble.elementor-blockquote--align-right .elementor-blockquote__tweet-button:before {
                      left: auto;
                      right: -.8em;
                      border-right-color: transparent;
                      border-left-color: #1da1f2
                    }

                    .elementor-blockquote--button-skin-bubble.elementor-blockquote--align-right .elementor-blockquote__tweet-button:hover:before {
                      border-left-color: #0967a0
                    }

                    .elementor-blockquote--skin-boxed .elementor-blockquote {
                      background-color: #f9fafa;
                      padding: 30px
                    }

                    .elementor-blockquote--skin-border .elementor-blockquote {
                      border-color: #f9fafa;
                      border-left: 7px #f9fafa;
                      border-style: solid;
                      padding-left: 20px
                    }

                    .elementor-blockquote--skin-quotation .elementor-blockquote:before {
                      content: "“";
                      font-size: 100px;
                      color: #f9fafa;
                      font-family: Times New Roman, Times, serif;
                      font-weight: 900;
                      line-height: 1;
                      display: block;
                      height: .6em
                    }

                    .elementor-blockquote--skin-quotation .elementor-blockquote__content {
                      margin-top: 15px
                    }

                    .elementor-blockquote--align-left .elementor-blockquote__content {
                      text-align: left
                    }

                    .elementor-blockquote--align-left .elementor-blockquote .e-q-footer {
                      flex-direction: row
                    }

                    .elementor-blockquote--align-right .elementor-blockquote__content {
                      text-align: right
                    }

                    .elementor-blockquote--align-right .elementor-blockquote .e-q-footer {
                      flex-direction: row-reverse
                    }

                    .elementor-blockquote--align-center .elementor-blockquote {
                      text-align: center
                    }

                    .elementor-blockquote--align-center .elementor-blockquote .e-q-footer,
                    .elementor-blockquote--align-center .elementor-blockquote__author {
                      display: block
                    }

                    .elementor-blockquote--align-center .elementor-blockquote__tweet-button {
                      margin-right: auto;
                      margin-left: auto
                    }
                  </style>
                  <blockquote class="elementor-blockquote">
                    <p class="elementor-blockquote__content">
                      <span style="color: #ffff99;"><b>Strona jest w trakcie przebudowy, niektóre funkcje mogą jeszcze
                          nie działać, a inne dopiero zostaną dodane. Wszelkie nieprawidłowości prosimy kierować na
                          redakcja@anime-odcinki.pl</b></span><br>
                      <span style="color: #ff99cc;">Rekrutacja: NA TŁUMACZA GRUPY: <a style="color: #ff99cc;"
                          href="https://kitsune-subs.anime-odcinki.pl/"><strong>KITSUNE-SUBS!</strong></a></span>
                      <span style="color: #ff99cc;">Chcesz być z nami Chcesz tworzyć fajne napisy do anime? Skontaktuj
                        się z administracją na <a style="color: #ff99cc;" href="https://discord.gg/Yjca3vVsWA"
                          target="_blank" rel="noopener"><strong>Discordzie.</strong></a></span>
                      <br><span style="color: #ff9900;">Chcesz wesprzeć nas w pracach i przyśpieszyć proces? zachęcamy
                        do</span> <a href="https://anime-odcinki.pl/pomoc-w-utrzymaniu-strony"><strong><span
                            style="color: #99cc00;">wsparcia</span></strong></a>.
                    </p>
                    <div class="e-q-footer">
                      <cite class="elementor-blockquote__author">Administracja</cite>
                    </div>
                  </blockquote>
                </div>
              </div>
              <div class="elementor-element elementor-element-f01f18f elementor-widget elementor-widget-html"
                data-id="f01f18f" data-element_type="widget" data-widget_type="html.default">
                <div class="elementor-widget-container">
                  <center>
                    <div class="spolecznoscinet" id="spolecznosci-5464"></div>
                  </center>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
      <section
        class="elementor-section elementor-top-section elementor-element elementor-element-f05e2ec elementor-section-boxed elementor-section-height-default elementor-section-height-default"
        data-id="f05e2ec" data-element_type="section">
        <div class="elementor-container elementor-column-gap-default">
          <div
            class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-a049ee3"
            data-id="a049ee3" data-element_type="column">
            <div class="elementor-widget-wrap">
            </div>
          </div>
        </div>
      </section>
      <section
        class="elementor-section elementor-top-section elementor-element elementor-element-00c576f elementor-section-boxed elementor-section-height-default elementor-section-height-default"
        data-id="00c576f" data-element_type="section">
        <div class="elementor-container elementor-column-gap-default">
          <div
            class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-c8ae275"
            data-id="c8ae275" data-element_type="column">
            <div class="elementor-widget-wrap">
            </div>
          </div>
        </div>
      </section>
    </strong>
  </div><strong>
    <script> $ = window.jQuery;</script>
    <script async="" src="https://a.spolecznosci.net/core/e0b503dad9611578d16943b6edcdbb1e/main.js"></script>
    <div class="main-container container">
      <header role="banner" id="page-header">
      </header> <!-- /#page-header -->
      <div class="row">
        <section class="col-sm-9">
          <a id="main-content"></a>
          <center>
            <div class="spolecznoscinet" id="spolecznosci-5464"></div>
          </center>
          <h1 class="page-header">Cop Craft</h1>
          <div class="region region-content">
            <section id="block-system-main" class="block block-system clearfix">
              <div class="" typeof="sioc:Item foaf:Document">
                <div class="content">
                  <section id="anime-header" style="position: relative;">
                    <div class="field-name-field-okladka field-type-image field-label-above"
                      style="float:left;width:50%;">
                      <div class="field-items">
                        <div class="field-item even">
                          <img src="https://anime-odcinki.pl/wp-content/uploads/2019/07/Cop_Craft-337x495.jpg"
                            width="350" height="495" alt="">
                        </div>
                      </div>
                    </div>
                    <div id="block-views-lista-odcink-w-block" class="block-views clearfix">
                      <div class="view view-lista-odcink-w view-id-lista_odcink_w view-display-id-block">
                        <div class="view-content" style="text-align:center">
                          <ul>
                            <li class="lista_odc_tytul_pozycja">
                              <a href="https://anime-odcinki.pl/anime/cop-craft/12/">Cop Craft 12</a>
                            </li>
                            <li class="lista_odc_tytul_pozycja">
                              <a href="https://anime-odcinki.pl/anime/cop-craft/11/">Cop Craft 11</a>
                            </li>
                            <li class="lista_odc_tytul_pozycja">
                              <a href="https://anime-odcinki.pl/anime/cop-craft/10/">Cop Craft 10</a>
                            </li>
                            <li class="lista_odc_tytul_pozycja">
                              <a href="https://anime-odcinki.pl/anime/cop-craft/9/">Cop Craft 09</a>
                            </li>
                            <li class="lista_odc_tytul_pozycja">
                              <a href="https://anime-odcinki.pl/anime/cop-craft/8/">Cop Craft 08</a>
                            </li>
                            <li class="lista_odc_tytul_pozycja">
                              <a href="https://anime-odcinki.pl/anime/cop-craft/7/">Cop Craft 07</a>
                            </li>
                            <li class="lista_odc_tytul_pozycja">
                              <a href="https://anime-odcinki.pl/anime/cop-craft/6/">Cop Craft 06</a>
                            </li>
                            <li class="lista_odc_tytul_pozycja">
                              <a href="https://anime-odcinki.pl/anime/cop-craft/5/">Cop Craft 05</a>
                            </li>
                            <li class="lista_odc_tytul_pozycja">
                              <a href="https://anime-odcinki.pl/anime/cop-craft/4/">Cop Craft 04</a>
                            </li>
                            <li class="lista_odc_tytul_pozycja">
                              <a href="https://anime-odcinki.pl/anime/cop-craft/3/">Cop Craft 03</a>
                            </li>
                            <li class="lista_odc_tytul_pozycja">
                              <a href="https://anime-odcinki.pl/anime/cop-craft/2/">Cop Craft 02</a>
                            </li>
                            <li class="lista_odc_tytul_pozycja">
                              <a href="https://anime-odcinki.pl/anime/cop-craft/1/">Cop Craft 01</a>
                            </li>
                            <div class="clearfix"></div>
                          </ul>
                        </div>
                      </div>
                    </div>
                    <div class="clearfix"></div>
                  </section>
                  <div class="field field-name-body field-type-text-with-summary field-label-hidden">
                    <div class="field-items">
                      <div class="field-item even">
                        <p></p>
                        <p>Brama między wymiarowa otwiera się nad zachodnim wybrzeżem Ameryki. Po drugiej stronie leży
                          świat wróżek i potworów. Ludzie, którzy tam mieszkają, nazywają to leto semani „ziemią
                          człowieka”. wraz z bramą pojawia się ogromna wyspa. <span id="more-37663"></span>Teraz nazywa
                          się ona caliena san-teresa, stała się ona bramą do innego świata i domem dla ponad 20 milionów
                          ludzi. Miejsce, w którym magiczna kultura i kultura ziemi zachodzą na siebie. Najpiękniejsze i
                          najbardziej chaotyczne miasto uwielbione jako „miasto snów”.<br>
                          Tilarna Exedilika jest początkującym rycerzem pochodzącą z innego świata. Brakuje jej zdrowego
                          rozsądku i jest niewinną piękną dziewczyną. Kei Matoba jest utalentowanym detektywem
                          departamentu policji San Teresa, jest niezdarnym mężczyzną z alergią na koty. W mieście, które
                          łączy światy równoległe z między wymiarowymi bramami, obydwoje zostali zmuszeni do współpracy.
                          Będąc stale w konflikcie, Matoba i Tilarna ścigają wspólnego wroga i stopniowo rozwija się
                          między nimi dziwne zaufanie.</p>
                        <p style="text-align: right;">Zwiastun:</p>
                        <p style="text-align: right;"><iframe title="TVアニメ「コップクラフト」 ティザーPV" width="640" height="360"
                            src="https://www.youtube.com/embed/Z0RCXU0SmqM?feature=oembed" frameborder="0"
                            allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
                            allowfullscreen=""></iframe></p>
                        <p> anime odcinki online za darmo wysoka jakość</p>
                        <p></p>
                        <!--  [mrp_rating_form title='Mój formularz oceny' submit_button_text='Prześlij ocenę' show_rich_snippets='true']  -->
                      </div>
                    </div>
                  </div>
                  <!-- Add icon library -->
                  <link rel="stylesheet"
                    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
                  <style>
                    .btn {
                      background-color: #582383;
                      border: none;
                      color: #fff;
                      padding: 5px 21px;
                      font-size: 16px;
                      cursor: pointer;
                      border-radius: 25px;
                    }

                    /* Darker background on mouse-over */
                    .btn:hover {
                      background-color: RoyalBlue;
                    }

                    @media (max-width: 767px) {
                      .btn {
                        display: none;
                      }
                    }
                  </style>
                  <p style="text-align:left;">
                    <button class="btn"><i class="fa fa-plus"></i><a href="https://anime-odcinki.pl/dodaj"
                        target="_blank"><span style="color: #ffffff;">Dodaj odcinek</span></a></button><a
                      href="https://anime-odcinki.pl/dodaj" target="_blank">
                    </a><button class="btn"><a href="https://anime-odcinki.pl/dodaj" target="_blank"><i
                          class="fa fa-plus"></i></a><a href="https://anime-odcinki.pl/dodaj-opis/?pid=37663"
                        target="_blank"><span style="color: #ffffff;">Dodaj opis serii</span></a></button><a
                      href="https://anime-odcinki.pl/dodaj-opis/?pid=37663" target="_blank">
                    </a>
                  </p><a href="https://anime-odcinki.pl/dodaj-opis/?pid=37663" target="_blank">
                  </a>
                  <div class="field field-name-field-tags"><a href="https://anime-odcinki.pl/dodaj-opis/?pid=37663"
                      target="_blank">
                      <div class="field-label">Gatunek:&nbsp;</div>
                    </a>
                    <div class="field-items"><a href="https://anime-odcinki.pl/dodaj-opis/?pid=37663" target="_blank">
                      </a>
                      <div class="field-item"><a href="https://anime-odcinki.pl/dodaj-opis/?pid=37663" target="_blank">
                        </a><a href="https://anime-odcinki.pl/gatunki/akcja/">Akcja</a>
                        <a href="https://anime-odcinki.pl/gatunki/fantasy/">Fantasy</a>
                        <a href="https://anime-odcinki.pl/gatunki/science-fiction/">Science-fiction</a>
                      </div>
                    </div>
                  </div>
                  <div class="field field-name-field-tags">
                    <div class="field-label">Miejsce:&nbsp;</div>
                    <div class="field-items">
                      <div class="field-item">
                        <a href="https://anime-odcinki.pl/miejsce/japonia/">Japonia</a>
                      </div>
                    </div>
                  </div>
                  <div class="field field-name-field-tags">
                    <div class="field-label">Inne:&nbsp;</div>
                    <div class="field-items">
                      <div class="field-item">
                        <a href="https://anime-odcinki.pl/inne/magia/">Magia</a>
                      </div>
                    </div>
                  </div>
                  <div class="field field-name-field-tags">
                    <div class="field-label">Postaci:&nbsp;</div>
                    <div class="field-items">
                      <div class="field-item">
                        <a href="https://anime-odcinki.pl/postaci/policjaoddzialy-specjalne/">Policja/oddziały
                          specjalne</a>
                        <a href="https://anime-odcinki.pl/postaci/przestepcy/">Przestępcy</a>
                      </div>
                    </div>
                  </div>
                  <div class="field field-name-field-tags">
                    <div class="field-label">Widownia:&nbsp;</div>
                    <div class="field-items">
                      <div class="field-item">
                        <a href="https://anime-odcinki.pl/widownia/seinen/">Seinen</a>
                      </div>
                    </div>
                  </div>
                  <div class="field field-name-field-tags">
                    <div class="field-label">
                      <p style="color:#dfdfdf">Rok wydania:&nbsp;</p>
                    </div>
                    <div class="field-items">
                      <div class="field-item">2019</div>
                    </div>
                  </div>
                  <div class="field field-name-field-tags">
                    <div class="field-label">
                      <p style="color:#dfdfdf">Czas trwania:&nbsp;</p>
                    </div>
                    <div class="field-items">
                      <div class="field-item">12 x 23min</div>
                    </div>
                  </div>
                  <center>
                    <div class="spolecznoscinet" id="spolecznosci-5470"></div>
                  </center>
                  <div class="clearfix"></div>
                  <section id="comments" class="comment-wrapper">
                    <div class="alert">Komentowanie dostępne wyłącznie dla zalogowanych osób.</div>
                    <!-- <h2 class="title">Komentarze (7)</h2> -->
                    <br>
                    <div id="comment-106410" class="comment-single clearfix">
                      <div class="comment-header clearfix">
                        <div class="user-info">
                          <img
                            src="https://anime-odcinki.pl/wp-content/uploads/avatars/74602/61917b2ed6f54-bpthumb.jpg">
                          <div>
                            <a href="https://anime-odcinki.pl/czlonkowie/lobooo/" class="">
                              @LOBO </a>
                            <p><span class="date">3 lata</span></p>
                          </div>
                        </div>
                        <div class="comment-counter">
                          <span class="count-up">1</span>
                          <a href="#" class="vote-up " data-cid="106410">
                            <span class="fa-stack fa-lg">
                              <i class="fa fa-square fa-stack-2x"></i>
                              <i class="fa fa-thumbs-up fa-stack-1x fa-inverse"></i>
                            </span>
                          </a>
                          <span class="count-down">0</span>
                          <a href="#" class="vote-down " data-cid="106410">
                            <span class="fa-stack fa-lg">
                              <i class="fa fa-square fa-stack-2x"></i>
                              <i class="fa fa-thumbs-down fa-stack-1x fa-inverse"></i>
                            </span>
                          </a>
                          <input type="hidden" class="user-vote" value="">
                          <input type="hidden" class="comment-nonce" value="3c6626af77">
                        </div>
                      </div>
                      <div class="comment-content">
                        <p class="comment-text">Bardzo niedocenione anime&nbsp; , a szkoda , bo jest to naprawdę , kawal
                          dobrej roboty i aż się prosi o drugi sezon .</p>
                      </div>
                      <div class="comment-footer">
                        <div class="links">
                          <a title="Zgłoś komentarz" href="https://anime-odcinki.pl/zglos/?cid=106410">
                            <i class="fa fa-flag"></i>
                          </a>
                        </div>
                        <div class="links">
                          <a title="Dodaj player" href="https://anime-odcinki.pl/dodaj-player/?cid=106410">
                            <i class="fa fa-cloud-upload"></i>
                          </a>
                        </div>
                        <div class="links">
                          <a title="Dodaj Opis" href="https://anime-odcinki.pl/dodaj-opis/?cid=106410">
                            <i class="fa fa-pencil-square-o"></i>
                          </a>
                        </div>
                      </div>
                    </div>
                    <div id="comment-90497" class="comment-single clearfix">
                      <div class="comment-header clearfix">
                        <div class="user-info">
                          <img
                            src="https://anime-odcinki.pl/wp-content/uploads/avatars/14925/583ea6f6899f0-bpthumb.jpg">
                          <div>
                            <a href="https://anime-odcinki.pl/czlonkowie/sartosrius/" class="">
                              @Sartosrius </a>
                            <p><span class="date">4 lata</span></p>
                          </div>
                        </div>
                        <div class="comment-counter">
                          <span class="count-up">0</span>
                          <a href="#" class="vote-up " data-cid="90497">
                            <span class="fa-stack fa-lg">
                              <i class="fa fa-square fa-stack-2x"></i>
                              <i class="fa fa-thumbs-up fa-stack-1x fa-inverse"></i>
                            </span>
                          </a>
                          <span class="count-down">0</span>
                          <a href="#" class="vote-down " data-cid="90497">
                            <span class="fa-stack fa-lg">
                              <i class="fa fa-square fa-stack-2x"></i>
                              <i class="fa fa-thumbs-down fa-stack-1x fa-inverse"></i>
                            </span>
                          </a>
                          <input type="hidden" class="user-vote" value="">
                          <input type="hidden" class="comment-nonce" value="8650d179ec">
                        </div>
                      </div>
                      <div class="comment-content">
                        <p class="comment-text">Nie przepadam za bardzo za kryminałami, ale to anime całkiem mi się
                          podobało. Jest całkiem fajne, mocne 7/10</p>
                      </div>
                      <div class="comment-footer">
                        <div class="links">
                          <a title="Zgłoś komentarz" href="https://anime-odcinki.pl/zglos/?cid=90497">
                            <i class="fa fa-flag"></i>
                          </a>
                        </div>
                        <div class="links">
                          <a title="Dodaj player" href="https://anime-odcinki.pl/dodaj-player/?cid=90497">
                            <i class="fa fa-cloud-upload"></i>
                          </a>
                        </div>
                        <div class="links">
                          <a title="Dodaj Opis" href="https://anime-odcinki.pl/dodaj-opis/?cid=90497">
                            <i class="fa fa-pencil-square-o"></i>
                          </a>
                        </div>
                      </div>
                    </div>
                    <div id="comment-88106" class="comment-single clearfix">
                      <div class="comment-header clearfix">
                        <div class="user-info">
                          <img
                            src="https://anime-odcinki.pl/wp-content/uploads/avatars/25918/591b0056ef7b9-bpthumb.jpg.orig">
                          <div>
                            <a href="https://anime-odcinki.pl/czlonkowie/pemaren/" class="">
                              @PeMaReN </a>
                            <p><span class="date">4 lata</span></p>
                          </div>
                        </div>
                        <div class="comment-counter">
                          <span class="count-up">0</span>
                          <a href="#" class="vote-up " data-cid="88106">
                            <span class="fa-stack fa-lg">
                              <i class="fa fa-square fa-stack-2x"></i>
                              <i class="fa fa-thumbs-up fa-stack-1x fa-inverse"></i>
                            </span>
                          </a>
                          <span class="count-down">0</span>
                          <a href="#" class="vote-down " data-cid="88106">
                            <span class="fa-stack fa-lg">
                              <i class="fa fa-square fa-stack-2x"></i>
                              <i class="fa fa-thumbs-down fa-stack-1x fa-inverse"></i>
                            </span>
                          </a>
                          <input type="hidden" class="user-vote" value="">
                          <input type="hidden" class="comment-nonce" value="9a2d6a545f">
                        </div>
                      </div>
                      <div class="comment-content">
                        <p class="comment-text">Oglądało się przyjemnie i szczerze powiedziawszy myślałem, że to będzie
                          jakiś średniak ale myliłem się :) Fabuła, postacie bardzo na plus :) Jedne z lepszych anime w
                          kategorii " Kryminał " :) Co mnie jeszcze bardzo zaskoczyło to nawiązanie do amerykańskiego
                          serialu " Nash Bridges " a konkretnie ujmując to 3 auto naszego bohatera oraz miasto w anime
                          mamy San Teresa a w serialu San Francisco ale może to tylko zbieg okoliczności kto wie :P 8/10
                        </p>
                      </div>
                      <div class="comment-footer">
                        <div class="links">
                          <a title="Zgłoś komentarz" href="https://anime-odcinki.pl/zglos/?cid=88106">
                            <i class="fa fa-flag"></i>
                          </a>
                        </div>
                        <div class="links">
                          <a title="Dodaj player" href="https://anime-odcinki.pl/dodaj-player/?cid=88106">
                            <i class="fa fa-cloud-upload"></i>
                          </a>
                        </div>
                        <div class="links">
                          <a title="Dodaj Opis" href="https://anime-odcinki.pl/dodaj-opis/?cid=88106">
                            <i class="fa fa-pencil-square-o"></i>
                          </a>
                        </div>
                      </div>
                    </div>
                    <div id="comment-87501" class="comment-single clearfix">
                      <div class="comment-header clearfix">
                        <div class="user-info">
                          <img
                            src="https://anime-odcinki.pl/wp-content/uploads/avatars/59629/5c045cb0c87c7-bpthumb.jpg">
                          <div>
                            <a href="https://anime-odcinki.pl/czlonkowie/gundham/" class="">
                              @ShadowVulture </a>
                            <p><span class="date">4 lata</span></p>
                          </div>
                        </div>
                        <div class="comment-counter">
                          <span class="count-up">0</span>
                          <a href="#" class="vote-up " data-cid="87501">
                            <span class="fa-stack fa-lg">
                              <i class="fa fa-square fa-stack-2x"></i>
                              <i class="fa fa-thumbs-up fa-stack-1x fa-inverse"></i>
                            </span>
                          </a>
                          <span class="count-down">0</span>
                          <a href="#" class="vote-down " data-cid="87501">
                            <span class="fa-stack fa-lg">
                              <i class="fa fa-square fa-stack-2x"></i>
                              <i class="fa fa-thumbs-down fa-stack-1x fa-inverse"></i>
                            </span>
                          </a>
                          <input type="hidden" class="user-vote" value="">
                          <input type="hidden" class="comment-nonce" value="b5d0210fec">
                        </div>
                      </div>
                      <div class="comment-content">
                        <p class="comment-text">Ogólnie rzecz biorąc, świetny tytuł. Momentami były niedociągnięcia, ale
                          nie zmienia to faktu, że anime ma swój przyjemny klimat. Kojarzyło mi się czasem ze starymi
                          amerykańskimi filmami, czy też serialami o policjantach. Pod koniec mogłoby być nieco lepiej,
                          ale poza tym to nie mam zastrzeżeń. Śmiało daję 9/10</p>
                      </div>
                      <div class="comment-footer">
                        <div class="links">
                          <a title="Zgłoś komentarz" href="https://anime-odcinki.pl/zglos/?cid=87501">
                            <i class="fa fa-flag"></i>
                          </a>
                        </div>
                        <div class="links">
                          <a title="Dodaj player" href="https://anime-odcinki.pl/dodaj-player/?cid=87501">
                            <i class="fa fa-cloud-upload"></i>
                          </a>
                        </div>
                        <div class="links">
                          <a title="Dodaj Opis" href="https://anime-odcinki.pl/dodaj-opis/?cid=87501">
                            <i class="fa fa-pencil-square-o"></i>
                          </a>
                        </div>
                      </div>
                    </div>
                    <div id="comment-87080" class="comment-single clearfix">
                      <div class="comment-header clearfix">
                        <div class="user-info">
                          <img
                            src="https://anime-odcinki.pl/wp-content/uploads/avatars/59863/5e9ae20e23fea-bpthumb.png">
                          <div>
                            <a href="https://anime-odcinki.pl/czlonkowie/umbusi/" class="">
                              @Umbusi </a>
                            <p><span class="date">4 lata</span></p>
                          </div>
                        </div>
                        <div class="comment-counter">
                          <span class="count-up">1</span>
                          <a href="#" class="vote-up " data-cid="87080">
                            <span class="fa-stack fa-lg">
                              <i class="fa fa-square fa-stack-2x"></i>
                              <i class="fa fa-thumbs-up fa-stack-1x fa-inverse"></i>
                            </span>
                          </a>
                          <span class="count-down">0</span>
                          <a href="#" class="vote-down " data-cid="87080">
                            <span class="fa-stack fa-lg">
                              <i class="fa fa-square fa-stack-2x"></i>
                              <i class="fa fa-thumbs-down fa-stack-1x fa-inverse"></i>
                            </span>
                          </a>
                          <input type="hidden" class="user-vote" value="">
                          <input type="hidden" class="comment-nonce" value="a1b626a8af">
                        </div>
                      </div>
                      <div class="comment-content">
                        <p class="comment-text">Anime ogólnie prezentuje się dobrze. Niektóre odcinki mogłyby być lepiej
                          zrobione, lecz mimo to otrzymuje ocenę 8/10</p>
                      </div>
                      <div class="comment-footer">
                        <div class="links">
                          <a title="Zgłoś komentarz" href="https://anime-odcinki.pl/zglos/?cid=87080">
                            <i class="fa fa-flag"></i>
                          </a>
                        </div>
                        <div class="links">
                          <a title="Dodaj player" href="https://anime-odcinki.pl/dodaj-player/?cid=87080">
                            <i class="fa fa-cloud-upload"></i>
                          </a>
                        </div>
                        <div class="links">
                          <a title="Dodaj Opis" href="https://anime-odcinki.pl/dodaj-opis/?cid=87080">
                            <i class="fa fa-pencil-square-o"></i>
                          </a>
                        </div>
                      </div>
                    </div>
                    <div id="comment-86997" class="comment-single clearfix">
                      <div class="comment-header clearfix">
                        <div class="user-info">
                          <img
                            src="https://anime-odcinki.pl/wp-content/uploads/avatars/36172/58403de7dd990-bpthumb.png.orig">
                          <div>
                            <a href="https://anime-odcinki.pl/czlonkowie/zeroone/" class="">
                              @乙モ尺ロ </a>
                            <p><span class="date">4 lata</span></p>
                          </div>
                        </div>
                        <div class="comment-counter">
                          <span class="count-up">0</span>
                          <a href="#" class="vote-up " data-cid="86997">
                            <span class="fa-stack fa-lg">
                              <i class="fa fa-square fa-stack-2x"></i>
                              <i class="fa fa-thumbs-up fa-stack-1x fa-inverse"></i>
                            </span>
                          </a>
                          <span class="count-down">0</span>
                          <a href="#" class="vote-down " data-cid="86997">
                            <span class="fa-stack fa-lg">
                              <i class="fa fa-square fa-stack-2x"></i>
                              <i class="fa fa-thumbs-down fa-stack-1x fa-inverse"></i>
                            </span>
                          </a>
                          <input type="hidden" class="user-vote" value="">
                          <input type="hidden" class="comment-nonce" value="a055c43677">
                        </div>
                      </div>
                      <div class="comment-content">
                        <p class="comment-text">8/10 ----- Opis nie brzmi zbyt zachęcająco, ale jak już się zacznie
                          oglądać to jest dobrze. Podobały mi się relacje między naszymi głównymi bohaterami oraz
                          pozostałymi drugoplanowymi. To była jedna zalet tego anime, która przyciągała odbiorce przed
                          ekran. W anime ogromną role odgrywa nie tylko fabuła, ale również postacie. Jeżeli aktor nie
                          wczuje się w postać, to nie ma znaczenia jak dobra jest fabuła. Anime nie przetrwa na samej
                          historii. Wracając do serii. Tutaj raczej nie mam postaci, którą nazwałbym tą ulubioną. Całość
                          nie przynudza co jest chyba najważniejsze. Niektórzy mogą mieć za złe, że nie ma tego ,, true
                          love story '' miedzy ,, Tilarna '' i ,, Kei '', jednak moim zdaniem akurat w tej kwestii
                          powinniśmy być wdzięczni twórcą. Gdyby to nastąpiło seria straciłaby na tym i zrobiłoby się
                          takie mdłe to anime. Także dobrze, że tak się skończyło. Na pewno jedno z lepszych anime w tym
                          sezonie. A jedno z najleszych typu ,, kryminalne '' jakie ostatnio widziałem. Po cichu będę
                          liczył na coś więcej w tym temacie w przyszłości. -----</p>
                      </div>
                      <div class="comment-footer">
                        <div class="links">
                          <a title="Zgłoś komentarz" href="https://anime-odcinki.pl/zglos/?cid=86997">
                            <i class="fa fa-flag"></i>
                          </a>
                        </div>
                        <div class="links">
                          <a title="Dodaj player" href="https://anime-odcinki.pl/dodaj-player/?cid=86997">
                            <i class="fa fa-cloud-upload"></i>
                          </a>
                        </div>
                        <div class="links">
                          <a title="Dodaj Opis" href="https://anime-odcinki.pl/dodaj-opis/?cid=86997">
                            <i class="fa fa-pencil-square-o"></i>
                          </a>
                        </div>
                      </div>
                    </div>
                    <div id="comment-86988" class="comment-single clearfix">
                      <div class="comment-header clearfix">
                        <div class="user-info">
                          <img
                            src="https://anime-odcinki.pl/wp-content/uploads/avatars/54475/63c06bf04f776-bpthumb.png">
                          <div>
                            <a href="https://anime-odcinki.pl/czlonkowie/robokot/" class="">
                              @Freckles-san </a>
                            <p><span class="date">4 lata</span></p>
                          </div>
                        </div>
                        <div class="comment-counter">
                          <span class="count-up">0</span>
                          <a href="#" class="vote-up " data-cid="86988">
                            <span class="fa-stack fa-lg">
                              <i class="fa fa-square fa-stack-2x"></i>
                              <i class="fa fa-thumbs-up fa-stack-1x fa-inverse"></i>
                            </span>
                          </a>
                          <span class="count-down">0</span>
                          <a href="#" class="vote-down " data-cid="86988">
                            <span class="fa-stack fa-lg">
                              <i class="fa fa-square fa-stack-2x"></i>
                              <i class="fa fa-thumbs-down fa-stack-1x fa-inverse"></i>
                            </span>
                          </a>
                          <input type="hidden" class="user-vote" value="">
                          <input type="hidden" class="comment-nonce" value="860b1f2a2d">
                        </div>
                      </div>
                      <div class="comment-content">
                        <p class="comment-text">Anime bardzo podobne do zeszłosezonowego "Mayonaka no Occult Koumuin"
                          ale to jest znacznie lepsze. W końcu duet w anime który mi podszedł i nie był dodawany do nich
                          nowy bohater, osobowości są złożone i ciekawe aczkolwiek szkoda, że takie wylewne bez tajemnic
                          i większej głębi. Jednak nie zmienia to faktu, jak świetni są bohaterowie. Matoba i Tilarna,
                          różnią się ale z czasem się dogadują, ich znajomość poszła dość typową ścieżka jak przystało
                          na współprace dwóch policjantów którzy dopiero zaczęli ze sobą pracę, podobne relacje jak w
                          starych produkcjach z lat 80'tych czy 90'tych kiedy to na pożądku dziennych pojawiały się
                          filmy i seriale z tego typu wątkiem duetu. <span class="spoiler"
                            onclick="jQuery(this).toggleClass('hover')"><span>Jeden bohater traci kompana, a druga jest
                              w zasadzie nowa pełna pasji i naiwności spowodowanej świeżością ale radzi sobie, nie jest
                              kulą u nogi, na początku miałem nawet wrażanie, że to Matoba przy niej jest zbędny jeśli
                              chodzi o walki ale z czasem się bardzo dobrze uzupełniali.</span></span> Inni bohaterowie,
                          razi mnie to, że są aż tacy typowi a jak już któraś postać trochę mniej, to musi być to
                          podkreślane co chwile jak się pojawia <span class="spoiler"
                            onclick="jQuery(this).toggleClass('hover')"><span>tak jak postać tego geja, "tak wiemy, że
                              jest gejem, nie musicie tego przypominać co chwile", szef głównego bohatera który niby to
                              na wszystkich się drze ale jest sprawiedliwy, co też trzeba było ciągle
                              podkreślać</span></span>. Jakby autor się bał, że jak nie będzie podkreślał tych cech
                          osobowości u postaci to wszyscy ich zapomną. Postacie są bardzo w stylu tamtych seriali, można
                          by powiedzieć, że to hołd dla tamtych postaci ale też pójście na łatwiznę. Aczkolwiek tu, mamy
                          w typowo japońskim stylu czyli z odrobiną magii. Akcje są świetne, to nie jest seria gdzie
                          bohater będzie się darł i dzięki temu dostaje powerupa a i same kryminalne zagadki ogląda się
                          z zaciekawieniem, choć można by je rozwinąć. W całej tej serii, był może jeden odcinek który
                          wydał mi się słaby <span class="spoiler" onclick="jQuery(this).toggleClass('hover')"><span>ten
                              jak Tilarna uczyła się kierować</span></span> a po za tym, oglądało się bardzo przyjemnie.
                          Pierwsza akcja była dość zaskakująca, potem jednak brakowało mi tego zaskoczenia, samo
                          dochodzenia były ciekawe ale finały raczej przewidywalne jak np.<span class="spoiler"
                            onclick="jQuery(this).toggleClass('hover')"><span>od początku można było przewidzieć, że ta
                              żona tego polityka za wszystko odpowiada.</span></span> Universum jest świetnie
                          zaprojektowane, idzie go odczuć i się w niego wczuć. Muzyka otwarcia jest genialna, jak ją
                          usłyszałem na początku tak nie przywiałem, nawiązanie do lat 80'tych czy 90'tych, ending
                          trochę mniej ale wciąż bardzo dobry. Muzyka tła umiała dobrze naładować, ale jakoś nie
                          potrafię sobie żadnej przypomnieć. Kreska świetna, każda postać narysowana z pomysłem i bez
                          przesady. Szkoda, że rozwiązania historii są dość mocno do przewidzenia a postacie
                          drugoplanowe to mają zbyt wiele wspólnego ze schematami z seriali kryminalnych. Seria
                          przerosła moje oczekiwania. 8/10. Raczej wątpię w sezon 2, bo teraz takie serie na topie nie
                          są.</p>
                      </div>
                      <div class="comment-footer">
                        <div class="links">
                          <a title="Zgłoś komentarz" href="https://anime-odcinki.pl/zglos/?cid=86988">
                            <i class="fa fa-flag"></i>
                          </a>
                        </div>
                        <div class="links">
                          <a title="Dodaj player" href="https://anime-odcinki.pl/dodaj-player/?cid=86988">
                            <i class="fa fa-cloud-upload"></i>
                          </a>
                        </div>
                        <div class="links">
                          <a title="Dodaj Opis" href="https://anime-odcinki.pl/dodaj-opis/?cid=86988">
                            <i class="fa fa-pencil-square-o"></i>
                          </a>
                        </div>
                      </div>
                    </div>
                    <input type="hidden" id="comment-rest-nonce" value="f7c58982d5">
                  </section>
                  <script type="text/javascript">
                    var jq2 = window.jQuery;
                    jq2('#comments').on('click', '.comment-delete', function (e) {
                      e.preventDefault();
                      $this = jq2(this)
                      jq2("#com-del-dialog-confirm").dialog({
                        resizable: false,
                        height: "auto",
                        // width: 400,
                        modal: true,
                        buttons: {
                          Anuluj: function () {
                            jq2(this).dialog("close");
                          },
                          Usuń: function () {
                            jq2(this).dialog("close");
                            cid = $this.data('cid');
                            nonce = $this.data('nonce');
                            data = { action: 'comment_delete', cid: $this.data('cid'), nonce: $this.data('nonce') }
                            jq2.post(ajaxurl, data, function (response) {
                              if (response == 'err') {
                                jq2('#err-dialog').dialog();
                                return;
                              };
                              obj = JSON.parse(response);
                              if (obj.status == true) {
                                jq2('#comment-' + cid).slideUp().remove();
                              } else {
                                cEl = jq2('#comment-' + cid);
                                cEl.find('.comment-content').empty().html('<p>Komentarz usunięty</p>');
                                cEl.find('.comment-footer').remove();
                                cEl.find('.comment-counter').remove();
                              };
                            });
                          },
                        }
                      });
                    });
                    jq2('#comments').on('click', '.comment-reply', function (e) {
                      e.preventDefault();
                      jq2('html, body').animate({
                        scrollTop: $("#comments").offset().top
                      }, 2000);
                      jq2('#comment-loading').show();
                      $this = jq2(this)
                      cid = $this.data('cid');
                      nonce = $this.data('nonce');
                      data = { action: 'comment_reply', cid: $this.data('cid'), nonce: $this.data('nonce') }
                      jq2.post(ajaxurl, data, function (response) {
                        if (response == 'err') {
                          jq2('#err-dialog').dialog();
                          return;
                        };
                        obj = JSON.parse(response);
                        console.log(obj);
                        replyEl = jq2('#reply-to');
                        replyEl.find('#reply-to-user span').text(obj['comment_author']);
                        replyEl.find('#reply-to-comment').text(obj['comment_content']);
                        replyEl.slideDown();
                        jq2('#comment_parent').val(obj['comment_ID']);
                        jq2('#comment-loading').hide();
                      });
                    });
                    jq2('#remove-reply-to').on('click', function (e) {
                      e.preventDefault();
                      jq2('#reply-to').slideUp();
                      jq2('#comment_parent').val('0');
                    })
                    jq2('#comments').on('click', '.edit-submit', function (e) {
                      e.preventDefault();
                      data = jq2(this).closest('form').serialize();
                      jq2.post(ajaxurl, data, function (response) {
                        if (response == 'err') {
                          jq2('#err-dialog').dialog();
                          return;
                        };
                        if (response == 'limit') {
                          jq2('#com-limit-dialog').dialog();
                          return;
                        };
                        obj = JSON.parse(response);
                        jq2('#edit-comment-' + obj['comment_id']).remove();
                        comm = jq2('#comment-' + obj['comment_id']);
                        comm.find('.comment-footer').show();
                        if (obj['text']) {
                          comm.find('.comment-text').text(obj['text']).parent().show();
                          comm.find('.comment-edit').remove();
                          return;
                        };
                        comm.find('.comment-content').show();
                      });
                    });
                    jq2('#comments').on('click', '.comment-edit', function (e) {
                      e.preventDefault();
                      $this = jq2(this);
                      data = { action: 'get_edit_comment_form', comment_id: $this.data('cid'), nonce: $this.data('nonce') };
                      jq2.post(ajaxurl, data, function (response) {
                        if (response == 'limit') {
                          jq2('#com-limit-dialog').dialog();
                          return;
                        };
                        comm = jq2('#comment-' + $this.data('cid'));
                        comm.find('.comment-footer').hide();
                        comm.find('.comment-content').hide();
                        comm.append(response);
                      });
                    });
                    jq2('#comments').on('click', '.vote-up', function (e) {
                      e.preventDefault();
                      update_comment_rate(this, 1);
                    });
                    jq2('#comments').on('click', '.vote-down', function (e) {
                      e.preventDefault();
                      update_comment_rate(this, -1);
                    });
                    function update_comment_rate(obj, rate) {
                      var $this = jq2(obj);
                      userVote = $this.parent().find('.user-vote');
                      if (userVote.val() == rate) {
                        rate = 0;
                      };
                      rnonce = jq2('#comment-rest-nonce').val();
                      nonce = $this.parent().find('.comment-nonce').val();
                      jq2.ajax({
                        // url: "https://a-.pl/wp-json/comment/rate",
                        url: "https://anime-odcinki.pl/wp-json/comment/rate",
                        method: "POST",
                        data: { comment_id: $this.data('cid'), rate: rate, nonce: nonce },
                        async: true,
                        cache: false,
                        beforeSend: function (xhr) {
                          xhr.setRequestHeader('X-WP-Nonce', rnonce);
                        },
                        error: function (xhr) {
                          if (xhr.responseJSON.code == 'rest_forbidden') {
                            jq2("#com-nolog-dialog").dialog();
                            return;
                          };
                          if (xhr.responseJSON.code == 'rest_invalid_data') {
                            jq2('#err-dialog').dialog();
                            return;
                          };
                        },
                        success: function (response) {
                          if (rate == '1') {
                            $this.addClass('active').next().next().removeClass('active');
                          };
                          if (rate == '-1') {
                            $this.addClass('active').prev().prev().removeClass('active');
                          };
                          if (rate == '0') {
                            $this.parent().find('a').removeClass('active');
                          };
                          userVote.val(rate);
                          $this.parent().find('.count-up').text(response[1]);
                          $this.parent().find('.count-down').text(response[-1]);
                        },
                      });
                    }
                    jq2('#comments').on('click', '.spoiler-button', function (e) {
                      e.preventDefault();
                      comm = jq2(this).prev();
                      comm.val(comm.val() + '[spoiler][/spoiler]');
                    })
                  </script>
                  <script> $ = window.jQuery; </script>
                </div>
              </div>
            </section> <!-- /.block -->
            <center><a href="https://e-neko.pl" target="_blank" rel="noopener"><img class="aligncenter"
                  src="https://e-neko.pl/wp-content/uploads/2018/10/aaaaaaaaa-11.jpg"
                  alt="E-NEKO.PL • Sklep Otaku E-NEKO.PL" width="728" height="90"></a></center>
            <!-- /.block -->
          </div>
        </section>
        <script type="text/javascript"> var _qasp = _qasp || []; _qasp.push(['setFastPAID']);</script>
        <aside class="col-sm-3" role="complementary">
          <div class="region region-sidebar-second">
          </div>
        </aside> <!-- /#sidebar-second -->
      </div>
    </div>
    <div data-elementor-type="footer" data-elementor-id="63316"
      class="elementor elementor-63316 elementor-location-footer">
      <div class="elementor-element elementor-element-52f8324 e-flex e-con-boxed e-con e-parent" data-id="52f8324"
        data-element_type="container" data-settings="{&quot;content_width&quot;:&quot;boxed&quot;}"
        data-core-v316-plus="true">
        <div class="e-con-inner">
          <div class="elementor-element elementor-element-205fd42 elementor-widget elementor-widget-html"
            data-id="205fd42" data-element_type="widget" data-widget_type="html.default">
            <div class="elementor-widget-container">
              <center>
                <div class="spolecznoscinet" id="spolecznosci-5470"></div>
              </center>
              <center>
                <div class="spolecznoscinet" id="spolecznosci-5605"></div>
              </center>
            </div>
          </div>
        </div>
      </div>
      <section
        class="elementor-section elementor-top-section elementor-element elementor-element-709e161d elementor-hidden-tablet elementor-hidden-mobile elementor-section-content-top elementor-section-boxed elementor-section-height-default elementor-section-height-default"
        data-id="709e161d" data-element_type="section">
        <div class="elementor-container elementor-column-gap-default">
          <div
            class="elementor-column elementor-col-33 elementor-top-column elementor-element elementor-element-1aedfa2f elementor-hidden-tablet elementor-hidden-mobile"
            data-id="1aedfa2f" data-element_type="column">
            <div class="elementor-widget-wrap elementor-element-populated">
              <div
                class="elementor-element elementor-element-54ff6c26 elementor-hidden-tablet elementor-hidden-mobile elementor-widget__width-initial elementor-widget elementor-widget-sidebar"
                data-id="54ff6c26" data-element_type="widget" data-widget_type="sidebar.default">
                <div class="elementor-widget-container">
                  <li id="text-20" class="widget widget_text">
                    <h2 class="widgettitle">Dodane Filmy</h2>
                    <div class="textwidget">
                      <style>
                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post h2.wpucv-post-title {
                          font-size: 20px !important;
                          line-height: 26px !important;
                          font-weight: 700 !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post .wpucv-post-title,
                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post .wpucv-post-title a,
                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post .wpucv-post-title a:visited {
                          color: #232323 !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post .wpucv-post-title a:hover,
                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post .wpucv-post-title a:active {
                          color: #232323 !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post .wpucv-post-meta,
                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post .wpucv-post-meta a {
                          font-size: 12px !important;
                          line-height: 16px !important;
                          font-weight: 400 !important;
                          color: #888888 !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post p.wpucv-excerpt {
                          font-size: 13px !important;
                          line-height: 17px !important;
                          font-weight: 400 !important;
                          color: #333333 !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post a.wpucv-read-more,
                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post a.wpucv-read-more.wpucv-button {
                          color: #FFFFFF !important;
                          font-size: 14px !important;
                          line-height: 14px !important;
                          font-weight: 400 !important;
                          -webkit-transition: all 0.7s !important;
                          -moz-transition: all 0.7s !important;
                          -o-transition: all 0.7s !important;
                          transition: all 0.7s !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post a.wpucv-read-more,
                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post a.wpucv-read-more.wpucv-button {
                          background-color: #5e5e5e !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post a.wpucv-read-more:hover,
                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post a.wpucv-read-more:active,
                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post a.wpucv-read-more.wpucv-button:hover,
                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post a.wpucv-read-more.wpucv-button:active {
                          color: #FFFFFF !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post a.wpucv-read-more.wpucv-button:hover,
                        #list_651af4f512cb5 .wpucv-list article.wpucv-featured-post a.wpucv-read-more.wpucv-button:active {
                          background-color: #5e5e5e !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article h2.wpucv-post-title {
                          font-size: 20px !important;
                          line-height: 35px !important;
                          font-weight: 700 !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article .wpucv-post-title,
                        #list_651af4f512cb5 .wpucv-list article .wpucv-post-title a,
                        #list_651af4f512cb5 .wpucv-list article .wpucv-post-title a:visited {
                          color: #fdfdfd !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article .wpucv-post-title a:hover,
                        #list_651af4f512cb5 .wpucv-list article .wpucv-post-title a:active {
                          color: #f4f4f4 !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article .wpucv-post-meta {
                          font-size: 12px !important;
                          line-height: 16px !important;
                          font-weight: 300 !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article .wpucv-post-meta,
                        #list_651af4f512cb5 .wpucv-list article .wpucv-post-meta a,
                        #list_651af4f512cb5 .wpucv-list article .wpucv-post-meta a:visited,
                        #list_651af4f512cb5 .wpucv-list article .wpucv-post-meta a:hover,
                        #list_651af4f512cb5 .wpucv-list article .wpucv-post-meta a:active {
                          color: #e7e7e7 !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article p.wpucv-excerpt {
                          font-size: 13px !important;
                          line-height: 17px !important;
                          font-weight: 300 !important;
                          color: #f6f6f6 !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article a.wpucv-read-more,
                        #list_651af4f512cb5 .wpucv-list article a.wpucv-read-more.wpucv-button {
                          color: #FFFFFF !important;
                          font-size: 14px !important;
                          line-height: 14px !important;
                          font-weight: 400 !important;
                          -webkit-transition: all 0.7s !important;
                          -moz-transition: all 0.7s !important;
                          -o-transition: all 0.7s !important;
                          transition: all 0.7s !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article a.wpucv-read-more.wpucv-button {
                          background-color: #5e5e5e !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article a.wpucv-read-more:hover,
                        #list_651af4f512cb5 .wpucv-list article a.wpucv-read-more:active,
                        #list_651af4f512cb5 .wpucv-list article a.wpucv-read-more.wpucv-button:hover,
                        #list_651af4f512cb5 .wpucv-list article a.wpucv-read-more.wpucv-button:active {
                          color: #FFFFFF !important;
                        }

                        #list_651af4f512cb5 .wpucv-list article a.wpucv-read-more.wpucv-button:hover,
                        #list_651af4f512cb5 .wpucv-list article a.wpucv-read-more.wpucv-button:active {
                          background-color: #5e5e5e !important;
                        }

                        #list_651af4f512cb5 .wpucv-pagination-wrapper .wpucv-pagination li a {
                          color: #FFFFFF !important;
                        }

                        #list_651af4f512cb5 .wpucv-pagination-wrapper .wpucv-pagination li a:hover,
                        #list_651af4f512cb5 .wpucv-pagination-wrapper .wpucv-pagination li span {
                          color: #FFFFFF !important;
                        }

                        #list_651af4f512cb5 .wpucv-list.wpucv-style06 article {
                          text-align: center;
                        }

                        #list_651af4f512cb5 .wpucv-list.wpucv-style02 article {
                          padding-left: 10px !important;
                          padding-right: 10px !important;
                        }

                        #list_651af4f512cb5 .wpucv-list.wpucv-style02 article {
                          padding-top: 10px !important;
                          padding-bottom: 10px !important;
                        }

                        #list_651af4f512cb5 .wpucv-list.wpucv-style05 .cell {
                          padding: 5px !important;
                        }
                      </style>
                      <div class="wpucv" id="list_651af4f512cb5">
                        <div class="wpucv-list-wrapper">
                          <div class="wpucv-list wpucv-style02">
                            <div class="grid-x">
                              <article id="post-7197" class="cell small-12 medium-6" itemscope=""
                                itemtype="http://schema.org/Article">
                                <a class="wpucv-image-link-wrapper" href="https://anime-odcinki.pl/anime/harmonie/"
                                  title="Harmonie">
                                  <img class="wpucv-image-responsive"
                                    src="https://anime-odcinki.pl/wp-content/uploads/2014/04/f97f11689340ffd9c153e0293f2e8e8b1381785096_full-350x495-1-350x400.jpg"
                                    srcset="https://anime-odcinki.pl/wp-content/uploads/2014/04/f97f11689340ffd9c153e0293f2e8e8b1381785096_full-350x495-1-350x240.jpg 360w, https://anime-odcinki.pl/wp-content/uploads/2014/04/f97f11689340ffd9c153e0293f2e8e8b1381785096_full-350x495-1-350x400.jpg 600w"
                                    sizes="(max-width: 639px) 600w, (min-width: 1023px) 360w, (min-width: 1024px) 600w"
                                    title="Harmonie" alt="Harmonie" itemprop="image">
                                </a>
                                <h2 class="wpucv-post-title" itemprop="name headline">
                                  <a href="https://anime-odcinki.pl/anime/harmonie/">Harmonie</a>
                                </h2>
                                <p class="wpucv-excerpt">Każdy człowiek, kimkolwiek by nie był, posiada swój mały,
                                  intymny świat. Ten mój, dla przykładu, pełen jest żarliwych dyskusji o…</p>
                              </article>
                              <article id="post-2319" class="cell small-12 medium-6" itemscope=""
                                itemtype="http://schema.org/Article">
                                <a class="wpucv-image-link-wrapper"
                                  href="https://anime-odcinki.pl/anime/berserk-ougon-jidai-hen-ii-doldrey-kouryaku/"
                                  title="Berserk: Ougon Jidai-hen II – Doldrey Kouryaku">
                                  <img class="wpucv-image-responsive"
                                    src="https://anime-odcinki.pl/wp-content/uploads/2013/03/23111-350x455-1-350x400.jpg"
                                    srcset="https://anime-odcinki.pl/wp-content/uploads/2013/03/23111-350x455-1-350x240.jpg 360w, https://anime-odcinki.pl/wp-content/uploads/2013/03/23111-350x455-1-350x400.jpg 600w"
                                    sizes="(max-width: 639px) 600w, (min-width: 1023px) 360w, (min-width: 1024px) 600w"
                                    title="Berserk: Ougon Jidai-hen II – Doldrey Kouryaku"
                                    alt="Berserk: Ougon Jidai-hen II – Doldrey Kouryaku" itemprop="image">
                                </a>
                                <h2 class="wpucv-post-title" itemprop="name headline">
                                  <a href="https://anime-odcinki.pl/anime/berserk-ougon-jidai-hen-ii-doldrey-kouryaku/">Berserk:
                                    Ougon Jidai-hen II – Doldrey Kouryaku</a>
                                </h2>
                                <p class="wpucv-excerpt">Drugi film z serii Berserk: Golden Age Arc. Tym razem odkryje
                                  przed nami historię zdobywania ważnej dla Bandy Jastrzębia twierdzy.…</p>
                              </article>
                              <article id="post-31381" class="cell small-12 medium-6" itemscope=""
                                itemtype="http://schema.org/Article">
                                <a class="wpucv-image-link-wrapper"
                                  href="https://anime-odcinki.pl/anime/chuunibyou-demo-koi-ga-shitai-movie-take-on-me/"
                                  title="Chuunibyou demo Koi ga Shitai! Movie: Take On Me">
                                  <img class="wpucv-image-responsive"
                                    src="https://anime-odcinki.pl/wp-content/uploads/2019/08/89974l1-424x400.jpg"
                                    srcset="https://anime-odcinki.pl/wp-content/uploads/2019/08/89974l1-360x240.jpg 360w, https://anime-odcinki.pl/wp-content/uploads/2019/08/89974l1-424x400.jpg 600w"
                                    sizes="(max-width: 639px) 600w, (min-width: 1023px) 360w, (min-width: 1024px) 600w"
                                    title="Chuunibyou demo Koi ga Shitai! Movie: Take On Me"
                                    alt="Chuunibyou demo Koi ga Shitai! Movie: Take On Me" itemprop="image">
                                </a>
                                <h2 class="wpucv-post-title" itemprop="name headline">
                                  <a
                                    href="https://anime-odcinki.pl/anime/chuunibyou-demo-koi-ga-shitai-movie-take-on-me/">Chuunibyou
                                    demo Koi ga Shitai! Movie: Take On Me</a>
                                </h2>
                                <p class="wpucv-excerpt">Yuuta Togashi cierpiał w gimnazjum na tzw. „chuunibyou”, swego
                                  rodzaju „chorobę”, przez którą przechodzą dorastający nastolatkowie (okres buntu,
                                  przesadna nieśmiałość,…</p>
                              </article>
                              <article id="post-65909" class="cell small-12 medium-6" itemscope=""
                                itemtype="http://schema.org/Article">
                                <a class="wpucv-image-link-wrapper"
                                  href="https://anime-odcinki.pl/anime/ryuu-to-sobakasu-no-hime/"
                                  title="Ryuu to Sobakasu no Hime">
                                  <img class="wpucv-image-responsive"
                                    src="https://anime-odcinki.pl/wp-content/uploads/2023/09/120026l-400x400.jpg"
                                    srcset="https://anime-odcinki.pl/wp-content/uploads/2023/09/120026l-360x240.jpg 360w, https://anime-odcinki.pl/wp-content/uploads/2023/09/120026l-400x400.jpg 600w"
                                    sizes="(max-width: 639px) 600w, (min-width: 1023px) 360w, (min-width: 1024px) 600w"
                                    title="Ryuu to Sobakasu no Hime" alt="Ryuu to Sobakasu no Hime" itemprop="image">
                                </a>
                                <h2 class="wpucv-post-title" itemprop="name headline">
                                  <a href="https://anime-odcinki.pl/anime/ryuu-to-sobakasu-no-hime/">Ryuu to Sobakasu no
                                    Hime</a>
                                </h2>
                                <p class="wpucv-excerpt">Belle to historia o wrażliwej Suzu, która wraz ze swoim ojcem
                                  mieszka w prowincjonalnej prefekturze Kochi. Dziewczyna w młodym wieku…</p>
                              </article>
                              <article id="post-65662" class="cell small-12 medium-6" itemscope=""
                                itemtype="http://schema.org/Article">
                                <a class="wpucv-image-link-wrapper" href="https://anime-odcinki.pl/anime/betsu-sekai/"
                                  title="Betsu Sekai">
                                  <img class="wpucv-image-responsive"
                                    src="https://anime-odcinki.pl/wp-content/uploads/2023/09/kanata-amane-betsu-sekai-1-600x400.webp"
                                    srcset="https://anime-odcinki.pl/wp-content/uploads/2023/09/kanata-amane-betsu-sekai-1-360x240.webp 360w, https://anime-odcinki.pl/wp-content/uploads/2023/09/kanata-amane-betsu-sekai-1-600x400.webp 600w"
                                    sizes="(max-width: 639px) 600w, (min-width: 1023px) 360w, (min-width: 1024px) 600w"
                                    title="Betsu Sekai" alt="Betsu Sekai" itemprop="image">
                                </a>
                                <h2 class="wpucv-post-title" itemprop="name headline">
                                  <a href="https://anime-odcinki.pl/anime/betsu-sekai/">Betsu Sekai</a>
                                </h2>
                                <p class="wpucv-excerpt">Wideo muzyczne do piosenki Betsu Sekai w wykonaniu Kanata
                                  Amane.</p>
                              </article>
                              <article id="post-65455" class="cell small-12 medium-6" itemscope=""
                                itemtype="http://schema.org/Article">
                                <a class="wpucv-image-link-wrapper"
                                  href="https://anime-odcinki.pl/anime/fumiko-no-kokuhaku/" title="Fumiko no Kokuhaku">
                                  <img class="wpucv-image-responsive"
                                    src="https://anime-odcinki.pl/wp-content/uploads/2023/09/7301823.3_waifu2x_art_noise2_scale-564x400.png"
                                    srcset="https://anime-odcinki.pl/wp-content/uploads/2023/09/7301823.3_waifu2x_art_noise2_scale-360x240.png 360w, https://anime-odcinki.pl/wp-content/uploads/2023/09/7301823.3_waifu2x_art_noise2_scale-564x400.png 600w"
                                    sizes="(max-width: 639px) 600w, (min-width: 1023px) 360w, (min-width: 1024px) 600w"
                                    title="Fumiko no Kokuhaku" alt="Fumiko no Kokuhaku" itemprop="image">
                                </a>
                                <h2 class="wpucv-post-title" itemprop="name headline">
                                  <a href="https://anime-odcinki.pl/anime/fumiko-no-kokuhaku/">Fumiko no Kokuhaku</a>
                                </h2>
                                <p class="wpucv-excerpt">Jak sam tytuł mówi&nbsp;– oto wyznanie miłosne młodej Fumiko.
                                  Jeżeli ktoś jednak spodziewa się romansu niech wie, że&nbsp;Wyznanie Fumiko&nbsp;nigdy
                                  koło…</p>
                              </article>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </li>
                </div>
              </div>
            </div>
          </div>
          <div
            class="elementor-column elementor-col-33 elementor-top-column elementor-element elementor-element-ef72651"
            data-id="ef72651" data-element_type="column">
            <div class="elementor-widget-wrap elementor-element-populated">
              <div
                class="elementor-element elementor-element-42c0fc3b elementor-hidden-tablet elementor-hidden-mobile elementor-widget__width-initial elementor-widget elementor-widget-sidebar"
                data-id="42c0fc3b" data-element_type="widget" data-widget_type="sidebar.default">
                <div class="elementor-widget-container">
                  <li id="text-21" class="widget widget_text">
                    <h2 class="widgettitle">Nadchodzące tytuły</h2>
                    <div class="textwidget">
                      <style>
                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post h2.wpucv-post-title {
                          font-size: 20px !important;
                          line-height: 26px !important;
                          font-weight: 700 !important;
                        }

                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post .wpucv-post-title,
                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post .wpucv-post-title a,
                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post .wpucv-post-title a:visited {
                          color: #232323 !important;
                        }

                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post .wpucv-post-title a:hover,
                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post .wpucv-post-title a:active {
                          color: #232323 !important;
                        }

                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post .wpucv-post-meta,
                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post .wpucv-post-meta a {
                          font-size: 12px !important;
                          line-height: 16px !important;
                          font-weight: 400 !important;
                          color: #888888 !important;
                        }

                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post p.wpucv-excerpt {
                          font-size: 13px !important;
                          line-height: 17px !important;
                          font-weight: 400 !important;
                          color: #333333 !important;
                        }

                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post a.wpucv-read-more,
                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post a.wpucv-read-more.wpucv-button {
                          color: #FFFFFF !important;
                          font-size: 14px !important;
                          line-height: 14px !important;
                          font-weight: 400 !important;
                          -webkit-transition: all 0.7s !important;
                          -moz-transition: all 0.7s !important;
                          -o-transition: all 0.7s !important;
                          transition: all 0.7s !important;
                        }

                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post a.wpucv-read-more,
                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post a.wpucv-read-more.wpucv-button {
                          background-color: #5e5e5e !important;
                        }

                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post a.wpucv-read-more:hover,
                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post a.wpucv-read-more:active,
                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post a.wpucv-read-more.wpucv-button:hover,
                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post a.wpucv-read-more.wpucv-button:active {
                          color: #FFFFFF !important;
                        }

                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post a.wpucv-read-more.wpucv-button:hover,
                        #list_651af4f51750b .wpucv-list article.wpucv-featured-post a.wpucv-read-more.wpucv-button:active {
                          background-color: #5e5e5e !important;
                        }

                        #list_651af4f51750b .wpucv-list article h2.wpucv-post-title {
                          font-size: 20px !important;
                          line-height: 26px !important;
                          font-weight: 700 !important;
                        }

                        #list_651af4f51750b .wpucv-list article .wpucv-post-title,
                        #list_651af4f51750b .wpucv-list article .wpucv-post-title a,
                        #list_651af4f51750b .wpucv-list article .wpucv-post-title a:visited {
                          color: #ffffff !important;
                        }

                        #list_651af4f51750b .wpucv-list article .wpucv-post-title a:hover,
                        #list_651af4f51750b .wpucv-list article .wpucv-post-title a:active {
                          color: #e8e8e8 !important;
                        }

                        #list_651af4f51750b .wpucv-list article .wpucv-post-meta {
                          font-size: 12px !important;
                          line-height: 16px !important;
                          font-weight: 400 !important;
                        }

                        #list_651af4f51750b .wpucv-list article .wpucv-post-meta,
                        #list_651af4f51750b .wpucv-list article .wpucv-post-meta a,
                        #list_651af4f51750b .wpucv-list article .wpucv-post-meta a:visited,
                        #list_651af4f51750b .wpucv-list article .wpucv-post-meta a:hover,
                        #list_651af4f51750b .wpucv-list article .wpucv-post-meta a:active {
                          color: #ededed !important;
                        }

                        #list_651af4f51750b .wpucv-list article p.wpucv-excerpt {
                          font-size: 13px !important;
                          line-height: 17px !important;
                          font-weight: 400 !important;
                          color: #f5f5f5 !important;
                        }

                        #list_651af4f51750b .wpucv-list article a.wpucv-read-more,
                        #list_651af4f51750b .wpucv-list article a.wpucv-read-more.wpucv-button {
                          color: #FFFFFF !important;
                          font-size: 14px !important;
                          line-height: 14px !important;
                          font-weight: 400 !important;
                          -webkit-transition: all 0.7s !important;
                          -moz-transition: all 0.7s !important;
                          -o-transition: all 0.7s !important;
                          transition: all 0.7s !important;
                        }

                        #list_651af4f51750b .wpucv-list article a.wpucv-read-more.wpucv-button {
                          background-color: #5e5e5e !important;
                        }

                        #list_651af4f51750b .wpucv-list article a.wpucv-read-more:hover,
                        #list_651af4f51750b .wpucv-list article a.wpucv-read-more:active,
                        #list_651af4f51750b .wpucv-list article a.wpucv-read-more.wpucv-button:hover,
                        #list_651af4f51750b .wpucv-list article a.wpucv-read-more.wpucv-button:active {
                          color: #FFFFFF !important;
                        }

                        #list_651af4f51750b .wpucv-list article a.wpucv-read-more.wpucv-button:hover,
                        #list_651af4f51750b .wpucv-list article a.wpucv-read-more.wpucv-button:active {
                          background-color: #5e5e5e !important;
                        }

                        #list_651af4f51750b .wpucv-pagination-wrapper .wpucv-pagination li a {
                          color: #FFFFFF !important;
                          background-color: #4584ED !important;
                        }

                        #list_651af4f51750b .wpucv-pagination-wrapper .wpucv-pagination li a:hover,
                        #list_651af4f51750b .wpucv-pagination-wrapper .wpucv-pagination li span {
                          color: #FFFFFF !important;
                          background-color: #adadad !important;
                        }

                        #list_651af4f51750b .wpucv-list.wpucv-style06 article {
                          text-align: center;
                        }

                        #list_651af4f51750b .wpucv-list.wpucv-style02 article {
                          padding-left: 10px !important;
                          padding-right: 10px !important;
                        }

                        #list_651af4f51750b .wpucv-list.wpucv-style02 article {
                          padding-top: 10px !important;
                          padding-bottom: 10px !important;
                        }

                        #list_651af4f51750b .wpucv-list.wpucv-style05 .cell {
                          padding: 5px !important;
                        }
                      </style>
                      <div class="wpucv" id="list_651af4f51750b">
                        <div class="wpucv-list-wrapper">
                          <div class="wpucv-list wpucv-style02">
                            <div class="grid-x">
                              <article id="post-65832" class="cell small-12 medium-6" itemscope=""
                                itemtype="http://schema.org/Article">
                                <a class="wpucv-image-link-wrapper"
                                  href="https://anime-odcinki.pl/anime/kizumonogatari-koyomi-vamp/"
                                  title="Kizumonogatari: Koyomi Vamp">
                                  <img class="wpucv-image-responsive"
                                    src="https://anime-odcinki.pl/wp-content/uploads/2023/09/14541662c2351803c7_ca-1-600x400.jpg"
                                    srcset="https://anime-odcinki.pl/wp-content/uploads/2023/09/14541662c2351803c7_ca-1-360x240.jpg 360w, https://anime-odcinki.pl/wp-content/uploads/2023/09/14541662c2351803c7_ca-1-600x400.jpg 600w"
                                    sizes="(max-width: 639px) 600w, (min-width: 1023px) 360w, (min-width: 1024px) 600w"
                                    title="Kizumonogatari: Koyomi Vamp" alt="Kizumonogatari: Koyomi Vamp"
                                    itemprop="image">
                                </a>
                                <h2 class="wpucv-post-title" itemprop="name headline">
                                  <a href="https://anime-odcinki.pl/anime/kizumonogatari-koyomi-vamp/">Kizumonogatari:
                                    Koyomi Vamp</a>
                                </h2>
                                <p class="wpucv-excerpt">Kompilacja trzech filmów Kizumonogatari.</p>
                              </article>
                              <article id="post-64800" class="cell small-12 medium-6" itemscope=""
                                itemtype="http://schema.org/Article">
                                <a class="wpucv-image-link-wrapper"
                                  href="https://anime-odcinki.pl/anime/toaru-ossan-no-vrmmo-katsudouki/"
                                  title="Toaru Ossan no VRMMO Katsudouki">
                                  <img class="wpucv-image-responsive"
                                    src="https://anime-odcinki.pl/wp-content/uploads/2023/08/Toaru_Ossan_no_VRMMO_Katsudouki-600x400.webp"
                                    srcset="https://anime-odcinki.pl/wp-content/uploads/2023/08/Toaru_Ossan_no_VRMMO_Katsudouki-360x240.webp 360w, https://anime-odcinki.pl/wp-content/uploads/2023/08/Toaru_Ossan_no_VRMMO_Katsudouki-600x400.webp 600w"
                                    sizes="(max-width: 639px) 600w, (min-width: 1023px) 360w, (min-width: 1024px) 600w"
                                    title="Toaru Ossan no VRMMO Katsudouki" alt="Toaru Ossan no VRMMO Katsudouki"
                                    itemprop="image">
                                </a>
                                <h2 class="wpucv-post-title" itemprop="name headline">
                                  <a href="https://anime-odcinki.pl/anime/toaru-ossan-no-vrmmo-katsudouki/">Toaru Ossan
                                    no VRMMO Katsudouki</a>
                                </h2>
                                <p class="wpucv-excerpt">Gdy na rynku pojawia się nowa gra VRMMO, pt. „One More Free
                                  Life Online” 38&shy;‑letni Taichi Tanaka loguje się do…</p>
                              </article>
                              <article id="post-64397" class="cell small-12 medium-6" itemscope=""
                                itemtype="http://schema.org/Article">
                                <a class="wpucv-image-link-wrapper"
                                  href="https://anime-odcinki.pl/anime/bokura-no-ameiro-protocol/"
                                  title="Bokura no Ameiro Protocol">
                                  <img class="wpucv-image-responsive"
                                    src="https://anime-odcinki.pl/wp-content/uploads/2023/08/137014l-424x400.jpg"
                                    srcset="https://anime-odcinki.pl/wp-content/uploads/2023/08/137014l-360x240.jpg 360w, https://anime-odcinki.pl/wp-content/uploads/2023/08/137014l-424x400.jpg 600w"
                                    sizes="(max-width: 639px) 600w, (min-width: 1023px) 360w, (min-width: 1024px) 600w"
                                    title="Bokura no Ameiro Protocol" alt="Bokura no Ameiro Protocol" itemprop="image">
                                </a>
                                <h2 class="wpucv-post-title" itemprop="name headline">
                                  <a href="https://anime-odcinki.pl/anime/bokura-no-ameiro-protocol/">Bokura no Ameiro
                                    Protocol</a>
                                </h2>
                                <p class="wpucv-excerpt">Dramat młodzieżowy koncentruje się na świecie e-sportu. Shun
                                  Tokinoya jest uczniem drugiej klasy liceum, który po przypadkowej śmierci ojca
                                  rozpoczął…</p>
                              </article>
                              <article id="post-64393" class="cell small-12 medium-6" itemscope=""
                                itemtype="http://schema.org/Article">
                                <a class="wpucv-image-link-wrapper" href="https://anime-odcinki.pl/anime/bikkurimen/"
                                  title="Bikkurimen">
                                  <img class="wpucv-image-responsive"
                                    src="https://anime-odcinki.pl/wp-content/uploads/2023/08/135108l-424x400.jpg"
                                    srcset="https://anime-odcinki.pl/wp-content/uploads/2023/08/135108l-360x240.jpg 360w, https://anime-odcinki.pl/wp-content/uploads/2023/08/135108l-424x400.jpg 600w"
                                    sizes="(max-width: 639px) 600w, (min-width: 1023px) 360w, (min-width: 1024px) 600w"
                                    title="Bikkurimen" alt="Bikkurimen" itemprop="image">
                                </a>
                                <h2 class="wpucv-post-title" itemprop="name headline">
                                  <a href="https://anime-odcinki.pl/anime/bikkurimen/">Bikkurimen</a>
                                </h2>
                                <p class="wpucv-excerpt">Całkowicie oryginalna historia z postaciami z „czekoladowych
                                  wafli Bikkuriman” firmy LOTTE. Zachęcamy do obejrzenia i ocenienia serii.</p>
                              </article>
                              <article id="post-64390" class="cell small-12 medium-6" itemscope=""
                                itemtype="http://schema.org/Article">
                                <a class="wpucv-image-link-wrapper"
                                  href="https://anime-odcinki.pl/anime/tate-no-yuusha-no-nariagari-3/"
                                  title="Tate no Yuusha no Nariagari 3">
                                  <img class="wpucv-image-responsive"
                                    src="https://anime-odcinki.pl/wp-content/uploads/2023/08/136926l-423x400.jpg"
                                    srcset="https://anime-odcinki.pl/wp-content/uploads/2023/08/136926l-360x240.jpg 360w, https://anime-odcinki.pl/wp-content/uploads/2023/08/136926l-423x400.jpg 600w"
                                    sizes="(max-width: 639px) 600w, (min-width: 1023px) 360w, (min-width: 1024px) 600w"
                                    title="Tate no Yuusha no Nariagari 3" alt="Tate no Yuusha no Nariagari 3"
                                    itemprop="image">
                                </a>
                                <h2 class="wpucv-post-title" itemprop="name headline">
                                  <a href="https://anime-odcinki.pl/anime/tate-no-yuusha-no-nariagari-3/">Tate no Yuusha
                                    no Nariagari 3</a>
                                </h2>
                                <p class="wpucv-excerpt">Trzeci sezon Tate no Yuusha no Nariagari… Iwatani Naofumi
                                  zostaje przyzwany do innego świata aby stać się jednym z Bohaterów…</p>
                              </article>
                              <article id="post-64385" class="cell small-12 medium-6" itemscope=""
                                itemtype="http://schema.org/Article">
                                <a class="wpucv-image-link-wrapper" href="https://anime-odcinki.pl/anime/naruto-2023/"
                                  title="Naruto (2023)">
                                  <img class="wpucv-image-responsive"
                                    src="https://anime-odcinki.pl/wp-content/uploads/2023/08/naruto01_jma1-495x400.jpg"
                                    srcset="https://anime-odcinki.pl/wp-content/uploads/2023/08/naruto01_jma1-360x240.jpg 360w, https://anime-odcinki.pl/wp-content/uploads/2023/08/naruto01_jma1-495x400.jpg 600w"
                                    sizes="(max-width: 639px) 600w, (min-width: 1023px) 360w, (min-width: 1024px) 600w"
                                    title="Naruto (2023)" alt="Naruto (2023)" itemprop="image">
                                </a>
                                <h2 class="wpucv-post-title" itemprop="name headline">
                                  <a href="https://anime-odcinki.pl/anime/naruto-2023/">Naruto (2023)</a>
                                </h2>
                                <p class="wpucv-excerpt">Cztery nowe odcinki na 20-lecie pierwszej serii Naruto.
                                  Oficjalnie ogłoszono, że już we wrześniu 2023 zadebiutują aż cztery zupełnie nowe…</p>
                              </article>
                            </div>
                          </div>
                        </div>
                        <div class="wpucv-pagination-wrapper clearfix">
                        </div>
                      </div>
                    </div>
                  </li>
                </div>
              </div>
            </div>
          </div>
          <div
            class="elementor-column elementor-col-33 elementor-top-column elementor-element elementor-element-ddf8850"
            data-id="ddf8850" data-element_type="column">
            <div class="elementor-widget-wrap elementor-element-populated">
              <div
                class="elementor-element elementor-element-da0cbb4 elementor-hidden-tablet elementor-hidden-mobile elementor-widget__width-initial elementor-widget elementor-widget-sidebar"
                data-id="da0cbb4" data-element_type="widget" data-widget_type="sidebar.default">
                <div class="elementor-widget-container">
                  <li id="cwp-widget-2" class="widget widget_recent_comments comments_widget_plus">
                    <h2 class="widgettitle">Komentarze</h2>
                    <ul class="cwp-ul ">
                      <li class="recentcomments cwp-li"><a class="comment-link cwp-comment-link"
                          href="https://anime-odcinki.pl/anime/ningen-fushin-no-boukensha-tachi-ga-sekai-wo-sukuu-you-desu/#comment-143777"><span
                            class="comment-avatar cwp-avatar rounded"><img alt="BatKarl422"
                              src="https://anime-odcinki.pl/wp-content/uploads/avatars/57922/5cb19c974a93e-bpfull.jpg"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/avatars/57922/5cb19c974a93e-bpfull.jpg 2x"
                              class="avatar avatar-55 photo" height="55" width="55" loading="lazy"
                              decoding="async"></span></a><span class="cwp-comment-title"><span
                            class="comment-author-link cwp-author-link">Karol</span> <span
                            class="cwp-on-text">komentuje</span> <a class="comment-link cwp-comment-link"
                            href="https://anime-odcinki.pl/anime/ningen-fushin-no-boukensha-tachi-ga-sekai-wo-sukuu-you-desu/#comment-143777">Ningen
                            Fushin no Boukensha-tachi ga Sekai wo Sukuu you desu</a></span><span
                          class="comment-excerpt cwp-comment-excerpt">Studio które robiło anime, dysponuje chyba 30
                          prac…</span></li>
                      <li class="recentcomments cwp-li"><a class="comment-link cwp-comment-link"
                          href="https://anime-odcinki.pl/anime/megumi-no-daigo-kyuukoku-no-orange/1/#comment-143776"><span
                            class="comment-avatar cwp-avatar rounded"><img alt="tracz.wwwjakub.jakub777"
                              src="https://anime-odcinki.pl/wp-content/uploads/avatars/54475/63c06bf0399b5-bpfull.png"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/avatars/54475/63c06bf0399b5-bpfull.png 2x"
                              class="avatar avatar-55 photo" height="55" width="55" loading="lazy"
                              decoding="async"></span></a><span class="cwp-comment-title"><span
                            class="comment-author-link cwp-author-link">Freckles-san</span> <span
                            class="cwp-on-text">komentuje</span> <a class="comment-link cwp-comment-link"
                            href="https://anime-odcinki.pl/anime/megumi-no-daigo-kyuukoku-no-orange/1/#comment-143776">Megumi
                            no Daigo: Kyuukoku no Orange 01 PL</a></span><span
                          class="comment-excerpt cwp-comment-excerpt">Na razie takie se.</span></li>
                      <li class="recentcomments cwp-li"><a class="comment-link cwp-comment-link"
                          href="https://anime-odcinki.pl/anime/ai-no-idenshi/#comment-143775"><span
                            class="comment-avatar cwp-avatar rounded"><img alt="tracz.wwwjakub.jakub777"
                              src="https://anime-odcinki.pl/wp-content/uploads/avatars/54475/63c06bf0399b5-bpfull.png"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/avatars/54475/63c06bf0399b5-bpfull.png 2x"
                              class="avatar avatar-55 photo" height="55" width="55" loading="lazy"
                              decoding="async"></span></a><span class="cwp-comment-title"><span
                            class="comment-author-link cwp-author-link">Freckles-san</span> <span
                            class="cwp-on-text">komentuje</span> <a class="comment-link cwp-comment-link"
                            href="https://anime-odcinki.pl/anime/ai-no-idenshi/#comment-143775">AI no
                            Idenshi</a></span><span class="comment-excerpt cwp-comment-excerpt">Co tu dużo mówić... a
                          miał być hit. AI jest aktual…</span></li>
                      <li class="recentcomments cwp-li"><a class="comment-link cwp-comment-link"
                          href="https://anime-odcinki.pl/anime/ragna-crimson/1/#comment-143774"><span
                            class="comment-avatar cwp-avatar rounded"><img alt="lucas187"
                              src="https://anime-odcinki.pl/wp-content/uploads/avatars/63775/5fc342234b864-bpfull.jpg"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/avatars/63775/5fc342234b864-bpfull.jpg 2x"
                              class="avatar avatar-55 photo" height="55" width="55" loading="lazy"
                              decoding="async"></span></a><span class="cwp-comment-title"><span
                            class="comment-author-link cwp-author-link">Bejbi 1875</span> <span
                            class="cwp-on-text">komentuje</span> <a class="comment-link cwp-comment-link"
                            href="https://anime-odcinki.pl/anime/ragna-crimson/1/#comment-143774">Ragna Crimson 01
                            PL</a></span><span class="comment-excerpt cwp-comment-excerpt">Dobrze rozpoczęli , czekam na
                          więcej</span></li>
                      <li class="recentcomments cwp-li"><a class="comment-link cwp-comment-link"
                          href="https://anime-odcinki.pl/anime/trickster-edogawa-ranpo-shounen-tanteidan-yori/2/#comment-143773"><span
                            class="comment-avatar cwp-avatar rounded"><img alt="wyxuch123"
                              src="https://anime-odcinki.pl/wp-content/uploads/avatars/64165/61e343479e0bf-bpfull.jpg"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/avatars/64165/61e343479e0bf-bpfull.jpg 2x"
                              class="avatar avatar-55 photo" height="55" width="55" loading="lazy"
                              decoding="async"></span></a><span class="cwp-comment-title"><span
                            class="comment-author-link cwp-author-link">tsuka850</span> <span
                            class="cwp-on-text">komentuje</span> <a class="comment-link cwp-comment-link"
                            href="https://anime-odcinki.pl/anime/trickster-edogawa-ranpo-shounen-tanteidan-yori/2/#comment-143773">Trickster:
                            Edogawa Ranpo „Shounen Tanteidan” yori 02 PL</a></span><span
                          class="comment-excerpt cwp-comment-excerpt">Już myślałem, że [spoiler]on po prostu chcę
                          saboto…</span></li>
                      <li class="recentcomments cwp-li"><a class="comment-link cwp-comment-link"
                          href="https://anime-odcinki.pl/anime/boukensha-ni-naritai-to-miyako-ni-deteitta-musume-ga-s-rank-ni-natteta/1/#comment-143772"><span
                            class="comment-avatar cwp-avatar rounded"><img alt="tracz.wwwjakub.jakub777"
                              src="https://anime-odcinki.pl/wp-content/uploads/avatars/54475/63c06bf0399b5-bpfull.png"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/avatars/54475/63c06bf0399b5-bpfull.png 2x"
                              class="avatar avatar-55 photo" height="55" width="55" loading="lazy"
                              decoding="async"></span></a><span class="cwp-comment-title"><span
                            class="comment-author-link cwp-author-link">Freckles-san</span> <span
                            class="cwp-on-text">komentuje</span> <a class="comment-link cwp-comment-link"
                            href="https://anime-odcinki.pl/anime/boukensha-ni-naritai-to-miyako-ni-deteitta-musume-ga-s-rank-ni-natteta/1/#comment-143772">Boukensha
                            ni Naritai to Miyako ni Deteitta Musume ga S-Rank ni Natteta 01 PL</a></span><span
                          class="comment-excerpt cwp-comment-excerpt">I tak przez całą serię [spoiler]będzie próbować
                          od…</span></li>
                      <li class="recentcomments cwp-li"><a class="comment-link cwp-comment-link"
                          href="https://anime-odcinki.pl/anime/trickster-edogawa-ranpo-shounen-tanteidan-yori/1/#comment-143771"><span
                            class="comment-avatar cwp-avatar rounded"><img alt="wyxuch123"
                              src="https://anime-odcinki.pl/wp-content/uploads/avatars/64165/61e343479e0bf-bpfull.jpg"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/avatars/64165/61e343479e0bf-bpfull.jpg 2x"
                              class="avatar avatar-55 photo" height="55" width="55" loading="lazy"
                              decoding="async"></span></a><span class="cwp-comment-title"><span
                            class="comment-author-link cwp-author-link">tsuka850</span> <span
                            class="cwp-on-text">komentuje</span> <a class="comment-link cwp-comment-link"
                            href="https://anime-odcinki.pl/anime/trickster-edogawa-ranpo-shounen-tanteidan-yori/1/#comment-143771">Trickster:
                            Edogawa Ranpo „Shounen Tanteidan” yori 01 PL</a></span><span
                          class="comment-excerpt cwp-comment-excerpt">Ciekawe czym [spoiler]jest ta bariera
                          ochronna?[/s…</span></li>
                      <li class="recentcomments cwp-li"><a class="comment-link cwp-comment-link"
                          href="https://anime-odcinki.pl/anime/ai-no-idenshi/11-1/#comment-143770"><span
                            class="comment-avatar cwp-avatar rounded"><img alt="tracz.wwwjakub.jakub777"
                              src="https://anime-odcinki.pl/wp-content/uploads/avatars/54475/63c06bf0399b5-bpfull.png"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/avatars/54475/63c06bf0399b5-bpfull.png 2x"
                              class="avatar avatar-55 photo" height="55" width="55" loading="lazy"
                              decoding="async"></span></a><span class="cwp-comment-title"><span
                            class="comment-author-link cwp-author-link">Freckles-san</span> <span
                            class="cwp-on-text">komentuje</span> <a class="comment-link cwp-comment-link"
                            href="https://anime-odcinki.pl/anime/ai-no-idenshi/11-1/#comment-143770">AI no Idenshi 12
                            PL</a></span><span class="comment-excerpt cwp-comment-excerpt">Zakończenie to typowy syndrom
                          "kup mange".</span></li>
                      <li class="recentcomments cwp-li"><a class="comment-link cwp-comment-link"
                          href="https://anime-odcinki.pl/anime/ragna-crimson/1/#comment-143769"><span
                            class="comment-avatar cwp-avatar rounded"><img alt="tarczax"
                              src="https://anime-odcinki.pl/wp-content/uploads/avatars/18885/58456a0012753-bpfull.jpg"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/avatars/18885/58456a0012753-bpfull.jpg 2x"
                              class="avatar avatar-55 photo" height="55" width="55" loading="lazy"
                              decoding="async"></span></a><span class="cwp-comment-title"><span
                            class="comment-author-link cwp-author-link">Rebo</span> <span
                            class="cwp-on-text">komentuje</span> <a class="comment-link cwp-comment-link"
                            href="https://anime-odcinki.pl/anime/ragna-crimson/1/#comment-143769">Ragna Crimson 01
                            PL</a></span><span class="comment-excerpt cwp-comment-excerpt">Wysoki poziom, odrazu widać
                          to będzie świetne, pie…</span></li>
                      <li class="recentcomments cwp-li"><a class="comment-link cwp-comment-link"
                          href="https://anime-odcinki.pl/anime/jitsu-wa-ore-saikyou-deshita/#comment-143768"><span
                            class="comment-avatar cwp-avatar rounded"><img alt="dariusz.knot"
                              src="https://anime-odcinki.pl/wp-content/uploads/avatars/93454/1691771045-bpfull.png"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/avatars/93454/1691771045-bpfull.png 2x"
                              class="avatar avatar-55 photo" height="55" width="55" loading="lazy"
                              decoding="async"></span></a><span class="cwp-comment-title"><span
                            class="comment-author-link cwp-author-link">ClaenadFlethiel</span> <span
                            class="cwp-on-text">komentuje</span> <a class="comment-link cwp-comment-link"
                            href="https://anime-odcinki.pl/anime/jitsu-wa-ore-saikyou-deshita/#comment-143768">Jitsu wa
                            Ore, Saikyou deshita?</a></span><span class="comment-excerpt cwp-comment-excerpt">Słaby
                          średniak? Średni słabiak? Zaczęło się nijako…</span></li>
                      <li class="recentcomments cwp-li"><a class="comment-link cwp-comment-link"
                          href="https://anime-odcinki.pl/anime/jitsu-wa-ore-saikyou-deshita/12/#comment-143767"><span
                            class="comment-avatar cwp-avatar rounded"><img alt="dariusz.knot"
                              src="https://anime-odcinki.pl/wp-content/uploads/avatars/93454/1691771045-bpfull.png"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/avatars/93454/1691771045-bpfull.png 2x"
                              class="avatar avatar-55 photo" height="55" width="55" loading="lazy"
                              decoding="async"></span></a><span class="cwp-comment-title"><span
                            class="comment-author-link cwp-author-link">ClaenadFlethiel</span> <span
                            class="cwp-on-text">komentuje</span> <a class="comment-link cwp-comment-link"
                            href="https://anime-odcinki.pl/anime/jitsu-wa-ore-saikyou-deshita/12/#comment-143767">Jitsu
                            wa Ore, Saikyou deshita? 12 PL</a></span><span
                          class="comment-excerpt cwp-comment-excerpt">Końcówka - tragedia! Można zasnąć z tych emocji.
                          […</span></li>
                      <li class="recentcomments cwp-li"><a class="comment-link cwp-comment-link"
                          href="https://anime-odcinki.pl/anime/niehime-to-kemono-no-ou/#comment-143765"><span
                            class="comment-avatar cwp-avatar rounded"><img alt="shenrou.games"
                              src="https://anime-odcinki.pl/wp-content/uploads/avatars/93941/1696236327-bpfull.png"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/avatars/93941/1696236327-bpfull.png 2x"
                              class="avatar avatar-55 photo" height="55" width="55" loading="lazy"
                              decoding="async"></span></a><span class="cwp-comment-title"><span
                            class="comment-author-link cwp-author-link">Shenrou</span> <span
                            class="cwp-on-text">komentuje</span> <a class="comment-link cwp-comment-link"
                            href="https://anime-odcinki.pl/anime/niehime-to-kemono-no-ou/#comment-143765">Niehime to
                            Kemono no Ou</a></span><span class="comment-excerpt cwp-comment-excerpt">Bardzo fajna
                          historia, wzruszyłem się, każdy odcin…</span></li>
                      <li class="recentcomments cwp-li"><a class="comment-link cwp-comment-link"
                          href="https://anime-odcinki.pl/anime/ryza-no-atelier-tokoyami-no-joou-to-himitsu-no-kakurega/#comment-143763"><span
                            class="comment-avatar cwp-avatar rounded"><img alt="Jarek2414"
                              src="https://anime-odcinki.pl/wp-content/uploads/avatars/56158/5a96d47d7d851-bpfull.jpg"
                              srcset="https://anime-odcinki.pl/wp-content/uploads/avatars/56158/5a96d47d7d851-bpfull.jpg 2x"
                              class="avatar avatar-55 photo" height="55" width="55" loading="lazy"
                              decoding="async"></span></a><span class="cwp-comment-title"><span
                            class="comment-author-link cwp-author-link">Ignor</span> <span
                            class="cwp-on-text">komentuje</span> <a class="comment-link cwp-comment-link"
                            href="https://anime-odcinki.pl/anime/ryza-no-atelier-tokoyami-no-joou-to-himitsu-no-kakurega/#comment-143763">Ryza
                            no Atelier: Tokoyami no Joou to Himitsu no Kakurega</a></span><span
                          class="comment-excerpt cwp-comment-excerpt">Nuda...</span></li>
                    </ul><!-- Generated by https://wordpress.org/plugins/comments-widget-plus/ -->
                  </li>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
      <section
        class="elementor-section elementor-top-section elementor-element elementor-element-63c60bc elementor-section-content-middle elementor-section-height-min-height elementor-section-boxed elementor-section-height-default elementor-section-items-middle"
        data-id="63c60bc" data-element_type="section"
        data-settings="{&quot;background_background&quot;:&quot;classic&quot;}">
        <div class="elementor-container elementor-column-gap-no">
          <div
            class="elementor-column elementor-col-50 elementor-top-column elementor-element elementor-element-1edb4e81"
            data-id="1edb4e81" data-element_type="column">
            <div class="elementor-widget-wrap elementor-element-populated">
              <div class="elementor-element elementor-element-6c7992a0 elementor-widget elementor-widget-heading"
                data-id="6c7992a0" data-element_type="widget" data-widget_type="heading.default">
                <div class="elementor-widget-container">
                  <style>
                    /*! elementor - v3.16.0 - 20-09-2023 */
                    .elementor-heading-title {
                      padding: 0;
                      margin: 0;
                      line-height: 1
                    }

                    .elementor-widget-heading .elementor-heading-title[class*=elementor-size-]>a {
                      color: inherit;
                      font-size: inherit;
                      line-height: inherit
                    }

                    .elementor-widget-heading .elementor-heading-title.elementor-size-small {
                      font-size: 15px
                    }

                    .elementor-widget-heading .elementor-heading-title.elementor-size-medium {
                      font-size: 19px
                    }

                    .elementor-widget-heading .elementor-heading-title.elementor-size-large {
                      font-size: 29px
                    }

                    .elementor-widget-heading .elementor-heading-title.elementor-size-xl {
                      font-size: 39px
                    }

                    .elementor-widget-heading .elementor-heading-title.elementor-size-xxl {
                      font-size: 59px
                    }
                  </style>
                  <h4 class="elementor-heading-title elementor-size-default">O nas</h4>
                </div>
              </div>
              <div class="elementor-element elementor-element-564c2eb1 elementor-widget elementor-widget-text-editor"
                data-id="564c2eb1" data-element_type="widget" data-widget_type="text-editor.default">
                <div class="elementor-widget-container">
                  <style>
                    /*! elementor - v3.16.0 - 20-09-2023 */
                    .elementor-widget-text-editor.elementor-drop-cap-view-stacked .elementor-drop-cap {
                      background-color: #69727d;
                      color: #fff
                    }

                    .elementor-widget-text-editor.elementor-drop-cap-view-framed .elementor-drop-cap {
                      color: #69727d;
                      border: 3px solid;
                      background-color: transparent
                    }

                    .elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap {
                      margin-top: 8px
                    }

                    .elementor-widget-text-editor:not(.elementor-drop-cap-view-default) .elementor-drop-cap-letter {
                      width: 1em;
                      height: 1em
                    }

                    .elementor-widget-text-editor .elementor-drop-cap {
                      float: left;
                      text-align: center;
                      line-height: 1;
                      font-size: 50px
                    }

                    .elementor-widget-text-editor .elementor-drop-cap-letter {
                      display: inline-block
                    }
                  </style>
                  <p>Jesteśmy jedną z najstarszych stron oferujących fanowskie napisy do anime.&nbsp;</p>
                  <p>Anime-Odcinki.pl nieprzerwanie od 2012 dla was!&nbsp;</p>
                </div>
              </div>
              <div
                class="elementor-element elementor-element-5aed7070 elementor-shape-circle e-grid-align-left e-grid-align-mobile-center elementor-grid-0 elementor-widget elementor-widget-social-icons"
                data-id="5aed7070" data-element_type="widget" data-widget_type="social-icons.default">
                <div class="elementor-widget-container">
                  <style>
                    /*! elementor - v3.16.0 - 20-09-2023 */
                    .elementor-widget-social-icons.elementor-grid-0 .elementor-widget-container,
                    .elementor-widget-social-icons.elementor-grid-mobile-0 .elementor-widget-container,
                    .elementor-widget-social-icons.elementor-grid-tablet-0 .elementor-widget-container {
                      line-height: 1;
                      font-size: 0
                    }

                    .elementor-widget-social-icons:not(.elementor-grid-0):not(.elementor-grid-tablet-0):not(.elementor-grid-mobile-0) .elementor-grid {
                      display: inline-grid
                    }

                    .elementor-widget-social-icons .elementor-grid {
                      grid-column-gap: var(--grid-column-gap, 5px);
                      grid-row-gap: var(--grid-row-gap, 5px);
                      grid-template-columns: var(--grid-template-columns);
                      justify-content: var(--justify-content, center);
                      justify-items: var(--justify-content, center)
                    }

                    .elementor-icon.elementor-social-icon {
                      font-size: var(--icon-size, 25px);
                      line-height: var(--icon-size, 25px);
                      width: calc(var(--icon-size, 25px) + (2 * var(--icon-padding, .5em)));
                      height: calc(var(--icon-size, 25px) + (2 * var(--icon-padding, .5em)))
                    }

                    .elementor-social-icon {
                      --e-social-icon-icon-color: #fff;
                      display: inline-flex;
                      background-color: #69727d;
                      align-items: center;
                      justify-content: center;
                      text-align: center;
                      cursor: pointer
                    }

                    .elementor-social-icon i {
                      color: var(--e-social-icon-icon-color)
                    }

                    .elementor-social-icon svg {
                      fill: var(--e-social-icon-icon-color)
                    }

                    .elementor-social-icon:last-child {
                      margin: 0
                    }

                    .elementor-social-icon:hover {
                      opacity: .9;
                      color: #fff
                    }

                    .elementor-social-icon-android {
                      background-color: #a4c639
                    }

                    .elementor-social-icon-apple {
                      background-color: #999
                    }

                    .elementor-social-icon-behance {
                      background-color: #1769ff
                    }

                    .elementor-social-icon-bitbucket {
                      background-color: #205081
                    }

                    .elementor-social-icon-codepen {
                      background-color: #000
                    }

                    .elementor-social-icon-delicious {
                      background-color: #39f
                    }

                    .elementor-social-icon-deviantart {
                      background-color: #05cc47
                    }

                    .elementor-social-icon-digg {
                      background-color: #005be2
                    }

                    .elementor-social-icon-dribbble {
                      background-color: #ea4c89
                    }

                    .elementor-social-icon-elementor {
                      background-color: #d30c5c
                    }

                    .elementor-social-icon-envelope {
                      background-color: #ea4335
                    }

                    .elementor-social-icon-facebook,
                    .elementor-social-icon-facebook-f {
                      background-color: #3b5998
                    }

                    .elementor-social-icon-flickr {
                      background-color: #0063dc
                    }

                    .elementor-social-icon-foursquare {
                      background-color: #2d5be3
                    }

                    .elementor-social-icon-free-code-camp,
                    .elementor-social-icon-freecodecamp {
                      background-color: #006400
                    }

                    .elementor-social-icon-github {
                      background-color: #333
                    }

                    .elementor-social-icon-gitlab {
                      background-color: #e24329
                    }

                    .elementor-social-icon-globe {
                      background-color: #69727d
                    }

                    .elementor-social-icon-google-plus,
                    .elementor-social-icon-google-plus-g {
                      background-color: #dd4b39
                    }

                    .elementor-social-icon-houzz {
                      background-color: #7ac142
                    }

                    .elementor-social-icon-instagram {
                      background-color: #262626
                    }

                    .elementor-social-icon-jsfiddle {
                      background-color: #487aa2
                    }

                    .elementor-social-icon-link {
                      background-color: #818a91
                    }

                    .elementor-social-icon-linkedin,
                    .elementor-social-icon-linkedin-in {
                      background-color: #0077b5
                    }

                    .elementor-social-icon-medium {
                      background-color: #00ab6b
                    }

                    .elementor-social-icon-meetup {
                      background-color: #ec1c40
                    }

                    .elementor-social-icon-mixcloud {
                      background-color: #273a4b
                    }

                    .elementor-social-icon-odnoklassniki {
                      background-color: #f4731c
                    }

                    .elementor-social-icon-pinterest {
                      background-color: #bd081c
                    }

                    .elementor-social-icon-product-hunt {
                      background-color: #da552f
                    }

                    .elementor-social-icon-reddit {
                      background-color: #ff4500
                    }

                    .elementor-social-icon-rss {
                      background-color: #f26522
                    }

                    .elementor-social-icon-shopping-cart {
                      background-color: #4caf50
                    }

                    .elementor-social-icon-skype {
                      background-color: #00aff0
                    }

                    .elementor-social-icon-slideshare {
                      background-color: #0077b5
                    }

                    .elementor-social-icon-snapchat {
                      background-color: #fffc00
                    }

                    .elementor-social-icon-soundcloud {
                      background-color: #f80
                    }

                    .elementor-social-icon-spotify {
                      background-color: #2ebd59
                    }

                    .elementor-social-icon-stack-overflow {
                      background-color: #fe7a15
                    }

                    .elementor-social-icon-steam {
                      background-color: #00adee
                    }

                    .elementor-social-icon-stumbleupon {
                      background-color: #eb4924
                    }

                    .elementor-social-icon-telegram {
                      background-color: #2ca5e0
                    }

                    .elementor-social-icon-thumb-tack {
                      background-color: #1aa1d8
                    }

                    .elementor-social-icon-tripadvisor {
                      background-color: #589442
                    }

                    .elementor-social-icon-tumblr {
                      background-color: #35465c
                    }

                    .elementor-social-icon-twitch {
                      background-color: #6441a5
                    }

                    .elementor-social-icon-twitter {
                      background-color: #1da1f2
                    }

                    .elementor-social-icon-viber {
                      background-color: #665cac
                    }

                    .elementor-social-icon-vimeo {
                      background-color: #1ab7ea
                    }

                    .elementor-social-icon-vk {
                      background-color: #45668e
                    }

                    .elementor-social-icon-weibo {
                      background-color: #dd2430
                    }

                    .elementor-social-icon-weixin {
                      background-color: #31a918
                    }

                    .elementor-social-icon-whatsapp {
                      background-color: #25d366
                    }

                    .elementor-social-icon-wordpress {
                      background-color: #21759b
                    }

                    .elementor-social-icon-xing {
                      background-color: #026466
                    }

                    .elementor-social-icon-yelp {
                      background-color: #af0606
                    }

                    .elementor-social-icon-youtube {
                      background-color: #cd201f
                    }

                    .elementor-social-icon-500px {
                      background-color: #0099e5
                    }

                    .elementor-shape-rounded .elementor-icon.elementor-social-icon {
                      border-radius: 10%
                    }

                    .elementor-shape-circle .elementor-icon.elementor-social-icon {
                      border-radius: 50%
                    }
                  </style>
                  <div class="elementor-social-icons-wrapper elementor-grid">
                    <span class="elementor-grid-item">
                      <a class="elementor-icon elementor-social-icon elementor-social-icon-facebook elementor-animation-grow elementor-repeater-item-4cd9d92"
                        target="_blank">
                        <span class="elementor-screen-only">Facebook</span>
                        <i class="fa fa-facebook"></i>
                      </a>
                    </span>
                    <span class="elementor-grid-item">
                      <a class="elementor-icon elementor-social-icon elementor-social-icon-twitter elementor-animation-grow elementor-repeater-item-b582169"
                        target="_blank">
                        <span class="elementor-screen-only">Twitter</span>
                        <i class="fa fa-twitter"></i>
                      </a>
                    </span>
                    <span class="elementor-grid-item">
                      <a class="elementor-icon elementor-social-icon elementor-social-icon-instagram elementor-animation-grow elementor-repeater-item-7f63e13"
                        target="_blank">
                        <span class="elementor-screen-only">Instagram</span>
                        <i class="fa fa-instagram"></i>
                      </a>
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div
            class="elementor-column elementor-col-50 elementor-top-column elementor-element elementor-element-72cd21c3"
            data-id="72cd21c3" data-element_type="column">
            <div class="elementor-widget-wrap">
            </div>
          </div>
        </div>
      </section>
      <section
        class="elementor-section elementor-top-section elementor-element elementor-element-15f80aa1 elementor-section-content-middle elementor-section-boxed elementor-section-height-default elementor-section-height-default"
        data-id="15f80aa1" data-element_type="section"
        data-settings="{&quot;background_background&quot;:&quot;classic&quot;}">
        <div class="elementor-container elementor-column-gap-no">
          <div
            class="elementor-column elementor-col-50 elementor-top-column elementor-element elementor-element-5e8befb"
            data-id="5e8befb" data-element_type="column">
            <div class="elementor-widget-wrap elementor-element-populated">
              <div class="elementor-element elementor-element-191be594 elementor-widget elementor-widget-heading"
                data-id="191be594" data-element_type="widget" data-widget_type="heading.default">
                <div class="elementor-widget-container">
                  <h2 class="elementor-heading-title elementor-size-default">ANIME-ODCINKI.PL 2023 © </h2>
                </div>
              </div>
            </div>
          </div>
          <div
            class="elementor-column elementor-col-50 elementor-top-column elementor-element elementor-element-221e8c2c"
            data-id="221e8c2c" data-element_type="column">
            <div class="elementor-widget-wrap elementor-element-populated">
              <div
                class="elementor-element elementor-element-4d48197e elementor-view-default elementor-widget elementor-widget-icon"
                data-id="4d48197e" data-element_type="widget" data-widget_type="icon.default">
                <div class="elementor-widget-container">
                  <div class="elementor-icon-wrapper">
                    <div class="elementor-icon elementor-animation-grow">
                      <i class="fa fa-angle-up" aria-hidden="true"></i>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
      <section
        class="elementor-section elementor-top-section elementor-element elementor-element-4cfb4386 elementor-section-boxed elementor-section-height-default elementor-section-height-default"
        data-id="4cfb4386" data-element_type="section">
        <div class="elementor-container elementor-column-gap-default">
          <div
            class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-6e4cc9c"
            data-id="6e4cc9c" data-element_type="column">
            <div class="elementor-widget-wrap">
            </div>
          </div>
        </div>
      </section>
      <section
        class="elementor-section elementor-top-section elementor-element elementor-element-aaae1fd elementor-section-boxed elementor-section-height-default elementor-section-height-default"
        data-id="aaae1fd" data-element_type="section">
        <div class="elementor-container elementor-column-gap-default">
          <div
            class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-5a56fd5"
            data-id="5a56fd5" data-element_type="column">
            <div class="elementor-widget-wrap">
            </div>
          </div>
        </div>
      </section>
      <section
        class="elementor-section elementor-top-section elementor-element elementor-element-7bdf6ca elementor-section-boxed elementor-section-height-default elementor-section-height-default"
        data-id="7bdf6ca" data-element_type="section">
        <div class="elementor-container elementor-column-gap-default">
          <div
            class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-50a3c36 elementor-hidden-tablet elementor-hidden-mobile"
            data-id="50a3c36" data-element_type="column">
            <div class="elementor-widget-wrap">
            </div>
          </div>
        </div>
      </section>
      <section
        class="elementor-section elementor-top-section elementor-element elementor-element-ad265bf elementor-section-boxed elementor-section-height-default elementor-section-height-default"
        data-id="ad265bf" data-element_type="section">
        <div class="elementor-container elementor-column-gap-default">
          <div
            class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-d38c558"
            data-id="d38c558" data-element_type="column">
            <div class="elementor-widget-wrap">
            </div>
          </div>
        </div>
      </section>
      <section
        class="elementor-section elementor-top-section elementor-element elementor-element-dd0a135 elementor-section-boxed elementor-section-height-default elementor-section-height-default"
        data-id="dd0a135" data-element_type="section">
        <div class="elementor-container elementor-column-gap-default">
          <div
            class="elementor-column elementor-col-100 elementor-top-column elementor-element elementor-element-2507476"
            data-id="2507476" data-element_type="column">
            <div class="elementor-widget-wrap elementor-element-populated">
              <div class="elementor-element elementor-element-7e28be2 elementor-widget elementor-widget-html"
                data-id="7e28be2" data-element_type="widget" data-widget_type="html.default">
                <div class="elementor-widget-container">
                  <script async=""
                    src="https://a.spolecznosci.net/core/e0b503dad9611578d16943b6edcdbb1e/main.js"></script>
                  <script type="text/javascript"> var _qasp = _qasp || []; _qasp.push(['setFastPAID']);</script>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </div>
    <!--copyscapeskip-->
    <aside id="moove_gdpr_cookie_info_bar"
      class="moove-gdpr-align-center moove-gdpr-dark-scheme gdpr_infobar_postion_bottom"
      aria-label="Panel powiadomień o ciasteczkach RODO" style="">
      <div class="moove-gdpr-info-bar-container">
        <div class="moove-gdpr-info-bar-content">
          <div class="moove-gdpr-cookie-notice">
            <p>Używamy plików cookie, aby zapewnić najlepszą jakość korzystania z naszej witryny.</p>
            <p>Możesz dowiedzieć się więcej o tym, z których plików cookie korzystamy lub wyłączyć je w <button
                data-href="#moove_gdpr_cookie_modal" class="change-settings-button">ustawieniach</button>.</p>
          </div>
          <!--  .moove-gdpr-cookie-notice -->
          <div class="moove-gdpr-button-holder">
            <button class="mgbutton moove-gdpr-infobar-allow-all gdpr-fbo-0" aria-label="Akceptuj">Akceptuj</button>
            <button class="mgbutton moove-gdpr-infobar-reject-btn gdpr-fbo-1 " aria-label="Odrzuć">Odrzuć</button>
          </div>
          <!--  .button-container -->
        </div>
        <!-- moove-gdpr-info-bar-content -->
      </div>
      <!-- moove-gdpr-info-bar-container -->
    </aside>
    <!-- #moove_gdpr_cookie_info_bar -->
    <!--/copyscapeskip-->
    <script type="text/javascript">
      const lazyloadRunObserver = () => {
        const dataAttribute = 'data-e-bg-lazyload';
        const lazyloadBackgrounds = document.querySelectorAll(`[${dataAttribute}]:not(.lazyloaded)`);
        const lazyloadBackgroundObserver = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              let lazyloadBackground = entry.target;
              const lazyloadSelector = lazyloadBackground.getAttribute(dataAttribute);
              if (lazyloadSelector) {
                lazyloadBackground = entry.target.querySelector(lazyloadSelector);
              }
              if (lazyloadBackground) {
                lazyloadBackground.classList.add('lazyloaded');
              }
              lazyloadBackgroundObserver.unobserve(entry.target);
            }
          });
        }, { rootMargin: '100px 0px 100px 0px' });
        lazyloadBackgrounds.forEach((lazyloadBackground) => {
          lazyloadBackgroundObserver.observe(lazyloadBackground);
        });
      };
      const events = [
        'DOMContentLoaded',
        'elementor/lazyload/observe',
      ];
      events.forEach((event) => {
        document.addEventListener(event, lazyloadRunObserver);
      });
    </script>
    <script
      type="application/ld+json">{"@context":"https://schema.org","@graph":[{"@type":"WebSite","@id":"https://anime-odcinki.pl/#website","url":"https://anime-odcinki.pl/","name":"Anime-Odcinki.pl (A-O)","potentialAction":{"@id":"https://anime-odcinki.pl/#searchaction"},"publisher":{"@id":"https://anime-odcinki.pl/#organization"}},{"@type":"SearchAction","@id":"https://anime-odcinki.pl/#searchaction","target":"https://anime-odcinki.pl/?s={search_term_string}","query-input":"required name=search_term_string"},{"@type":"BreadcrumbList","name":"Breadcrumbs","@id":"https://anime-odcinki.pl/anime/cop-craft/#breadcrumbs","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://anime-odcinki.pl/"}]},{"@type":"WebPage","@id":"https://anime-odcinki.pl/anime/cop-craft/#webpage","url":"https://anime-odcinki.pl/anime/cop-craft/","inLanguage":"pl_PL","name":"Cop Craft &#8211; Anime-Odcinki.pl (A-O)","description":"Brama między wymiarowa otwiera się nad zachodnim wybrzeżem Ameryki. Po drugiej stronie leży świat wróżek i potworów. Ludzie, którzy tam mieszkają, nazywają to l","datePublished":"2019-07-08T20:18:01+00:00","dateModified":"2019-10-05T21:04:54+00:00","isPartOf":{"@id":"https://anime-odcinki.pl/#website"},"breadcrumb":{"@id":"https://anime-odcinki.pl/anime/cop-craft/#breadcrumbs"},"primaryImageOfPage":{"@id":"https://anime-odcinki.pl/anime/cop-craft/#thumbnail"},"image":{"@id":"https://anime-odcinki.pl/anime/cop-craft/#thumbnail"}},{"@type":"Organization","@id":"https://anime-odcinki.pl/#organization","url":"https://anime-odcinki.pl/","name":"Anime-Odcinki.pl (A-O)"},{"@type":"ImageObject","@id":"https://anime-odcinki.pl/anime/cop-craft/#thumbnail","url":"https://anime-odcinki.pl/wp-content/uploads/2019/07/Cop_Craft.jpg","width":680,"height":1000}]}</script>
    <!-- BEGIN recaptcha, injected by plugin wp-recaptcha-integration  -->
    <script type="text/javascript">
      var recaptcha_widgets = {};
      function wp_recaptchaLoadCallback() {
        try {
          grecaptcha;
        } catch (err) {
          return;
        }
        var e = document.querySelectorAll ? document.querySelectorAll('.g-recaptcha:not(.wpcf7-form-control)') : document.getElementsByClassName('g-recaptcha'),
          form_submits;
        for (var i = 0; i < e.length; i++) {
          (function (el) {
            var wid;
            // check if captcha element is unrendered
            if (!el.childNodes.length) {
              wid = grecaptcha.render(el, {
                'sitekey': '6Ldg8oQUAAAAABdTbNrb5FPClcYhKoch3fsHXE-m',
                'theme': el.getAttribute('data-theme') || 'dark'
              });
              el.setAttribute('data-widget-id', wid);
            } else {
              wid = el.getAttribute('data-widget-id');
              grecaptcha.reset(wid);
            }
          })(e[i]);
        }
      }
      // if jquery present re-render jquery/ajax loaded captcha elements
      if (typeof jQuery !== 'undefined')
        jQuery(document).ajaxComplete(function (evt, xhr, set) {
          if (xhr.responseText && xhr.responseText.indexOf('6Ldg8oQUAAAAABdTbNrb5FPClcYhKoch3fsHXE-m') !== -1)
            wp_recaptchaLoadCallback();
        });
    </script>
    <script src="https://www.google.com/recaptcha/api.js?onload=wp_recaptchaLoadCallback&amp;render=explicit&amp;hl=pl"
      async="" defer=""></script>
    <!-- END recaptcha -->
    <!-- <link rel='stylesheet' id='aquila-admin-icons-css' href='https://anime-odcinki.pl/wp-content/plugins/aquila-admin-theme/icons/aquila/style.css?ver=3.1.1' type='text/css' media='all' /> -->
    <!-- <link rel='stylesheet' id='aquila-adminBar-style-css' href='https://anime-odcinki.pl/wp-content/plugins/aquila-admin-theme/css/adminBar.css?ver=3.1.1' type='text/css' media='all' /> -->
    <!-- <link rel='stylesheet' id='e-animations-css' href='https://anime-odcinki.pl/wp-content/plugins/elementor/assets/lib/animations/animations.min.css?ver=3.16.4' type='text/css' media='all' /> -->
    <link rel="stylesheet" type="text/css" href="//anime-odcinki.pl/wp-content/cache/wpfc-minified/225oa87g/40dnt.css"
      media="all">
    <script src="https://anime-odcinki.pl/wp-includes/js/hoverintent-js.min.js?ver=2.2.1"
      id="hoverintent-js-js"></script>
    <script src="https://anime-odcinki.pl/wp-includes/js/admin-bar.min.js?ver=6.3.1" id="admin-bar-js"></script>
    <script src="https://anime-odcinki.pl/wp-includes/js/comment-reply.min.js?ver=6.3.1" id="comment-reply-js"></script>
    <script id="post-views-counter-frontend-js-before">
      var pvcArgsFrontend = { "mode": "rest_api", "postID": 37663, "requestURL": "https:\/\/anime-odcinki.pl\/wp-json\/post-views-counter\/view-post\/37663", "nonce": "f7c58982d5" };
    </script>
    <script src="https://anime-odcinki.pl/wp-content/plugins/post-views-counter/js/frontend.min.js?ver=1.3.13"
      id="post-views-counter-frontend-js"></script>
    <script id="wd-asl-ajaxsearchlite-js-before">
      window.ASL = typeof window.ASL !== 'undefined' ? window.ASL : {}; window.ASL.wp_rocket_exception = "DOMContentLoaded"; window.ASL.ajaxurl = "https:\/\/anime-odcinki.pl\/wp-admin\/admin-ajax.php"; window.ASL.backend_ajaxurl = "https:\/\/anime-odcinki.pl\/wp-admin\/admin-ajax.php"; window.ASL.js_scope = "jQuery"; window.ASL.asl_url = "https:\/\/anime-odcinki.pl\/wp-content\/plugins\/ajax-search-lite\/"; window.ASL.detect_ajax = 1; window.ASL.media_query = 4760; window.ASL.version = 4760; window.ASL.pageHTML = ""; window.ASL.additional_scripts = [{ "handle": "wd-asl-ajaxsearchlite", "src": "https:\/\/anime-odcinki.pl\/wp-content\/plugins\/ajax-search-lite\/js\/min\/plugin\/optimized\/asl-prereq.js", "prereq": [] }, { "handle": "wd-asl-ajaxsearchlite-core", "src": "https:\/\/anime-odcinki.pl\/wp-content\/plugins\/ajax-search-lite\/js\/min\/plugin\/optimized\/asl-core.js", "prereq": [] }, { "handle": "wd-asl-ajaxsearchlite-vertical", "src": "https:\/\/anime-odcinki.pl\/wp-content\/plugins\/ajax-search-lite\/js\/min\/plugin\/optimized\/asl-results-vertical.js", "prereq": ["wd-asl-ajaxsearchlite"] }, { "handle": "wd-asl-ajaxsearchlite-load", "src": "https:\/\/anime-odcinki.pl\/wp-content\/plugins\/ajax-search-lite\/js\/min\/plugin\/optimized\/asl-load.js", "prereq": ["wd-asl-ajaxsearchlite-vertical"] }]; window.ASL.script_async_load = false; window.ASL.init_only_in_viewport = true; window.ASL.font_url = "https:\/\/anime-odcinki.pl\/wp-content\/plugins\/ajax-search-lite\/css\/fonts\/icons2.woff2"; window.ASL.css_async = false; window.ASL.highlight = { "enabled": false, "data": [] }; window.ASL.analytics = { "method": 0, "tracking_id": "", "string": "?ajax_search={asl_term}", "event": { "focus": { "active": 1, "action": "focus", "category": "ASL", "label": "Input focus", "value": "1" }, "search_start": { "active": 0, "action": "search_start", "category": "ASL", "label": "Phrase: {phrase}", "value": "1" }, "search_end": { "active": 1, "action": "search_end", "category": "ASL", "label": "{phrase} | {results_count}", "value": "1" }, "magnifier": { "active": 1, "action": "magnifier", "category": "ASL", "label": "Magnifier clicked", "value": "1" }, "return": { "active": 1, "action": "return", "category": "ASL", "label": "Return button pressed", "value": "1" }, "facet_change": { "active": 0, "action": "facet_change", "category": "ASL", "label": "{option_label} | {option_value}", "value": "1" }, "result_click": { "active": 1, "action": "result_click", "category": "ASL", "label": "{result_title} | {result_url}", "value": "1" } } };
      window.ASL_INSTANCES = []; window.ASL_INSTANCES[1] = { "homeurl": "https:\/\/anime-odcinki.pl\/", "resultstype": "vertical", "resultsposition": "hover", "itemscount": 4, "charcount": 0, "highlight": 1, "highlightwholewords": 1, "singleHighlight": 0, "scrollToResults": { "enabled": 0, "offset": 0 }, "resultareaclickable": 1, "autocomplete": { "enabled": 0, "lang": "en", "trigger_charcount": 0 }, "mobile": { "menu_selector": "#menu-toggle" }, "trigger": { "click": "results_page", "click_location": "same", "update_href": 0, "return": "results_page", "return_location": "same", "facet": 1, "type": 1, "redirect_url": "?s={phrase}", "delay": 300 }, "animations": { "pc": { "settings": { "anim": "fadedrop", "dur": 300 }, "results": { "anim": "fadedrop", "dur": 300 }, "items": "voidanim" }, "mob": { "settings": { "anim": "fadedrop", "dur": 300 }, "results": { "anim": "fadedrop", "dur": 300 }, "items": "voidanim" } }, "autop": { "state": "disabled", "phrase": "", "count": 1 }, "resPage": { "useAjax": 0, "selector": "#main", "trigger_type": 1, "trigger_facet": 1, "trigger_magnifier": 0, "trigger_return": 0 }, "resultsSnapTo": "left", "results": { "width": "auto", "width_tablet": "auto", "width_phone": "auto" }, "settingsimagepos": "right", "closeOnDocClick": 1, "overridewpdefault": 0, "override_method": "get" };
    </script>
    <script
      src="https://anime-odcinki.pl/wp-content/plugins/ajax-search-lite/js/min/plugin/optimized/asl-prereq.js?ver=4760"
      id="wd-asl-ajaxsearchlite-js"></script>
    <script
      src="https://anime-odcinki.pl/wp-content/plugins/ajax-search-lite/js/min/plugin/optimized/asl-core.js?ver=4760"
      id="wd-asl-ajaxsearchlite-core-js"></script>
    <script
      src="https://anime-odcinki.pl/wp-content/plugins/ajax-search-lite/js/min/plugin/optimized/asl-results-vertical.js?ver=4760"
      id="wd-asl-ajaxsearchlite-vertical-js"></script>
    <script
      src="https://anime-odcinki.pl/wp-content/plugins/ajax-search-lite/js/min/plugin/optimized/asl-load.js?ver=4760"
      id="wd-asl-ajaxsearchlite-load-js"></script>
    <script
      src="https://anime-odcinki.pl/wp-content/plugins/ajax-search-lite/js/min/plugin/optimized/asl-wrapper.js?ver=4760"
      id="wd-asl-ajaxsearchlite-wrapper-js"></script>
    <script
      src="https://anime-odcinki.pl/wp-content/plugins/elementor-pro/assets//lib/instant-page/instant-page.min.js?ver=3.13.2"
      id="instant-page-js"></script>
    <script type="text/javascript" id="moove_gdpr_frontend-js-extra">
      /* <![CDATA[ */
      var moove_frontend_gdpr_scripts = { "ajaxurl": "https:\/\/anime-odcinki.pl\/wp-admin\/admin-ajax.php", "post_id": "37663", "plugin_dir": "https:\/\/anime-odcinki.pl\/wp-content\/plugins\/gdpr-cookie-compliance", "show_icons": "all", "is_page": "", "ajax_cookie_removal": "false", "strict_init": "1", "enabled_default": { "third_party": 1, "advanced": 0 }, "geo_location": "false", "force_reload": "false", "is_single": "1", "hide_save_btn": "false", "current_user": "0", "cookie_expiration": "365", "script_delay": "2000", "close_btn_action": "1", "close_btn_rdr": "", "scripts_defined": "{\"cache\":true,\"header\":\"\",\"body\":\"\",\"footer\":\"\",\"thirdparty\":{\"header\":\"<!-- Global site tag (gtag.js) - Google Analytics -->\\r\\n<script data-gdpr async src=\\\"https:\\\/\\\/www.googletagmanager.com\\\/gtag\\\/js?id=UA-130410294-1\\\"><\\\/script>\\r\\n<script data-gdpr>\\r\\n  window.dataLayer = window.dataLayer || [];\\r\\n  function gtag(){dataLayer.push(arguments);}\\r\\n  gtag('js', new Date());\\r\\n\\r\\n  gtag('config', 'UA-130410294-1');\\r\\n<\\\/script>\",\"body\":\"\",\"footer\":\"\"},\"advanced\":{\"header\":\"\",\"body\":\"\",\"footer\":\"\"}}" ,"gdpr_scor" :"true" ,"wp_lang" :" "};
      /* ]]> */
    </script>
    <script src="https://anime-odcinki.pl/wp-content/plugins/gdpr-cookie-compliance/dist/scripts/main.js?ver=4.12.7"
      id="moove_gdpr_frontend-js"></script>
    <script id="moove_gdpr_frontend-js-after">
      var gdpr_consent__strict = "true"
      var gdpr_consent__thirdparty = "true"
      var gdpr_consent__advanced = "false"
      var gdpr_consent__cookies = "strict|thirdparty"
    </script>
    <script src="https://anime-odcinki.pl/wp-content/themes/animeodcinki/js/jquery-ui.min.js?ver=6.3.1"
      id="ao-jquery-ui-js"></script>
    <script src="https://anime-odcinki.pl/wp-content/themes/animeodcinki/js/main.js?ver=6.3.1" id="main-js"></script>
    <script src="https://anime-odcinki.pl/wp-content/plugins/aquila-admin-theme/js/calls.js?ver=3.1.1"
      id="aquilaCalls-js"></script>
    <script
      src="https://anime-odcinki.pl/wp-content/plugins/elementor-pro/assets/lib/smartmenus/jquery.smartmenus.min.js?ver=1.0.1"
      id="smartmenus-js"></script>
    <script
      src="https://anime-odcinki.pl/wp-content/plugins/elementor-pro/assets/js/webpack-pro.runtime.min.js?ver=3.13.2"
      id="elementor-pro-webpack-runtime-js"></script>
    <script src="https://anime-odcinki.pl/wp-content/plugins/elementor/assets/js/webpack.runtime.min.js?ver=3.16.4"
      id="elementor-webpack-runtime-js"></script>
    <script src="https://anime-odcinki.pl/wp-content/plugins/elementor/assets/js/frontend-modules.min.js?ver=3.16.4"
      id="elementor-frontend-modules-js"></script>
    <script src="https://anime-odcinki.pl/wp-includes/js/dist/vendor/wp-polyfill-inert.min.js?ver=3.1.2"
      id="wp-polyfill-inert-js"></script>
    <script src="https://anime-odcinki.pl/wp-includes/js/dist/vendor/regenerator-runtime.min.js?ver=0.13.11"
      id="regenerator-runtime-js"></script>
    <script src="https://anime-odcinki.pl/wp-includes/js/dist/vendor/wp-polyfill.min.js?ver=3.15.0"
      id="wp-polyfill-js"></script>
    <script src="https://anime-odcinki.pl/wp-includes/js/dist/hooks.min.js?ver=c6aec9a8d4e5a5d543a1"
      id="wp-hooks-js"></script>
    <script src="https://anime-odcinki.pl/wp-includes/js/dist/i18n.min.js?ver=7701b0c3857f914212ef"
      id="wp-i18n-js"></script>
    <script id="wp-i18n-js-after">
      wp.i18n.setLocaleData({ 'text direction\u0004ltr': ['ltr'] });
    </script>
    <script id="elementor-pro-frontend-js-before">
      var ElementorProFrontendConfig = { "ajaxurl": "https:\/\/anime-odcinki.pl\/wp-admin\/admin-ajax.php", "nonce": "4aa30e709f", "urls": { "assets": "https:\/\/anime-odcinki.pl\/wp-content\/plugins\/elementor-pro\/assets\/", "rest": "https:\/\/anime-odcinki.pl\/wp-json\/" }, "shareButtonsNetworks": { "facebook": { "title": "Facebook", "has_counter": true }, "twitter": { "title": "Twitter" }, "linkedin": { "title": "LinkedIn", "has_counter": true }, "pinterest": { "title": "Pinterest", "has_counter": true }, "reddit": { "title": "Reddit", "has_counter": true }, "vk": { "title": "VK", "has_counter": true }, "odnoklassniki": { "title": "OK", "has_counter": true }, "tumblr": { "title": "Tumblr" }, "digg": { "title": "Digg" }, "skype": { "title": "Skype" }, "stumbleupon": { "title": "StumbleUpon", "has_counter": true }, "mix": { "title": "Mix" }, "telegram": { "title": "Telegram" }, "pocket": { "title": "Pocket", "has_counter": true }, "xing": { "title": "XING", "has_counter": true }, "whatsapp": { "title": "WhatsApp" }, "email": { "title": "Email" }, "print": { "title": "Print" } }, "facebook_sdk": { "lang": "pl_PL", "app_id": "" }, "lottie": { "defaultAnimationUrl": "https:\/\/anime-odcinki.pl\/wp-content\/plugins\/elementor-pro\/modules\/lottie\/assets\/animations\/default.json" } };
    </script>
    <script src="https://anime-odcinki.pl/wp-content/plugins/elementor-pro/assets/js/frontend.min.js?ver=3.13.2"
      id="elementor-pro-frontend-js"></script>
    <script src="https://anime-odcinki.pl/wp-content/plugins/elementor/assets/lib/waypoints/waypoints.min.js?ver=4.0.2"
      id="elementor-waypoints-js"></script>
    <script src="https://anime-odcinki.pl/wp-includes/js/jquery/ui/core.min.js?ver=1.13.2"
      id="jquery-ui-core-js"></script>
    <script id="elementor-frontend-js-before">
      var elementorFrontendConfig = { "environmentMode": { "edit": false, "wpPreview": false, "isScriptDebug": false }, "i18n": { "shareOnFacebook": "Udost\u0119pnij na Facebooku", "shareOnTwitter": "Udost\u0119pnij na Twitterze", "pinIt": "Przypnij", "download": "Pobierz", "downloadImage": "Pobierz obraz", "fullscreen": "Tryb pe\u0142noekranowy", "zoom": "Powi\u0119ksz", "share": "Udost\u0119pnij", "playVideo": "Odtw\u00f3rz wideo", "previous": "Poprzednie", "next": "Nast\u0119pne", "close": "Zamknij", "a11yCarouselWrapperAriaLabel": "Karuzela | Przewijanie w poziomie: Strza\u0142ka w lewo i w prawo", "a11yCarouselPrevSlideMessage": "Poprzedni slajd", "a11yCarouselNextSlideMessage": "Nast\u0119pny slajd", "a11yCarouselFirstSlideMessage": "To jest pierwszy slajd", "a11yCarouselLastSlideMessage": "This is the last slide", "a11yCarouselPaginationBulletMessage": "Id\u017a do slajdu" }, "is_rtl": false, "breakpoints": { "xs": 0, "sm": 480, "md": 768, "lg": 1025, "xl": 1440, "xxl": 1600 }, "responsive": { "breakpoints": { "mobile": { "label": "Mobilny Pionowy", "value": 767, "default_value": 767, "direction": "max", "is_enabled": true }, "mobile_extra": { "label": "Mobilny Poziomy", "value": 880, "default_value": 880, "direction": "max", "is_enabled": false }, "tablet": { "label": "Tablet Portrait", "value": 1024, "default_value": 1024, "direction": "max", "is_enabled": true }, "tablet_extra": { "label": "Tablet Landscape", "value": 1200, "default_value": 1200, "direction": "max", "is_enabled": false }, "laptop": { "label": "Laptop", "value": 1366, "default_value": 1366, "direction": "max", "is_enabled": false }, "widescreen": { "label": "Szeroki ekran", "value": 2400, "default_value": 2400, "direction": "min", "is_enabled": false } } }, "version": "3.16.4", "is_static": false, "experimentalFeatures": { "e_dom_optimization": true, "e_optimized_assets_loading": true, "e_optimized_css_loading": true, "e_font_icon_svg": true, "additional_custom_breakpoints": true, "container": true, "theme_builder_v2": true, "landing-pages": true, "e_lazyload": true, "page-transitions": true, "notes": true, "loop": true, "form-submissions": true, "e_scroll_snap": true }, "urls": { "assets": "https:\/\/anime-odcinki.pl\/wp-content\/plugins\/elementor\/assets\/" }, "swiperClass": "swiper-container", "settings": { "page": [], "editorPreferences": [] }, "kit": { "active_breakpoints": ["viewport_mobile", "viewport_tablet"], "global_image_lightbox": "yes", "lightbox_enable_counter": "yes", "lightbox_enable_fullscreen": "yes", "lightbox_enable_zoom": "yes", "lightbox_enable_share": "yes", "lightbox_title_src": "title", "lightbox_description_src": "description" }, "post": { "id": 37663, "title": "Cop%20Craft%20%E2%80%93%20Anime-Odcinki.pl%20%28A-O%29", "excerpt": "", "featuredImage": "https:\/\/anime-odcinki.pl\/wp-content\/uploads\/2019\/07\/Cop_Craft.jpg" } };
    </script>
    <script src="https://anime-odcinki.pl/wp-content/plugins/elementor/assets/js/frontend.min.js?ver=3.16.4"
      id="elementor-frontend-js"></script>
    <script
      src="https://anime-odcinki.pl/wp-content/plugins/elementor-pro/assets/js/elements-handlers.min.js?ver=3.13.2"
      id="pro-elements-handlers-js"></script>
    <script
      src="https://anime-odcinki.pl/wp-content/plugins/elementor-pro/assets/lib/sticky/jquery.sticky.min.js?ver=3.13.2"
      id="e-sticky-js"></script>
    <script src="https://anime-odcinki.pl/wp-includes/js/underscore.min.js?ver=1.13.4" id="underscore-js"></script>
    <script type="text/javascript" id="wp-util-js-extra">
      /* <![CDATA[ */
      var _wpUtilSettings = { "ajax": { "url": "\/wp-admin\/admin-ajax.php" } };
      /* ]]> */
    </script>
    <script src="https://anime-odcinki.pl/wp-includes/js/wp-util.min.js?ver=6.3.1" id="wp-util-js"></script>
    <script type="text/javascript" id="wpforms-elementor-js-extra">
      /* <![CDATA[ */
      var wpformsElementorVars = { "captcha_provider": "recaptcha", "recaptcha_type": "v2" };
      /* ]]> */
    </script>
    <script
      src="https://anime-odcinki.pl/wp-content/plugins/wpforms-lite/assets/js/integrations/elementor/frontend.min.js?ver=1.8.4"
      id="wpforms-elementor-js"></script>
    <!--copyscapeskip-->
    <button data-href="#moove_gdpr_cookie_modal" id="moove_gdpr_save_popup_settings_button" style="display: none;"
      class="" aria-label="Zmień ustawienia plików cookie">
      <span class="moove_gdpr_icon">
        <svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg" style="max-width: 30px; max-height: 30px;">
          <g data-name="1">
            <path
              d="M293.9,450H233.53a15,15,0,0,1-14.92-13.42l-4.47-42.09a152.77,152.77,0,0,1-18.25-7.56L163,413.53a15,15,0,0,1-20-1.06l-42.69-42.69a15,15,0,0,1-1.06-20l26.61-32.93a152.15,152.15,0,0,1-7.57-18.25L76.13,294.1a15,15,0,0,1-13.42-14.91V218.81A15,15,0,0,1,76.13,203.9l42.09-4.47a152.15,152.15,0,0,1,7.57-18.25L99.18,148.25a15,15,0,0,1,1.06-20l42.69-42.69a15,15,0,0,1,20-1.06l32.93,26.6a152.77,152.77,0,0,1,18.25-7.56l4.47-42.09A15,15,0,0,1,233.53,48H293.9a15,15,0,0,1,14.92,13.42l4.46,42.09a152.91,152.91,0,0,1,18.26,7.56l32.92-26.6a15,15,0,0,1,20,1.06l42.69,42.69a15,15,0,0,1,1.06,20l-26.61,32.93a153.8,153.8,0,0,1,7.57,18.25l42.09,4.47a15,15,0,0,1,13.41,14.91v60.38A15,15,0,0,1,451.3,294.1l-42.09,4.47a153.8,153.8,0,0,1-7.57,18.25l26.61,32.93a15,15,0,0,1-1.06,20L384.5,412.47a15,15,0,0,1-20,1.06l-32.92-26.6a152.91,152.91,0,0,1-18.26,7.56l-4.46,42.09A15,15,0,0,1,293.9,450ZM247,420h33.39l4.09-38.56a15,15,0,0,1,11.06-12.91A123,123,0,0,0,325.7,356a15,15,0,0,1,17,1.31l30.16,24.37,23.61-23.61L372.06,328a15,15,0,0,1-1.31-17,122.63,122.63,0,0,0,12.49-30.14,15,15,0,0,1,12.92-11.06l38.55-4.1V232.31l-38.55-4.1a15,15,0,0,1-12.92-11.06A122.63,122.63,0,0,0,370.75,187a15,15,0,0,1,1.31-17l24.37-30.16-23.61-23.61-30.16,24.37a15,15,0,0,1-17,1.31,123,123,0,0,0-30.14-12.49,15,15,0,0,1-11.06-12.91L280.41,78H247l-4.09,38.56a15,15,0,0,1-11.07,12.91A122.79,122.79,0,0,0,201.73,142a15,15,0,0,1-17-1.31L154.6,116.28,131,139.89l24.38,30.16a15,15,0,0,1,1.3,17,123.41,123.41,0,0,0-12.49,30.14,15,15,0,0,1-12.91,11.06l-38.56,4.1v33.38l38.56,4.1a15,15,0,0,1,12.91,11.06A123.41,123.41,0,0,0,156.67,311a15,15,0,0,1-1.3,17L131,358.11l23.61,23.61,30.17-24.37a15,15,0,0,1,17-1.31,122.79,122.79,0,0,0,30.13,12.49,15,15,0,0,1,11.07,12.91ZM449.71,279.19h0Z"
              fill="currentColor"></path>
            <path
              d="M263.71,340.36A91.36,91.36,0,1,1,355.08,249,91.46,91.46,0,0,1,263.71,340.36Zm0-152.72A61.36,61.36,0,1,0,325.08,249,61.43,61.43,0,0,0,263.71,187.64Z"
              fill="currentColor"></path>
          </g>
        </svg>
      </span>
      <span class="moove_gdpr_text">Zmień ustawienia plików cookie</span>
    </button>
    <!--/copyscapeskip-->
    <!--copyscapeskip-->
    <!-- V1 -->
    <div id="moove_gdpr_cookie_modal" class="gdpr_lightbox-hide" role="complementary" aria-label="Ekran ustawień RODO">
      <div class="moove-gdpr-modal-content moove-clearfix logo-position-left moove_gdpr_modal_theme_v1">
        <button class="moove-gdpr-modal-close" aria-label="Zamknij ustawienia ciasteczek RODO">
          <span class="gdpr-sr-only">Zamknij ustawienia ciasteczek RODO</span>
          <span class="gdpr-icon moovegdpr-arrow-close"></span>
        </button>
        <div class="moove-gdpr-modal-left-content">
          <div class="moove-gdpr-company-logo-holder">
            <img src="https://anime-odcinki.pl/wp-content/plugins/gdpr-cookie-compliance/dist/images/gdpr-logo.png"
              alt="Anime-Odcinki.pl (A-O)" width="350" height="233" class="img-responsive">
          </div>
          <!--  .moove-gdpr-company-logo-holder -->
          <ul id="moove-gdpr-menu">
            <li class="menu-item-on menu-item-privacy_overview menu-item-selected">
              <button data-href="#privacy_overview" class="moove-gdpr-tab-nav" aria-label="Przegląd prywatności">
                <span class="gdpr-nav-tab-title">Przegląd prywatności</span>
              </button>
            </li>
            <li class="menu-item-strict-necessary-cookies menu-item-off">
              <button data-href="#strict-necessary-cookies" class="moove-gdpr-tab-nav"
                aria-label="Niezbędne pliki cookie">
                <span class="gdpr-nav-tab-title">Niezbędne pliki cookie</span>
              </button>
            </li>
            <li class="menu-item-off menu-item-third_party_cookies">
              <button data-href="#third_party_cookies" class="moove-gdpr-tab-nav"
                aria-label="Pliki cookie stron trzecich">
                <span class="gdpr-nav-tab-title">Pliki cookie stron trzecich</span>
              </button>
            </li>
            <li class="menu-item-moreinfo menu-item-off">
              <button data-href="#cookie_policy_modal" class="moove-gdpr-tab-nav" aria-label="Polityka Cookie">
                <span class="gdpr-nav-tab-title">Polityka Cookie</span>
              </button>
            </li>
          </ul>
          <div class="moove-gdpr-branding-cnt">
            <a href="https://wordpress.org/plugins/gdpr-cookie-compliance/" rel="noopener noreferrer" target="_blank"
              class="moove-gdpr-branding">Napędzane przez&nbsp; <span>Zgodności ciasteczek z RODO</span></a>
          </div>
          <!--  .moove-gdpr-branding -->
        </div>
        <!--  .moove-gdpr-modal-left-content -->
        <div class="moove-gdpr-modal-right-content">
          <div class="moove-gdpr-modal-title">
          </div>
          <!-- .moove-gdpr-modal-ritle -->
          <div class="main-modal-content">
            <div class="moove-gdpr-tab-content">
              <div id="privacy_overview" class="moove-gdpr-tab-main">
                <span class="tab-title">Przegląd prywatności</span>
                <div class="moove-gdpr-tab-main-content">
                  <h3>Pliki cookie</h3>
                  <p>Pliki popularnie zwane “ciasteczkami” nie umożliwiają w żadnym stopniu identyfikacji osoby, która
                    odwiedza dany serwis internetowy. Zgodnie z art. 173 Ustawy z dnia 16 lipca 2004 roku Prawo
                    telekomunikacyjne (Dz. U. Nr 171, poz. 1800) istnieje możliwość zapisu plików tekstowych na dysku
                    użytkownika, jeżeli ten zostanie o tym poinformowany. Skasowanie wyżej wymienionych plików może
                    utrudnić korzystanie z serwisu.</p>
                  <p>Aby ułatwić korzystanie z serwisu do komputera użytkownika wysyłany jest przynajmniej jeden plik
                    “cookie”, który umożliwia nam podnoszenie oraz ulepszanie usług dzięki przechowywaniu preferencji
                    naszych użytkowników. Niniejsze dane są gromadzone jedynie w celach wyświetlania reklam podczas
                    wizyty na stronie. Korzystamy z usług zewnętrznych agencji reklamowych. Firmy te mają prawo
                    wykorzystać informacje (z wyłączeniem danych osobowych) związane z wizytami w serwisie do
                    wyświetlania reklam towarów i usług.</p>
                  <h3>Prawo do wglądu, poprawienia i usunięcia informacji o użytkowniku</h3>
                  <p>Do dyspozycji użytkownika została oddana podstrona – edycja konta, na której użytkownik może
                    dokonać edycji swoich danych. Dodatkowo na wyraźne żądanie Użytkownika administracja usuwa jego
                    konto. Usunięcie konta nie powoduje automatycznego usunięcia wszystkich treści, jakie Użytkownik
                    zamieścił w serwisie Anime-Odcinki.pl; Administracja nie usuwa w takim przypadku zamieszczonych
                    linków, komentarzy, raportów i oddanych głosów.</p>
                </div>
                <!--  .moove-gdpr-tab-main-content -->
              </div>
              <!-- #privacy_overview -->
              <div id="strict-necessary-cookies" class="moove-gdpr-tab-main" style="display:none">
                <span class="tab-title">Niezbędne pliki cookie</span>
                <div class="moove-gdpr-tab-main-content">
                  <p>Niezbędne pliki cookie powinny być zawsze włączone, abyśmy mogli zapisać twoje preferencje
                    dotyczące ustawień plików cookie.</p>
                  <div class="moove-gdpr-status-bar ">
                    <div class="gdpr-cc-form-wrap">
                      <div class="gdpr-cc-form-fieldset">
                        <label class="cookie-switch" for="moove_gdpr_strict_cookies">
                          <span class="gdpr-sr-only">Włącz lub wyłącz ciasteczka</span>
                          <input type="checkbox" aria-label="Niezbędne pliki cookie" value="check"
                            name="moove_gdpr_strict_cookies" id="moove_gdpr_strict_cookies">
                          <span class="cookie-slider cookie-round" data-text-enable="Włączone"
                            data-text-disabled="Wyłączone"></span>
                        </label>
                      </div>
                      <!-- .gdpr-cc-form-fieldset -->
                    </div>
                    <!-- .gdpr-cc-form-wrap -->
                  </div>
                  <!-- .moove-gdpr-status-bar -->
                  <div class="moove-gdpr-strict-warning-message" style="margin-top: 10px;">
                    <p>Jeśli wyłączysz ten plik cookie, nie będziemy mogli zapisać twoich preferencji. Oznacza to, że za
                      każdym razem, gdy odwiedzasz tę stronę, będziesz musiał ponownie włączyć lub wyłączyć pliki
                      cookie.</p>
                  </div>
                  <!--  .moove-gdpr-tab-main-content -->
                </div>
                <!--  .moove-gdpr-tab-main-content -->
              </div>
              <!-- #strict-necesarry-cookies -->
              <div id="third_party_cookies" class="moove-gdpr-tab-main" style="display:none">
                <span class="tab-title">Pliki cookie stron trzecich</span>
                <div class="moove-gdpr-tab-main-content">
                  <p>Ta strona korzysta z Google Analytics do zbierania anonimowych informacji, takich jak liczba
                    odwiedzających witrynę i najpopularniejsze strony.</p>
                  <p>Włączenie obsługi tego pliku cookie pomaga nam ulepszać naszą stronę internetową.</p>
                  <div class="moove-gdpr-status-bar">
                    <div class="gdpr-cc-form-wrap">
                      <div class="gdpr-cc-form-fieldset">
                        <label class="cookie-switch" for="moove_gdpr_performance_cookies">
                          <span class="gdpr-sr-only">Włącz lub wyłącz ciasteczka</span>
                          <input type="checkbox" aria-label="Pliki cookie stron trzecich" value="check"
                            name="moove_gdpr_performance_cookies" id="moove_gdpr_performance_cookies">
                          <span class="cookie-slider cookie-round" data-text-enable="Włączone"
                            data-text-disabled="Wyłączone"></span>
                        </label>
                      </div>
                      <!-- .gdpr-cc-form-fieldset -->
                    </div>
                    <!-- .gdpr-cc-form-wrap -->
                  </div>
                  <!-- .moove-gdpr-status-bar -->
                  <div class="moove-gdpr-strict-secondary-warning-message" style="margin-top: 10px; display: none;">
                    <p>Najpierw włącz ściśle niezbędne pliki cookie, abyśmy mogli zapisać Twoje preferencje!</p>
                  </div>
                  <!--  .moove-gdpr-tab-main-content -->
                </div>
                <!--  .moove-gdpr-tab-main-content -->
              </div>
              <!-- #third_party_cookies -->
              <div id="cookie_policy_modal" class="moove-gdpr-tab-main" style="display:none">
                <span class="tab-title">Polityka Cookie</span>
                <div class="moove-gdpr-tab-main-content">
                  <p>Więcej informacji o naszym <a href="https://anime-odcinki.pl/polityka-prywatnosci" target="_blank"
                      rel="noopener">Cookie Policy</a></p>
                </div>
                <!--  .moove-gdpr-tab-main-content -->
              </div>
            </div>
            <!--  .moove-gdpr-tab-content -->
          </div>
          <!--  .main-modal-content -->
          <div class="moove-gdpr-modal-footer-content">
            <div class="moove-gdpr-button-holder">
              <button class="mgbutton moove-gdpr-modal-allow-all button-visible" aria-label="Włącz wszystkie">Włącz
                wszystkie</button>
              <button class="mgbutton moove-gdpr-modal-save-settings button-visible" aria-label="Zapisz zmiany">Zapisz
                zmiany</button>
            </div>
            <!--  .moove-gdpr-button-holder -->
          </div>
          <!--  .moove-gdpr-modal-footer-content -->
        </div>
        <!--  .moove-gdpr-modal-right-content -->
        <div class="moove-clearfix"></div>
      </div>
      <!--  .moove-gdpr-modal-content -->
    </div>
    <!-- #moove_gdpr_cookie_modal -->
    <!--/copyscapeskip-->
    <style>
      body.aquilaFront #wpadminbar {
        display: block;
      }
    </style>
    <style type="text/css" media="screen">
      body.wp-core-ui .button {
        background: #ffeb3b;
        color: #212121;
      }

      body.wp-core-ui .button:hover,
      body.wp-core-ui .button:active,
      body.wp-core-ui .button:focus,
      body.wp-core-ui .button:target {
        background: #ebd727;
        color: #212121;
        -webkit-box-shadow: none;
        box-shadow: none;
        border: none;
      }

      body.wp-core-ui .button-primary {
        background: #5f388f;
        color: #fff;
      }

      body.wp-core-ui .button-primary:hover,
      body.wp-core-ui .button-primary:active,
      body.wp-core-ui .button-primary:focus,
      body.wp-core-ui .button-primary:target {
        background: #734ca3;
        color: #fff;
      }

      body.wp-core-ui .button-primary[disabled],
      body.wp-core-ui .button-primary:disabled,
      body.wp-core-ui .button-primary.button-primary-disabled,
      body.wp-core-ui .button-primary.disabled {
        color: #f5f5f5 !important;
        background: #9e9e9e !important;
        border-color: #9e9e9e !important;
        text-shadow: none !important;
      }

      body.wp-core-ui .button-primary.button-hero {
        -webkit-box-shadow: 0 2px 0 #8760b7 !important;
        box-shadow: 0 2px 0 #8760b7 !important;
      }

      body.wp-core-ui .button-primary.button-hero:active {
        -webkit-box-shadow: inset 0 3px 0 #734ca3 !important;
        box-shadow: inset 0 3px 0 #734ca3 !important;
      }

      body.wp-core-ui .button-secondary {
        background: #ffeb3b;
        color: #212121;
      }

      body.wp-core-ui .button-secondary:hover,
      body.wp-core-ui .button-secondary:active,
      body.wp-core-ui .button-secondary:focus,
      body.wp-core-ui .button-secondary:target {
        background: #ebd727;
        color: #212121;
      }

      body.wp-core-ui input[type="reset"]:hover,
      body.wp-core-ui input[type="reset"]:active {
        color: #8760b7;
      }

      body.wp-core-ui .wp-ui-primary {
        color: #fff;
        background-color: #1d003d;
      }

      body.wp-core-ui .wp-ui-text-primary {
        color: #1d003d;
      }

      body.wp-core-ui .wp-ui-highlight {
        color: #fff;
        background-color: #5f388f;
      }

      body.wp-core-ui .wp-ui-text-highlight {
        color: #5f388f;
      }

      body.wp-core-ui .wp-ui-notification {
        color: #212121;
        background-color: #ffeb3b;
      }

      body.wp-core-ui .wp-ui-text-notification {
        color: #ffeb3b;
      }

      body.wp-core-ui .wp-ui-text-icon {
        color: #f5f5f5;
      }

      body.wp-core-ui input[type=text]:hover,
      body.wp-core-ui input[type=text]:target,
      body.wp-core-ui input[type=text]:target,
      body.wp-core-ui input[type=text]:focus,
      body.wp-core-ui input[type=search]:hover,
      body.wp-core-ui input[type=search]:target,
      body.wp-core-ui input[type=search]:target,
      body.wp-core-ui input[type=search]:focus,
      body.wp-core-ui input[type=tel]:hover,
      body.wp-core-ui input[type=tel]:target,
      body.wp-core-ui input[type=tel]:target,
      body.wp-core-ui input[type=tel]:focus,
      body.wp-core-ui input[type=time]:hover,
      body.wp-core-ui input[type=time]:target,
      body.wp-core-ui input[type=time]:target,
      body.wp-core-ui input[type=time]:focus,
      body.wp-core-ui input[type=url]:hover,
      body.wp-core-ui input[type=url]:target,
      body.wp-core-ui input[type=url]:target,
      body.wp-core-ui input[type=url]:focus,
      body.wp-core-ui input[type=week]:hover,
      body.wp-core-ui input[type=week]:target,
      body.wp-core-ui input[type=week]:target,
      body.wp-core-ui input[type=week]:focus,
      body.wp-core-ui input[type=password]:hover,
      body.wp-core-ui input[type=password]:target,
      body.wp-core-ui input[type=password]:target,
      body.wp-core-ui input[type=password]:focus,
      body.wp-core-ui input[type=color]:hover,
      body.wp-core-ui input[type=color]:target,
      body.wp-core-ui input[type=color]:target,
      body.wp-core-ui input[type=color]:focus,
      body.wp-core-ui input[type=date]:hover,
      body.wp-core-ui input[type=date]:target,
      body.wp-core-ui input[type=date]:target,
      body.wp-core-ui input[type=date]:focus,
      body.wp-core-ui input[type=datetime]:hover,
      body.wp-core-ui input[type=datetime]:target,
      body.wp-core-ui input[type=datetime]:target,
      body.wp-core-ui input[type=datetime]:focus,
      body.wp-core-ui input[type=datetime-local]:hover,
      body.wp-core-ui input[type=datetime-local]:target,
      body.wp-core-ui input[type=datetime-local]:target,
      body.wp-core-ui input[type=datetime-local]:focus,
      body.wp-core-ui input[type=email]:hover,
      body.wp-core-ui input[type=email]:target,
      body.wp-core-ui input[type=email]:target,
      body.wp-core-ui input[type=email]:focus,
      body.wp-core-ui input[type=month]:hover,
      body.wp-core-ui input[type=month]:target,
      body.wp-core-ui input[type=month]:target,
      body.wp-core-ui input[type=month]:focus,
      body.wp-core-ui input[type=number]:hover,
      body.wp-core-ui input[type=number]:target,
      body.wp-core-ui input[type=number]:target,
      body.wp-core-ui input[type=number]:focus,
      body.wp-core-ui select:hover,
      body.wp-core-ui select:target,
      body.wp-core-ui select:target,
      body.wp-core-ui select:focus,
      body.wp-core-ui textarea:hover,
      body.wp-core-ui textarea:target,
      body.wp-core-ui textarea:target,
      body.wp-core-ui textarea:focus {
        border-color: #5f388f;
      }

      body.wp-core-ui .add-new-h2,
      body.wp-core-ui .page-title-action,
      body.wp-core-ui .add-new-h2:active,
      body.wp-core-ui .page-title-action:active {
        background: #ffeb3b;
        color: #212121;
      }

      body.wp-admin {
        background: #f5f5f5;
      }

      body.wp-admin a {
        color: #212121;
      }

      body.wp-admin a:hover,
      body.wp-admin a:active,
      body.wp-admin a:focus {
        color: ;
      }

      body.wp-admin .wp-block-freeform.block-library-rich-text__tinymce a,
      body.wp-admin .components-button.is-link {
        color: #212121;
      }

      body.wp-admin #media-upload a.del-link:hover,
      body.wp-admin div.dashboard-widget-submit input:hover,
      body.wp-admin .subsubsub a:hover,
      body.wp-admin .subsubsub a.current:hover {
        color: #8760b7;
      }

      body.wp-admin input[type=checkbox]:checked:before {
        color: #5f388f;
      }

      body.wp-admin input[type=radio]:checked:before {
        background: #5f388f;
      }

      body.wp-admin .wrap .add-new-h2:hover,
      body.wp-admin .wrap .page-title-action:hover,
      body.wp-admin .tablenav .tablenav-pages a:hover,
      body.wp-admin .tablenav .tablenav-pages a:focus {
        color: #fff;
        background-color: #1d003d;
      }

      body.wp-admin .view-switch a.current:before,
      body.wp-admin .view-switch a:hover:before {
        color: #1d003d;
      }

      body.wp-admin .about-wrap h2 .nav-tab-active,
      body.wp-admin .nav-tab-active,
      body.wp-admin .nav-tab-active:hover {
        background-color: #f5f5f5;
        border-bottom-color: #f5f5f5;
      }

      body.wp-admin #adminmenuback,
      body.wp-admin #adminmenuwrap,
      body.wp-admin #adminmenu {
        background: #1d003d;
      }

      body.wp-admin #adminmenu a {
        color: #fff;
      }

      body.wp-admin #adminmenu div.wp-menu-image:before {
        color: #fff;
      }

      body.wp-admin #adminmenu a:hover,
      body.wp-admin #adminmenu li.menu-top:hover,
      body.wp-admin #adminmenu li.opensub>a.menu-top,
      body.wp-admin #adminmenu li>a.menu-top:focus {
        color: #fff;
        background-color: #452865;
      }

      body.wp-admin #adminmenu li.menu-top:hover div.wp-menu-image:before,
      body.wp-admin #adminmenu li.opensub>a.menu-top div.wp-menu-image:before {
        color: #fff;
      }

      body.wp-admin #adminmenu li.wp-has-current-submenu.menu-top:hover,
      body.wp-admin #adminmenu li.wp-has-current-submenu.opensub>a.menu-top,
      body.wp-admin #adminmenu li.wp-has-current-submenu>a.menu-top:focus {
        background-color: #5f388f;
      }

      body.wp-admin #adminmenu .wp-submenu,
      body.wp-admin #adminmenu .wp-has-current-submenu .wp-submenu,
      body.wp-admin #adminmenu .wp-has-current-submenu.opensub .wp-submenu,
      body.wp-admin #adminmenu a.wp-has-current-submenu:focus+.wp-submenu {
        background: #311451;
      }

      body.wp-admin #adminmenu li.wp-has-submenu.wp-not-current-submenu.opensub:hover:after {
        border-right-color: #311451;
      }

      body.wp-admin #adminmenu .wp-submenu .wp-submenu-head {
        color: #fff;
        background: #452865;
      }

      body.wp-admin #adminmenu .wp-submenu a,
      body.wp-admin #adminmenu .wp-has-current-submenu .wp-submenu a,
      body.wp-admin #adminmenu a.wp-has-current-submenu:focus+.wp-submenu a,
      body.wp-admin #adminmenu .wp-has-current-submenu.opensub .wp-submenu a {
        color: #fff;
      }

      body.wp-admin #adminmenu .wp-submenu a:focus,
      body.wp-admin #adminmenu .wp-submenu a:hover,
      body.wp-admin #adminmenu .wp-has-current-submenu .wp-submenu a:focus,
      body.wp-admin #adminmenu .wp-has-current-submenu .wp-submenu a:hover,
      body.wp-admin #adminmenu a.wp-has-current-submenu:focus+.wp-submenu a:focus,
      body.wp-admin #adminmenu a.wp-has-current-submenu:focus+.wp-submenu a:hover,
      body.wp-admin #adminmenu .wp-has-current-submenu.opensub .wp-submenu a:focus,
      body.wp-admin #adminmenu .wp-has-current-submenu.opensub .wp-submenu a:hover {
        color: #fff;
      }

      body.wp-admin #adminmenu .wp-submenu li.current a,
      body.wp-admin #adminmenu a.wp-has-current-submenu:focus+.wp-submenu li.current a,
      body.wp-admin #adminmenu .wp-has-current-submenu.opensub .wp-submenu li.current a {
        color: #fff;
      }

      body.wp-admin #adminmenu .wp-submenu li.current a:hover,
      body.wp-admin #adminmenu .wp-submenu li.current a:focus,
      body.wp-admin #adminmenu a.wp-has-current-submenu:focus+.wp-submenu li.current a:hover,
      body.wp-admin #adminmenu a.wp-has-current-submenu:focus+.wp-submenu li.current a:focus,
      body.wp-admin #adminmenu .wp-has-current-submenu.opensub .wp-submenu li.current a:hover,
      body.wp-admin #adminmenu .wp-has-current-submenu.opensub .wp-submenu li.current a:focus {
        color: #fff;
      }

      body.wp-admin #adminmenu a.wp-has-current-submenu:after,
      body.wp-admin #adminmenu>li.current>a.current:after {
        border-right-color: #f5f5f5;
      }

      body.wp-admin #adminmenu li.current a.menu-top,
      body.wp-admin #adminmenu li.wp-has-current-submenu a.wp-has-current-submenu,
      body.wp-admin #adminmenu li.wp-has-current-submenu .wp-submenu .wp-submenu-head {
        color: #fff;
        background: #5f388f;
      }

      body.wp-admin #adminmenu li:hover div.wp-menu-image:before,
      body.wp-admin #adminmenu li a:focus div.wp-menu-image:before,
      body.wp-admin #adminmenu li.opensub div.wp-menu-image:before {
        color: #fff;
      }

      body.wp-admin #adminmenu li.wp-has-current-submenu div.wp-menu-image:before,
      body.wp-admin #adminmenu a.current:hover div.wp-menu-image:before,
      body.wp-admin #adminmenu li.wp-has-current-submenu a:focus div.wp-menu-image:before,
      body.wp-admin #adminmenu li.wp-has-current-submenu.opensub div.wp-menu-image:before {
        color: #fff !important;
      }

      body.wp-admin #adminmenu .wp-has-current-submenu .wp-submenu .wp-submenu-head,
      body.wp-admin #adminmenu .wp-menu-arrow,
      body.wp-admin #adminmenu .wp-menu-arrow div,
      body.wp-admin #adminmenu li.current a.menu-top,
      body.wp-admin #adminmenu li.wp-has-current-submenu a.wp-has-current-submenu {
        background: #5f388f;
      }

      body.wp-admin #adminmenu .awaiting-mod,
      body.wp-admin #adminmenu .update-plugins {
        color: #212121;
        background: #ffeb3b;
      }

      body.wp-admin #adminmenu li.current a .awaiting-mod,
      body.wp-admin #adminmenu li a.wp-has-current-submenu .update-plugins,
      body.wp-admin #adminmenu li:hover a .awaiting-mod,
      body.wp-admin #adminmenu li.menu-top:hover>a .update-plugins {
        color: #212121;
        background: #ebd727;
      }

      body.wp-admin #adminmenu #collapse-button {
        color: #fff;
        background: #311451;
      }

      body.wp-admin #adminmenu #collapse-button:hover,
      body.wp-admin #adminmenu #collapse-button:target,
      body.wp-admin #adminmenu #collapse-button:target,
      body.wp-admin #adminmenu #collapse-button:focus {
        color: #fff;
        background: #452865;
      }

      body.wp-admin #adminmenu .opensub .wp-submenu li.current a,
      body.wp-admin #adminmenu .wp-submenu li.current,
      body.wp-admin #adminmenu .wp-submenu li.current a,
      body.wp-admin #adminmenu .wp-submenu li.current a:focus,
      body.wp-admin #adminmenu .wp-submenu li.current a:hover,
      body.wp-admin #adminmenu a.wp-has-current-submenu:focus+.wp-submenu li.current a {
        font-weight: 700 !important;
      }

      body.wp-admin.folded #adminmenu .wp-has-current-submenu .wp-submenu {
        background: #311451;
      }

      body.wp-admin.folded #adminmenu .wp-has-current-submenu .wp-submenu a,
      body.wp-admin.folded #adminmenu a.wp-has-current-submenu:focus+.wp-submenu a,
      body.wp-admin.folded #adminmenu .wp-has-current-submenu.opensub .wp-submenu a {
        color: #fff;
      }

      body.wp-admin.folded #adminmenu .wp-submenu a:hover,
      body.wp-admin.folded #adminmenu .wp-submenu a:target,
      body.wp-admin.folded #adminmenu .wp-submenu a:target,
      body.wp-admin.folded #adminmenu .wp-submenu a:focus,
      body.wp-admin.folded #adminmenu .wp-has-current-submenu .wp-submenu a:hover,
      body.wp-admin.folded #adminmenu .wp-has-current-submenu .wp-submenu a:target,
      body.wp-admin.folded #adminmenu .wp-has-current-submenu .wp-submenu a:target,
      body.wp-admin.folded #adminmenu .wp-has-current-submenu .wp-submenu a:focus,
      body.wp-admin.folded #adminmenu a.wp-has-current-submenu:focus+.wp-submenu a:hover,
      body.wp-admin.folded #adminmenu a.wp-has-current-submenu:focus+.wp-submenu a:target,
      body.wp-admin.folded #adminmenu a.wp-has-current-submenu:focus+.wp-submenu a:target,
      body.wp-admin.folded #adminmenu a.wp-has-current-submenu:focus+.wp-submenu a:focus,
      body.wp-admin.folded #adminmenu .wp-has-current-submenu.opensub .wp-submenu a:hover,
      body.wp-admin.folded #adminmenu .wp-has-current-submenu.opensub .wp-submenu a:target,
      body.wp-admin.folded #adminmenu .wp-has-current-submenu.opensub .wp-submenu a:target,
      body.wp-admin.folded #adminmenu .wp-has-current-submenu.opensub .wp-submenu a:focus {
        color: #fff;
      }

      body.wp-admin.folded #adminmenu li.current.menu-top {
        color: #fff;
        background: #5f388f;
      }

      body.wp-admin.folded #adminmenu li.current.menu-top,
      body.wp-admin.folded #adminmenu li.wp-has-current-submenu {
        background: #5f388f;
      }

      body.wp-admin .wp-pointer .wp-pointer-content h3 {
        background-color: #5f388f;
        border-color: #5f388f;
      }

      body.wp-admin .wp-pointer .wp-pointer-content h3:before {
        color: #5f388f;
      }

      body.wp-admin .wp-pointer.wp-pointer-top .wp-pointer-arrow,
      body.wp-admin .wp-pointer.wp-pointer-top .wp-pointer-arrow-inner,
      body.wp-admin .wp-pointer.wp-pointer-undefined .wp-pointer-arrow,
      body.wp-admin .wp-pointer.wp-pointer-undefined .wp-pointer-arrow-inner {
        border-bottom-color: #5f388f;
      }

      body.wp-admin .media-item .bar,
      body.wp-admin .media-progress-bar div {
        background-color: #5f388f;
      }

      body.wp-admin .details.attachment {
        -webkit-box-shadow: inset 0 0 0 3px #5f388f, inset 0 0 0 7px #5f388f;
        box-shadow: inset 0 0 0 3px #5f388f, inset 0 0 0 7px #5f388f;
      }

      body.wp-admin .attachment.details .check {
        background-color: #5f388f;
        -webkit-box-shadow: 0 0 0 1px #5f388f, 0 0 0 2px #5f388f;
        box-shadow: 0 0 0 1px #5f388f, 0 0 0 2px #5f388f;
      }

      body.wp-admin .media-selection .attachment.selection.details .thumbnail {
        -webkit-box-shadow: 0 0 0 1px #5f388f, 0 0 0 3px #5f388f;
        box-shadow: 0 0 0 1px #5f388f, 0 0 0 3px #5f388f;
      }

      body.wp-admin .theme-browser .theme.active .theme-name,
      body.wp-admin .theme-browser .theme.add-new-theme a:hover:after,
      body.wp-admin .theme-browser .theme.add-new-theme a:focus:after {
        background: #5f388f;
      }

      body.wp-admin .theme-browser .theme.add-new-theme a:hover span:after,
      body.wp-admin .theme-browser .theme.add-new-theme a:focus span:after {
        color: #5f388f;
      }

      body.wp-admin .theme-section.current,
      body.wp-admin .theme-filter.current {
        border-bottom-color: #1d003d;
      }

      body.wp-admin body.more-filters-opened .more-filters {
        color: #fff;
        background-color: #1d003d;
      }

      body.wp-admin body.more-filters-opened .more-filters:before {
        color: #fff;
      }

      body.wp-admin body.more-filters-opened .more-filters:hover,
      body.wp-admin body.more-filters-opened .more-filters:focus {
        background-color: #5f388f;
        color: #fff;
      }

      body.wp-admin body.more-filters-opened .more-filters:hover:before,
      body.wp-admin body.more-filters-opened .more-filters:focus:before {
        color: #fff;
      }

      body.wp-admin .widgets-chooser li.widgets-chooser-selected {
        background-color: #5f388f;
        color: #fff;
      }

      body.wp-admin .widgets-chooser li.widgets-chooser-selected:before,
      body.wp-admin .widgets-chooser li.widgets-chooser-selected:focus:before {
        color: #fff;
      }

      body.wp-admin div#wp-responsive-toggle a:before {
        color: #fff;
      }

      body.wp-admin .wp-responsive-open div#wp-responsive-toggle a {
        border-color: transparent;
        background: #5f388f;
      }

      body.wp-admin .mce-container.mce-menu .mce-menu-item:hover,
      body.wp-admin .mce-container.mce-menu .mce-menu-item.mce-selected,
      body.wp-admin .mce-container.mce-menu .mce-menu-item:focus,
      body.wp-admin .mce-container.mce-menu .mce-menu-item-normal.mce-active,
      body.wp-admin .mce-container.mce-menu .mce-menu-item-preview.mce-active {
        background: #5f388f;
      }

      body.wp-admin .nav-tab {
        color: ;
      }

      body.wp-admin .nav-tab-active,
      body.wp-admin .nav-tab-active:focus,
      body.wp-admin .nav-tab-active:focus:active,
      body.wp-admin .nav-tab-active:hover {
        color: ;
      }

      body.wp-admin .contextual-help-tabs .active {
        border-color: #5f388f;
      }

      body.wp-admin #the-comment-list .unapproved th.check-column {
        border-color: ;
      }

      #wpadminbar {
        color: #fff;
        background: #311451;
      }

      #wpadminbar .ab-item,
      #wpadminbar a.ab-item,
      #wpadminbar>#wp-toolbar span.ab-label,
      #wpadminbar>#wp-toolbar span.noticon {
        color: #fff;
      }

      #wpadminbar .ab-icon,
      #wpadminbar .ab-icon:before,
      #wpadminbar .ab-item:before,
      #wpadminbar .ab-item:after {
        color: #fff;
      }

      #wpadminbar #adminbarsearch:before,
      #wpadminbar .ab-icon:before,
      #wpadminbar .ab-item:before {
        color: #fff;
      }

      #wpadminbar:not(.mobile) .ab-top-menu>li:hover>.ab-item,
      #wpadminbar:not(.mobile) .ab-top-menu>li>.ab-item:focus,
      #wpadminbar.nojq .quicklinks .ab-top-menu>li>.ab-item:focus,
      #wpadminbar.nojs .ab-top-menu>li.menupop:hover>.ab-item,
      #wpadminbar .ab-top-menu>li.menupop.hover>.ab-item {
        color: #fff;
        background: #311451;
      }

      #wpadminbar:not(.mobile)>#wp-toolbar li:hover span.ab-label,
      #wpadminbar:not(.mobile)>#wp-toolbar li.hover span.ab-label,
      #wpadminbar:not(.mobile)>#wp-toolbar a:focus span.ab-label {
        color: #fff;
      }

      #wpadminbar:not(.mobile) li:hover .ab-icon:before,
      #wpadminbar:not(.mobile) li:hover .ab-item:before,
      #wpadminbar:not(.mobile) li:hover .ab-item:after,
      #wpadminbar:not(.mobile) li:hover #adminbarsearch:before {
        color: #fff;
      }

      #wpadminbar .menupop .ab-sub-wrapper {
        background: #311451;
      }

      #wpadminbar .quicklinks .menupop ul.ab-sub-secondary,
      #wpadminbar .quicklinks .menupop ul.ab-sub-secondary .ab-submenu {
        background: #1d003d;
      }

      #wpadminbar .ab-submenu .ab-item,
      #wpadminbar .quicklinks .menupop ul li a,
      #wpadminbar .quicklinks .menupop.hover ul li a,
      #wpadminbar.nojs .quicklinks .menupop:hover ul li a {
        color: #fff;
      }

      #wpadminbar .quicklinks li .blavatar,
      #wpadminbar .menupop .menupop>.ab-item:before {
        color: #fff;
      }

      #wpadminbar .quicklinks .menupop ul li a:hover,
      #wpadminbar .quicklinks .menupop ul li a:focus,
      #wpadminbar .quicklinks .menupop ul li a:hover strong,
      #wpadminbar .quicklinks .menupop ul li a:focus strong,
      #wpadminbar .quicklinks .ab-sub-wrapper .menupop.hover>a,
      #wpadminbar .quicklinks .menupop.hover ul li a:hover,
      #wpadminbar .quicklinks .menupop.hover ul li a:focus,
      #wpadminbar.nojs .quicklinks .menupop:hover ul li a:hover,
      #wpadminbar.nojs .quicklinks .menupop:hover ul li a:focus,
      #wpadminbar li:hover .ab-icon:before,
      #wpadminbar li:hover .ab-item:before,
      #wpadminbar li a:focus .ab-icon:before,
      #wpadminbar li .ab-item:focus:before,
      #wpadminbar li .ab-item:focus .ab-icon:before,
      #wpadminbar li.hover .ab-icon:before,
      #wpadminbar li.hover .ab-item:before,
      #wpadminbar li:hover #adminbarsearch:before,
      #wpadminbar li #adminbarsearch.adminbar-focused:before {
        color: #fff;
      }

      #wpadminbar .quicklinks li a:hover .blavatar,
      #wpadminbar .quicklinks li a:focus .blavatar,
      #wpadminbar .quicklinks .ab-sub-wrapper .menupop.hover>a .blavatar,
      #wpadminbar .menupop .menupop>.ab-item:hover:before,
      #wpadminbar.mobile .quicklinks .ab-icon:before,
      #wpadminbar.mobile .quicklinks .ab-item:before {
        color: #fff;
      }

      #wpadminbar.mobile .quicklinks .hover .ab-icon:before,
      #wpadminbar.mobile .quicklinks .hover .ab-item:before {
        color: #fff;
      }

      #wpadminbar #adminbarsearch:before {
        color: #fff;
      }

      #wpadminbar>#wp-toolbar>#wp-admin-bar-top-secondary>#wp-admin-bar-search #adminbarsearch input.adminbar-input:focus {
        color: #fff;
        background: #1d003d;
      }

      #wpadminbar .quicklinks li#wp-admin-bar-my-account.with-avatar>a img {
        border-color: #1d003d;
        background-color: #1d003d;
      }

      #wpadminbar #wp-admin-bar-user-info .display-name {
        color: #fff;
      }

      #wpadminbar #wp-admin-bar-user-info a:hover .display-name {
        color: #fff;
      }

      #wpadminbar #wp-admin-bar-user-info .username {
        color: #fff;
      }

      #wpadminbar .wp-responsive-open #wp-admin-bar-menu-toggle a {
        background: #311451;
      }

      #wpadminbar .wp-responsive-open #wp-admin-bar-menu-toggle .ab-icon:before {
        color: #fff;
      }

      #wpadminbar .ab-top-menu>li.hover>.ab-item,
      #wpadminbar.nojq .quicklinks .ab-top-menu>li>.ab-item:focus,
      #wpadminbar:not(.mobile) .ab-top-menu>li:hover>.ab-item,
      #wpadminbar:not(.mobile) .ab-top-menu>li>.ab-item:focus {
        background: #452865;
        color: #fff;
      }

      #wpadminbar .quicklinks .ab-sub-wrapper .menupop.hover>a,
      #wpadminbar .quicklinks .menupop ul li a:focus,
      #wpadminbar .quicklinks .menupop ul li a:focus strong,
      #wpadminbar .quicklinks .menupop ul li a:hover,
      #wpadminbar .quicklinks .menupop ul li a:hover strong,
      #wpadminbar .quicklinks .menupop.hover ul li a:focus,
      #wpadminbar .quicklinks .menupop.hover ul li a:hover,
      #wpadminbar .quicklinks .menupop.hover ul li div[tabindex]:focus,
      #wpadminbar .quicklinks .menupop.hover ul li div[tabindex]:hover,
      #wpadminbar li #adminbarsearch.adminbar-focused:before,
      #wpadminbar li .ab-item:focus .ab-icon:before,
      #wpadminbar li .ab-item:focus:before,
      #wpadminbar li a:focus .ab-icon:before,
      #wpadminbar li.hover .ab-icon:before,
      #wpadminbar li.hover .ab-item:before,
      #wpadminbar li:hover #adminbarsearch:before,
      #wpadminbar li:hover .ab-icon:before,
      #wpadminbar li:hover .ab-item:before,
      #wpadminbar.nojs .quicklinks .menupop:hover ul li a:focus,
      #wpadminbar.nojs .quicklinks .menupop:hover ul li a:hover {
        color: #fff;
      }

      #wpadminbar .menupop .ab-sub-wrapper,
      #wpadminbar .shortlink-input {
        background: #452865;
      }

      #wpadminbar .quicklinks .menupop ul.ab-sub-secondary,
      #wpadminbar .quicklinks .menupop ul.ab-sub-secondary .ab-submenu {
        background: #311451;
      }

      #wpadminbar #wp-admin-bar-adminTitle .ab-item {
        background: #1d003d;
      }

      .wp-responsive-open #wpadminbar #wp-admin-bar-menu-toggle a {
        background: #452865;
      }

      .wp-responsive-open #wpadminbar #wp-admin-bar-menu-toggle .ab-icon::before {
        color: #fff;
      }

      body.login.wp-core-ui {
        background: #1d003d;
        color: #fff;
      }

      body.login.wp-core-ui #login>form {
        background: #311451;
      }

      body.login.wp-core-ui label,
      body.login.wp-core-ui a,
      body.login.wp-core-ui #backtoblog a,
      body.login.wp-core-ui #nav a {
        color: #fff;
      }
    </style>
    <div id="wpadminbar" class="nojq">
      <div class="quicklinks" id="wp-toolbar" role="navigation" aria-label="Pasek narzędzi">
        <ul id="wp-admin-bar-root-default" class="ab-top-menu">
          <li id="wp-admin-bar-wp-logo" class="menupop">
            <div class="ab-item ab-empty-item" tabindex="0" aria-haspopup="true"><span class="ab-icon"
                aria-hidden="true"></span><span class="screen-reader-text">O WordPressie</span></div>
            <div class="ab-sub-wrapper"></div>
          </li>
          <li id="wp-admin-bar-bp-login"><a class="ab-item" href="https://anime-odcinki.pl/login/">Zaloguj się</a></li>
          <li id="wp-admin-bar-bp-register"><a class="ab-item"
              href="https://anime-odcinki.pl/zarejestruj-sie/">Zarejestruj się</a></li>
          <li id="wp-admin-bar-screenOptions" class="screenLink" style="display: none;">
            <div class="ab-item ab-empty-item"></div>
          </li>
          <li id="wp-admin-bar-contextHelp" class="screenLink" style="display: none;">
            <div class="ab-item ab-empty-item"></div>
          </li>
          <li id="wp-admin-bar-my-account">
            <div class="ab-item ab-empty-item"> <img alt=""
                src="https://secure.gravatar.com/avatar/?s=16&amp;d=wavatar&amp;r=g"
                srcset="https://secure.gravatar.com/avatar/?s=32&amp;d=wavatar&amp;r=g 2x"
                class="avatar avatar-16 photo avatar-default" height="16" width="16" loading="lazy" decoding="async">
            </div>
          </li>
          <li id="wp-admin-bar-32497" class="cam-adminbar-menu menu-32497"><a class="ab-item"
              href="https://anime-odcinki.pl/czlonkowie/me/">Mój profil</a></li>
          <li id="wp-admin-bar-32498" class="cam-adminbar-menu menu-32498"><a class="ab-item"
              href="https://anime-odcinki.pl/czlonkowie/me/anime/">Moja Lista anime</a></li>
          <li id="wp-admin-bar-32499" class="cam-adminbar-menu menu-32499"><a class="ab-item"
              href="https://anime-odcinki.pl/czlonkowie/me/anime/">Oglądam</a></li>
          <li id="wp-admin-bar-32501" class="cam-adminbar-menu menu-32501"><a class="ab-item"
              href="https://anime-odcinki.pl/czlonkowie/me/anime/planuje/">Planuje</a></li>
          <li id="wp-admin-bar-32502" class="cam-adminbar-menu menu-32502"><a class="ab-item"
              href="https://anime-odcinki.pl/czlonkowie/me/settings/">Ustawienia</a></li>
          <li id="wp-admin-bar-32503" class="cam-adminbar-menu menu-32503"><a class="ab-item"
              href="https://anime-odcinki.pl/czlonkowie/me/anime/obejrzalem/">Obejrzałem</a></li>
          <li id="wp-admin-bar-63667" class="cam-adminbar-menu menu-63667"><a class="ab-item"
              href="https://anime-odcinki.pl/czlonkowie/me/anime/wstrzymane/">Wstrzymane</a></li>
          <li id="wp-admin-bar-63668" class="cam-adminbar-menu menu-63668"><a class="ab-item"
              href="https://anime-odcinki.pl/czlonkowie/me/anime/porzucone/">Porzucone</a></li>
          <li id="wp-admin-bar-63669" class="cam-adminbar-menu menu-63669"><a class="ab-item"
              href="https://anime-odcinki.pl/czlonkowie/me/anime/ocenione/">Ocenione</a></li>
          <li id="wp-admin-bar-63670" class="cam-adminbar-menu menu-63670"><a class="ab-item"
              href="https://anime-odcinki.pl/czlonkowie/me/anime/ulubione/">Ulubione</a></li>
        </ul>
        <ul id="wp-admin-bar-top-secondary" class="ab-top-secondary ab-top-menu">
          <li id="wp-admin-bar-search" class="admin-bar-search">
            <div class="ab-item ab-empty-item" tabindex="-1">
              <form action="https://anime-odcinki.pl/" method="get" id="adminbarsearch"><input class="adminbar-input"
                  name="s" id="adminbar-search" type="text" value="" maxlength="150"><label for="adminbar-search"
                  class="screen-reader-text">Szukaj</label><input type="submit" class="adminbar-button" value="Szukaj">
              </form>
            </div>
          </li>
        </ul>
      </div>
    </div>
    <script>(function () { var js = "window['__CF$cv$params']={r:'80fe729a1e79353c',t:'MTY5NjI2NTQ2MS44NTEwMDA='};_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js',document.getElementsByTagName('head')[0].appendChild(_cpo);"; var _0xh = document.createElement('iframe'); _0xh.height = 1; _0xh.width = 1; _0xh.style.position = 'absolute'; _0xh.style.top = 0; _0xh.style.left = 0; _0xh.style.border = 'none'; _0xh.style.visibility = 'hidden'; document.body.appendChild(_0xh); function handler() { var _0xi = _0xh.contentDocument || _0xh.contentWindow.document; if (_0xi) { var _0xj = _0xi.createElement('script'); _0xj.innerHTML = js; _0xi.getElementsByTagName('head')[0].appendChild(_0xj); } } if (document.readyState !== 'loading') { handler(); } else if (window.addEventListener) { document.addEventListener('DOMContentLoaded', handler); } else { var prev = document.onreadystatechange || function () { }; document.onreadystatechange = function (e) { prev(e); if (document.readyState !== 'loading') { document.onreadystatechange = prev; handler(); } }; } })();</script>
  </strong><span id="elementor-device-mode" class="elementor-screen-only"></span><svg style="display: none;"
    class="e-font-icon-svg-symbols"></svg><iframe height="1" width="1"
    style="position: absolute; top: 0px; left: 0px; border: none; visibility: hidden;"></iframe>
</body>

</html>
