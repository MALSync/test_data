<html class="__className_63b31c dark" lang="en" style="color-scheme: dark;">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style type="text/css">
    :root,
    :host {
      --fa-font-solid: normal 900 1em/1 "Font Awesome 6 Free";
      --fa-font-regular: normal 400 1em/1 "Font Awesome 6 Free";
      --fa-font-light: normal 300 1em/1 "Font Awesome 6 Pro";
      --fa-font-thin: normal 100 1em/1 "Font Awesome 6 Pro";
      --fa-font-duotone: normal 900 1em/1 "Font Awesome 6 Duotone";
      --fa-font-duotone-regular: normal 400 1em/1 "Font Awesome 6 Duotone";
      --fa-font-duotone-light: normal 300 1em/1 "Font Awesome 6 Duotone";
      --fa-font-duotone-thin: normal 100 1em/1 "Font Awesome 6 Duotone";
      --fa-font-brands: normal 400 1em/1 "Font Awesome 6 Brands";
      --fa-font-sharp-solid: normal 900 1em/1 "Font Awesome 6 Sharp";
      --fa-font-sharp-regular: normal 400 1em/1 "Font Awesome 6 Sharp";
      --fa-font-sharp-light: normal 300 1em/1 "Font Awesome 6 Sharp";
      --fa-font-sharp-thin: normal 100 1em/1 "Font Awesome 6 Sharp";
      --fa-font-sharp-duotone-solid: normal 900 1em/1 "Font Awesome 6 Sharp Duotone";
      --fa-font-sharp-duotone-regular: normal 400 1em/1 "Font Awesome 6 Sharp Duotone";
      --fa-font-sharp-duotone-light: normal 300 1em/1 "Font Awesome 6 Sharp Duotone";
      --fa-font-sharp-duotone-thin: normal 100 1em/1 "Font Awesome 6 Sharp Duotone";
    }

    svg:not(:root).svg-inline--fa,
    svg:not(:host).svg-inline--fa {
      overflow: visible;
      box-sizing: content-box;
    }

    .svg-inline--fa {
      display: var(--fa-display, inline-block);
      height: 1em;
      overflow: visible;
      vertical-align: -0.125em;
    }

    .svg-inline--fa.fa-2xs {
      vertical-align: 0.1em;
    }

    .svg-inline--fa.fa-xs {
      vertical-align: 0em;
    }

    .svg-inline--fa.fa-sm {
      vertical-align: -0.0714285705em;
    }

    .svg-inline--fa.fa-lg {
      vertical-align: -0.2em;
    }

    .svg-inline--fa.fa-xl {
      vertical-align: -0.25em;
    }

    .svg-inline--fa.fa-2xl {
      vertical-align: -0.3125em;
    }

    .svg-inline--fa.fa-pull-left {
      margin-right: var(--fa-pull-margin, 0.3em);
      width: auto;
    }

    .svg-inline--fa.fa-pull-right {
      margin-left: var(--fa-pull-margin, 0.3em);
      width: auto;
    }

    .svg-inline--fa.fa-li {
      width: var(--fa-li-width, 2em);
      top: 0.25em;
    }

    .svg-inline--fa.fa-fw {
      width: var(--fa-fw-width, 1.25em);
    }

    .fa-layers svg.svg-inline--fa {
      bottom: 0;
      left: 0;
      margin: auto;
      position: absolute;
      right: 0;
      top: 0;
    }

    .fa-layers-counter,
    .fa-layers-text {
      display: inline-block;
      position: absolute;
      text-align: center;
    }

    .fa-layers {
      display: inline-block;
      height: 1em;
      position: relative;
      text-align: center;
      vertical-align: -0.125em;
      width: 1em;
    }

    .fa-layers svg.svg-inline--fa {
      transform-origin: center center;
    }

    .fa-layers-text {
      left: 50%;
      top: 50%;
      transform: translate(-50%, -50%);
      transform-origin: center center;
    }

    .fa-layers-counter {
      background-color: var(--fa-counter-background-color, #ff253a);
      border-radius: var(--fa-counter-border-radius, 1em);
      box-sizing: border-box;
      color: var(--fa-inverse, #fff);
      line-height: var(--fa-counter-line-height, 1);
      max-width: var(--fa-counter-max-width, 5em);
      min-width: var(--fa-counter-min-width, 1.5em);
      overflow: hidden;
      padding: var(--fa-counter-padding, 0.25em 0.5em);
      right: var(--fa-right, 0);
      text-overflow: ellipsis;
      top: var(--fa-top, 0);
      transform: scale(var(--fa-counter-scale, 0.25));
      transform-origin: top right;
    }

    .fa-layers-bottom-right {
      bottom: var(--fa-bottom, 0);
      right: var(--fa-right, 0);
      top: auto;
      transform: scale(var(--fa-layers-scale, 0.25));
      transform-origin: bottom right;
    }

    .fa-layers-bottom-left {
      bottom: var(--fa-bottom, 0);
      left: var(--fa-left, 0);
      right: auto;
      top: auto;
      transform: scale(var(--fa-layers-scale, 0.25));
      transform-origin: bottom left;
    }

    .fa-layers-top-right {
      top: var(--fa-top, 0);
      right: var(--fa-right, 0);
      transform: scale(var(--fa-layers-scale, 0.25));
      transform-origin: top right;
    }

    .fa-layers-top-left {
      left: var(--fa-left, 0);
      right: auto;
      top: var(--fa-top, 0);
      transform: scale(var(--fa-layers-scale, 0.25));
      transform-origin: top left;
    }

    .fa-1x {
      font-size: 1em;
    }

    .fa-2x {
      font-size: 2em;
    }

    .fa-3x {
      font-size: 3em;
    }

    .fa-4x {
      font-size: 4em;
    }

    .fa-5x {
      font-size: 5em;
    }

    .fa-6x {
      font-size: 6em;
    }

    .fa-7x {
      font-size: 7em;
    }

    .fa-8x {
      font-size: 8em;
    }

    .fa-9x {
      font-size: 9em;
    }

    .fa-10x {
      font-size: 10em;
    }

    .fa-2xs {
      font-size: 0.625em;
      line-height: 0.1em;
      vertical-align: 0.225em;
    }

    .fa-xs {
      font-size: 0.75em;
      line-height: 0.0833333337em;
      vertical-align: 0.125em;
    }

    .fa-sm {
      font-size: 0.875em;
      line-height: 0.0714285718em;
      vertical-align: 0.0535714295em;
    }

    .fa-lg {
      font-size: 1.25em;
      line-height: 0.05em;
      vertical-align: -0.075em;
    }

    .fa-xl {
      font-size: 1.5em;
      line-height: 0.0416666682em;
      vertical-align: -0.125em;
    }

    .fa-2xl {
      font-size: 2em;
      line-height: 0.03125em;
      vertical-align: -0.1875em;
    }

    .fa-fw {
      text-align: center;
      width: 1.25em;
    }

    .fa-ul {
      list-style-type: none;
      margin-left: var(--fa-li-margin, 2.5em);
      padding-left: 0;
    }

    .fa-ul>li {
      position: relative;
    }

    .fa-li {
      left: calc(-1 * var(--fa-li-width, 2em));
      position: absolute;
      text-align: center;
      width: var(--fa-li-width, 2em);
      line-height: inherit;
    }

    .fa-border {
      border-color: var(--fa-border-color, #eee);
      border-radius: var(--fa-border-radius, 0.1em);
      border-style: var(--fa-border-style, solid);
      border-width: var(--fa-border-width, 0.08em);
      padding: var(--fa-border-padding, 0.2em 0.25em 0.15em);
    }

    .fa-pull-left {
      float: left;
      margin-right: var(--fa-pull-margin, 0.3em);
    }

    .fa-pull-right {
      float: right;
      margin-left: var(--fa-pull-margin, 0.3em);
    }

    .fa-beat {
      animation-name: fa-beat;
      animation-delay: var(--fa-animation-delay, 0s);
      animation-direction: var(--fa-animation-direction, normal);
      animation-duration: var(--fa-animation-duration, 1s);
      animation-iteration-count: var(--fa-animation-iteration-count, infinite);
      animation-timing-function: var(--fa-animation-timing, ease-in-out);
    }

    .fa-bounce {
      animation-name: fa-bounce;
      animation-delay: var(--fa-animation-delay, 0s);
      animation-direction: var(--fa-animation-direction, normal);
      animation-duration: var(--fa-animation-duration, 1s);
      animation-iteration-count: var(--fa-animation-iteration-count, infinite);
      animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.28, 0.84, 0.42, 1));
    }

    .fa-fade {
      animation-name: fa-fade;
      animation-delay: var(--fa-animation-delay, 0s);
      animation-direction: var(--fa-animation-direction, normal);
      animation-duration: var(--fa-animation-duration, 1s);
      animation-iteration-count: var(--fa-animation-iteration-count, infinite);
      animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));
    }

    .fa-beat-fade {
      animation-name: fa-beat-fade;
      animation-delay: var(--fa-animation-delay, 0s);
      animation-direction: var(--fa-animation-direction, normal);
      animation-duration: var(--fa-animation-duration, 1s);
      animation-iteration-count: var(--fa-animation-iteration-count, infinite);
      animation-timing-function: var(--fa-animation-timing, cubic-bezier(0.4, 0, 0.6, 1));
    }

    .fa-flip {
      animation-name: fa-flip;
      animation-delay: var(--fa-animation-delay, 0s);
      animation-direction: var(--fa-animation-direction, normal);
      animation-duration: var(--fa-animation-duration, 1s);
      animation-iteration-count: var(--fa-animation-iteration-count, infinite);
      animation-timing-function: var(--fa-animation-timing, ease-in-out);
    }

    .fa-shake {
      animation-name: fa-shake;
      animation-delay: var(--fa-animation-delay, 0s);
      animation-direction: var(--fa-animation-direction, normal);
      animation-duration: var(--fa-animation-duration, 1s);
      animation-iteration-count: var(--fa-animation-iteration-count, infinite);
      animation-timing-function: var(--fa-animation-timing, linear);
    }

    .fa-spin {
      animation-name: fa-spin;
      animation-delay: var(--fa-animation-delay, 0s);
      animation-direction: var(--fa-animation-direction, normal);
      animation-duration: var(--fa-animation-duration, 2s);
      animation-iteration-count: var(--fa-animation-iteration-count, infinite);
      animation-timing-function: var(--fa-animation-timing, linear);
    }

    .fa-spin-reverse {
      --fa-animation-direction: reverse;
    }

    .fa-pulse,
    .fa-spin-pulse {
      animation-name: fa-spin;
      animation-direction: var(--fa-animation-direction, normal);
      animation-duration: var(--fa-animation-duration, 1s);
      animation-iteration-count: var(--fa-animation-iteration-count, infinite);
      animation-timing-function: var(--fa-animation-timing, steps(8));
    }

    @media (prefers-reduced-motion: reduce) {

      .fa-beat,
      .fa-bounce,
      .fa-fade,
      .fa-beat-fade,
      .fa-flip,
      .fa-pulse,
      .fa-shake,
      .fa-spin,
      .fa-spin-pulse {
        animation-delay: -1ms;
        animation-duration: 1ms;
        animation-iteration-count: 1;
        transition-delay: 0s;
        transition-duration: 0s;
      }
    }

    @keyframes fa-beat {

      0%,
      90% {
        transform: scale(1);
      }

      45% {
        transform: scale(var(--fa-beat-scale, 1.25));
      }
    }

    @keyframes fa-bounce {
      0% {
        transform: scale(1, 1) translateY(0);
      }

      10% {
        transform: scale(var(--fa-bounce-start-scale-x, 1.1), var(--fa-bounce-start-scale-y, 0.9)) translateY(0);
      }

      30% {
        transform: scale(var(--fa-bounce-jump-scale-x, 0.9), var(--fa-bounce-jump-scale-y, 1.1)) translateY(var(--fa-bounce-height, -0.5em));
      }

      50% {
        transform: scale(var(--fa-bounce-land-scale-x, 1.05), var(--fa-bounce-land-scale-y, 0.95)) translateY(0);
      }

      57% {
        transform: scale(1, 1) translateY(var(--fa-bounce-rebound, -0.125em));
      }

      64% {
        transform: scale(1, 1) translateY(0);
      }

      100% {
        transform: scale(1, 1) translateY(0);
      }
    }

    @keyframes fa-fade {
      50% {
        opacity: var(--fa-fade-opacity, 0.4);
      }
    }

    @keyframes fa-beat-fade {

      0%,
      100% {
        opacity: var(--fa-beat-fade-opacity, 0.4);
        transform: scale(1);
      }

      50% {
        opacity: 1;
        transform: scale(var(--fa-beat-fade-scale, 1.125));
      }
    }

    @keyframes fa-flip {
      50% {
        transform: rotate3d(var(--fa-flip-x, 0), var(--fa-flip-y, 1), var(--fa-flip-z, 0), var(--fa-flip-angle, -180deg));
      }
    }

    @keyframes fa-shake {
      0% {
        transform: rotate(-15deg);
      }

      4% {
        transform: rotate(15deg);
      }

      8%,
      24% {
        transform: rotate(-18deg);
      }

      12%,
      28% {
        transform: rotate(18deg);
      }

      16% {
        transform: rotate(-22deg);
      }

      20% {
        transform: rotate(22deg);
      }

      32% {
        transform: rotate(-12deg);
      }

      36% {
        transform: rotate(12deg);
      }

      40%,
      100% {
        transform: rotate(0deg);
      }
    }

    @keyframes fa-spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    .fa-rotate-90 {
      transform: rotate(90deg);
    }

    .fa-rotate-180 {
      transform: rotate(180deg);
    }

    .fa-rotate-270 {
      transform: rotate(270deg);
    }

    .fa-flip-horizontal {
      transform: scale(-1, 1);
    }

    .fa-flip-vertical {
      transform: scale(1, -1);
    }

    .fa-flip-both,
    .fa-flip-horizontal.fa-flip-vertical {
      transform: scale(-1, -1);
    }

    .fa-rotate-by {
      transform: rotate(var(--fa-rotate-angle, 0));
    }

    .fa-stack {
      display: inline-block;
      vertical-align: middle;
      height: 2em;
      position: relative;
      width: 2.5em;
    }

    .fa-stack-1x,
    .fa-stack-2x {
      bottom: 0;
      left: 0;
      margin: auto;
      position: absolute;
      right: 0;
      top: 0;
      z-index: var(--fa-stack-z-index, auto);
    }

    .svg-inline--fa.fa-stack-1x {
      height: 1em;
      width: 1.25em;
    }

    .svg-inline--fa.fa-stack-2x {
      height: 2em;
      width: 2.5em;
    }

    .fa-inverse {
      color: var(--fa-inverse, #fff);
    }

    .sr-only,
    .fa-sr-only {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border-width: 0;
    }

    .sr-only-focusable:not(:focus),
    .fa-sr-only-focusable:not(:focus) {
      position: absolute;
      width: 1px;
      height: 1px;
      padding: 0;
      margin: -1px;
      overflow: hidden;
      clip: rect(0, 0, 0, 0);
      white-space: nowrap;
      border-width: 0;
    }

    .svg-inline--fa .fa-primary {
      fill: var(--fa-primary-color, currentColor);
      opacity: var(--fa-primary-opacity, 1);
    }

    .svg-inline--fa .fa-secondary {
      fill: var(--fa-secondary-color, currentColor);
      opacity: var(--fa-secondary-opacity, 0.4);
    }

    .svg-inline--fa.fa-swap-opacity .fa-primary {
      opacity: var(--fa-secondary-opacity, 0.4);
    }

    .svg-inline--fa.fa-swap-opacity .fa-secondary {
      opacity: var(--fa-primary-opacity, 1);
    }

    .svg-inline--fa mask .fa-primary,
    .svg-inline--fa mask .fa-secondary {
      fill: black;
    }
  </style>
  <link rel="preload" href="/_next/static/media/4c9affa5bc8f420e-s.p.woff2" as="font" crossorigin="" type="font/woff2">
  <link rel="preload" href="/_next/static/media/cc978ac5ee68c2b6-s.p.woff2" as="font" crossorigin="" type="font/woff2">
  <link rel="preload" as="image" href="/wetried_only.png">
  <link rel="preload" as="image" href="https://storage.qiscans.com/upload/2025/08/24/SERVER-LOGO-311f58bd3a51b8c5.webp">
  <link rel="stylesheet" href="/_next/static/css/cb6b536171c7f0c4.css" data-precedence="next">
  <link rel="stylesheet" href="/_next/static/css/46d2f1b70d0e73f2.css" data-precedence="next">
  <link rel="stylesheet" href="/_next/static/css/59996bdb2e04e5fb.css" data-precedence="next">
  <link rel="stylesheet" href="/_next/static/css/98470d53c5414f81.css" data-precedence="next">
  <link rel="preload" as="script" fetchpriority="low" href="/_next/static/chunks/webpack-9783cfa24d08f6c5.js">
  <script src="/_next/static/chunks/fd9d1056-c91bc71ab5833f5f.js" async=""></script>
  <script src="/_next/static/chunks/2117-7aaf6091950308a9.js" async=""></script>
  <script src="/_next/static/chunks/main-app-5294d1645fe5526e.js" async=""></script>
  <script src="/_next/static/chunks/7432-9e346590c6dcde92.js" async=""></script>
  <script src="/_next/static/chunks/4438-0bc9a386cd599329.js" async=""></script>
  <script src="/_next/static/chunks/2964-74ca146f42261e9b.js" async=""></script>
  <script src="/_next/static/chunks/7954-2b799be3f0c14219.js" async=""></script>
  <script src="/_next/static/chunks/3755-4fc39823db2fd890.js" async=""></script>
  <script src="/_next/static/chunks/app/(auth)/layout-e40890041e9684a9.js" async=""></script>
  <script src="/_next/static/chunks/870fdd6f-7c05e5aa3d228d14.js" async=""></script>
  <script src="/_next/static/chunks/69b09407-ba1d3ad26a7071df.js" async=""></script>
  <script src="/_next/static/chunks/0e5ce63c-079d6f0b9e8f737a.js" async=""></script>
  <script src="/_next/static/chunks/2972-9396f2bb5658bc51.js" async=""></script>
  <script src="/_next/static/chunks/5934-f1a3a4e4f634060d.js" async=""></script>
  <script src="/_next/static/chunks/4532-ffa2bb80dfde5b2c.js" async=""></script>
  <script src="/_next/static/chunks/1463-fe623491ddba145f.js" async=""></script>
  <script src="/_next/static/chunks/1229-a2698fddb43dda46.js" async=""></script>
  <script src="/_next/static/chunks/5878-b26d6c2371866770.js" async=""></script>
  <script src="/_next/static/chunks/1268-ddf9138531d2f670.js" async=""></script>
  <script src="/_next/static/chunks/8924-5699276fc4a3183c.js" async=""></script>
  <script src="/_next/static/chunks/9860-cc9d027637dd558b.js" async=""></script>
  <script src="/_next/static/chunks/1239-87d36c67f5330225.js" async=""></script>
  <link rel="preload" href="https://www.googletagmanager.com/gtag/js?id=G-3NN66WSFQK" as="script">
  <title>Reincarnated Murim Lord - Qi Scans</title>
  <meta name="description"
    content="Read Reincarnated Murim Lord on Qi Scans - &lt;p&gt;Regret is the bane of old men. When aging Alliance Lord Hajin Cheon of the Grand Martial Alliance reflects on his immense legacy, he finds that he recalls little of his deeds or even the lives of his closest advisors. Stricken by a mysterious ailment, Hajin suddenly passes away only to wake up in the body of Ridan Byeok, heir to the Byeok Clan of swordsmen. The only problem is, Ridan is a well-known wastrel, the polar opposite of the virtuous and stern Hajin. Righting the wrongs of his predecessor, Hajin begins to uncover the truth behind his death…&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;">
  <meta property="og:title" content="Reincarnated Murim Lord - Qi Scans">
  <meta property="og:description"
    content="Read Reincarnated Murim Lord on Qi Scans - &lt;p&gt;Regret is the bane of old men. When aging Alliance Lord Hajin Cheon of the Grand Martial Alliance reflects on his immense legacy, he finds that he recalls little of his deeds or even the lives of his closest advisors. Stricken by a mysterious ailment, Hajin suddenly passes away only to wake up in the body of Ridan Byeok, heir to the Byeok Clan of swordsmen. The only problem is, Ridan is a well-known wastrel, the polar opposite of the virtuous and stern Hajin. Righting the wrongs of his predecessor, Hajin begins to uncover the truth behind his death…&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;">
  <meta property="og:image"
    content="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
  <meta property="og:image:width" content="60">
  <meta property="og:image:height" content="95">
  <meta name="twitter:card" content="summary">
  <meta name="twitter:title" content="Reincarnated Murim Lord - Qi Scans">
  <meta name="twitter:description"
    content="Read Reincarnated Murim Lord on Qi Scans - &lt;p&gt;Regret is the bane of old men. When aging Alliance Lord Hajin Cheon of the Grand Martial Alliance reflects on his immense legacy, he finds that he recalls little of his deeds or even the lives of his closest advisors. Stricken by a mysterious ailment, Hajin suddenly passes away only to wake up in the body of Ridan Byeok, heir to the Byeok Clan of swordsmen. The only problem is, Ridan is a well-known wastrel, the polar opposite of the virtuous and stern Hajin. Righting the wrongs of his predecessor, Hajin begins to uncover the truth behind his death…&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;">
  <meta name="twitter:image"
    content="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
  <meta name="twitter:image:width" content="60">
  <meta name="twitter:image:height" content="95">
  <link rel="icon" href="/favicon.ico" type="image/x-icon" sizes="16x16">
  <meta name="next-size-adjust">
  <script defer="" data-domain="ezmanga.org" src="https://analytics.ezmanga.org/js/script.js"></script>
  <script src="/_next/static/chunks/polyfills-42372ed130431b0a.js" nomodule=""></script>
  <style type="text/css">
    :where(html[dir="ltr"]),
    :where([data-sonner-toaster][dir="ltr"]) {
      --toast-icon-margin-start: -3px;
      --toast-icon-margin-end: 4px;
      --toast-svg-margin-start: -1px;
      --toast-svg-margin-end: 0px;
      --toast-button-margin-start: auto;
      --toast-button-margin-end: 0;
      --toast-close-button-start: 0;
      --toast-close-button-end: unset;
      --toast-close-button-transform: translate(-35%, -35%)
    }

    :where(html[dir="rtl"]),
    :where([data-sonner-toaster][dir="rtl"]) {
      --toast-icon-margin-start: 4px;
      --toast-icon-margin-end: -3px;
      --toast-svg-margin-start: 0px;
      --toast-svg-margin-end: -1px;
      --toast-button-margin-start: 0;
      --toast-button-margin-end: auto;
      --toast-close-button-start: unset;
      --toast-close-button-end: 0;
      --toast-close-button-transform: translate(35%, -35%)
    }

    :where([data-sonner-toaster]) {
      position: fixed;
      width: var(--width);
      font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica Neue, Arial, Noto Sans, sans-serif, Apple Color Emoji, Segoe UI Emoji, Segoe UI Symbol, Noto Color Emoji;
      --gray1: hsl(0, 0%, 99%);
      --gray2: hsl(0, 0%, 97.3%);
      --gray3: hsl(0, 0%, 95.1%);
      --gray4: hsl(0, 0%, 93%);
      --gray5: hsl(0, 0%, 90.9%);
      --gray6: hsl(0, 0%, 88.7%);
      --gray7: hsl(0, 0%, 85.8%);
      --gray8: hsl(0, 0%, 78%);
      --gray9: hsl(0, 0%, 56.1%);
      --gray10: hsl(0, 0%, 52.3%);
      --gray11: hsl(0, 0%, 43.5%);
      --gray12: hsl(0, 0%, 9%);
      --border-radius: 8px;
      box-sizing: border-box;
      padding: 0;
      margin: 0;
      list-style: none;
      outline: none;
      z-index: 999999999;
      transition: transform .4s ease
    }

    :where([data-sonner-toaster][data-lifted="true"]) {
      transform: translateY(-10px)
    }

    @media (hover: none) and (pointer: coarse) {
      :where([data-sonner-toaster][data-lifted="true"]) {
        transform: none
      }
    }

    :where([data-sonner-toaster][data-x-position="right"]) {
      right: var(--offset-right)
    }

    :where([data-sonner-toaster][data-x-position="left"]) {
      left: var(--offset-left)
    }

    :where([data-sonner-toaster][data-x-position="center"]) {
      left: 50%;
      transform: translate(-50%)
    }

    :where([data-sonner-toaster][data-y-position="top"]) {
      top: var(--offset-top)
    }

    :where([data-sonner-toaster][data-y-position="bottom"]) {
      bottom: var(--offset-bottom)
    }

    :where([data-sonner-toast]) {
      --y: translateY(100%);
      --lift-amount: calc(var(--lift) * var(--gap));
      z-index: var(--z-index);
      position: absolute;
      opacity: 0;
      transform: var(--y);
      filter: blur(0);
      touch-action: none;
      transition: transform .4s, opacity .4s, height .4s, box-shadow .2s;
      box-sizing: border-box;
      outline: none;
      overflow-wrap: anywhere
    }

    :where([data-sonner-toast][data-styled="true"]) {
      padding: 16px;
      background: var(--normal-bg);
      border: 1px solid var(--normal-border);
      color: var(--normal-text);
      border-radius: var(--border-radius);
      box-shadow: 0 4px 12px #0000001a;
      width: var(--width);
      font-size: 13px;
      display: flex;
      align-items: center;
      gap: 6px
    }

    :where([data-sonner-toast]:focus-visible) {
      box-shadow: 0 4px 12px #0000001a, 0 0 0 2px #0003
    }

    :where([data-sonner-toast][data-y-position="top"]) {
      top: 0;
      --y: translateY(-100%);
      --lift: 1;
      --lift-amount: calc(1 * var(--gap))
    }

    :where([data-sonner-toast][data-y-position="bottom"]) {
      bottom: 0;
      --y: translateY(100%);
      --lift: -1;
      --lift-amount: calc(var(--lift) * var(--gap))
    }

    :where([data-sonner-toast]) :where([data-description]) {
      font-weight: 400;
      line-height: 1.4;
      color: inherit
    }

    :where([data-sonner-toast]) :where([data-title]) {
      font-weight: 500;
      line-height: 1.5;
      color: inherit
    }

    :where([data-sonner-toast]) :where([data-icon]) {
      display: flex;
      height: 16px;
      width: 16px;
      position: relative;
      justify-content: flex-start;
      align-items: center;
      flex-shrink: 0;
      margin-left: var(--toast-icon-margin-start);
      margin-right: var(--toast-icon-margin-end)
    }

    :where([data-sonner-toast][data-promise="true"]) :where([data-icon])>svg {
      opacity: 0;
      transform: scale(.8);
      transform-origin: center;
      animation: sonner-fade-in .3s ease forwards
    }

    :where([data-sonner-toast]) :where([data-icon])>* {
      flex-shrink: 0
    }

    :where([data-sonner-toast]) :where([data-icon]) svg {
      margin-left: var(--toast-svg-margin-start);
      margin-right: var(--toast-svg-margin-end)
    }

    :where([data-sonner-toast]) :where([data-content]) {
      display: flex;
      flex-direction: column;
      gap: 2px
    }

    [data-sonner-toast][data-styled=true] [data-button] {
      border-radius: 4px;
      padding-left: 8px;
      padding-right: 8px;
      height: 24px;
      font-size: 12px;
      color: var(--normal-bg);
      background: var(--normal-text);
      margin-left: var(--toast-button-margin-start);
      margin-right: var(--toast-button-margin-end);
      border: none;
      cursor: pointer;
      outline: none;
      display: flex;
      align-items: center;
      flex-shrink: 0;
      transition: opacity .4s, box-shadow .2s
    }

    :where([data-sonner-toast]) :where([data-button]):focus-visible {
      box-shadow: 0 0 0 2px #0006
    }

    :where([data-sonner-toast]) :where([data-button]):first-of-type {
      margin-left: var(--toast-button-margin-start);
      margin-right: var(--toast-button-margin-end)
    }

    :where([data-sonner-toast]) :where([data-cancel]) {
      color: var(--normal-text);
      background: rgba(0, 0, 0, .08)
    }

    :where([data-sonner-toast][data-theme="dark"]) :where([data-cancel]) {
      background: rgba(255, 255, 255, .3)
    }

    :where([data-sonner-toast]) :where([data-close-button]) {
      position: absolute;
      left: var(--toast-close-button-start);
      right: var(--toast-close-button-end);
      top: 0;
      height: 20px;
      width: 20px;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 0;
      color: var(--gray12);
      border: 1px solid var(--gray4);
      transform: var(--toast-close-button-transform);
      border-radius: 50%;
      cursor: pointer;
      z-index: 1;
      transition: opacity .1s, background .2s, border-color .2s
    }

    [data-sonner-toast] [data-close-button] {
      background: var(--gray1)
    }

    :where([data-sonner-toast]) :where([data-close-button]):focus-visible {
      box-shadow: 0 4px 12px #0000001a, 0 0 0 2px #0003
    }

    :where([data-sonner-toast]) :where([data-disabled="true"]) {
      cursor: not-allowed
    }

    :where([data-sonner-toast]):hover :where([data-close-button]):hover {
      background: var(--gray2);
      border-color: var(--gray5)
    }

    :where([data-sonner-toast][data-swiping="true"]):before {
      content: "";
      position: absolute;
      left: -50%;
      right: -50%;
      height: 100%;
      z-index: -1
    }

    :where([data-sonner-toast][data-y-position="top"][data-swiping="true"]):before {
      bottom: 50%;
      transform: scaleY(3) translateY(50%)
    }

    :where([data-sonner-toast][data-y-position="bottom"][data-swiping="true"]):before {
      top: 50%;
      transform: scaleY(3) translateY(-50%)
    }

    :where([data-sonner-toast][data-swiping="false"][data-removed="true"]):before {
      content: "";
      position: absolute;
      inset: 0;
      transform: scaleY(2)
    }

    :where([data-sonner-toast]):after {
      content: "";
      position: absolute;
      left: 0;
      height: calc(var(--gap) + 1px);
      bottom: 100%;
      width: 100%
    }

    :where([data-sonner-toast][data-mounted="true"]) {
      --y: translateY(0);
      opacity: 1
    }

    :where([data-sonner-toast][data-expanded="false"][data-front="false"]) {
      --scale: var(--toasts-before) * .05 + 1;
      --y: translateY(calc(var(--lift-amount) * var(--toasts-before))) scale(calc(-1 * var(--scale)));
      height: var(--front-toast-height)
    }

    :where([data-sonner-toast])>* {
      transition: opacity .4s
    }

    :where([data-sonner-toast][data-expanded="false"][data-front="false"][data-styled="true"])>* {
      opacity: 0
    }

    :where([data-sonner-toast][data-visible="false"]) {
      opacity: 0;
      pointer-events: none
    }

    :where([data-sonner-toast][data-mounted="true"][data-expanded="true"]) {
      --y: translateY(calc(var(--lift) * var(--offset)));
      height: var(--initial-height)
    }

    :where([data-sonner-toast][data-removed="true"][data-front="true"][data-swipe-out="false"]) {
      --y: translateY(calc(var(--lift) * -100%));
      opacity: 0
    }

    :where([data-sonner-toast][data-removed="true"][data-front="false"][data-swipe-out="false"][data-expanded="true"]) {
      --y: translateY(calc(var(--lift) * var(--offset) + var(--lift) * -100%));
      opacity: 0
    }

    :where([data-sonner-toast][data-removed="true"][data-front="false"][data-swipe-out="false"][data-expanded="false"]) {
      --y: translateY(40%);
      opacity: 0;
      transition: transform .5s, opacity .2s
    }

    :where([data-sonner-toast][data-removed="true"][data-front="false"]):before {
      height: calc(var(--initial-height) + 20%)
    }

    [data-sonner-toast][data-swiping=true] {
      transform: var(--y) translateY(var(--swipe-amount-y, 0px)) translate(var(--swipe-amount-x, 0px));
      transition: none
    }

    [data-sonner-toast][data-swiped=true] {
      user-select: none
    }

    [data-sonner-toast][data-swipe-out=true][data-y-position=bottom],
    [data-sonner-toast][data-swipe-out=true][data-y-position=top] {
      animation-duration: .2s;
      animation-timing-function: ease-out;
      animation-fill-mode: forwards
    }

    [data-sonner-toast][data-swipe-out=true][data-swipe-direction=left] {
      animation-name: swipe-out-left
    }

    [data-sonner-toast][data-swipe-out=true][data-swipe-direction=right] {
      animation-name: swipe-out-right
    }

    [data-sonner-toast][data-swipe-out=true][data-swipe-direction=up] {
      animation-name: swipe-out-up
    }

    [data-sonner-toast][data-swipe-out=true][data-swipe-direction=down] {
      animation-name: swipe-out-down
    }

    @keyframes swipe-out-left {
      0% {
        transform: var(--y) translate(var(--swipe-amount-x));
        opacity: 1
      }

      to {
        transform: var(--y) translate(calc(var(--swipe-amount-x) - 100%));
        opacity: 0
      }
    }

    @keyframes swipe-out-right {
      0% {
        transform: var(--y) translate(var(--swipe-amount-x));
        opacity: 1
      }

      to {
        transform: var(--y) translate(calc(var(--swipe-amount-x) + 100%));
        opacity: 0
      }
    }

    @keyframes swipe-out-up {
      0% {
        transform: var(--y) translateY(var(--swipe-amount-y));
        opacity: 1
      }

      to {
        transform: var(--y) translateY(calc(var(--swipe-amount-y) - 100%));
        opacity: 0
      }
    }

    @keyframes swipe-out-down {
      0% {
        transform: var(--y) translateY(var(--swipe-amount-y));
        opacity: 1
      }

      to {
        transform: var(--y) translateY(calc(var(--swipe-amount-y) + 100%));
        opacity: 0
      }
    }

    @media (max-width: 600px) {
      [data-sonner-toaster] {
        position: fixed;
        right: var(--mobile-offset-right);
        left: var(--mobile-offset-left);
        width: 100%
      }

      [data-sonner-toaster][dir=rtl] {
        left: calc(var(--mobile-offset-left) * -1)
      }

      [data-sonner-toaster] [data-sonner-toast] {
        left: 0;
        right: 0;
        width: calc(100% - var(--mobile-offset-left) * 2)
      }

      [data-sonner-toaster][data-x-position=left] {
        left: var(--mobile-offset-left)
      }

      [data-sonner-toaster][data-y-position=bottom] {
        bottom: var(--mobile-offset-bottom)
      }

      [data-sonner-toaster][data-y-position=top] {
        top: var(--mobile-offset-top)
      }

      [data-sonner-toaster][data-x-position=center] {
        left: var(--mobile-offset-left);
        right: var(--mobile-offset-right);
        transform: none
      }
    }

    [data-sonner-toaster][data-theme=light] {
      --normal-bg: #fff;
      --normal-border: var(--gray4);
      --normal-text: var(--gray12);
      --success-bg: hsl(143, 85%, 96%);
      --success-border: hsl(145, 92%, 91%);
      --success-text: hsl(140, 100%, 27%);
      --info-bg: hsl(208, 100%, 97%);
      --info-border: hsl(221, 91%, 91%);
      --info-text: hsl(210, 92%, 45%);
      --warning-bg: hsl(49, 100%, 97%);
      --warning-border: hsl(49, 91%, 91%);
      --warning-text: hsl(31, 92%, 45%);
      --error-bg: hsl(359, 100%, 97%);
      --error-border: hsl(359, 100%, 94%);
      --error-text: hsl(360, 100%, 45%)
    }

    [data-sonner-toaster][data-theme=light] [data-sonner-toast][data-invert=true] {
      --normal-bg: #000;
      --normal-border: hsl(0, 0%, 20%);
      --normal-text: var(--gray1)
    }

    [data-sonner-toaster][data-theme=dark] [data-sonner-toast][data-invert=true] {
      --normal-bg: #fff;
      --normal-border: var(--gray3);
      --normal-text: var(--gray12)
    }

    [data-sonner-toaster][data-theme=dark] {
      --normal-bg: #000;
      --normal-bg-hover: hsl(0, 0%, 12%);
      --normal-border: hsl(0, 0%, 20%);
      --normal-border-hover: hsl(0, 0%, 25%);
      --normal-text: var(--gray1);
      --success-bg: hsl(150, 100%, 6%);
      --success-border: hsl(147, 100%, 12%);
      --success-text: hsl(150, 86%, 65%);
      --info-bg: hsl(215, 100%, 6%);
      --info-border: hsl(223, 100%, 12%);
      --info-text: hsl(216, 87%, 65%);
      --warning-bg: hsl(64, 100%, 6%);
      --warning-border: hsl(60, 100%, 12%);
      --warning-text: hsl(46, 87%, 65%);
      --error-bg: hsl(358, 76%, 10%);
      --error-border: hsl(357, 89%, 16%);
      --error-text: hsl(358, 100%, 81%)
    }

    [data-sonner-toaster][data-theme=dark] [data-sonner-toast] [data-close-button] {
      background: var(--normal-bg);
      border-color: var(--normal-border);
      color: var(--normal-text)
    }

    [data-sonner-toaster][data-theme=dark] [data-sonner-toast] [data-close-button]:hover {
      background: var(--normal-bg-hover);
      border-color: var(--normal-border-hover)
    }

    [data-rich-colors=true][data-sonner-toast][data-type=success],
    [data-rich-colors=true][data-sonner-toast][data-type=success] [data-close-button] {
      background: var(--success-bg);
      border-color: var(--success-border);
      color: var(--success-text)
    }

    [data-rich-colors=true][data-sonner-toast][data-type=info],
    [data-rich-colors=true][data-sonner-toast][data-type=info] [data-close-button] {
      background: var(--info-bg);
      border-color: var(--info-border);
      color: var(--info-text)
    }

    [data-rich-colors=true][data-sonner-toast][data-type=warning],
    [data-rich-colors=true][data-sonner-toast][data-type=warning] [data-close-button] {
      background: var(--warning-bg);
      border-color: var(--warning-border);
      color: var(--warning-text)
    }

    [data-rich-colors=true][data-sonner-toast][data-type=error],
    [data-rich-colors=true][data-sonner-toast][data-type=error] [data-close-button] {
      background: var(--error-bg);
      border-color: var(--error-border);
      color: var(--error-text)
    }

    .sonner-loading-wrapper {
      --size: 16px;
      height: var(--size);
      width: var(--size);
      position: absolute;
      inset: 0;
      z-index: 10
    }

    .sonner-loading-wrapper[data-visible=false] {
      transform-origin: center;
      animation: sonner-fade-out .2s ease forwards
    }

    .sonner-spinner {
      position: relative;
      top: 50%;
      left: 50%;
      height: var(--size);
      width: var(--size)
    }

    .sonner-loading-bar {
      animation: sonner-spin 1.2s linear infinite;
      background: var(--gray11);
      border-radius: 6px;
      height: 8%;
      left: -10%;
      position: absolute;
      top: -3.9%;
      width: 24%
    }

    .sonner-loading-bar:nth-child(1) {
      animation-delay: -1.2s;
      transform: rotate(.0001deg) translate(146%)
    }

    .sonner-loading-bar:nth-child(2) {
      animation-delay: -1.1s;
      transform: rotate(30deg) translate(146%)
    }

    .sonner-loading-bar:nth-child(3) {
      animation-delay: -1s;
      transform: rotate(60deg) translate(146%)
    }

    .sonner-loading-bar:nth-child(4) {
      animation-delay: -.9s;
      transform: rotate(90deg) translate(146%)
    }

    .sonner-loading-bar:nth-child(5) {
      animation-delay: -.8s;
      transform: rotate(120deg) translate(146%)
    }

    .sonner-loading-bar:nth-child(6) {
      animation-delay: -.7s;
      transform: rotate(150deg) translate(146%)
    }

    .sonner-loading-bar:nth-child(7) {
      animation-delay: -.6s;
      transform: rotate(180deg) translate(146%)
    }

    .sonner-loading-bar:nth-child(8) {
      animation-delay: -.5s;
      transform: rotate(210deg) translate(146%)
    }

    .sonner-loading-bar:nth-child(9) {
      animation-delay: -.4s;
      transform: rotate(240deg) translate(146%)
    }

    .sonner-loading-bar:nth-child(10) {
      animation-delay: -.3s;
      transform: rotate(270deg) translate(146%)
    }

    .sonner-loading-bar:nth-child(11) {
      animation-delay: -.2s;
      transform: rotate(300deg) translate(146%)
    }

    .sonner-loading-bar:nth-child(12) {
      animation-delay: -.1s;
      transform: rotate(330deg) translate(146%)
    }

    @keyframes sonner-fade-in {
      0% {
        opacity: 0;
        transform: scale(.8)
      }

      to {
        opacity: 1;
        transform: scale(1)
      }
    }

    @keyframes sonner-fade-out {
      0% {
        opacity: 1;
        transform: scale(1)
      }

      to {
        opacity: 0;
        transform: scale(.8)
      }
    }

    @keyframes sonner-spin {
      0% {
        opacity: 1
      }

      to {
        opacity: .15
      }
    }

    @media (prefers-reduced-motion) {

      [data-sonner-toast],
      [data-sonner-toast]>*,
      .sonner-loading-bar {
        transition: none !important;
        animation: none !important
      }
    }

    .sonner-loader {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      transform-origin: center;
      transition: opacity .2s, transform .2s
    }

    .sonner-loader[data-visible=false] {
      opacity: 0;
      transform: scale(.8) translate(-50%, -50%)
    }
  </style>
</head>

<body class="h-full">
  <div data-overlay-container="true">
    <script>!function () { try { var d = document.documentElement, c = d.classList; c.remove('light', 'dark'); var e = localStorage.getItem('theme'); if (e) { c.add(e || '') } else { c.add('dark'); } if (e === 'light' || e === 'dark' || !e) d.style.colorScheme = e || 'dark' } catch (t) { } }();</script>
    <div class="flex">
      <main data-open="false" class="w-full transition-all duration-300 ease-in ">
        <nav
          class=" bg-[#141414] border-b data-[limit=true]:-translate-y-full z-50 data-[limit=false]:translate-y-0 sticky top-[0px] transition-all duration-300 ease-in "
          data-is-going-down="false" data-limit="false">
          <div
            class="w-full max-w-[1300px] mx-auto px-1 sm:py-4 py-4 sm:px-1 flex flex-row gap-1 items-center justify-between p-2">
            <div class="flex flex-row items-center gap-2"><a class="shrink-0 flex flex-row gap-2 items-center"
                href="/"><img alt="Qi Scans Logo" loading="lazy" width="200" height="100" decoding="async" data-nimg="1"
                  class="shrink-0 w-[58px] mr-3 hidden lg:block lg:group-data-[open=false]:duration-500  opacity-100 lg:group-data-[open=false]:animate-out lg:group-data-[open=false]:slide-out-to-left-full"
                  style="color:transparent"
                  src="https://storage.qiscans.com/upload/2025/08/24/SERVER-LOGO-311f58bd3a51b8c5.webp"></a>
              <nav aria-label="Main" data-orientation="horizontal" dir="ltr"
                class="relative z-10 max-w-max flex-1 items-center justify-center hidden lg:flex">
                <div style="position:relative">
                  <ul data-orientation="horizontal"
                    class="group flex flex-1 list-none items-center justify-center space-x-1" dir="ltr">
                    <li><a
                        class="px-3 py-1.5 text-[12px] flex items-center gap-1 rounded-md transition-colors text-muted-foreground"
                        href="/" data-radix-collection-item=""><img alt="Home" loading="lazy" width="22" height="22"
                          decoding="async" data-nimg="1" class="w-4 h-4 mr-2" style="color:transparent"
                          src="/_next/static/media/home.71ed964b.svg"> <!-- -->Homepage</a></li>
                    <li><a
                        class="px-3 py-1.5 text-[12px] flex items-center gap-1 rounded-md transition-colors text-muted-foreground"
                        href="/series" data-radix-collection-item=""><img alt="Series" loading="lazy" width="24"
                          height="24" decoding="async" data-nimg="1" class="w-4 h-4 mr-2" style="color:transparent"
                          src="/_next/static/media/Icon.4c69ea53.svg"> <!-- -->Series</a></li>
                    <li>
                      <div
                        class="group inline-flex h-10 w-max items-center justify-center rounded-md px-4 py-2 font-semibold transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50 text-muted-foreground text-[12px]">
                        <img alt="Store" loading="lazy" width="20" height="20" decoding="async" data-nimg="1"
                          class="w-4 h-4 mr-2" style="color:transparent" src="/_next/static/media/store.d7b7a2b6.svg">
                        Store<!-- --> <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                          fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                          stroke-linejoin="round" class="lucide lucide-chevron-down w-6 h-6 ml-4" aria-hidden="true">
                          <path d="m6 9 6 6 6-6"></path>
                        </svg></div>
                    </li>
                  </ul>
                </div>
                <div class="absolute left-0 top-full flex justify-center"></div>
              </nav><button type="button" class="text-foreground lg:hidden"><img alt="Menu" loading="lazy" width="32"
                  height="32" decoding="async" data-nimg="1" style="color:transparent"
                  src="/_next/static/media/menu.d5c9dd42.svg"></button>
            </div>
            <div class="flex flex-row gap-1 items-center justify-between w-[70%] lg:w-fit">
              <div class="rounded-s overflow-hidden w-full lg:w-fit">
                <div class="flex">
                  <div class="text-white w-full lg:w-fit relative text-md px-1.5 bg-[#1B1B1B]">
                    <div>
                      <div class="flex flex-row gap-1 items-center justify-center relative z-[2] w-full"><svg
                          aria-hidden="true" focusable="false" data-prefix="fas" data-icon="magnifying-glass"
                          class="svg-inline--fa fa-magnifying-glass text-[#545454] w-3 h-3" role="img"
                          xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">
                          <path fill="currentColor"
                            d="M416 208c0 45.9-14.9 88.3-40 122.7L502.6 457.4c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L330.7 376c-34.4 25.2-76.8 40-122.7 40C93.1 416 0 322.9 0 208S93.1 0 208 0S416 93.1 416 208zM208 352a144 144 0 1 0 0-288 144 144 0 1 0 0 288z">
                          </path>
                        </svg><input
                          class="bg-transparent w-full text-[10px] flex flex-row items-center font-medium text-[#fafafa] placeholder:text-[#545454] placeholder:text-[10px] h-[30px] !py-[4px] px-[4px] min-w-[30px] flex-grow grow-1 border-0 focus:outline-none focus:ring-0 focus:border-0 focus:shadow-none cursor-pointer"
                          placeholder="Search" readonly=""></div>
                    </div>
                  </div>
                </div>
              </div>
              <div data-orientation="vertical" role="none"
                class="bg-border shrink-0 h-3 lg:ml-4 ml-3 lg:mr-3 w-[3px] rounded-full mr-1"></div>
              <div class="flex flex-row gap-x-1 items-center"><a href="/login"><button
                    class="inline-flex tracking-wide gap-1 items-center h-fit p-1.5 ease-in transition-all text-foreground text-[14px] font-medium rounded-lg"><svg
                      aria-hidden="true" focusable="false" data-prefix="fas" data-icon="user"
                      class="svg-inline--fa fa-user w-3.5 h-3.5" role="img" xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 448 512">
                      <path fill="currentColor"
                        d="M224 256A128 128 0 1 0 224 0a128 128 0 1 0 0 256zm-45.7 48C79.8 304 0 383.8 0 482.3C0 498.7 13.3 512 29.7 512l388.6 0c16.4 0 29.7-13.3 29.7-29.7C448 383.8 368.2 304 269.7 304l-91.4 0z">
                      </path>
                    </svg></button></a></div>
            </div>
          </div>
        </nav>
        <div data-open="false"
          class="group bg-[#151515] py-4 px-2 text-xs flex shadow-2xl shadow-foreground/10 lg:hidden text-card-foreground flex-col justify-between mr-16 w-full h-[100vh] top-0 left-0 inset-0 max-w-[256px] data-[open=false]:-translate-x-full data-[open=false]:lg:translate-x-0 flex-1 fixed z-[100] data-[open=true]:w-[256px] data-[open=false]:w-[64px]   border-0 border-r border-background overflow-hidden transition-all ease-in duration-300">
          <div class="flex flex-col lg:items-center gap-3 pt-2"><a class="shrink-0 mt-2 hidden lg:block" href="/"><img
                src="/wetried_only.png"
                class="h-6 shrink-0 mr-3 lg:group-data-[open=false]:duration-500  opacity-100 lg:group-data-[open=false]:animate-out lg:group-data-[open=false]:slide-out-to-left-full"
                alt="Qi Scans Logo"></a><a class="lg:hidden" href="/"><img alt="Qi Scans Logo" loading="lazy" width="32"
                height="32" decoding="async" data-nimg="1" class="ml-4" style="color:transparent" src="/menu.svg"></a>
            <div dir="ltr" class="relative overflow-hidden p-0 m-0 max-h-[85vh] w-full pt-3 px-2"
              style="position:relative;--radix-scroll-area-corner-width:0px;--radix-scroll-area-corner-height:0px">
              <style>
                [data-radix-scroll-area-viewport] {
                  scrollbar-width: none;
                  -ms-overflow-style: none;
                  -webkit-overflow-scrolling: touch;
                }

                [data-radix-scroll-area-viewport]::-webkit-scrollbar {
                  display: none
                }
              </style>
              <div data-radix-scroll-area-viewport="" class="h-full w-full rounded-[inherit]"
                style="overflow: hidden scroll;">
                <div style="min-width:100%;display:table">
                  <div class="w-full space-y-3" data-orientation="vertical"><a
                      class="p-2  py-3 gap-2 flex flex-row justify-start items-center text-[16px] font-semibold rounded hover:bg-background hover:shadow-md transition-all ease-in duration-300 "
                      href="/">
                      <div class="flex justify-center items-center shrink-0"><img alt="Home" loading="lazy" width="64"
                          height="64" decoding="async" data-nimg="1" class="h-6 w-6" style="color: transparent;"
                          src="/_next/static/media/home.71ed964b.svg"></div><span class="line-clamp-1">Home Page</span>
                    </a><a
                      class="p-2  py-3 gap-2 flex flex-row justify-start items-center text-[16px] font-semibold rounded hover:bg-background hover:shadow-md transition-all ease-in duration-300 bg-[#1B1B1B]"
                      href="/series">
                      <div class="flex justify-center items-center shrink-0"><img alt="Series" loading="lazy" width="64"
                          height="64" decoding="async" data-nimg="1" class="h-6 w-6" style="color: transparent;"
                          src="/_next/static/media/Icon.4c69ea53.svg"></div><span class="line-clamp-1">Series</span>
                    </a>
                    <div>
                      <div
                        class="group h-10 w-max hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50 p-2 py-3 gap-2 flex flex-row justify-start items-center text-[16px] font-semibold rounded hover:bg-background hover:shadow-md transition-all ease-in duration-300">
                        <img alt="Store" loading="lazy" width="20" height="20" decoding="async" data-nimg="1"
                          class="w-4 h-4 mr-2" style="color:transparent" src="/_next/static/media/store.d7b7a2b6.svg">
                        Store<!-- --> </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="flex flex-col gap-2">
            <div class="flex flex-col gap-2"><span class="w-full h-[1px] bg-background"></span>
              <div
                class="flex flex-row gap-2 group-data-[open=false]:justify-center group-data-[open=true]:justify-between">
                <a class="text-xs flex flex-row gap-2 items-center p-2 hover:bg-background text-muted-foreground transition-all ease-in rounded"
                  href="https://discord.gg/WndZ8x6yYC"><svg aria-hidden="true" focusable="false" data-prefix="fab"
                    data-icon="discord" class="svg-inline--fa fa-discord " role="img" xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 640 512">
                    <path fill="currentColor"
                      d="M524.531,69.836a1.5,1.5,0,0,0-.764-.7A485.065,485.065,0,0,0,404.081,32.03a1.816,1.816,0,0,0-1.923.91,337.461,337.461,0,0,0-14.9,30.6,447.848,447.848,0,0,0-134.426,0,309.541,309.541,0,0,0-15.135-30.6,1.89,1.89,0,0,0-1.924-.91A483.689,483.689,0,0,0,116.085,69.137a1.712,1.712,0,0,0-.788.676C39.068,183.651,18.186,294.69,28.43,404.354a2.016,2.016,0,0,0,.765,1.375A487.666,487.666,0,0,0,176.02,479.918a1.9,1.9,0,0,0,2.063-.676A348.2,348.2,0,0,0,208.12,430.4a1.86,1.86,0,0,0-1.019-2.588,321.173,321.173,0,0,1-45.868-21.853,1.885,1.885,0,0,1-.185-3.126c3.082-2.309,6.166-4.711,9.109-7.137a1.819,1.819,0,0,1,1.9-.256c96.229,43.917,200.41,43.917,295.5,0a1.812,1.812,0,0,1,1.924.233c2.944,2.426,6.027,4.851,9.132,7.16a1.884,1.884,0,0,1-.162,3.126,301.407,301.407,0,0,1-45.89,21.83,1.875,1.875,0,0,0-1,2.611,391.055,391.055,0,0,0,30.014,48.815,1.864,1.864,0,0,0,2.063.7A486.048,486.048,0,0,0,610.7,405.729a1.882,1.882,0,0,0,.765-1.352C623.729,277.594,590.933,167.465,524.531,69.836ZM222.491,337.58c-28.972,0-52.844-26.587-52.844-59.239S193.056,219.1,222.491,219.1c29.665,0,53.306,26.82,52.843,59.239C275.334,310.993,251.924,337.58,222.491,337.58Zm195.38,0c-28.971,0-52.843-26.587-52.843-59.239S388.437,219.1,417.871,219.1c29.667,0,53.307,26.82,52.844,59.239C470.715,310.993,447.538,337.58,417.871,337.58Z">
                    </path>
                  </svg></a><button
                  class="text-muted-foreground text-xs flex flex-row gap-2 items-center p-2 hover:bg-background transition-all ease-in rounded group-data-[open=false]:hidden"><svg
                    width="15" height="15" viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path
                      d="M7.5 0C7.77614 0 8 0.223858 8 0.5V2.5C8 2.77614 7.77614 3 7.5 3C7.22386 3 7 2.77614 7 2.5V0.5C7 0.223858 7.22386 0 7.5 0ZM2.1967 2.1967C2.39196 2.00144 2.70854 2.00144 2.90381 2.1967L4.31802 3.61091C4.51328 3.80617 4.51328 4.12276 4.31802 4.31802C4.12276 4.51328 3.80617 4.51328 3.61091 4.31802L2.1967 2.90381C2.00144 2.70854 2.00144 2.39196 2.1967 2.1967ZM0.5 7C0.223858 7 0 7.22386 0 7.5C0 7.77614 0.223858 8 0.5 8H2.5C2.77614 8 3 7.77614 3 7.5C3 7.22386 2.77614 7 2.5 7H0.5ZM2.1967 12.8033C2.00144 12.608 2.00144 12.2915 2.1967 12.0962L3.61091 10.682C3.80617 10.4867 4.12276 10.4867 4.31802 10.682C4.51328 10.8772 4.51328 11.1938 4.31802 11.3891L2.90381 12.8033C2.70854 12.9986 2.39196 12.9986 2.1967 12.8033ZM12.5 7C12.2239 7 12 7.22386 12 7.5C12 7.77614 12.2239 8 12.5 8H14.5C14.7761 8 15 7.77614 15 7.5C15 7.22386 14.7761 7 14.5 7H12.5ZM10.682 4.31802C10.4867 4.12276 10.4867 3.80617 10.682 3.61091L12.0962 2.1967C12.2915 2.00144 12.608 2.00144 12.8033 2.1967C12.9986 2.39196 12.9986 2.70854 12.8033 2.90381L11.3891 4.31802C11.1938 4.51328 10.8772 4.51328 10.682 4.31802ZM8 12.5C8 12.2239 7.77614 12 7.5 12C7.22386 12 7 12.2239 7 12.5V14.5C7 14.7761 7.22386 15 7.5 15C7.77614 15 8 14.7761 8 14.5V12.5ZM10.682 10.682C10.8772 10.4867 11.1938 10.4867 11.3891 10.682L12.8033 12.0962C12.9986 12.2915 12.9986 12.608 12.8033 12.8033C12.608 12.9986 12.2915 12.9986 12.0962 12.8033L10.682 11.3891C10.4867 11.1938 10.4867 10.8772 10.682 10.682ZM5.5 7.5C5.5 6.39543 6.39543 5.5 7.5 5.5C8.60457 5.5 9.5 6.39543 9.5 7.5C9.5 8.60457 8.60457 9.5 7.5 9.5C6.39543 9.5 5.5 8.60457 5.5 7.5ZM7.5 4.5C5.84315 4.5 4.5 5.84315 4.5 7.5C4.5 9.15685 5.84315 10.5 7.5 10.5C9.15685 10.5 10.5 9.15685 10.5 7.5C10.5 5.84315 9.15685 4.5 7.5 4.5Z"
                      fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path>
                  </svg></button></div>
            </div>
            <div data-orientation="horizontal" role="none" class="bg-border h-[1px] w-full"></div>
          </div>
        </div>
        <div>
          <div>
            <div class="relative ">
              <div class="w-full h-full absolute overflow-hidden z-10 max-h-[300px]">
                <div style="will-change: transform; transform: translateY(-34.6192%) scale(1);">
                  <div class="relative"><img alt="" loading="lazy" width="500" height="500" decoding="async"
                      data-nimg="1"
                      class="w-full h-auto blur bg-gradient-to-b from-transparent to-[#121212] shadow-xl object-cover object-top"
                      style="color:transparent"
                      src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                    <div class="absolute inset-0 bg-black/70"></div>
                  </div>
                </div>
              </div>
              <div class="h-[300px] z-10 absolute lg:relative"
                style="background-image:linear-gradient(0deg, #121212, transparent)"></div>
              <section class="lg:z-10 relative max-w-[1420px] mx-auto  z-10">
                <div class="grid grid-cols-12 pt-3 gap-y-3 xl:px-5 text-foreground">
                  <div
                    class="col-span-12 lg:col-span-8 order-2 flex flex-col gap-3 lg:-translate-y-[230px] xl:ml-6 px-4 xl:px-0 lg:min-h-[700px]">
                    <div class="hidden lg:block">
                      <div class="bg-[#1A1A1A] rounded-[7px] overflow-hidden xl:px-4 flex flex-col justify-between">
                        <div class="xl:p-5 p-2 cursor-pointer relative">
                          <div class="flex justify-between items-start">
                            <div class="flex-1">
                              <h2 class="xl:text-[35px] text-[26px] font-bold text-[#F8F8F8] font-manrope">Reincarnated
                                Murim Lord</h2>
                              <div class="flex flex-wrap gap-2 my-1"></div>
                              <div class="flex justify-between items-center">
                                <div class="xl:text-[16px] text-[12px] xl:leading-relaxed leading-2 line-clamp-2">
                                  <p>Regret is the bane of old men. When aging Alliance Lord Hajin Cheon of the Grand
                                    Martial Alliance reflects on his immense legacy, he finds that he recalls little of
                                    his deeds or even the lives of his closest advisors. Stricken by a mysterious
                                    ailment, Hajin suddenly passes away only to wake up in the body of Ridan Byeok, heir
                                    to the Byeok Clan of swordsmen. The only problem is, Ridan is a well-known wastrel,
                                    the polar opposite of the virtuous and stern Hajin. Righting the wrongs of his
                                    predecessor, Hajin begins to uncover the truth behind his death…</p>
                                  <p><br></p>
                                </div><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                  fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                  stroke-linejoin="round"
                                  class="lucide lucide-chevron-down w-6 h-6 flex-shrink-0 transition-transform duration-300"
                                  aria-hidden="true">
                                  <path d="m6 9 6 6 6-6"></path>
                                </svg>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="flex items-center space-x-3 mt-3"><a
                          href="/series/reincarnated-murim-lord/chapter-1"><button
                            class="inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-opacity-80 h-10 px-4 py-2 rounded-[5px] bg-gradient-to-r from-[#FF7700] to-[#FF5614]"><svg
                              xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                              class="lucide lucide-play w-4 h-4 mr-2" aria-hidden="true">
                              <polygon points="6 3 20 12 6 21 6 3"></polygon>
                            </svg>Start Reading</button></a><button
                          class="inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 text-secondary-foreground hover:bg-secondary/80 h-10 px-4 py-2 rounded-[5px] bg-[#434044] w-full md:w-auto"
                          type="button" id="radix-:R2if7rrm6sva:" aria-haspopup="menu" aria-expanded="false"
                          data-state="closed"><img alt="Share" loading="lazy" width="16" height="16" decoding="async"
                            data-nimg="1" class="w-4 h-4 mr-2" style="color:transparent"
                            src="/_next/static/media/share.0e9c5bea.svg">Share the series</button></div>
                    </div>
                    <div class="bg-[#1B1B1B] rounded-[9px] pb-2 relative z-0" id="chapters-list">
                      <div class="flex flex-row gap-2 justify-between xl:p-4 p-2 ">
                        <div class="flex flex-row xl:gap-4 gap-1 items-center">
                          <p class="xl:text-2xl text-[14px] font-semibold ml-2 sm:ml-0 whitespace-nowrap">Chapters List
                          </p>
                          <div data-orientation="vertical" role="none"
                            class="bg-border shrink-0 my-2 h-5 w-[2px] ml-2 xl:ml-0"></div>
                        </div>
                        <div class="flex flex-row gap-2 flex-1 ">
                          <div
                            class="flex flex-row gap-2 items-center justify-center flex-1 rounded-[5px] xl:p-0 bg-[#222222] xl:mr-1 xl:ml-16 py-0">
                            <img alt="Search" loading="lazy" width="20" height="20" decoding="async" data-nimg="1"
                              class="xl:ml-4 ml-2 xl:h-6 h-3 w-3 cursor-pointer" style="color:transparent"
                              src="/_next/static/media/searchWhite.a85457c0.svg"><input
                              class="bg-transparent w-full xl:text-xs text-xxs flex flex-row items-center  text-[#fafafa] placeholder:text-[#7A7A7A] placeholder:text-[8px] xl:placeholder:text-[14px] p-0 xl:h-[40px] !py-[6px] xl:px-[6px] flex-grow border-0 focus:outline-none focus:ring-0"
                              placeholder="Filter by chapter name, chapter title..." value=""></div>
                          <div role="group" dir="ltr" class="flex items-center justify-center gap-1" tabindex="0"
                            style="outline:none"><button type="button" data-state="on" role="radio" aria-checked="true"
                              class="inline-flex items-center justify-center text-sm font-medium ring-offset-background transition-colors hover:ring-1 hover:ring-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:ring-1 ring-foreground border border-input bg-transparent hover:bg-accent hover:text-accent-foreground rounded-[5px] p-1 xl:p-4 xl:py-5 h-[30px] xl:h-6 mr-1"
                              tabindex="-1" data-radix-collection-item=""><svg width="15" height="15"
                                viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"
                                class="xl:w-5 xl:h-5 w-3 h-3">
                                <path
                                  d="M7.14645 2.14645C7.34171 1.95118 7.65829 1.95118 7.85355 2.14645L11.8536 6.14645C12.0488 6.34171 12.0488 6.65829 11.8536 6.85355C11.6583 7.04882 11.3417 7.04882 11.1464 6.85355L8 3.70711L8 12.5C8 12.7761 7.77614 13 7.5 13C7.22386 13 7 12.7761 7 12.5L7 3.70711L3.85355 6.85355C3.65829 7.04882 3.34171 7.04882 3.14645 6.85355C2.95118 6.65829 2.95118 6.34171 3.14645 6.14645L7.14645 2.14645Z"
                                  fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path>
                              </svg></button><button type="button" data-state="off" role="radio" aria-checked="false"
                              class="inline-flex items-center justify-center text-sm font-medium ring-offset-background transition-colors hover:ring-1 hover:ring-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:ring-1 ring-foreground border border-input bg-transparent hover:bg-accent hover:text-accent-foreground rounded-[5px] p-1 xl:p-4 xl:py-5 h-[30px] xl:h-6"
                              tabindex="-1" data-radix-collection-item=""><svg width="15" height="15"
                                viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg"
                                class="xl:w-5 xl:h-5 w-3 h-3">
                                <path
                                  d="M7.5 2C7.77614 2 8 2.22386 8 2.5L8 11.2929L11.1464 8.14645C11.3417 7.95118 11.6583 7.95118 11.8536 8.14645C12.0488 8.34171 12.0488 8.65829 11.8536 8.85355L7.85355 12.8536C7.75979 12.9473 7.63261 13 7.5 13C7.36739 13 7.24021 12.9473 7.14645 12.8536L3.14645 8.85355C2.95118 8.65829 2.95118 8.34171 3.14645 8.14645C3.34171 7.95118 3.65829 7.95118 3.85355 8.14645L7 11.2929L7 2.5C7 2.22386 7.22386 2 7.5 2Z"
                                  fill="currentColor" fill-rule="evenodd" clip-rule="evenodd"></path>
                              </svg></button></div>
                        </div>
                      </div>
                      <div class="space-y-2 xl:px-4">
                        <ul class="grid grid-cols-1 sm:grid-cols-2 gap-2">
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-87">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 87</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">3 days ago</span>
                                  </div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-86">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 86</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">3 days ago</span>
                                  </div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-85">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 85</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">3 days ago</span>
                                  </div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-84">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 84</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">20 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-83">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 83</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">20 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-82">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 82</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-81">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 81</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-80">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 80</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-79">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 79</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-78">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 78</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-77">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 77</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-76">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 76</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-75">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 75</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-74">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 74</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-73">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 73</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-72">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 72</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-71">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 71</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-70">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 70</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-69">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 69</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-68">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 68</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-67">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 67</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-66">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 66</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-65">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 65</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-64">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 64</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-63">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 63</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-62">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 62</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-61">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 61</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-60">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 60</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-59">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 59</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-58">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 58</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-57">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 57</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-56">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 56</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-55">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 55</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-54">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 54</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-53">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 53</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-52">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 52</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-51">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 51</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-50">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 50</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-49">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 49</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-48">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 48</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-47">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 47</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-46">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 46</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-45">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 45</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-44">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 44</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-43">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 43</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-42">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 42</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-41">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 41</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-40">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 40</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-39">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 39</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                          <li class="flex justify-between bg-[#191919] rounded-[5px] p-4"><a
                              class="text-foreground visited:text-[rgb(79,0,225)]"
                              href="/series/reincarnated-murim-lord/chapter-38">
                              <div
                                class="flex text-left relative items-center w-full justify-start rounded overflow-hidden gap-x-3">
                                <div
                                  class="h-[80px] w-[120px] xl:h-[110px] xl:w-[173px] shrink-0 rounded relative overflow-hidden">
                                  <img alt="Chapter thumbnail" loading="lazy" width="173" height="110" decoding="async"
                                    data-nimg="1" class="object-cover object-center aspect-square"
                                    style="color: transparent;"
                                    src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                                </div>
                                <div class="flex min-w-0 flex-col self-start">
                                  <div class="flex flex-col gap-1 items-start"><span
                                      class="m-0 text-[20px] line-clamp-1 lg:max-w-none">Chapter 38</span><span
                                      class="text-muted-foreground/50 xl:text-[16px] block -mt-1 mb-1">22 days
                                      ago</span></div>
                                </div>
                              </div>
                            </a></li>
                        </ul>
                        <nav role="navigation" aria-label="pagination"
                          class="mx-auto flex w-full justify-center gap-x-2">
                          <ul class="flex flex-row items-center gap-1">
                            <li class=""><a
                                class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 gap-1 pl-2.5 pointer-events-none opacity-50 cursor-pointer"
                                aria-label="Go to previous page"><svg xmlns="http://www.w3.org/2000/svg" width="24"
                                  height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                  stroke-linecap="round" stroke-linejoin="round"
                                  class="lucide lucide-chevron-left h-4 w-4" aria-hidden="true">
                                  <path d="m15 18-6-6 6-6"></path>
                                </svg><span>Previous</span></a></li>
                            <li class=""><a aria-current="page"
                                class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border border-input bg-background hover:bg-accent hover:text-accent-foreground h-10 w-10 cursor-pointer">1</a>
                            </li>
                            <li class=""><a
                                class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-10 w-10 cursor-pointer">2</a>
                            </li>
                            <li class=""><a
                                class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 gap-1 pr-2.5 cursor-pointer"
                                aria-label="Go to next page"><span>Next</span><svg xmlns="http://www.w3.org/2000/svg"
                                  width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor"
                                  stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                                  class="lucide lucide-chevron-right h-4 w-4" aria-hidden="true">
                                  <path d="m9 18 6-6-6-6"></path>
                                </svg></a></li>
                          </ul>
                        </nav>
                      </div>
                    </div>
                  </div>
                  <div class="col-span-12 lg:col-span-4  order-1 lg:min-h-[700px]">
                    <div
                      class="sticky top-0 flex flex-col items-center justify-start gap-y-2 w-full lg:-translate-y-[230px] px-4">
                      <img alt="Reincarnated Murim Lord" loading="lazy" width="500" height="500" decoding="async"
                        data-nimg="1"
                        class="bg-muted/40 w-full full xl:h-[473px] xl:w-[473px] rounded-[6px] aspect-square object-cover object-top"
                        style="color:transparent"
                        src="https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp">
                      <div class="space-y-2  rounded  w-full flex flex-col-reverse gap-2 lg:flex-col">
                        <div class="space-y-2"><button
                            class="inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-secondary text-secondary-foreground hover:bg-secondary/80 h-10 px-4 py-2 rounded-none w-full"
                            type="button" aria-haspopup="dialog" aria-expanded="false"
                            aria-controls="radix-:R2cn7rrm6sva:" data-state="closed"><svg
                              xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                              class="lucide lucide-star w-4 h-4 mr-2 text-[#FFC414] text-[17px]" aria-hidden="true">
                              <path
                                d="M11.525 2.295a.53.53 0 0 1 .95 0l2.31 4.679a2.123 2.123 0 0 0 1.595 1.16l5.166.756a.53.53 0 0 1 .294.904l-3.736 3.638a2.123 2.123 0 0 0-.611 1.878l.882 5.14a.53.53 0 0 1-.771.56l-4.618-2.428a2.122 2.122 0 0 0-1.973 0L6.396 21.01a.53.53 0 0 1-.77-.56l.881-5.139a2.122 2.122 0 0 0-.611-1.879L2.16 9.795a.53.53 0 0 1 .294-.906l5.165-.755a2.122 2.122 0 0 0 1.597-1.16z">
                              </path>
                            </svg>Rating</button><button
                            class="inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-secondary text-secondary-foreground hover:bg-secondary/80 h-10 px-4 py-2 rounded-none w-full"><svg
                              xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none"
                              stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                              class="lucide lucide-plus w-4 h-4 mr-2 text-[17px]" aria-hidden="true">
                              <path d="M5 12h14"></path>
                              <path d="M12 5v14"></path>
                            </svg>Add to Library</button></div>
                        <div class="flex flex-wrap gap-1"><a href="/series?tag=reincarnation"><span
                              class="rounded-none text-[14px] py-2 px-3 bg-[#212121] text-white">Reincarnation</span></a><a
                            href="/series?tag=martial arts"><span
                              class="rounded-none text-[14px] py-2 px-3 bg-[#212121] text-white">Martial
                              Arts</span></a><a href="/series?tag=shounen"><span
                              class="rounded-none text-[14px] py-2 px-3 bg-[#212121] text-white">Shounen</span></a><a
                            href="/series?tag=action"><span
                              class="rounded-none text-[14px] py-2 px-3 bg-[#212121] text-white">Action</span></a></div>
                        <div class="lg:hidden">
                          <div class="bg-[#1A1A1A] rounded-[7px] overflow-hidden xl:px-4 flex flex-col justify-between">
                            <div class="xl:p-5 p-2 cursor-pointer relative">
                              <div class="flex justify-between items-start">
                                <div class="flex-1">
                                  <h2 class="xl:text-[35px] text-[26px] font-bold text-[#F8F8F8] font-manrope">
                                    Reincarnated Murim Lord</h2>
                                  <div class="flex flex-wrap gap-2 my-1"></div>
                                  <div class="flex justify-between items-center">
                                    <div class="xl:text-[16px] text-[12px] xl:leading-relaxed leading-2 line-clamp-2">
                                      <p>Regret is the bane of old men. When aging Alliance Lord Hajin Cheon of the
                                        Grand Martial Alliance reflects on his immense legacy, he finds that he recalls
                                        little of his deeds or even the lives of his closest advisors. Stricken by a
                                        mysterious ailment, Hajin suddenly passes away only to wake up in the body of
                                        Ridan Byeok, heir to the Byeok Clan of swordsmen. The only problem is, Ridan is
                                        a well-known wastrel, the polar opposite of the virtuous and stern Hajin.
                                        Righting the wrongs of his predecessor, Hajin begins to uncover the truth behind
                                        his death…</p>
                                      <p><br></p>
                                    </div><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                                      viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"
                                      stroke-linecap="round" stroke-linejoin="round"
                                      class="lucide lucide-chevron-down w-6 h-6 flex-shrink-0 transition-transform duration-300"
                                      aria-hidden="true">
                                      <path d="m6 9 6 6 6-6"></path>
                                    </svg>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                          <div class="flex items-center justify-center gap-3 mt-3 w-full"><a class="w-1/2"
                              href="/series/reincarnated-murim-lord/chapter-1"><button
                                class="inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-opacity-80 h-10 px-4 py-2 rounded-[5px] bg-gradient-to-r from-[#FF7700] to-[#FF5614] w-full"><svg
                                  xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                  fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                  stroke-linejoin="round" class="lucide lucide-play w-4 h-4 mr-2" aria-hidden="true">
                                  <polygon points="6 3 20 12 6 21 6 3"></polygon>
                                </svg>Start Reading</button></a>
                            <div class="w-1/2"><button
                                class="inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 text-secondary-foreground hover:bg-secondary/80 h-10 px-4 py-2 rounded-[5px] bg-[#434044] w-full md:w-auto"
                                type="button" id="radix-:Rl4n7rrm6sva:" aria-haspopup="menu" aria-expanded="false"
                                data-state="closed"><img alt="Share" loading="lazy" width="16" height="16"
                                  decoding="async" data-nimg="1" class="w-4 h-4 mr-2" style="color:transparent"
                                  src="/_next/static/media/share.0e9c5bea.svg">Share the series</button></div>
                          </div>
                          <div class="flex items-center justify-between gap-3 mt-3"></div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div class="col-span-12 order-last w-full">
                    <div class="lg:-mt-48">
                      <div class="w-full bg-secondary text-white py-8 xl:px-8 px-4 my-4">
                        <h2 class="xl:text-[32px] text-[20px] font-bold mb-6">If you enjoyed<!-- --> <span
                            class="font-bold">Reincarnated Murim Lord</span></h2>
                        <div class="flex flex-col gap-4 items-center justify-center w-full max-w-[1440px] mx-auto px-4">
                          <div class="relative w-full" role="region" aria-roledescription="carousel">
                            <div class="overflow-hidden">
                              <div class="flex -ml-2 md:-ml-4" style="transform: translate3d(0px, 0px, 0px);">
                                <div role="group" aria-roledescription="slide"
                                  class="min-w-0 shrink-0 grow-0 basis-full pl-2 md:pl-4 sm:basis-1/2 md:basis-1/3 lg:basis-1/4 xl:basis-1/5"
                                  style="transform: translate3d(0px, 0px, 0px);"><a class="block h-full"
                                    href="/series/defective-reincarnator-becomes-the-ultimate-teacher">
                                    <div class="flex flex-col gap-2 h-full">
                                      <div class="relative aspect-[2/3] w-full"><img
                                          alt="Defective Reincarnator Becomes the Ultimate Teacher" loading="lazy"
                                          decoding="async" data-nimg="fill"
                                          class="object-cover rounded-[8px] ring-2 ring-[#1c1c1cb8] border border-[#1c1c1c]"
                                          style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent"
                                          src="https://storage.aurorascans.com/public/upload/2025/05/18/dd8b6a1f-8fb5-4dd2-afb0-a1f6af7e7016.webp">
                                      </div>
                                      <div class="flex flex-col gap-1">
                                        <h3
                                          class="text-sm md:text-base lg:text-[22px] font-normal line-clamp-1 text-white/90">
                                          Defective Reincarnator Becomes the Ultimate Teacher</h3>
                                      </div>
                                    </div>
                                  </a></div>
                                <div role="group" aria-roledescription="slide"
                                  class="min-w-0 shrink-0 grow-0 basis-full pl-2 md:pl-4 sm:basis-1/2 md:basis-1/3 lg:basis-1/4 xl:basis-1/5"
                                  style="transform: translate3d(0px, 0px, 0px);"><a class="block h-full"
                                    href="/series/unrivaled-spear-demon">
                                    <div class="flex flex-col gap-2 h-full">
                                      <div class="relative aspect-[2/3] w-full"><img alt="Unrivaled Spear Demon"
                                          loading="lazy" decoding="async" data-nimg="fill"
                                          class="object-cover rounded-[8px] ring-2 ring-[#1c1c1cb8] border border-[#1c1c1c]"
                                          style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent"
                                          src="https://storage.quantumscans.org/upload/2025/06/13/1d14b96b-fd9b-43be-bfb5-a2db78963e1a.webp">
                                      </div>
                                      <div class="flex flex-col gap-1">
                                        <h3
                                          class="text-sm md:text-base lg:text-[22px] font-normal line-clamp-1 text-white/90">
                                          Unrivaled Spear Demon</h3>
                                      </div>
                                    </div>
                                  </a></div>
                                <div role="group" aria-roledescription="slide"
                                  class="min-w-0 shrink-0 grow-0 basis-full pl-2 md:pl-4 sm:basis-1/2 md:basis-1/3 lg:basis-1/4 xl:basis-1/5"
                                  style="transform: translate3d(0px, 0px, 0px);"><a class="block h-full"
                                    href="/series/the-unparalleled-hidden-rank-equipment">
                                    <div class="flex flex-col gap-2 h-full">
                                      <div class="relative aspect-[2/3] w-full"><img
                                          alt="The Unparalleled Hidden Rank Equipment" loading="lazy" decoding="async"
                                          data-nimg="fill"
                                          class="object-cover rounded-[8px] ring-2 ring-[#1c1c1cb8] border border-[#1c1c1c]"
                                          style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent"
                                          src="https://media.quantumscans.org/file/13VSBnk1m/flqmr6qa7jeqb8w3wknhszi6.webp">
                                      </div>
                                      <div class="flex flex-col gap-1">
                                        <h3
                                          class="text-sm md:text-base lg:text-[22px] font-normal line-clamp-1 text-white/90">
                                          The Unparalleled Hidden Rank Equipment</h3>
                                      </div>
                                    </div>
                                  </a></div>
                                <div role="group" aria-roledescription="slide"
                                  class="min-w-0 shrink-0 grow-0 basis-full pl-2 md:pl-4 sm:basis-1/2 md:basis-1/3 lg:basis-1/4 xl:basis-1/5"
                                  style="transform: translate3d(0px, 0px, 0px);"><a class="block h-full"
                                    href="/series/war-of-the-corpses">
                                    <div class="flex flex-col gap-2 h-full">
                                      <div class="relative aspect-[2/3] w-full"><img alt="War Of The Corpses"
                                          loading="lazy" decoding="async" data-nimg="fill"
                                          class="object-cover rounded-[8px] ring-2 ring-[#1c1c1cb8] border border-[#1c1c1c]"
                                          style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent"
                                          src="https://storage.aurorascans.com/public/upload/2025/03/28/47eb7e58-a370-4b45-89ce-e89546d445db.webp">
                                      </div>
                                      <div class="flex flex-col gap-1">
                                        <h3
                                          class="text-sm md:text-base lg:text-[22px] font-normal line-clamp-1 text-white/90">
                                          War Of The Corpses</h3>
                                      </div>
                                    </div>
                                  </a></div>
                                <div role="group" aria-roledescription="slide"
                                  class="min-w-0 shrink-0 grow-0 basis-full pl-2 md:pl-4 sm:basis-1/2 md:basis-1/3 lg:basis-1/4 xl:basis-1/5"
                                  style="transform: translate3d(0px, 0px, 0px);"><a class="block h-full"
                                    href="/series/the-archmages-restaurant">
                                    <div class="flex flex-col gap-2 h-full">
                                      <div class="relative aspect-[2/3] w-full"><img alt="The Archmage's Restaurant"
                                          loading="lazy" decoding="async" data-nimg="fill"
                                          class="object-cover rounded-[8px] ring-2 ring-[#1c1c1cb8] border border-[#1c1c1c]"
                                          style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent"
                                          src="https://media.quantumscans.org/file/13VSBnk1m/vr4nxtutydq1feyt6xp420r7.webp">
                                      </div>
                                      <div class="flex flex-col gap-1">
                                        <h3
                                          class="text-sm md:text-base lg:text-[22px] font-normal line-clamp-1 text-white/90">
                                          The Archmage's Restaurant</h3>
                                      </div>
                                    </div>
                                  </a></div>
                                <div role="group" aria-roledescription="slide"
                                  class="min-w-0 shrink-0 grow-0 basis-full pl-2 md:pl-4 sm:basis-1/2 md:basis-1/3 lg:basis-1/4 xl:basis-1/5">
                                  <a class="block h-full"
                                    href="/series/i-became-the-bastard-genius-of-the-noble-dark-clan">
                                    <div class="flex flex-col gap-2 h-full">
                                      <div class="relative aspect-[2/3] w-full"><img
                                          alt="I Became The Bastard Genius Of The Noble Dark Clan " loading="lazy"
                                          decoding="async" data-nimg="fill"
                                          class="object-cover rounded-[8px] ring-2 ring-[#1c1c1cb8] border border-[#1c1c1c]"
                                          style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent"
                                          src="https://media.quantumscans.org/file/13VSBnk1m/u7zjhs818pdhv7zro5g74epf.webp">
                                      </div>
                                      <div class="flex flex-col gap-1">
                                        <h3
                                          class="text-sm md:text-base lg:text-[22px] font-normal line-clamp-1 text-white/90">
                                          I Became The Bastard Genius Of The Noble Dark Clan </h3>
                                      </div>
                                    </div>
                                  </a></div>
                                <div role="group" aria-roledescription="slide"
                                  class="min-w-0 shrink-0 grow-0 basis-full pl-2 md:pl-4 sm:basis-1/2 md:basis-1/3 lg:basis-1/4 xl:basis-1/5">
                                  <a class="block h-full"
                                    href="/series/the-strongest-tamer-returned-from-another-world-with-his-childhood-friend-as-his-familiar">
                                    <div class="flex flex-col gap-2 h-full">
                                      <div class="relative aspect-[2/3] w-full"><img
                                          alt="The Strongest Tamer Returned from Another World with his Childhood Friend as his Familiar"
                                          loading="lazy" decoding="async" data-nimg="fill"
                                          class="object-cover rounded-[8px] ring-2 ring-[#1c1c1cb8] border border-[#1c1c1c]"
                                          style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent"
                                          src="https://media.quantumscans.org/file/13VSBnk1m/vrvc5w2e9j6zbq8ec4ak4oi8.webp">
                                      </div>
                                      <div class="flex flex-col gap-1">
                                        <h3
                                          class="text-sm md:text-base lg:text-[22px] font-normal line-clamp-1 text-white/90">
                                          The Strongest Tamer Returned from Another World with his Childhood Friend as
                                          his Familiar</h3>
                                      </div>
                                    </div>
                                  </a></div>
                                <div role="group" aria-roledescription="slide"
                                  class="min-w-0 shrink-0 grow-0 basis-full pl-2 md:pl-4 sm:basis-1/2 md:basis-1/3 lg:basis-1/4 xl:basis-1/5">
                                  <a class="block h-full"
                                    href="/series/me-im-the-strongest-forbidden-spellcaster-in-history">
                                    <div class="flex flex-col gap-2 h-full">
                                      <div class="relative aspect-[2/3] w-full"><img
                                          alt="Me! I'm The Strongest Forbidden Spellcaster in History!" loading="lazy"
                                          decoding="async" data-nimg="fill"
                                          class="object-cover rounded-[8px] ring-2 ring-[#1c1c1cb8] border border-[#1c1c1c]"
                                          style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent"
                                          src="https://media.quantumscans.org/file/13VSBnk1m/dqmo9lzlg168vgvauegofxmw.jpg">
                                      </div>
                                      <div class="flex flex-col gap-1">
                                        <h3
                                          class="text-sm md:text-base lg:text-[22px] font-normal line-clamp-1 text-white/90">
                                          Me! I'm The Strongest Forbidden Spellcaster in History!</h3>
                                      </div>
                                    </div>
                                  </a></div>
                                <div role="group" aria-roledescription="slide"
                                  class="min-w-0 shrink-0 grow-0 basis-full pl-2 md:pl-4 sm:basis-1/2 md:basis-1/3 lg:basis-1/4 xl:basis-1/5">
                                  <a class="block h-full" href="/series/the-returned-c-rank-tank-wont-die">
                                    <div class="flex flex-col gap-2 h-full">
                                      <div class="relative aspect-[2/3] w-full"><img
                                          alt="The Returned C-Rank Tank Won't Die!" loading="lazy" decoding="async"
                                          data-nimg="fill"
                                          class="object-cover rounded-[8px] ring-2 ring-[#1c1c1cb8] border border-[#1c1c1c]"
                                          style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent"
                                          src="https://media.quantumscans.org/file/13VSBnk1m/xbqz8e1i8elj0601lt4319nz.webp">
                                      </div>
                                      <div class="flex flex-col gap-1">
                                        <h3
                                          class="text-sm md:text-base lg:text-[22px] font-normal line-clamp-1 text-white/90">
                                          The Returned C-Rank Tank Won't Die!</h3>
                                      </div>
                                    </div>
                                  </a></div>
                                <div role="group" aria-roledescription="slide"
                                  class="min-w-0 shrink-0 grow-0 basis-full pl-2 md:pl-4 sm:basis-1/2 md:basis-1/3 lg:basis-1/4 xl:basis-1/5">
                                  <a class="block h-full" href="/series/lv-99-burning-flame-princess">
                                    <div class="flex flex-col gap-2 h-full">
                                      <div class="relative aspect-[2/3] w-full"><img alt="Lv.99 Burning Flame Princess"
                                          loading="lazy" decoding="async" data-nimg="fill"
                                          class="object-cover rounded-[8px] ring-2 ring-[#1c1c1cb8] border border-[#1c1c1c]"
                                          style="position:absolute;height:100%;width:100%;left:0;top:0;right:0;bottom:0;color:transparent"
                                          src="https://media.quantumscans.org/file/13VSBnk1m/ct8ybc8bhdi3azx81azj1zg3.jpg">
                                      </div>
                                      <div class="flex flex-col gap-1">
                                        <h3
                                          class="text-sm md:text-base lg:text-[22px] font-normal line-clamp-1 text-white/90">
                                          Lv.99 Burning Flame Princess</h3>
                                      </div>
                                    </div>
                                  </a></div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div class="w-full gap-2 flex flex-col" data-orientation="vertical">
                        <div data-state="open" data-orientation="vertical" class="border-0 bg-[#212121] rounded-none">
                          <h3 data-orientation="vertical" data-state="open" class="flex"><button type="button"
                              aria-controls="radix-:R1cv7rrm6sva:" aria-expanded="true" data-state="open"
                              data-orientation="vertical" id="radix-:Rcv7rrm6sva:"
                              class="flex-1 font-medium transition-all hover:underline [&amp;[data-state=open]&gt;svg]:rotate-180 px-8 py-4 text-white flex justify-between items-center"
                              data-radix-collection-item=""><span class="text-xl font-semibold pt-4">Reviews</span><svg
                                xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                stroke-linejoin="round"
                                class="lucide lucide-chevron-down h-4 w-4 shrink-0 transition-transform duration-200"
                                aria-hidden="true">
                                <path d="m6 9 6 6 6-6"></path>
                              </svg></button></h3>
                          <div data-state="open" id="radix-:R1cv7rrm6sva:" role="region"
                            aria-labelledby="radix-:Rcv7rrm6sva:" data-orientation="vertical"
                            class="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
                            style="--radix-accordion-content-height: var(--radix-collapsible-content-height); --radix-accordion-content-width: var(--radix-collapsible-content-width); transition-duration: 0s; animation-name: none; --radix-collapsible-content-height: 41.33332824707031px; --radix-collapsible-content-width: 1380px;">
                            <div class="pb-4 pt-0 bg-[#212121] text-center border border-dashed border-gray-500">
                              <ul class="flex flex-col gap-4 rounded-lg p-6"><span
                                  class="text-gray-400 font-medium text-center py-8">There are no reviews yet.</span>
                              </ul>
                            </div>
                          </div>
                        </div>
                        <div data-state="closed" data-orientation="vertical" class="border-0 bg-[#212121] rounded-none">
                          <h3 data-orientation="vertical" data-state="closed" class="flex"><button type="button"
                              aria-controls="radix-:R1kv7rrm6sva:" aria-expanded="false" data-state="closed"
                              data-orientation="vertical" id="radix-:Rkv7rrm6sva:"
                              class="flex-1 font-medium transition-all hover:underline [&amp;[data-state=open]&gt;svg]:rotate-180 px-8 py-4 text-white flex justify-between items-center"
                              data-radix-collection-item=""><span class="text-xl font-semibold pt-4">Comments</span><svg
                                xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
                                stroke-linejoin="round"
                                class="lucide lucide-chevron-down h-4 w-4 shrink-0 transition-transform duration-200"
                                aria-hidden="true">
                                <path d="m6 9 6 6 6-6"></path>
                              </svg></button></h3>
                          <div data-state="closed" id="radix-:R1kv7rrm6sva:" hidden="" role="region"
                            aria-labelledby="radix-:Rkv7rrm6sva:" data-orientation="vertical"
                            class="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
                            style="--radix-accordion-content-height: var(--radix-collapsible-content-height); --radix-accordion-content-width: var(--radix-collapsible-content-width);">
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </section>
            </div>
          </div>
          <div class="mt-64 relative bg-[linear-gradient(180deg,_#121212_55.73%,_#7A7A7A_353.19%)]">
            <div class="flex items-center flex-col justify-center px-5 py-8 gap-6 relative z-10"><img
                src="https://storage.qiscans.com/upload/2025/08/24/SERVER-LOGO-311f58bd3a51b8c5.webp"
                alt="Qi Scans Logo" width="100" height="100"><span
                class="text-center text-[#87878e] text-sm max-w-2xl">Qi Scans<!-- -->®. All rights reserved</span><span
                class="text-center text-white text-sm max-w-2xl">Your ultimate destination for exploring, reading, and
                enjoying a diverse collection of manga and manhua and manhwa</span>
              <div class="flex gap-4"><a href="#" class="text-white hover:text-[#71717A] transition-colors"><img
                    alt="Twitter" loading="lazy" width="100" height="100" decoding="async" data-nimg="1"
                    class="w-12 h-12" style="color:transparent" src="/_next/static/media/twitter.3c5a755b.svg"></a><a
                  href="https://discord.gg/WndZ8x6yYC" target="_blank"
                  class="text-white hover:text-[#71717A] transition-colors"><img alt="Discord" loading="lazy"
                    width="100" height="100" decoding="async" data-nimg="1" class="w-12 h-12" style="color:transparent"
                    src="/_next/static/media/discord.4c96414b.svg"></a><a href="#"
                  class="text-[#71717A] hover:text-white transition-colors"><img alt="Telegram" loading="lazy"
                    width="100" height="100" decoding="async" data-nimg="1" class="w-12 h-12 bor"
                    style="color:transparent" src="/_next/static/media/telegram.711b1097.svg"></a><a href="#"
                  class="text-white hover:text-[#71717A] transition-colors"><img alt="Instagram" loading="lazy"
                    width="100" height="100" decoding="async" data-nimg="1" class="w-12 h-12" style="color:transparent"
                    src="/_next/static/media/instagram.67a7a48f.svg"></a></div>
            </div>
          </div>
        </div>
      </main>
    </div>
    <section aria-label="Notifications alt+T" tabindex="-1" aria-live="polite" aria-relevant="additions text"
      aria-atomic="false"></section>
  </div>
  <script src="/_next/static/chunks/webpack-9783cfa24d08f6c5.js" async=""></script>
  <script>(self.__next_f = self.__next_f || []).push([0]); self.__next_f.push([2, null])</script>
  <script>self.__next_f.push([1, "1:HL[\"/_next/static/media/4c9affa5bc8f420e-s.p.woff2\",\"font\",{\"crossOrigin\":\"\",\"type\":\"font/woff2\"}]\n2:HL[\"/_next/static/media/cc978ac5ee68c2b6-s.p.woff2\",\"font\",{\"crossOrigin\":\"\",\"type\":\"font/woff2\"}]\n3:HL[\"/_next/static/css/cb6b536171c7f0c4.css\",\"style\"]\n4:HL[\"/_next/static/css/46d2f1b70d0e73f2.css\",\"style\"]\n5:HL[\"/_next/static/css/59996bdb2e04e5fb.css\",\"style\"]\n6:HL[\"/_next/static/css/98470d53c5414f81.css\",\"style\"]\n"])</script>
  <script>self.__next_f.push([1, "7:I[12846,[],\"\"]\na:I[4707,[],\"\"]\nc:I[36423,[],\"\"]\nf:I[61060,[],\"\"]\nb:[\"series\",\"reincarnated-murim-lord\",\"d\"]\n10:[]\n"])</script>
  <script>self.__next_f.push([1, "0:[\"$\",\"$L7\",null,{\"buildId\":\"8z3eYSMuY1kPE9nZppTHY\",\"assetPrefix\":\"\",\"urlParts\":[\"\",\"series\",\"reincarnated-murim-lord\"],\"initialTree\":[\"\",{\"children\":[\"(main)\",{\"children\":[\"series\",{\"children\":[[\"series\",\"reincarnated-murim-lord\",\"d\"],{\"children\":[\"__PAGE__\",{}]}]}]},\"$undefined\",\"$undefined\",true]}],\"initialSeedData\":[\"\",{\"children\":[\"(main)\",{\"children\":[\"series\",{\"children\":[[\"series\",\"reincarnated-murim-lord\",\"d\"],{\"children\":[\"__PAGE__\",{},[[\"$L8\",\"$L9\",null],null],null]},[null,[\"$\",\"$La\",null,{\"parallelRouterKey\":\"children\",\"segmentPath\":[\"children\",\"(main)\",\"children\",\"series\",\"children\",\"$b\",\"children\"],\"error\":\"$undefined\",\"errorStyles\":\"$undefined\",\"errorScripts\":\"$undefined\",\"template\":[\"$\",\"$Lc\",null,{}],\"templateStyles\":\"$undefined\",\"templateScripts\":\"$undefined\",\"notFound\":\"$undefined\",\"notFoundStyles\":\"$undefined\"}]],null]},[null,[\"$\",\"$La\",null,{\"parallelRouterKey\":\"children\",\"segmentPath\":[\"children\",\"(main)\",\"children\",\"series\",\"children\"],\"error\":\"$undefined\",\"errorStyles\":\"$undefined\",\"errorScripts\":\"$undefined\",\"template\":[\"$\",\"$Lc\",null,{}],\"templateStyles\":\"$undefined\",\"templateScripts\":\"$undefined\",\"notFound\":\"$undefined\",\"notFoundStyles\":\"$undefined\"}]],null]},[[[[\"$\",\"link\",\"0\",{\"rel\":\"stylesheet\",\"href\":\"/_next/static/css/cb6b536171c7f0c4.css\",\"precedence\":\"next\",\"crossOrigin\":\"$undefined\"}],[\"$\",\"link\",\"1\",{\"rel\":\"stylesheet\",\"href\":\"/_next/static/css/46d2f1b70d0e73f2.css\",\"precedence\":\"next\",\"crossOrigin\":\"$undefined\"}],[\"$\",\"link\",\"2\",{\"rel\":\"stylesheet\",\"href\":\"/_next/static/css/59996bdb2e04e5fb.css\",\"precedence\":\"next\",\"crossOrigin\":\"$undefined\"}],[\"$\",\"link\",\"3\",{\"rel\":\"stylesheet\",\"href\":\"/_next/static/css/98470d53c5414f81.css\",\"precedence\":\"next\",\"crossOrigin\":\"$undefined\"}]],\"$Ld\"],null],null]},[null,[\"$\",\"$La\",null,{\"parallelRouterKey\":\"children\",\"segmentPath\":[\"children\"],\"error\":\"$undefined\",\"errorStyles\":\"$undefined\",\"errorScripts\":\"$undefined\",\"template\":[\"$\",\"$Lc\",null,{}],\"templateStyles\":\"$undefined\",\"templateScripts\":\"$undefined\",\"notFound\":[[\"$\",\"title\",null,{\"children\":\"404: This page could not be found.\"}],[\"$\",\"div\",null,{\"style\":{\"fontFamily\":\"system-ui,\\\"Segoe UI\\\",Roboto,Helvetica,Arial,sans-serif,\\\"Apple Color Emoji\\\",\\\"Segoe UI Emoji\\\"\",\"height\":\"100vh\",\"textAlign\":\"center\",\"display\":\"flex\",\"flexDirection\":\"column\",\"alignItems\":\"center\",\"justifyContent\":\"center\"},\"children\":[\"$\",\"div\",null,{\"children\":[[\"$\",\"style\",null,{\"dangerouslySetInnerHTML\":{\"__html\":\"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\"}}],[\"$\",\"h1\",null,{\"className\":\"next-error-h1\",\"style\":{\"display\":\"inline-block\",\"margin\":\"0 20px 0 0\",\"padding\":\"0 23px 0 0\",\"fontSize\":24,\"fontWeight\":500,\"verticalAlign\":\"top\",\"lineHeight\":\"49px\"},\"children\":\"404\"}],[\"$\",\"div\",null,{\"style\":{\"display\":\"inline-block\"},\"children\":[\"$\",\"h2\",null,{\"style\":{\"fontSize\":14,\"fontWeight\":400,\"lineHeight\":\"49px\",\"margin\":0},\"children\":\"This page could not be found.\"}]}]]}]}]],\"notFoundStyles\":[]}]],null],\"couldBeIntercepted\":false,\"initialHead\":[null,\"$Le\"],\"globalErrorComponent\":\"$f\",\"missingSlots\":\"$W10\"}]\n"])</script>
  <script>self.__next_f.push([1, "e:[[\"$\",\"meta\",\"0\",{\"name\":\"viewport\",\"content\":\"width=device-width, initial-scale=1\"}],[\"$\",\"meta\",\"1\",{\"charSet\":\"utf-8\"}],[\"$\",\"title\",\"2\",{\"children\":\"Reincarnated Murim Lord - Qi Scans\"}],[\"$\",\"meta\",\"3\",{\"name\":\"description\",\"content\":\"Read Reincarnated Murim Lord on Qi Scans - \u003cp\u003eRegret is the bane of old men. When aging Alliance Lord Hajin Cheon of the Grand Martial Alliance reflects on his immense legacy, he finds that he recalls little of his deeds or even the lives of his closest advisors. Stricken by a mysterious ailment, Hajin suddenly passes away only to wake up in the body of Ridan Byeok, heir to the Byeok Clan of swordsmen. The only problem is, Ridan is a well-known wastrel, the polar opposite of the virtuous and stern Hajin. Righting the wrongs of his predecessor, Hajin begins to uncover the truth behind his death…\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\"}],[\"$\",\"meta\",\"4\",{\"property\":\"og:title\",\"content\":\"Reincarnated Murim Lord - Qi Scans\"}],[\"$\",\"meta\",\"5\",{\"property\":\"og:description\",\"content\":\"Read Reincarnated Murim Lord on Qi Scans - \u003cp\u003eRegret is the bane of old men. When aging Alliance Lord Hajin Cheon of the Grand Martial Alliance reflects on his immense legacy, he finds that he recalls little of his deeds or even the lives of his closest advisors. Stricken by a mysterious ailment, Hajin suddenly passes away only to wake up in the body of Ridan Byeok, heir to the Byeok Clan of swordsmen. The only problem is, Ridan is a well-known wastrel, the polar opposite of the virtuous and stern Hajin. Righting the wrongs of his predecessor, Hajin begins to uncover the truth behind his death…\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\"}],[\"$\",\"meta\",\"6\",{\"property\":\"og:image\",\"content\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}],[\"$\",\"meta\",\"7\",{\"property\":\"og:image:width\",\"content\":\"60\"}],[\"$\",\"meta\",\"8\",{\"property\":\"og:image:height\",\"content\":\"95\"}],[\"$\",\"meta\",\"9\",{\"name\":\"twitter:card\",\"content\":\"summary\"}],[\"$\",\"meta\",\"10\",{\"name\":\"twitter:title\",\"content\":\"Reincarnated Murim Lord - Qi Scans\"}],[\"$\",\"meta\",\"11\",{\"name\":\"twitter:description\",\"content\":\"Read Reincarnated Murim Lord on Qi Scans - \u003cp\u003eRegret is the bane of old men. When aging Alliance Lord Hajin Cheon of the Grand Martial Alliance reflects on his immense legacy, he finds that he recalls little of his deeds or even the lives of his closest advisors. Stricken by a mysterious ailment, Hajin suddenly passes away only to wake up in the body of Ridan Byeok, heir to the Byeok Clan of swordsmen. The only problem is, Ridan is a well-known wastrel, the polar opposite of the virtuous and stern Hajin. Righting the wrongs of his predecessor, Hajin begins to uncover the truth behind his death…\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\"}],[\"$\",\"meta\",\"12\",{\"name\":\"twitter:image\",\"content\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}],[\"$\",\"meta\",\"13\",{\"name\":\"twitter:image:width\",\"content\":\"60\"}],[\"$\",\"meta\",\"14\",{\"name\":\"twitter:image:height\",\"content\":\"95\"}],[\"$\",\"link\",\"15\",{\"rel\":\"icon\",\"href\":\"/favicon.ico\",\"type\":\"image/x-icon\",\"sizes\":\"16x16\"}],[\"$\",\"meta\",\"16\",{\"name\":\"next-size-adjust\"}]]\n"])</script>
  <script>self.__next_f.push([1, "8:null\n"])</script>
  <script>self.__next_f.push([1, "11:I[5779,[\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"7954\",\"static/chunks/7954-2b799be3f0c14219.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"6695\",\"static/chunks/app/(auth)/layout-e40890041e9684a9.js\"],\"default\"]\n12:I[48847,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"1229\",\"static/chunks/1229-a2698fddb43dda46.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"9860\",\"static/chunks/9860-cc9d027637dd558b.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7954\",\"static/chunks/7954-2b799be3f0c14219.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"4296\",\"static/chunks/4296-b7be9d40ceb013b8.js\",\"1407\",\"static/chunks/1407-affa54eb6e6c9601.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"4681\",\"static/chunks/4681-3a58daba122cf084.js\",\"4095\",\"static/chunks/app/(main)/layout-a996ac9bbace2005.js\"],\"Providers\"]\n13:I[60876,[\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"7954\",\"static/chunks/7954-2b799be3f0c14219.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"6695\",\"static/chunks/app/(auth)/layout-e40890041e9684a9.js\"],\"default\"]\n14:I[4671,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e"])</script>
  <script>self.__next_f.push([1, "346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"1229\",\"static/chunks/1229-a2698fddb43dda46.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"9860\",\"static/chunks/9860-cc9d027637dd558b.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7954\",\"static/chunks/7954-2b799be3f0c14219.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"4296\",\"static/chunks/4296-b7be9d40ceb013b8.js\",\"1407\",\"static/chunks/1407-affa54eb6e6c9601.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"4681\",\"static/chunks/4681-3a58daba122cf084.js\",\"4095\",\"static/chunks/app/(main)/layout-a996ac9bbace2005.js\"],\"HeaderProvider\"]\n15:I[33758,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"1229\",\"static/chunks/1229-a2698fddb43dda46.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"9860\",\"static/chunks/9860-cc9d027637dd558b.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7954\",\"static/chunks/7954-2b799be3f0c14219.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"4296\",\"static/chunks/4296-b7be9d40ceb013b8.js\",\"1407\",\"static/chunks/1407-affa54eb6e6c9601.js\",\"4073"])</script>
  <script>self.__next_f.push([1, "\",\"static/chunks/4073-ca103732436e6cd8.js\",\"4681\",\"static/chunks/4681-3a58daba122cf084.js\",\"4095\",\"static/chunks/app/(main)/layout-a996ac9bbace2005.js\"],\"default\"]\n16:I[75958,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"1229\",\"static/chunks/1229-a2698fddb43dda46.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"9860\",\"static/chunks/9860-cc9d027637dd558b.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7954\",\"static/chunks/7954-2b799be3f0c14219.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"4296\",\"static/chunks/4296-b7be9d40ceb013b8.js\",\"1407\",\"static/chunks/1407-affa54eb6e6c9601.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"4681\",\"static/chunks/4681-3a58daba122cf084.js\",\"4095\",\"static/chunks/app/(main)/layout-a996ac9bbace2005.js\"],\"default\"]\n17:I[15525,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"1229\",\"static/chunks/1229-a2698fddb43dda46.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"2964\",\"static/chunks/2964-74ca146f"])</script>
  <script>self.__next_f.push([1, "42261e9b.js\",\"9860\",\"static/chunks/9860-cc9d027637dd558b.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7954\",\"static/chunks/7954-2b799be3f0c14219.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"4296\",\"static/chunks/4296-b7be9d40ceb013b8.js\",\"1407\",\"static/chunks/1407-affa54eb6e6c9601.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"4681\",\"static/chunks/4681-3a58daba122cf084.js\",\"4095\",\"static/chunks/app/(main)/layout-a996ac9bbace2005.js\"],\"default\"]\n18:I[8976,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"1229\",\"static/chunks/1229-a2698fddb43dda46.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"9860\",\"static/chunks/9860-cc9d027637dd558b.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7954\",\"static/chunks/7954-2b799be3f0c14219.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"4296\",\"static/chunks/4296-b7be9d40ceb013b8.js\",\"1407\",\"static/chunks/1407-affa54eb6e6c9601.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"4681\",\"static/chunks/4681-3a58daba122cf084.js\",\"4095\",\"static/chunks/app/(main)/layout-a996ac9bbace2005.js\"],\"default\"]\n1d:I[65878,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chu"])</script>
  <script>self.__next_f.push([1, "nks/5934-f1a3a4e4f634060d.js\",\"2380\",\"static/chunks/2380-c178b2bcdc081c18.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"3464\",\"static/chunks/3464-0ef807a73dad55e0.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"6889\",\"static/chunks/6889-07994dda50bd17f9.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"1243\",\"static/chunks/1243-12b71c3b47fa602e.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7562\",\"static/chunks/7562-37b5a4c4ca460e28.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3344\",\"static/chunks/3344-49990d6cd60a5f71.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"9201\",\"static/chunks/9201-a41d623295182ab9.js\",\"7812\",\"static/chunks/7812-7625f60f1e0ea4dc.js\",\"3208\",\"static/chunks/3208-6fe35546eebfbd0e.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"8694\",\"static/chunks/app/(main)/series/%5Bseries%5D/page-9c294980c6af1abd.js\"],\"Image\"]\n1e:I[15898,[\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"7954\",\"static/chunks/7954-2b799be3f0c14219.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"6695\",\"static/chunks/app/(auth)/layout-e40890041e9684a9.js\"],\"Toaster\"]\n19:{\"fontFamily\":\"system-ui,\\\"Segoe UI\\\",Roboto,Helvetica,Arial,sans-serif,\\\"Apple Color Emoji\\\",\\\"Segoe UI Emoji\\\"\",\"height\":\"100vh\",\"textAlign\":\"center\",\"display\":\"flex\",\"flexDirection\":\"column\",\"alignItems\":\"center\",\"justifyContent\":\"center\"}\n1a:{\"display\":\"inline-block\",\"margin\":\"0 20px 0 0\",\"padding\":\"0 23px 0 0\",\"fontSize\":24,\"fontWeight\":500,\"verticalAlign\":\"top\",\"lineHeight\":\"49px\"}\n1b:{\"display\":\"inline-block\"}\n1c:{\"fontSize\":14,\"fontWeight\":400,\"lineHeight\":\"49px\",\"margin\":0}\n"])</script>
  <script>self.__next_f.push([1, "d:[\"$\",\"html\",null,{\"className\":\"__className_63b31c\",\"lang\":\"en\",\"suppressHydrationWarning\":true,\"children\":[[\"$\",\"head\",null,{\"children\":[[\"$\",\"$L11\",null,{\"GA_TRACKING_ID\":\"G-3NN66WSFQK\"}],[\"$\",\"script\",null,{\"defer\":true,\"data-domain\":\"ezmanga.org\",\"src\":\"https://analytics.ezmanga.org/js/script.js\"}]]}],false,[\"$\",\"body\",null,{\"className\":\"h-full\",\"children\":[\"$\",\"$L12\",null,{\"children\":[\"$\",\"$L13\",null,{\"children\":[[\"$\",\"$L14\",null,{\"initialValue\":false,\"children\":[\"$\",\"div\",null,{\"className\":\"flex\",\"children\":[\"$\",\"$L15\",null,{\"children\":[[\"$\",\"$L16\",null,{\"siteTitle\":\"Qi Scans\",\"websiteLogo\":\"https://storage.qiscans.com/upload/2025/08/24/SERVER-LOGO-311f58bd3a51b8c5.webp\"}],[\"$\",\"$L17\",null,{}],[\"$\",\"$L18\",null,{\"storeSettings\":{\"memberships\":\"[{\\\"id\\\":\\\"1750025157998\\\",\\\"name\\\":\\\"7500 coins\\\",\\\"price\\\":59,\\\"image\\\":\\\"\\\",\\\"badgeName\\\":\\\"PACK 1\\\",\\\"bonus\\\":800,\\\"discount\\\":12,\\\"isSpecial\\\":false,\\\"badge\\\":\\\"Best Deal\\\",\\\"badgeColor\\\":\\\"#4F46E5\\\"},{\\\"id\\\":\\\"1750025191630\\\",\\\"name\\\":\\\"5000 coins\\\",\\\"price\\\":39.99,\\\"image\\\":\\\"\\\",\\\"badgeName\\\":\\\"PACK 2\\\",\\\"bonus\\\":500,\\\"discount\\\":10,\\\"badge\\\":\\\"Most Popular\\\",\\\"badgeColor\\\":\\\"#10B981\\\"},{\\\"id\\\":\\\"1750025208154\\\",\\\"name\\\":\\\"2500 coins\\\",\\\"price\\\":21,\\\"image\\\":\\\"\\\",\\\"badgeName\\\":\\\"PACK 3\\\",\\\"bonus\\\":250,\\\"discount\\\":6},{\\\"id\\\":\\\"1750025226097\\\",\\\"name\\\":\\\"1100 coins\\\",\\\"price\\\":12.99,\\\"image\\\":\\\"\\\",\\\"badgeName\\\":\\\"PACK 4\\\"},{\\\"id\\\":\\\"1758313105298\\\",\\\"name\\\":\\\"10000\\\",\\\"price\\\":79.99,\\\"badgeName\\\":\\\"Qi Weekend Pack | Only 2 Days Left\\\",\\\"bonus\\\":1300,\\\"discount\\\":14,\\\"badge\\\":\\\"Custom\\\",\\\"badgeColor\\\":\\\"#F59E0B\\\",\\\"isSpecial\\\":false,\\\"isTemporary\\\":true}]\",\"enablePayments\":\"true\",\"paypalClientId\":\"AWKg_W2cWXA6Y870JYFCapE8bxQ9KF7vhMC6ursOqBGtOeNBYZkpwqfYP0Nz9J2iShOnyuEtcAlVmXq9\",\"enablePaypalPersonal\":\"false\",\"paypalPersonalEmail\":\"solimanmohammed1012@gmail.com\",\"enablePaypal\":\"true\"}}],[\"$\",\"div\",null,{\"children\":[[\"$\",\"$La\",null,{\"parallelRouterKey\":\"children\",\"segmentPath\":[\"children\",\"(main)\",\"children\"],\"error\":\"$undefined\",\"errorStyles\":\"$undefined\",\"errorScripts\":\"$undefined\",\"template\":[\"$\",\"$Lc\",null,{}],\"templateStyles\":\"$undefined\",\"templateScripts\":\"$undefined\",\"notFound\":[[\"$\",\"title\",null,{\"children\":\"404: This page could not be found.\"}],[\"$\",\"div\",null,{\"style\":\"$19\",\"children\":[\"$\",\"div\",null,{\"children\":[[\"$\",\"style\",null,{\"dangerouslySetInnerHTML\":{\"__html\":\"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\"}}],[\"$\",\"h1\",null,{\"className\":\"next-error-h1\",\"style\":\"$1a\",\"children\":\"404\"}],[\"$\",\"div\",null,{\"style\":\"$1b\",\"children\":[\"$\",\"h2\",null,{\"style\":\"$1c\",\"children\":\"This page could not be found.\"}]}]]}]}]],\"notFoundStyles\":[]}],[\"$\",\"div\",null,{\"className\":\"mt-64 relative bg-[linear-gradient(180deg,_#121212_55.73%,_#7A7A7A_353.19%)]\",\"children\":[\"$\",\"div\",null,{\"className\":\"flex items-center flex-col justify-center px-5 py-8 gap-6 relative z-10\",\"children\":[[\"$\",\"img\",null,{\"src\":\"https://storage.qiscans.com/upload/2025/08/24/SERVER-LOGO-311f58bd3a51b8c5.webp\",\"alt\":\"Qi Scans Logo\",\"width\":100,\"height\":100}],[\"$\",\"span\",null,{\"className\":\"text-center text-[#87878e] text-sm max-w-2xl\",\"children\":[\"Qi Scans\",\"®. All rights reserved\"]}],[\"$\",\"span\",null,{\"className\":\"text-center text-white text-sm max-w-2xl\",\"children\":\"Your ultimate destination for exploring, reading, and enjoying a diverse collection of manga and manhua and manhwa\"}],[\"$\",\"div\",null,{\"className\":\"flex gap-4\",\"children\":[[\"$\",\"a\",null,{\"href\":\"#\",\"className\":\"text-white hover:text-[#71717A] transition-colors\",\"children\":[\"$\",\"$L1d\",null,{\"src\":{\"src\":\"/_next/static/media/twitter.3c5a755b.svg\",\"height\":26,\"width\":25,\"blurWidth\":0,\"blurHeight\":0},\"alt\":\"Twitter\",\"width\":100,\"height\":100,\"className\":\"w-12 h-12\"}]}],[\"$\",\"a\",null,{\"href\":\"https://discord.gg/WndZ8x6yYC\",\"target\":\"_blank\",\"className\":\"text-white hover:text-[#71717A] transition-colors\",\"children\":[\"$\",\"$L1d\",null,{\"src\":{\"src\":\"/_next/static/media/discord.4c96414b.svg\",\"height\":27,\"width\":27,\"blurWidth\":0,\"blurHeight\":0},\"alt\":\"Discord\",\"width\":100,\"height\":100,\"className\":\"w-12 h-12\"}]}],[\"$\",\"a\",null,{\"href\":\"#\",\"className\":\"text-[#71717A] hover:text-white transition-colors\",\"children\":[\"$\",\"$L1d\",null,{\"src\":{\"src\":\"/_next/static/media/telegram.711b1097.svg\",\"height\":25,\"width\":25,\"blurWidth\":0,\"blurHeight\":0},\"alt\":\"Telegram\",\"width\":100,\"height\":100,\"className\":\"w-12 h-12 bor\"}]}],[\"$\",\"a\",null,{\"href\":\"#\",\"className\":\"text-white hover:text-[#71717A] transition-colors\",\"children\":[\"$\",\"$L1d\",null,{\"src\":{\"src\":\"/_next/static/media/instagram.67a7a48f.svg\",\"height\":25,\"width\":23,\"blurWidth\":0,\"blurHeight\":0},\"alt\":\"Instagram\",\"width\":100,\"height\":100,\"className\":\"w-12 h-12\"}]}]]}]]}]}]]}]]}]}]}],[\"$\",\"$L1e\",null,{}]]}]}]}]]}]\n"])</script>
  <script>self.__next_f.push([1, "1f:I[44674,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"2380\",\"static/chunks/2380-c178b2bcdc081c18.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"3464\",\"static/chunks/3464-0ef807a73dad55e0.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"6889\",\"static/chunks/6889-07994dda50bd17f9.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"1243\",\"static/chunks/1243-12b71c3b47fa602e.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7562\",\"static/chunks/7562-37b5a4c4ca460e28.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3344\",\"static/chunks/3344-49990d6cd60a5f71.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"9201\",\"static/chunks/9201-a41d623295182ab9.js\",\"7812\",\"static/chunks/7812-7625f60f1e0ea4dc.js\",\"3208\",\"static/chunks/3208-6fe35546eebfbd0e.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"8694\",\"static/chunks/app/(main)/series/%5Bseries%5D/page-9c294980c6af1abd.js\"],\"SeriesParallax\"]\n20:I[8439,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"2380\",\"static/chunks/2380-c178b2bcdc081c18.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"3464\",\"static/chunks/3464-0ef807a73dad55e0.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699"])</script>
  <script>self.__next_f.push([1, "276fc4a3183c.js\",\"6889\",\"static/chunks/6889-07994dda50bd17f9.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"1243\",\"static/chunks/1243-12b71c3b47fa602e.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7562\",\"static/chunks/7562-37b5a4c4ca460e28.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3344\",\"static/chunks/3344-49990d6cd60a5f71.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"9201\",\"static/chunks/9201-a41d623295182ab9.js\",\"7812\",\"static/chunks/7812-7625f60f1e0ea4dc.js\",\"3208\",\"static/chunks/3208-6fe35546eebfbd0e.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"8694\",\"static/chunks/app/(main)/series/%5Bseries%5D/page-9c294980c6af1abd.js\"],\"default\"]\n21:I[72972,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"2380\",\"static/chunks/2380-c178b2bcdc081c18.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"3464\",\"static/chunks/3464-0ef807a73dad55e0.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"6889\",\"static/chunks/6889-07994dda50bd17f9.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"1243\",\"static/chunks/1243-12b71c3b47fa602e.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7562\",\"static/chunks/7562-37b5a4c4ca460e28.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3344\",\"static/chunks/3344-49990d6cd60a5f71.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"9201\",\"static/chunks/9201-a41d623295182ab9.js\",\"7812\",\"static/chunks/7812-7625f60f1e0ea4dc.js\",\"3208\",\"static/chunks/3208-6fe35546eebfbd0e.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"8694\",\"static/chunks/app/(main)/series/%5Bseries%5D/page-9c294980c6af1abd.js\"],\"\"]\n22:I[197"])</script>
  <script>self.__next_f.push([1, "46,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"2380\",\"static/chunks/2380-c178b2bcdc081c18.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"3464\",\"static/chunks/3464-0ef807a73dad55e0.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"6889\",\"static/chunks/6889-07994dda50bd17f9.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"1243\",\"static/chunks/1243-12b71c3b47fa602e.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7562\",\"static/chunks/7562-37b5a4c4ca460e28.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3344\",\"static/chunks/3344-49990d6cd60a5f71.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"9201\",\"static/chunks/9201-a41d623295182ab9.js\",\"7812\",\"static/chunks/7812-7625f60f1e0ea4dc.js\",\"3208\",\"static/chunks/3208-6fe35546eebfbd0e.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"8694\",\"static/chunks/app/(main)/series/%5Bseries%5D/page-9c294980c6af1abd.js\"],\"default\"]\n23:I[95477,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"2380\",\"static/chunks/2380-c178b2bcdc081c18.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"3464\",\"static/chunks/3464-0ef807a73dad55e0.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.j"])</script>
  <script>self.__next_f.push([1, "s\",\"6889\",\"static/chunks/6889-07994dda50bd17f9.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"1243\",\"static/chunks/1243-12b71c3b47fa602e.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7562\",\"static/chunks/7562-37b5a4c4ca460e28.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3344\",\"static/chunks/3344-49990d6cd60a5f71.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"9201\",\"static/chunks/9201-a41d623295182ab9.js\",\"7812\",\"static/chunks/7812-7625f60f1e0ea4dc.js\",\"3208\",\"static/chunks/3208-6fe35546eebfbd0e.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"8694\",\"static/chunks/app/(main)/series/%5Bseries%5D/page-9c294980c6af1abd.js\"],\"default\"]\nbb:I[48027,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"2380\",\"static/chunks/2380-c178b2bcdc081c18.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"3464\",\"static/chunks/3464-0ef807a73dad55e0.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"6889\",\"static/chunks/6889-07994dda50bd17f9.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"1243\",\"static/chunks/1243-12b71c3b47fa602e.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7562\",\"static/chunks/7562-37b5a4c4ca460e28.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3344\",\"static/chunks/3344-49990d6cd60a5f71.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"9201\",\"static/chunks/9201-a41d623295182ab9.js\",\"7812\",\"static/chunks/7812-7625f60f1e0ea4dc.js\",\"3208\",\"static/chunks/3208-6fe35546eebfbd0e.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"8694\",\"static/chunks/app/(main)/series/%5Bseries%5D/page-9c294980c6af1abd.js\"],\"RatingDialog\"]\nbc:I[25146"])</script>
  <script>self.__next_f.push([1, ",[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"2380\",\"static/chunks/2380-c178b2bcdc081c18.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"3464\",\"static/chunks/3464-0ef807a73dad55e0.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"6889\",\"static/chunks/6889-07994dda50bd17f9.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"1243\",\"static/chunks/1243-12b71c3b47fa602e.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7562\",\"static/chunks/7562-37b5a4c4ca460e28.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3344\",\"static/chunks/3344-49990d6cd60a5f71.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"9201\",\"static/chunks/9201-a41d623295182ab9.js\",\"7812\",\"static/chunks/7812-7625f60f1e0ea4dc.js\",\"3208\",\"static/chunks/3208-6fe35546eebfbd0e.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"8694\",\"static/chunks/app/(main)/series/%5Bseries%5D/page-9c294980c6af1abd.js\"],\"default\"]\nc8:I[28412,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"2380\",\"static/chunks/2380-c178b2bcdc081c18.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"3464\",\"static/chunks/3464-0ef807a73dad55e0.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\""])</script>
  <script>self.__next_f.push([1, ",\"6889\",\"static/chunks/6889-07994dda50bd17f9.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"1243\",\"static/chunks/1243-12b71c3b47fa602e.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7562\",\"static/chunks/7562-37b5a4c4ca460e28.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3344\",\"static/chunks/3344-49990d6cd60a5f71.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"9201\",\"static/chunks/9201-a41d623295182ab9.js\",\"7812\",\"static/chunks/7812-7625f60f1e0ea4dc.js\",\"3208\",\"static/chunks/3208-6fe35546eebfbd0e.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"8694\",\"static/chunks/app/(main)/series/%5Bseries%5D/page-9c294980c6af1abd.js\"],\"EnjoySection\"]\nc9:I[22549,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"2380\",\"static/chunks/2380-c178b2bcdc081c18.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"3464\",\"static/chunks/3464-0ef807a73dad55e0.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"6889\",\"static/chunks/6889-07994dda50bd17f9.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"1243\",\"static/chunks/1243-12b71c3b47fa602e.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7562\",\"static/chunks/7562-37b5a4c4ca460e28.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3344\",\"static/chunks/3344-49990d6cd60a5f71.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"9201\",\"static/chunks/9201-a41d623295182ab9.js\",\"7812\",\"static/chunks/7812-7625f60f1e0ea4dc.js\",\"3208\",\"static/chunks/3208-6fe35546eebfbd0e.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"8694\",\"static/chunks/app/(main)/series/%5Bseries%5D/page-9c294980c6af1abd.js\"],\"Accordion\"]\nca:I[22549"])</script>
  <script>self.__next_f.push([1, ",[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"2380\",\"static/chunks/2380-c178b2bcdc081c18.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"3464\",\"static/chunks/3464-0ef807a73dad55e0.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"6889\",\"static/chunks/6889-07994dda50bd17f9.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"1243\",\"static/chunks/1243-12b71c3b47fa602e.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7562\",\"static/chunks/7562-37b5a4c4ca460e28.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3344\",\"static/chunks/3344-49990d6cd60a5f71.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"9201\",\"static/chunks/9201-a41d623295182ab9.js\",\"7812\",\"static/chunks/7812-7625f60f1e0ea4dc.js\",\"3208\",\"static/chunks/3208-6fe35546eebfbd0e.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"8694\",\"static/chunks/app/(main)/series/%5Bseries%5D/page-9c294980c6af1abd.js\"],\"AccordionItem\"]\ncb:I[22549,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"2380\",\"static/chunks/2380-c178b2bcdc081c18.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"3464\",\"static/chunks/3464-0ef807a73dad55e0.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a318"])</script>
  <script>self.__next_f.push([1, "3c.js\",\"6889\",\"static/chunks/6889-07994dda50bd17f9.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"1243\",\"static/chunks/1243-12b71c3b47fa602e.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7562\",\"static/chunks/7562-37b5a4c4ca460e28.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3344\",\"static/chunks/3344-49990d6cd60a5f71.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"9201\",\"static/chunks/9201-a41d623295182ab9.js\",\"7812\",\"static/chunks/7812-7625f60f1e0ea4dc.js\",\"3208\",\"static/chunks/3208-6fe35546eebfbd0e.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"8694\",\"static/chunks/app/(main)/series/%5Bseries%5D/page-9c294980c6af1abd.js\"],\"AccordionTrigger\"]\ncc:I[22549,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"2380\",\"static/chunks/2380-c178b2bcdc081c18.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"3464\",\"static/chunks/3464-0ef807a73dad55e0.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"6889\",\"static/chunks/6889-07994dda50bd17f9.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"1243\",\"static/chunks/1243-12b71c3b47fa602e.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7562\",\"static/chunks/7562-37b5a4c4ca460e28.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3344\",\"static/chunks/3344-49990d6cd60a5f71.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"9201\",\"static/chunks/9201-a41d623295182ab9.js\",\"7812\",\"static/chunks/7812-7625f60f1e0ea4dc.js\",\"3208\",\"static/chunks/3208-6fe35546eebfbd0e.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"8694\",\"static/chunks/app/(main)/series/%5Bseries%5D/page-9c294980c6af1abd.js\"],\"AccordionCon"])</script>
  <script>self.__next_f.push([1, "tent\"]\ncd:I[57629,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"2380\",\"static/chunks/2380-c178b2bcdc081c18.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"3464\",\"static/chunks/3464-0ef807a73dad55e0.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699276fc4a3183c.js\",\"6889\",\"static/chunks/6889-07994dda50bd17f9.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"1243\",\"static/chunks/1243-12b71c3b47fa602e.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7562\",\"static/chunks/7562-37b5a4c4ca460e28.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3344\",\"static/chunks/3344-49990d6cd60a5f71.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"9201\",\"static/chunks/9201-a41d623295182ab9.js\",\"7812\",\"static/chunks/7812-7625f60f1e0ea4dc.js\",\"3208\",\"static/chunks/3208-6fe35546eebfbd0e.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"8694\",\"static/chunks/app/(main)/series/%5Bseries%5D/page-9c294980c6af1abd.js\"],\"default\"]\nce:I[7108,[\"3676\",\"static/chunks/870fdd6f-7c05e5aa3d228d14.js\",\"3958\",\"static/chunks/69b09407-ba1d3ad26a7071df.js\",\"8310\",\"static/chunks/0e5ce63c-079d6f0b9e8f737a.js\",\"7432\",\"static/chunks/7432-9e346590c6dcde92.js\",\"2972\",\"static/chunks/2972-9396f2bb5658bc51.js\",\"4438\",\"static/chunks/4438-0bc9a386cd599329.js\",\"5934\",\"static/chunks/5934-f1a3a4e4f634060d.js\",\"2380\",\"static/chunks/2380-c178b2bcdc081c18.js\",\"4532\",\"static/chunks/4532-ffa2bb80dfde5b2c.js\",\"1463\",\"static/chunks/1463-fe623491ddba145f.js\",\"3464\",\"static/chunks/3464-0ef807a73dad55e0.js\",\"5878\",\"static/chunks/5878-b26d6c2371866770.js\",\"1268\",\"static/chunks/1268-ddf9138531d2f670.js\",\"8924\",\"static/chunks/8924-5699"])</script>
  <script>self.__next_f.push([1, "276fc4a3183c.js\",\"6889\",\"static/chunks/6889-07994dda50bd17f9.js\",\"2964\",\"static/chunks/2964-74ca146f42261e9b.js\",\"1243\",\"static/chunks/1243-12b71c3b47fa602e.js\",\"1239\",\"static/chunks/1239-87d36c67f5330225.js\",\"7562\",\"static/chunks/7562-37b5a4c4ca460e28.js\",\"4653\",\"static/chunks/4653-6fade879a6992b1e.js\",\"3344\",\"static/chunks/3344-49990d6cd60a5f71.js\",\"3755\",\"static/chunks/3755-4fc39823db2fd890.js\",\"9201\",\"static/chunks/9201-a41d623295182ab9.js\",\"7812\",\"static/chunks/7812-7625f60f1e0ea4dc.js\",\"3208\",\"static/chunks/3208-6fe35546eebfbd0e.js\",\"4073\",\"static/chunks/4073-ca103732436e6cd8.js\",\"8694\",\"static/chunks/app/(main)/series/%5Bseries%5D/page-9c294980c6af1abd.js\"],\"SeriesComments\"]\n26:{\"name\":\"shin_sama\"}\n27:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n25:{\"id\":23279,\"slug\":\"chapter-87\",\"number\":87,\"title\":\"\",\"totalViews\":1320,\"createdBy\":\"$26\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-09-16T05:40:02.764Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$27\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n29:{\"name\":\"shin_sama\"}\n2a:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n28:{\"id\":23278,\"slug\":\"chapter-86\",\"number\":86,\"title\":\"\",\"totalViews\":728,\"createdBy\":\"$29\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-09-16T05:36:54.439Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$2a\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n2c:{\"name\":\"shin_sama\"}\n2d:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n2b:{\"id\":23277,\"slug\":\"chapter-85\",\"number\":85,\"title\":\"\",\"totalViews\":274,\"createdBy\":\"$2c\",\"unlock"])</script>
  <script>self.__next_f.push([1, "At\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-09-16T05:36:10.433Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$2d\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n2f:{\"name\":\"Deadly One\"}\n30:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n2e:{\"id\":22549,\"slug\":\"chapter-84\",\"number\":84,\"title\":\"\",\"totalViews\":113,\"createdBy\":\"$2f\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-30T13:52:56.606Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$30\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n32:{\"name\":\"Deadly One\"}\n33:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n31:{\"id\":22548,\"slug\":\"chapter-83\",\"number\":83,\"title\":\"\",\"totalViews\":57,\"createdBy\":\"$32\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-30T13:47:16.323Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$33\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n35:{\"name\":\"Admin\"}\n36:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n34:{\"id\":22034,\"slug\":\"chapter-82\",\"number\":82,\"title\":\"\",\"totalViews\":36,\"createdBy\":\"$35\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:30:34.875Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$36\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n38:{\"name\":\"Admin\"}\n39:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n37:{\"id\":22033,\"slug\":\"chapter-81\",\"number\":81,\"title\":\""])</script>
  <script>self.__next_f.push([1, "\",\"totalViews\":26,\"createdBy\":\"$38\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:30:17.680Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$39\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n3b:{\"name\":\"Admin\"}\n3c:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n3a:{\"id\":22032,\"slug\":\"chapter-80\",\"number\":80,\"title\":\"\",\"totalViews\":18,\"createdBy\":\"$3b\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:29:50.621Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$3c\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n3e:{\"name\":\"Admin\"}\n3f:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n3d:{\"id\":22031,\"slug\":\"chapter-79\",\"number\":79,\"title\":\"\",\"totalViews\":12,\"createdBy\":\"$3e\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:29:32.390Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$3f\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n41:{\"name\":\"Admin\"}\n42:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n40:{\"id\":22030,\"slug\":\"chapter-78\",\"number\":78,\"title\":\"\",\"totalViews\":13,\"createdBy\":\"$41\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:29:17.184Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$42\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n44:{\"name\":\"Admin\"}\n45:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n43:{\"id\":22029,\"slug\":\"c"])</script>
  <script>self.__next_f.push([1, "hapter-77\",\"number\":77,\"title\":\"\",\"totalViews\":13,\"createdBy\":\"$44\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:28:58.322Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$45\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n47:{\"name\":\"Admin\"}\n48:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n46:{\"id\":22028,\"slug\":\"chapter-76\",\"number\":76,\"title\":\"\",\"totalViews\":16,\"createdBy\":\"$47\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:28:42.299Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$48\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n4a:{\"name\":\"Admin\"}\n4b:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n49:{\"id\":22027,\"slug\":\"chapter-75\",\"number\":75,\"title\":\"\",\"totalViews\":14,\"createdBy\":\"$4a\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:28:23.562Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$4b\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n4d:{\"name\":\"Admin\"}\n4e:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n4c:{\"id\":22026,\"slug\":\"chapter-74\",\"number\":74,\"title\":\"\",\"totalViews\":13,\"createdBy\":\"$4d\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:28:08.001Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$4e\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n50:{\"name\":\"Admin\"}\n51:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7"])</script>
  <script>self.__next_f.push([1, ".webp\"}\n4f:{\"id\":22025,\"slug\":\"chapter-73\",\"number\":73,\"title\":\"\",\"totalViews\":13,\"createdBy\":\"$50\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:27:51.673Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$51\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n53:{\"name\":\"Admin\"}\n54:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n52:{\"id\":22024,\"slug\":\"chapter-72\",\"number\":72,\"title\":\"\",\"totalViews\":12,\"createdBy\":\"$53\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:27:35.344Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$54\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n56:{\"name\":\"Admin\"}\n57:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n55:{\"id\":22023,\"slug\":\"chapter-71\",\"number\":71,\"title\":\"\",\"totalViews\":16,\"createdBy\":\"$56\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:23:53.381Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$57\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n59:{\"name\":\"Admin\"}\n5a:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n58:{\"id\":22022,\"slug\":\"chapter-70\",\"number\":70,\"title\":\"\",\"totalViews\":16,\"createdBy\":\"$59\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:23:37.188Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$5a\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n5c:{\"name\":\"Admin\"}\n5d:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f"])</script>
  <script>self.__next_f.push([1, "0240-c406-48b8-817a-975f46e90be7.webp\"}\n5b:{\"id\":22021,\"slug\":\"chapter-69\",\"number\":69,\"title\":\"\",\"totalViews\":11,\"createdBy\":\"$5c\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:23:26.053Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$5d\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n5f:{\"name\":\"Admin\"}\n60:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n5e:{\"id\":22020,\"slug\":\"chapter-68\",\"number\":68,\"title\":\"\",\"totalViews\":9,\"createdBy\":\"$5f\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:23:17.943Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$60\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n62:{\"name\":\"Admin\"}\n63:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n61:{\"id\":22019,\"slug\":\"chapter-67\",\"number\":67,\"title\":\"\",\"totalViews\":10,\"createdBy\":\"$62\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:23:07.111Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$63\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n65:{\"name\":\"Admin\"}\n66:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n64:{\"id\":22018,\"slug\":\"chapter-66\",\"number\":66,\"title\":\"\",\"totalViews\":8,\"createdBy\":\"$65\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:22:55.666Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$66\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n68:{\"name\":\"Admin\"}\n69:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qisc"])</script>
  <script>self.__next_f.push([1, "ans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n67:{\"id\":22017,\"slug\":\"chapter-65\",\"number\":65,\"title\":\"\",\"totalViews\":9,\"createdBy\":\"$68\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:22:47.311Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$69\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n6b:{\"name\":\"Admin\"}\n6c:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n6a:{\"id\":22016,\"slug\":\"chapter-64\",\"number\":64,\"title\":\"\",\"totalViews\":10,\"createdBy\":\"$6b\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:22:38.617Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$6c\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n6e:{\"name\":\"Admin\"}\n6f:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n6d:{\"id\":22015,\"slug\":\"chapter-63\",\"number\":63,\"title\":\"\",\"totalViews\":10,\"createdBy\":\"$6e\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:22:25.691Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$6f\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n71:{\"name\":\"Admin\"}\n72:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n70:{\"id\":22014,\"slug\":\"chapter-62\",\"number\":62,\"title\":\"\",\"totalViews\":10,\"createdBy\":\"$71\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:22:10.066Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$72\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n74:{\"name\":\"Admin\"}\n75:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featu"])</script>
  <script>self.__next_f.push([1, "redImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n73:{\"id\":22013,\"slug\":\"chapter-61\",\"number\":61,\"title\":\"\",\"totalViews\":11,\"createdBy\":\"$74\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:21:59.775Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$75\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n77:{\"name\":\"Admin\"}\n78:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n76:{\"id\":22012,\"slug\":\"chapter-60\",\"number\":60,\"title\":\"\",\"totalViews\":12,\"createdBy\":\"$77\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:21:49.650Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$78\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n7a:{\"name\":\"Admin\"}\n7b:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n79:{\"id\":22011,\"slug\":\"chapter-59\",\"number\":59,\"title\":\"\",\"totalViews\":12,\"createdBy\":\"$7a\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:21:40.646Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$7b\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n7d:{\"name\":\"Admin\"}\n7e:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n7c:{\"id\":22010,\"slug\":\"chapter-58\",\"number\":58,\"title\":\"\",\"totalViews\":12,\"createdBy\":\"$7d\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:21:19.197Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$7e\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n80:{\"name\":\"Admin\"}\n81:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":"])</script>
  <script>self.__next_f.push([1, "\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n7f:{\"id\":22009,\"slug\":\"chapter-57\",\"number\":57,\"title\":\"\",\"totalViews\":11,\"createdBy\":\"$80\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:21:07.213Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$81\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n83:{\"name\":\"Admin\"}\n84:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n82:{\"id\":22008,\"slug\":\"chapter-56\",\"number\":56,\"title\":\"\",\"totalViews\":13,\"createdBy\":\"$83\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:20:52.881Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$84\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n86:{\"name\":\"Admin\"}\n87:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n85:{\"id\":22007,\"slug\":\"chapter-55\",\"number\":55,\"title\":\"\",\"totalViews\":12,\"createdBy\":\"$86\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:20:42.428Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$87\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n89:{\"name\":\"Admin\"}\n8a:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n88:{\"id\":22006,\"slug\":\"chapter-54\",\"number\":54,\"title\":\"\",\"totalViews\":14,\"createdBy\":\"$89\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:20:31.727Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$8a\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n8c:{\"name\":\"Admin\"}\n8d:{\"postTitle\":\""])</script>
  <script>self.__next_f.push([1, "Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n8b:{\"id\":22005,\"slug\":\"chapter-53\",\"number\":53,\"title\":\"\",\"totalViews\":12,\"createdBy\":\"$8c\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:14:57.825Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$8d\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n8f:{\"name\":\"Admin\"}\n90:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n8e:{\"id\":22004,\"slug\":\"chapter-52\",\"number\":52,\"title\":\"\",\"totalViews\":13,\"createdBy\":\"$8f\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:14:44.535Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$90\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n92:{\"name\":\"Admin\"}\n93:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n91:{\"id\":22003,\"slug\":\"chapter-51\",\"number\":51,\"title\":\"\",\"totalViews\":9,\"createdBy\":\"$92\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:14:27.209Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$93\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n95:{\"name\":\"Admin\"}\n96:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n94:{\"id\":22002,\"slug\":\"chapter-50\",\"number\":50,\"title\":\"\",\"totalViews\":10,\"createdBy\":\"$95\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:14:13.307Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$96\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n98:{\"n"])</script>
  <script>self.__next_f.push([1, "ame\":\"Admin\"}\n99:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n97:{\"id\":22001,\"slug\":\"chapter-49\",\"number\":49,\"title\":\"\",\"totalViews\":12,\"createdBy\":\"$98\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:14:00.534Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$99\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n9b:{\"name\":\"Admin\"}\n9c:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n9a:{\"id\":22000,\"slug\":\"chapter-48\",\"number\":48,\"title\":\"\",\"totalViews\":14,\"createdBy\":\"$9b\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:13:51.265Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$9c\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n9e:{\"name\":\"Admin\"}\n9f:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\n9d:{\"id\":21999,\"slug\":\"chapter-47\",\"number\":47,\"title\":\"\",\"totalViews\":12,\"createdBy\":\"$9e\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:13:40.578Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$9f\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\na1:{\"name\":\"Admin\"}\na2:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\na0:{\"id\":21998,\"slug\":\"chapter-46\",\"number\":46,\"title\":\"\",\"totalViews\":13,\"createdBy\":\"$a1\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:13:29.581Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$a2\",\"likesCount\":0,\"isLocked\":f"])</script>
  <script>self.__next_f.push([1, "alse,\"isAccessible\":true}\na4:{\"name\":\"Admin\"}\na5:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\na3:{\"id\":21997,\"slug\":\"chapter-45\",\"number\":45,\"title\":\"\",\"totalViews\":19,\"createdBy\":\"$a4\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:13:19.937Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$a5\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\na7:{\"name\":\"Admin\"}\na8:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\na6:{\"id\":21996,\"slug\":\"chapter-44\",\"number\":44,\"title\":\"\",\"totalViews\":23,\"createdBy\":\"$a7\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:13:08.568Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$a8\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\naa:{\"name\":\"Admin\"}\nab:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\na9:{\"id\":21995,\"slug\":\"chapter-43\",\"number\":43,\"title\":\"\",\"totalViews\":22,\"createdBy\":\"$aa\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:12:59.231Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$ab\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\nad:{\"name\":\"Admin\"}\nae:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\nac:{\"id\":21994,\"slug\":\"chapter-42\",\"number\":42,\"title\":\"\",\"totalViews\":22,\"createdBy\":\"$ad\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:12:48.227Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\""])</script>
  <script>self.__next_f.push([1, "$ae\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\nb0:{\"name\":\"Admin\"}\nb1:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\naf:{\"id\":21993,\"slug\":\"chapter-41\",\"number\":41,\"title\":\"\",\"totalViews\":22,\"createdBy\":\"$b0\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:12:38.170Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$b1\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\nb3:{\"name\":\"Admin\"}\nb4:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\nb2:{\"id\":21992,\"slug\":\"chapter-40\",\"number\":40,\"title\":\"\",\"totalViews\":21,\"createdBy\":\"$b3\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:12:28.455Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$b4\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\nb6:{\"name\":\"Admin\"}\nb7:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\nb5:{\"id\":21991,\"slug\":\"chapter-39\",\"number\":39,\"title\":\"\",\"totalViews\":21,\"createdBy\":\"$b6\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:12:17.904Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":\"$b7\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\nb9:{\"name\":\"Admin\"}\nba:{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}\nb8:{\"id\":21990,\"slug\":\"chapter-38\",\"number\":38,\"title\":\"\",\"totalViews\":29,\"createdBy\":\"$b9\",\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:12:07.405Z\",\"featuredImage\":\"\",\"chapt"])</script>
  <script>self.__next_f.push([1, "erStatus\":\"PUBLIC\",\"mangaPost\":\"$ba\",\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}\n24:[\"$25\",\"$28\",\"$2b\",\"$2e\",\"$31\",\"$34\",\"$37\",\"$3a\",\"$3d\",\"$40\",\"$43\",\"$46\",\"$49\",\"$4c\",\"$4f\",\"$52\",\"$55\",\"$58\",\"$5b\",\"$5e\",\"$61\",\"$64\",\"$67\",\"$6a\",\"$6d\",\"$70\",\"$73\",\"$76\",\"$79\",\"$7c\",\"$7f\",\"$82\",\"$85\",\"$88\",\"$8b\",\"$8e\",\"$91\",\"$94\",\"$97\",\"$9a\",\"$9d\",\"$a0\",\"$a3\",\"$a6\",\"$a9\",\"$ac\",\"$af\",\"$b2\",\"$b5\",\"$b8\"]\nbe:[]\nc0:{\"id\":11,\"name\":\"Reincarnation\",\"color\":\"\"}\nc1:{\"id\":5,\"name\":\"Martial Arts\",\"color\":\"\"}\nc2:{\"id\":15,\"name\":\"Shounen\",\"color\":\"\"}\nc3:{\"id\":2,\"name\":\"Action\",\"color\":\"\"}\nbf:[\"$c0\",\"$c1\",\"$c2\",\"$c3\"]\nc4:[]\nc5:{\"id\":\"cm3knr3p2000060q18dynth71\",\"name\":\"Admin\",\"image\":\"https://storage.vexmanga.com/public/upload/users/avatar/2025-06-11T21-48-03-126Z_PS-ce1Uf9uWcjUJ3TiQ8s.png\",\"banner\":\"\",\"country\":\"\",\"bio\":\"\"}\nc6:[]\nc7:{\"bookmarks\":39,\"ratings\":0,\"chapters\":87}\n"])</script>
  <script>self.__next_f.push([1, "bd:{\"id\":605,\"slug\":\"reincarnated-murim-lord\",\"postTitle\":\"Reincarnated Murim Lord\",\"postContent\":\"\u003cp\u003eRegret is the bane of old men. When aging Alliance Lord Hajin Cheon of the Grand Martial Alliance reflects on his immense legacy, he finds that he recalls little of his deeds or even the lives of his closest advisors. Stricken by a mysterious ailment, Hajin suddenly passes away only to wake up in the body of Ridan Byeok, heir to the Byeok Clan of swordsmen. The only problem is, Ridan is a well-known wastrel, the polar opposite of the virtuous and stern Hajin. Righting the wrongs of his predecessor, Hajin begins to uncover the truth behind his death…\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\",\"isNovel\":false,\"isNew\":false,\"chaptersPricing\":100,\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\",\"featuredImageCL\":\"\",\"featuredLogo\":\"\",\"seriesColor\":\"\",\"banner\":\"\",\"bannerHero\":\"\",\"bannerenabled\":false,\"postStatus\":\"PUBLIC\",\"postType\":\"SERIES\",\"postPassword\":null,\"indexPost\":true,\"indexChapters\":true,\"adsense\":true,\"enableAds\":true,\"sendMessageToDiscord\":true,\"discordRoleID\":\"\",\"createdAt\":\"2025-08-27T20:15:18.121Z\",\"updatedAt\":\"2025-09-19T21:39:09.162Z\",\"lastChapterAddedAt\":\"2025-09-16T05:40:02.776Z\",\"latestFreeChapterAdded\":null,\"latestPaidChapterAdded\":null,\"alternativeTitles\":\"Reincarnation Heavenly Demon • 환생천마 • Renascimento do Demônio Celestial • Reborn Heavenly Demon • Reincarnated Heavenly Demon • Demonio Celestial de la Reencarnación • Líder de la Alianza • Rebirth of the Heavenly Demon • Rebirth, Heavenly Demon • Reborn Heavenly Demon • Reincarnation of the Heavenly Demon • Renacido como el demonio • 転生天魔 • 還生天魔 • Demonio Celestial de la Reencarnación • Reborn as the Heavenly Demon • Rebirth of the Heavenly Demon • 還生天魔 • Reincarnation of the Heavenly Demon • Renacido como el demonio • Líder de la Alianza • 転生天魔\",\"releaseDate\":\"\",\"author\":\"JP, Younghoon Jang\",\"artist\":\"\",\"hot\":false,\"isPinned\":true,\"isEditorsPick\":true,\"seriesType\":\"MANHWA\",\"seriesStatus\":\"ONGOING\",\"publishingTeamId\":null,\"totalViews\":5620,\"userId\":\"cm3knr3p2000060q18dynth71\",\"sneakPeakImages\":null,\"commentsEnabled\":true,\"massReleased\":false,\"releaseDays\":\"$be\",\"isTodayFeatured\":false,\"isWeekFeatured\":false,\"isMonthFeatured\":false,\"isPopularToday\":false,\"autoUnlockEnabled\":false,\"autoUnlockQuantity\":null,\"autoUnlockIntervalDays\":null,\"lastAutoUnlockAt\":null,\"autoUnlockLog\":null,\"redirectUrl\":\"\",\"genres\":\"$bf\",\"team\":\"$c4\",\"chapters\":\"$24\",\"createdby\":\"$c5\",\"ratings\":\"$c6\",\"publishingTeam\":null,\"_count\":\"$c7\",\"averageRating\":10}\n"])</script>
  <script>self.__next_f.push([1, "9:[\"$\",\"div\",null,{\"children\":[\"$\",\"div\",null,{\"className\":\"relative \",\"children\":[[\"$\",\"div\",null,{\"className\":\"w-full h-full absolute overflow-hidden z-10 max-h-[300px]\",\"children\":[\"$\",\"$L1f\",null,{\"thumbnail\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}]}],[\"$\",\"div\",null,{\"className\":\"h-[300px] z-10 absolute lg:relative\",\"style\":{\"backgroundImage\":\"linear-gradient(0deg, #121212, transparent)\"}}],[\"$\",\"section\",null,{\"className\":\"lg:z-10 relative max-w-[1420px] mx-auto  z-10\",\"children\":[\"$\",\"div\",null,{\"className\":\"grid grid-cols-12 pt-3 gap-y-3 xl:px-5 text-foreground\",\"children\":[[\"$\",\"div\",null,{\"className\":\"col-span-12 lg:col-span-8 order-2 flex flex-col gap-3 lg:-translate-y-[230px] xl:ml-6 px-4 xl:px-0 lg:min-h-[700px]\",\"children\":[[\"$\",\"div\",null,{\"className\":\"hidden lg:block\",\"children\":[[\"$\",\"$L20\",null,{\"series\":{\"id\":605,\"slug\":\"reincarnated-murim-lord\",\"postTitle\":\"Reincarnated Murim Lord\",\"postContent\":\"\u003cp\u003eRegret is the bane of old men. When aging Alliance Lord Hajin Cheon of the Grand Martial Alliance reflects on his immense legacy, he finds that he recalls little of his deeds or even the lives of his closest advisors. Stricken by a mysterious ailment, Hajin suddenly passes away only to wake up in the body of Ridan Byeok, heir to the Byeok Clan of swordsmen. The only problem is, Ridan is a well-known wastrel, the polar opposite of the virtuous and stern Hajin. Righting the wrongs of his predecessor, Hajin begins to uncover the truth behind his death…\u003c/p\u003e\u003cp\u003e\u003cbr\u003e\u003c/p\u003e\",\"isNovel\":false,\"isNew\":false,\"chaptersPricing\":100,\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\",\"featuredImageCL\":\"\",\"featuredLogo\":\"\",\"seriesColor\":\"\",\"banner\":\"\",\"bannerHero\":\"\",\"bannerenabled\":false,\"postStatus\":\"PUBLIC\",\"postType\":\"SERIES\",\"postPassword\":null,\"indexPost\":true,\"indexChapters\":true,\"adsense\":true,\"enableAds\":true,\"sendMessageToDiscord\":true,\"discordRoleID\":\"\",\"createdAt\":\"2025-08-27T20:15:18.121Z\",\"updatedAt\":\"2025-09-19T21:39:09.162Z\",\"lastChapterAddedAt\":\"2025-09-16T05:40:02.776Z\",\"latestFreeChapterAdded\":null,\"latestPaidChapterAdded\":null,\"alternativeTitles\":\"Reincarnation Heavenly Demon • 환생천마 • Renascimento do Demônio Celestial • Reborn Heavenly Demon • Reincarnated Heavenly Demon • Demonio Celestial de la Reencarnación • Líder de la Alianza • Rebirth of the Heavenly Demon • Rebirth, Heavenly Demon • Reborn Heavenly Demon • Reincarnation of the Heavenly Demon • Renacido como el demonio • 転生天魔 • 還生天魔 • Demonio Celestial de la Reencarnación • Reborn as the Heavenly Demon • Rebirth of the Heavenly Demon • 還生天魔 • Reincarnation of the Heavenly Demon • Renacido como el demonio • Líder de la Alianza • 転生天魔\",\"releaseDate\":\"\",\"author\":\"JP, Younghoon Jang\",\"artist\":\"\",\"hot\":false,\"isPinned\":true,\"isEditorsPick\":true,\"seriesType\":\"MANHWA\",\"seriesStatus\":\"ONGOING\",\"publishingTeamId\":null,\"totalViews\":5620,\"userId\":\"cm3knr3p2000060q18dynth71\",\"sneakPeakImages\":null,\"commentsEnabled\":true,\"massReleased\":false,\"releaseDays\":[],\"isTodayFeatured\":false,\"isWeekFeatured\":false,\"isMonthFeatured\":false,\"isPopularToday\":false,\"autoUnlockEnabled\":false,\"autoUnlockQuantity\":null,\"autoUnlockIntervalDays\":null,\"lastAutoUnlockAt\":null,\"autoUnlockLog\":null,\"redirectUrl\":\"\",\"genres\":[{\"id\":11,\"name\":\"Reincarnation\",\"color\":\"\"},{\"id\":5,\"name\":\"Martial Arts\",\"color\":\"\"},{\"id\":15,\"name\":\"Shounen\",\"color\":\"\"},{\"id\":2,\"name\":\"Action\",\"color\":\"\"}],\"team\":[],\"chapters\":[{\"id\":23279,\"slug\":\"chapter-87\",\"number\":87,\"title\":\"\",\"totalViews\":1320,\"createdBy\":{\"name\":\"shin_sama\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-09-16T05:40:02.764Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":23278,\"slug\":\"chapter-86\",\"number\":86,\"title\":\"\",\"totalViews\":728,\"createdBy\":{\"name\":\"shin_sama\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-09-16T05:36:54.439Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":23277,\"slug\":\"chapter-85\",\"number\":85,\"title\":\"\",\"totalViews\":274,\"createdBy\":{\"name\":\"shin_sama\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-09-16T05:36:10.433Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22549,\"slug\":\"chapter-84\",\"number\":84,\"title\":\"\",\"totalViews\":113,\"createdBy\":{\"name\":\"Deadly One\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-30T13:52:56.606Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22548,\"slug\":\"chapter-83\",\"number\":83,\"title\":\"\",\"totalViews\":57,\"createdBy\":{\"name\":\"Deadly One\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-30T13:47:16.323Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22034,\"slug\":\"chapter-82\",\"number\":82,\"title\":\"\",\"totalViews\":36,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:30:34.875Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22033,\"slug\":\"chapter-81\",\"number\":81,\"title\":\"\",\"totalViews\":26,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:30:17.680Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22032,\"slug\":\"chapter-80\",\"number\":80,\"title\":\"\",\"totalViews\":18,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:29:50.621Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22031,\"slug\":\"chapter-79\",\"number\":79,\"title\":\"\",\"totalViews\":12,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:29:32.390Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22030,\"slug\":\"chapter-78\",\"number\":78,\"title\":\"\",\"totalViews\":13,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:29:17.184Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22029,\"slug\":\"chapter-77\",\"number\":77,\"title\":\"\",\"totalViews\":13,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:28:58.322Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22028,\"slug\":\"chapter-76\",\"number\":76,\"title\":\"\",\"totalViews\":16,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:28:42.299Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22027,\"slug\":\"chapter-75\",\"number\":75,\"title\":\"\",\"totalViews\":14,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:28:23.562Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22026,\"slug\":\"chapter-74\",\"number\":74,\"title\":\"\",\"totalViews\":13,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:28:08.001Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22025,\"slug\":\"chapter-73\",\"number\":73,\"title\":\"\",\"totalViews\":13,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:27:51.673Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22024,\"slug\":\"chapter-72\",\"number\":72,\"title\":\"\",\"totalViews\":12,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:27:35.344Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22023,\"slug\":\"chapter-71\",\"number\":71,\"title\":\"\",\"totalViews\":16,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:23:53.381Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22022,\"slug\":\"chapter-70\",\"number\":70,\"title\":\"\",\"totalViews\":16,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:23:37.188Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22021,\"slug\":\"chapter-69\",\"number\":69,\"title\":\"\",\"totalViews\":11,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:23:26.053Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22020,\"slug\":\"chapter-68\",\"number\":68,\"title\":\"\",\"totalViews\":9,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:23:17.943Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22019,\"slug\":\"chapter-67\",\"number\":67,\"title\":\"\",\"totalViews\":10,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:23:07.111Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22018,\"slug\":\"chapter-66\",\"number\":66,\"title\":\"\",\"totalViews\":8,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:22:55.666Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22017,\"slug\":\"chapter-65\",\"number\":65,\"title\":\"\",\"totalViews\":9,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:22:47.311Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22016,\"slug\":\"chapter-64\",\"number\":64,\"title\":\"\",\"totalViews\":10,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:22:38.617Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22015,\"slug\":\"chapter-63\",\"number\":63,\"title\":\"\",\"totalViews\":10,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:22:25.691Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22014,\"slug\":\"chapter-62\",\"number\":62,\"title\":\"\",\"totalViews\":10,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:22:10.066Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22013,\"slug\":\"chapter-61\",\"number\":61,\"title\":\"\",\"totalViews\":11,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:21:59.775Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22012,\"slug\":\"chapter-60\",\"number\":60,\"title\":\"\",\"totalViews\":12,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:21:49.650Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22011,\"slug\":\"chapter-59\",\"number\":59,\"title\":\"\",\"totalViews\":12,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:21:40.646Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22010,\"slug\":\"chapter-58\",\"number\":58,\"title\":\"\",\"totalViews\":12,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:21:19.197Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22009,\"slug\":\"chapter-57\",\"number\":57,\"title\":\"\",\"totalViews\":11,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:21:07.213Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22008,\"slug\":\"chapter-56\",\"number\":56,\"title\":\"\",\"totalViews\":13,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:20:52.881Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22007,\"slug\":\"chapter-55\",\"number\":55,\"title\":\"\",\"totalViews\":12,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:20:42.428Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22006,\"slug\":\"chapter-54\",\"number\":54,\"title\":\"\",\"totalViews\":14,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:20:31.727Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22005,\"slug\":\"chapter-53\",\"number\":53,\"title\":\"\",\"totalViews\":12,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:14:57.825Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22004,\"slug\":\"chapter-52\",\"number\":52,\"title\":\"\",\"totalViews\":13,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:14:44.535Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22003,\"slug\":\"chapter-51\",\"number\":51,\"title\":\"\",\"totalViews\":9,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:14:27.209Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22002,\"slug\":\"chapter-50\",\"number\":50,\"title\":\"\",\"totalViews\":10,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:14:13.307Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22001,\"slug\":\"chapter-49\",\"number\":49,\"title\":\"\",\"totalViews\":12,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:14:00.534Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":22000,\"slug\":\"chapter-48\",\"number\":48,\"title\":\"\",\"totalViews\":14,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:13:51.265Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":21999,\"slug\":\"chapter-47\",\"number\":47,\"title\":\"\",\"totalViews\":12,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:13:40.578Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":21998,\"slug\":\"chapter-46\",\"number\":46,\"title\":\"\",\"totalViews\":13,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:13:29.581Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":21997,\"slug\":\"chapter-45\",\"number\":45,\"title\":\"\",\"totalViews\":19,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:13:19.937Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":21996,\"slug\":\"chapter-44\",\"number\":44,\"title\":\"\",\"totalViews\":23,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:13:08.568Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":21995,\"slug\":\"chapter-43\",\"number\":43,\"title\":\"\",\"totalViews\":22,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:12:59.231Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":21994,\"slug\":\"chapter-42\",\"number\":42,\"title\":\"\",\"totalViews\":22,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:12:48.227Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":21993,\"slug\":\"chapter-41\",\"number\":41,\"title\":\"\",\"totalViews\":22,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:12:38.170Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":21992,\"slug\":\"chapter-40\",\"number\":40,\"title\":\"\",\"totalViews\":21,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:12:28.455Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":21991,\"slug\":\"chapter-39\",\"number\":39,\"title\":\"\",\"totalViews\":21,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:12:17.904Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true},{\"id\":21990,\"slug\":\"chapter-38\",\"number\":38,\"title\":\"\",\"totalViews\":29,\"createdBy\":{\"name\":\"Admin\"},\"unlockAt\":null,\"isPermanentlyLocked\":false,\"price\":0,\"mangaPostId\":605,\"createdAt\":\"2025-08-27T22:12:07.405Z\",\"featuredImage\":\"\",\"chapterStatus\":\"PUBLIC\",\"mangaPost\":{\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\",\"featuredImage\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"},\"likesCount\":0,\"isLocked\":false,\"isAccessible\":true}],\"createdby\":{\"id\":\"cm3knr3p2000060q18dynth71\",\"name\":\"Admin\",\"image\":\"https://storage.vexmanga.com/public/upload/users/avatar/2025-06-11T21-48-03-126Z_PS-ce1Uf9uWcjUJ3TiQ8s.png\",\"banner\":\"\",\"country\":\"\",\"bio\":\"\"},\"ratings\":[],\"publishingTeam\":null,\"_count\":{\"bookmarks\":39,\"ratings\":0,\"chapters\":87},\"averageRating\":10}}],[\"$\",\"div\",null,{\"className\":\"flex items-center space-x-3 mt-3\",\"children\":[[\"$\",\"$L21\",null,{\"href\":\"/series/reincarnated-murim-lord/chapter-1\",\"children\":[\"$\",\"button\",null,{\"className\":\"inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-opacity-80 h-10 px-4 py-2 rounded-[5px] bg-gradient-to-r from-[#FF7700] to-[#FF5614]\",\"children\":[[\"$\",\"svg\",null,{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":24,\"height\":24,\"viewBox\":\"0 0 24 24\",\"fill\":\"none\",\"stroke\":\"currentColor\",\"strokeWidth\":2,\"strokeLinecap\":\"round\",\"strokeLinejoin\":\"round\",\"className\":\"lucide lucide-play w-4 h-4 mr-2\",\"aria-hidden\":\"true\",\"children\":[[\"$\",\"polygon\",\"1oa8hb\",{\"points\":\"6 3 20 12 6 21 6 3\"}],\"$undefined\"]}],\"Start Reading\"]}]}],[\"$\",\"$L22\",null,{\"title\":\"Reincarnated Murim Lord\"}],false,\"$undefined\"]}]]}],[\"$\",\"$L23\",null,{\"series_id\":605,\"series_type\":\"Comic\",\"initialChapters\":\"$24\",\"totalChapterCount\":87,\"thumbnail\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\"}]]}],[\"$\",\"div\",null,{\"className\":\"col-span-12 lg:col-span-4  order-1 lg:min-h-[700px]\",\"children\":[\"$\",\"div\",null,{\"className\":\"sticky top-0 flex flex-col items-center justify-start gap-y-2 w-full lg:-translate-y-[230px] px-4\",\"children\":[[\"$\",\"$L1d\",null,{\"alt\":\"Reincarnated Murim Lord\",\"width\":500,\"height\":500,\"src\":\"https://storage.qiscans.com/upload/2025/08/27/f27f0240-c406-48b8-817a-975f46e90be7.webp\",\"className\":\"bg-muted/40 w-full full xl:h-[473px] xl:w-[473px] rounded-[6px] aspect-square object-cover object-top\"}],[\"$\",\"div\",null,{\"className\":\"space-y-2  rounded  w-full flex flex-col-reverse gap-2 lg:flex-col\",\"children\":[[\"$\",\"div\",null,{\"className\":\"space-y-2\",\"children\":[[\"$\",\"$Lbb\",null,{\"series_id\":605}],[\"$\",\"$Lbc\",null,{\"data\":{\"hasBookmarked\":false,\"series_slug\":\"reincarnated-murim-lord\",\"series_id\":605}}]]}],[\"$\",\"div\",null,{\"className\":\"flex flex-wrap gap-1\",\"children\":[[\"$\",\"$L21\",\"11\",{\"href\":\"/series?tag=reincarnation\",\"children\":[\"$\",\"span\",null,{\"className\":\"rounded-none text-[14px] py-2 px-3 bg-[#212121] text-white\",\"children\":\"Reincarnation\"}]}],[\"$\",\"$L21\",\"5\",{\"href\":\"/series?tag=martial arts\",\"children\":[\"$\",\"span\",null,{\"className\":\"rounded-none text-[14px] py-2 px-3 bg-[#212121] text-white\",\"children\":\"Martial Arts\"}]}],[\"$\",\"$L21\",\"15\",{\"href\":\"/series?tag=shounen\",\"children\":[\"$\",\"span\",null,{\"className\":\"rounded-none text-[14px] py-2 px-3 bg-[#212121] text-white\",\"children\":\"Shounen\"}]}],[\"$\",\"$L21\",\"2\",{\"href\":\"/series?tag=action\",\"children\":[\"$\",\"span\",null,{\"className\":\"rounded-none text-[14px] py-2 px-3 bg-[#212121] text-white\",\"children\":\"Action\"}]}]]}],false,[\"$\",\"div\",null,{\"className\":\"lg:hidden\",\"children\":[[\"$\",\"$L20\",null,{\"series\":\"$bd\"}],[\"$\",\"div\",null,{\"className\":\"flex items-center justify-center gap-3 mt-3 w-full\",\"children\":[[\"$\",\"$L21\",null,{\"href\":\"/series/reincarnated-murim-lord/chapter-1\",\"className\":\"w-1/2\",\"children\":[\"$\",\"button\",null,{\"className\":\"inline-flex items-center justify-center whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 bg-primary text-primary-foreground hover:bg-opacity-80 h-10 px-4 py-2 rounded-[5px] bg-gradient-to-r from-[#FF7700] to-[#FF5614] w-full\",\"children\":[[\"$\",\"svg\",null,{\"xmlns\":\"http://www.w3.org/2000/svg\",\"width\":24,\"height\":24,\"viewBox\":\"0 0 24 24\",\"fill\":\"none\",\"stroke\":\"currentColor\",\"strokeWidth\":2,\"strokeLinecap\":\"round\",\"strokeLinejoin\":\"round\",\"className\":\"lucide lucide-play w-4 h-4 mr-2\",\"aria-hidden\":\"true\",\"children\":[[\"$\",\"polygon\",\"1oa8hb\",{\"points\":\"6 3 20 12 6 21 6 3\"}],\"$undefined\"]}],\"Start Reading\"]}]}],[\"$\",\"div\",null,{\"className\":\"w-1/2\",\"children\":[\"$\",\"$L22\",null,{\"title\":\"Reincarnated Murim Lord\"}]}]]}],[\"$\",\"div\",null,{\"className\":\"flex items-center justify-between gap-3 mt-3\",\"children\":[false,\"$undefined\"]}]]}]]}]]}]}],[\"$\",\"div\",null,{\"className\":\"col-span-12 order-last w-full\",\"children\":[\"$\",\"div\",null,{\"className\":\"lg:-mt-48\",\"children\":[[\"$\",\"div\",null,{\"className\":\"w-full bg-secondary text-white py-8 xl:px-8 px-4 my-4\",\"children\":[[\"$\",\"h2\",null,{\"className\":\"xl:text-[32px] text-[20px] font-bold mb-6\",\"children\":[\"If you enjoyed\",\" \",[\"$\",\"span\",null,{\"className\":\"font-bold\",\"children\":\"Reincarnated Murim Lord\"}]]}],[\"$\",\"$Lc8\",null,{\"series\":[{\"id\":212,\"slug\":\"defective-reincarnator-becomes-the-ultimate-teacher\",\"postTitle\":\"Defective Reincarnator Becomes the Ultimate Teacher\",\"featuredImage\":\"https://storage.aurorascans.com/public/upload/2025/05/18/dd8b6a1f-8fb5-4dd2-afb0-a1f6af7e7016.webp\",\"genres\":[{\"id\":8,\"name\":\"Comedy\",\"color\":\"\"},{\"id\":5,\"name\":\"Martial Arts\",\"color\":\"\"},{\"id\":15,\"name\":\"Shounen\",\"color\":\"\"},{\"id\":3,\"name\":\"Fantasy\",\"color\":\"\"},{\"id\":2,\"name\":\"Action\",\"color\":\"\"}],\"similarityScore\":0.75},{\"id\":122,\"slug\":\"unrivaled-spear-demon\",\"postTitle\":\"Unrivaled Spear Demon\",\"featuredImage\":\"https://storage.quantumscans.org/upload/2025/06/13/1d14b96b-fd9b-43be-bfb5-a2db78963e1a.webp\",\"genres\":[{\"id\":1,\"name\":\"Historical\",\"color\":\"\"},{\"id\":5,\"name\":\"Martial Arts\",\"color\":\"\"},{\"id\":3,\"name\":\"Fantasy\",\"color\":\"\"},{\"id\":6,\"name\":\"Seinen\",\"color\":\"\"},{\"id\":2,\"name\":\"Action\",\"color\":\"\"},{\"id\":4,\"name\":\"Drama\",\"color\":\"\"}],\"similarityScore\":0.5},{\"id\":37,\"slug\":\"the-unparalleled-hidden-rank-equipment\",\"postTitle\":\"The Unparalleled Hidden Rank Equipment\",\"featuredImage\":\"https://media.quantumscans.org/file/13VSBnk1m/flqmr6qa7jeqb8w3wknhszi6.webp\",\"genres\":[{\"id\":7,\"name\":\"Adventure\",\"color\":\"\"},{\"id\":15,\"name\":\"Shounen\",\"color\":\"\"},{\"id\":3,\"name\":\"Fantasy\",\"color\":\"\"},{\"id\":2,\"name\":\"Action\",\"color\":\"\"}],\"similarityScore\":0.5},{\"id\":155,\"slug\":\"war-of-the-corpses\",\"postTitle\":\"War Of The Corpses\",\"featuredImage\":\"https://storage.aurorascans.com/public/upload/2025/03/28/47eb7e58-a370-4b45-89ce-e89546d445db.webp\",\"genres\":[{\"id\":18,\"name\":\"Supernatural\",\"color\":\"\"},{\"id\":3,\"name\":\"Fantasy\",\"color\":\"\"},{\"id\":6,\"name\":\"Seinen\",\"color\":\"\"},{\"id\":2,\"name\":\"Action\",\"color\":\"\"},{\"id\":4,\"name\":\"Drama\",\"color\":\"\"}],\"similarityScore\":0.25},{\"id\":17,\"slug\":\"the-archmages-restaurant\",\"postTitle\":\"The Archmage's Restaurant\",\"featuredImage\":\"https://media.quantumscans.org/file/13VSBnk1m/vr4nxtutydq1feyt6xp420r7.webp\",\"genres\":[{\"id\":9,\"name\":\"Slice of Life\",\"color\":\"\"},{\"id\":8,\"name\":\"Comedy\",\"color\":\"\"},{\"id\":7,\"name\":\"Adventure\",\"color\":\"\"},{\"id\":3,\"name\":\"Fantasy\",\"color\":\"\"},{\"id\":2,\"name\":\"Action\",\"color\":\"\"}],\"similarityScore\":0.25},{\"id\":98,\"slug\":\"i-became-the-bastard-genius-of-the-noble-dark-clan\",\"postTitle\":\"I Became The Bastard Genius Of The Noble Dark Clan \",\"featuredImage\":\"https://media.quantumscans.org/file/13VSBnk1m/u7zjhs818pdhv7zro5g74epf.webp\",\"genres\":[{\"id\":18,\"name\":\"Supernatural\",\"color\":\"\"},{\"id\":7,\"name\":\"Adventure\",\"color\":\"\"},{\"id\":3,\"name\":\"Fantasy\",\"color\":\"\"},{\"id\":2,\"name\":\"Action\",\"color\":\"\"},{\"id\":4,\"name\":\"Drama\",\"color\":\"\"}],\"similarityScore\":0.25},{\"id\":43,\"slug\":\"the-strongest-tamer-returned-from-another-world-with-his-childhood-friend-as-his-familiar\",\"postTitle\":\"The Strongest Tamer Returned from Another World with his Childhood Friend as his Familiar\",\"featuredImage\":\"https://media.quantumscans.org/file/13VSBnk1m/vrvc5w2e9j6zbq8ec4ak4oi8.webp\",\"genres\":[{\"id\":19,\"name\":\"Romance\",\"color\":\"\"},{\"id\":7,\"name\":\"Adventure\",\"color\":\"\"},{\"id\":3,\"name\":\"Fantasy\",\"color\":\"\"},{\"id\":2,\"name\":\"Action\",\"color\":\"\"},{\"id\":4,\"name\":\"Drama\",\"color\":\"\"}],\"similarityScore\":0.25},{\"id\":107,\"slug\":\"me-im-the-strongest-forbidden-spellcaster-in-history\",\"postTitle\":\"Me! I'm The Strongest Forbidden Spellcaster in History!\",\"featuredImage\":\"https://media.quantumscans.org/file/13VSBnk1m/dqmo9lzlg168vgvauegofxmw.jpg\",\"genres\":[{\"id\":18,\"name\":\"Supernatural\",\"color\":\"\"},{\"id\":8,\"name\":\"Comedy\",\"color\":\"\"},{\"id\":3,\"name\":\"Fantasy\",\"color\":\"\"},{\"id\":2,\"name\":\"Action\",\"color\":\"\"}],\"similarityScore\":0.25},{\"id\":102,\"slug\":\"the-returned-c-rank-tank-wont-die\",\"postTitle\":\"The Returned C-Rank Tank Won't Die!\",\"featuredImage\":\"https://media.quantumscans.org/file/13VSBnk1m/xbqz8e1i8elj0601lt4319nz.webp\",\"genres\":[{\"id\":14,\"name\":\"Psychological\",\"color\":\"\"},{\"id\":7,\"name\":\"Adventure\",\"color\":\"\"},{\"id\":3,\"name\":\"Fantasy\",\"color\":\"\"},{\"id\":2,\"name\":\"Action\",\"color\":\"\"},{\"id\":4,\"name\":\"Drama\",\"color\":\"\"}],\"similarityScore\":0.25},{\"id\":111,\"slug\":\"lv-99-burning-flame-princess\",\"postTitle\":\"Lv.99 Burning Flame Princess\",\"featuredImage\":\"https://media.quantumscans.org/file/13VSBnk1m/ct8ybc8bhdi3azx81azj1zg3.jpg\",\"genres\":[{\"id\":18,\"name\":\"Supernatural\",\"color\":\"\"},{\"id\":19,\"name\":\"Romance\",\"color\":\"\"},{\"id\":20,\"name\":\"Josei\",\"color\":\"\"},{\"id\":7,\"name\":\"Adventure\",\"color\":\"\"},{\"id\":3,\"name\":\"Fantasy\",\"color\":\"\"},{\"id\":2,\"name\":\"Action\",\"color\":\"\"},{\"id\":4,\"name\":\"Drama\",\"color\":\"\"}],\"similarityScore\":0.25}]}]]}],[\"$\",\"$Lc9\",null,{\"type\":\"multiple\",\"defaultValue\":[\"reviews\"],\"className\":\"w-full gap-2 flex flex-col\",\"children\":[[\"$\",\"$Lca\",null,{\"value\":\"reviews\",\"className\":\"border-0 bg-[#212121] rounded-none\",\"children\":[[\"$\",\"$Lcb\",null,{\"className\":\"px-8 py-4 text-white flex justify-between items-center\",\"children\":[\"$\",\"span\",null,{\"className\":\"text-xl font-semibold pt-4\",\"children\":\"Reviews\"}]}],[\"$\",\"$Lcc\",null,{\"className\":\"bg-[#212121] text-center border border-dashed border-gray-500\",\"children\":[\"$\",\"$Lcd\",null,{\"series_id\":605}]}]]}],[\"$\",\"$Lca\",null,{\"value\":\"comments\",\"className\":\"border-0 bg-[#212121] rounded-none\",\"children\":[[\"$\",\"$Lcb\",null,{\"className\":\"px-8 py-4 text-white flex justify-between items-center\",\"children\":[\"$\",\"span\",null,{\"className\":\"text-xl font-semibold pt-4\",\"children\":\"Comments\"}]}],[\"$\",\"$Lcc\",null,{\"className\":\"p-8 bg-[#212121] text-center border border-dashed border-gray-500 m-4\",\"children\":[[\"$\",\"$Lce\",null,{\"post\":{\"id\":\"605\",\"postTitle\":\"Reincarnated Murim Lord\",\"slug\":\"reincarnated-murim-lord\"}}],\" \"]}]]}]]}]]}]}],\" \"]}]}]]}]}]\n"])</script>
  <script src="https://www.googletagmanager.com/gtag/js?id=G-3NN66WSFQK" data-nscript="afterInteractive"></script>
  <script id="google-analytics" data-nscript="afterInteractive">
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());

    gtag('config', 'G-3NN66WSFQK');
  </script><next-route-announcer style="position: absolute;"></next-route-announcer>
</body>

</html>
