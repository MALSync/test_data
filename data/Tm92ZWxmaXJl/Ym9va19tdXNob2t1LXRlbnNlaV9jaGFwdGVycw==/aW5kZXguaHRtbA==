<!DOCTYPE html><html lang="en" theme="dark" bgcolor="black" hgcolor="purple"><head>
        <meta charset="utf-8"><title>Mushoku Tensei Novel Chapters - Novel Fire</title><meta name="description" content="List of the most recent chapters published for the Mushoku Tensei novel. A total of 285 chapters have been translated and the last update in the novel is Holy Night Chaos Breaker (2019 Xmas SS)"><meta name="copyright" content="Copyright © Novel Fire"><meta name="author" content="Novel Fire"><meta name="robots" content="index,follow"><meta http-equiv="X-UA-Compatible" content="IE=edge"><meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1"><meta property="og:site_name" content="Novel Fire"><meta property="og:type" content="website"><meta property="og:url" content="http://novelfire.net/book/mushoku-tensei/chapters"><meta property="og:title" content="Mushoku Tensei Novel Chapters - Novel Fire"><meta property="og:description" content="List of the most recent chapters published for the Mushoku Tensei novel. A total of 285 chapters have been translated and the last update in the novel is Holy Night Chaos Breaker (2019 Xmas SS)"><meta property="og:image" content="https://novelfire.net/server-1/mushoku-tensei.jpg"><meta property="og:locale" content="en_US"><meta name="twitter:card" content="summary"><meta name="twitter:url" content="http://novelfire.net/book/mushoku-tensei/chapters"><meta name="twitter:title" content="Mushoku Tensei Novel Chapters - Novel Fire"><meta name="twitter:description" content="List of the most recent chapters published for the Mushoku Tensei novel. A total of 285 chapters have been translated and the last update in the novel is Holy Night Chaos Breaker (2019 Xmas SS)"><meta name="twitter:image" content="https://novelfire.net/server-1/mushoku-tensei.jpg"><meta name="twitter:creator" content="Novel Fire"><meta name="csrf-token" content="veRCxFU339ssW1qUol53lyyTxrACgT0diN5j7ldL"><link rel="canonical" href="https://novelfire.net/book/mushoku-tensei/chapters"><link rel="manifest" href="https://novelfire.net/pwa-manifest.json?v=4.1.7"><link rel="shortcut icon" href="https://novelfire.net/logo.ico?v=2"><link rel="apple-touch-icon" href="https://novelfire.net/apple-touch-icon.png?v=2"><link rel="preconnect" href="//fonts.gstatic.com" crossorigin=""><link rel="preconnect" href="//fonts.googleapis.com" crossorigin=""><link rel="stylesheet" as="style" href="https://fonts.googleapis.com/css?family=Roboto:400,500,600,700|Nunito+Sans:400,500,600,700&amp;display=swap" crossorigin="" onload="this.rel='stylesheet'">
        <noscript><link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:400,500,600,700|Nunito+Sans:400,500,600,700&display=swap"></noscript>
        <script type="application/ld+json">{ "@context":"https://schema.org/","@type" : "Organization", "name":"Novel Fire", "url":"https://novelfire.net", "slogan": "Novel Fire - Read Web Novels Online Free", "logo": "https://novelfire.net/logo.svg" }</script>
            <script type="application/ld+json">{ "@context":"https://schema.org/","@type" :"BreadcrumbList",
       "itemListElement":[
                            [{"@type":"ListItem","position":1,"name":"Novel","item":"https://novelfire.net/home"}],
                            [{"@type":"ListItem","position":2,"name":"Mushoku Tensei","item":"https://novelfire.net/book/mushoku-tensei"}],
                            [{"@type":"ListItem","position":3,"name":"Mushoku Tensei Novel Chapters","item":"https://novelfire.net/book/mushoku-tensei/chapters"}]
                         ] }</script>
        <link rel="stylesheet" type="text/css" href="https://novelfire.net/frontend/css/navbar.min.css?ver=4.1.7"><link rel="stylesheet" type="text/css" href="https://novelfire.net/frontend/css/media-mobile.min.css?ver=4.1.7"><link rel="stylesheet" type="text/css" media="screen and (min-width: 768px)" href="https://novelfire.net/frontend/css/media-768.min.css?ver=4.1.7"><link rel="stylesheet" type="text/css" media="screen and (min-width: 1024px)" href="https://novelfire.net/frontend/css/media-1024.min.css?ver=4.1.7"><link rel="stylesheet" type="text/css" media="screen and (min-width: 1270px)" href="https://novelfire.net/frontend/css/media-1270.min.css?ver=4.1.7"><link rel="stylesheet" type="text/css" href="https://novelfire.net/frontend/css/fontello.css?ver=4.1.7">
            <link rel="stylesheet" type="text/css" href="https://novelfire.net/frontend/css/novel.chapter-review.min.css?ver=4.1.7">
    <link rel="stylesheet" type="text/css" href="https://novelfire.net/frontend/css/pagedlist.css?ver=4.1.7">
        <link rel="stylesheet" href="https://novelfire.net/frontend/css/style.min.css?ver=4.1.7" type="text/css" media="all">
            <style>.\[\&_\.gdprAdTransparencyCogWheelButton\]\:\!pjra-z-\[5\],
AD-SLOT,
DFP-AD,
[class^="adDisplay-module"],
[class^="amp-ad-"],
[data-ad-cls],
[data-adbridg-ad-class],
[data-adshim],
[data-asg-ins],
[data-block-type="ad"],
[data-cl-spot-id],
[data-css-class="dfp-inarticle"],
[data-d-ad-id],
[data-desktop-ad-id],
[data-dynamic-ads],
[data-ez-name],
[data-freestar-ad][id],
[data-id^="div-gpt-ad"],
[data-identity="adhesive-ad"],
[data-m-ad-id],
[data-mobile-ad-id],
[data-rc-widget],
[data-role="tile-ads-module"],
[data-template-type="nativead"],
[data-testid="adBanner-wrapper"],
[data-testid="ad_testID"],
[data-testid="prism-ad-wrapper"],
[data-testid^="section-AdRowBillboard"],
[data-type="ad-vertical"],
[data-wpas-zoneid],
[href$="/sexdating.php"],
[id^="ad-wrap-"],
[id^="ad_sky"],
[id^="ad_slider"],
[id^="section-ad-banner"],
[onclick^="location.href='https://1337x.vpnonly.site/"],
a-ad,
a[data-href^="http://ads.trafficjunky.net/"],
a[data-url^="https://vulpix.bet/?ref="],
a[onclick^="window.location.replace('https://random-affiliate.atimaze.com/"],
a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
ad-shield-ads,
ad-slot,
app-ad,
app-advertisement,
app-large-ad,
aside[id^="adrotate_widgets-"],
atf-ad-slot,
bottomadblock,
display-ad-component,
display-ads,
div[class$="-adlabel"],
div[class^="Adstyled__AdWrapper-"],
div[data-ad-placeholder],
div[data-ad-region],
div[data-ad-wrapper],
div[data-adname],
div[data-adunit-path],
div[data-adunit],
div[data-adzone],
div[data-alias="300x250 Ad 1"],
div[data-alias="300x250 Ad 2"],
div[data-contentexchange-widget],
div[data-dfp-id],
div[data-id-advertdfpconf],
div[id^="ad-div-"],
div[id^="ad-position-"],
div[id^="adngin-"],
div[id^="adrotate_widgets-"],
div[id^="adspot-"],
div[id^="crt-"][style],
div[id^="div-ads-"],
div[id^="google_dfp_"],
div[id^="gpt_ad_"],
div[id^="lazyad-"],
div[id^="optidigital-adslot"],
div[id^="rc-widget-"],
div[id^="st"][style^="z-index: 999999999;"],
div[id^="sticky_ad_"],
div[id^="vuukle-ad-"],
div[ow-ad-unit-wrapper],
gpt-ad,
guj-ad,
hl-adsense,
img[src^="https://images.purevpnaffiliates.com"],
img[src^="https://s-img.adskeeper.com/"],
ps-connatix-module,
span[data-ez-ph-id],
span[id^="ezoic-pub-ad-placeholder-"],
topadblock,
zeus-ad,
broadstreet-zone-container,
iframe[scrolling="no"][sandbox*="allow-popups allow-modals"][style^="width: 100%; height: 100%; border: none;"],
[class^="tile-picker__CitrusBannerContainer-sc-"],
citrus-ad-wrapper,
div[id*="MarketGid"],
[onclick*="content.ad/"],
AMP-AD,
amp-ad,
amp-ad-custom,
amp-connatix-player,
amp-fx-flying-carpet,
a[data-oburl^="https://paid.outbrain.com/network/redir?"],
a[data-redirect^="https://paid.outbrain.com/network/redir?"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"] + .ob_source,
[data-taboola-options],
[data-testid="commercial-label-taboola"],
[data-testid^="taboola-"],
amp-embed[type="taboola"],
div[id^="taboola-stream-"],
div[id^="zergnet-widget"],
html[lang] > body.ishome > div.adult + main.main,
html[lang] > body:not([class]):not([id]):not([style]) > div.background-container > div.container > div.captcha-box,
html[lang] > body.startnew > div#sections > section#section_uname,
html[lang] > body:not([style]) > div.captchaBody,
html[lang] > body#body > * > div.cv-xwrapper > div.cvc > div.cv-inner,
html[lang] > body#body > * > div.cvh.BlockClicksActivityBusy,
html#html[sti][vic][lang] > body#allbody,
html > body > div.container.m-p > #checkbox-window.checkbox-window,
html[lang] > body:not([class]):not([id]):not([style]) > div.container > div.recaptcha-box,
body > .security-container[style="opacity: 1; transform: translateY(0px);"],
html > body.hold-transition.theme-primary.bg-img[style^="background-image"][style*="wallpaperaccess.com"][style*="background-repeat"][style*="background-size"],
html > body > div.container > form#unsubscribe-form[onsubmit="submitUnsubscribeForm(event)"],
html > body > div.content > dl > dd.dd1 > div.min_sider > form#form1[action="unsubscribe.php"],
html > body.body > div.container > div.content > form > table.optoutForm,
div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
div[class$="player-promo-col"],
div#spot-holder.spot-holder[style="display: block;"],
a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
[data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
[data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
[data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
a[onclick="openAuc();"],
div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
div[style^="position: fixed; inset: 0px; z-index: 2147483647; background: black; opacity: 0.01"],
iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
#player div[style$="cursor: pointer; position: absolute; width: 100%; height: 100%; padding: 1rem; z-index: 2147483647;"],
html[lang][style^="--main-bg-color"] > body:not([class]):not([id]) > div#container[style="visibility: visible;"] > div#banner[style="opacity:0"] ~ main:not([class]):not([id]) > div#message,
[onclick*="postlnk.com"],
[data-lnguri*="vipbox"],
[class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]) { display: none !important; }

.nf-ads,
[data-ad-name],
[data-revive-zoneid],
[name^="google_ads_iframe"],
div[aria-label="Ads"],
div[data-ad-targeting],
div[id^="ad_position_"],
div[id^="dfp-ad-"],
div[id^="ezoic-pub-ad-"],
ins.adsbygoogle[data-ad-client],
ins.adsbygoogle[data-ad-slot],
[class^="s2nPlayer"],
div[id*="ScriptRoot"],
a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"],
div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
[id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
div[style^="height:    250px; width:    300px;"],
div[style^="width:    160px; height:    600px; margin: 0px auto; min-width: 160px; min-height: 600px;"],
div[style^="width:    300px; height:    250px;"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2502032353000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2507172035000"],
html[class^="img_"][amp4ads=""][i-amphtml-layout=""][i-amphtml-no-boilerplate=""][amp-version="2509031727000"],
img[height="   250"][width="   300"],
img[height="   90"][width="   728"],
ins[style$="height:    90px; width:    728px;"],
*:not(body) > a[href^="https://content-loader.com/"],
*:not(body) > a[href^="https://html-load.com/"],
*:not(body) > a[href^="https://07c225f3.online/"] { display: none !important; }</style><style>.ad.addon,
.ad.bottomrect,
.ad.box,
.ad.brandboard,
.ad.card,
.ad.center,
.ad.contentboard,
.ad.desktop-970x250,
.ad.element,
.ad.floater-link,
.ad.gallery,
.ad.halfpage,
.ad.inner,
.ad.item,
.ad.leaderboard,
.ad.maxiboard,
.ad.maxisky,
.ad.middlerect,
.ad.module,
.ad.monsterboard,
.ad.netboard,
.ad.post-area,
.ad.promotion,
.ad.rectangle,
.ad.rectangle_2,
.ad.rectangle_3,
.ad.rectangle_home_1,
.ad.section,
.ad.sidebar-module,
.ad.size-300x250,
.ad.skybridgeleft,
.ad.small-mpu,
.ad.small-teaser,
.ad.super,
.ad.wideboard_tablet,
.ad.reform-top,
.ads.bottom,
.ads.box,
.ads.cell,
.ads.cta,
.ads.grid-layout,
.ads.square,
.ads.top,
.ads.widget,
.ad-unit:not(.text-ad):not(.textads):not([style^="width: 1px; height: 1px; position: absolute;"]),
.advertisement.leaderboard,
.advertisement.rectangle,
.advertisement.under-article,
[href="https://ourgoldguy.com/contact/"] img,
a[href^="https://service.bv-aff-trx.com/"],
a[href^="https://ads.betfair.com/redirect.aspx?"],
[href*="postlnk.com"],
[href*="passtechusa.com"] { display: none !important; }</style></head>
    <body class="fade-out">
        <header class="main-header skiptranslate">
            <div class="wrapper">
                <div class="nav-logo"><a title="Novel Fire - Read Web Novels Online Free" href="https://novelfire.net/home"><img src="https://novelfire.net/logo.svg?v=2" alt="Novel Fire"></a></div>
                <div class="navigation-bar">
                    <nav><span class="lnw-slog fs-14">Your fictional stories hub.</span><ul class="navbar-menu"><li class="nav-item"><a title="Search Novels" href="https://novelfire.net/search" class="nav-link"><i class="icon-search"></i> Search</a></li><li class="nav-item"><a title="Explore The Recently Added Novels" href="https://novelfire.net/genre-all/sort-new/status-all/all-novel" class="nav-link"><i class="icon-th-large"></i> Browse</a></li><li class="nav-item"><a title="Novel Ranking" href="https://novelfire.net/ranking" class="nav-link"><i class="icon-diamond"></i> Ranking</a></li><li class="nav-item"><a title="Check out the recently added novel chapters" href="https://novelfire.net/latest-release-novels" class="nav-link"><i class="icon-book-open"></i> Updates</a></li><li class="nav-item"><a title="Random Novel" href="https://novelfire.net/random-novel" class="nav-link"><i class="icon-arrows-cw"></i> Random</a></li><li class="nav-item"><a title="Member List" href="https://novelfire.net/user/member-list" class="nav-link"><i><svg xmlns="http://www.w3.org/2000/svg" width="16" height="20" fill="currentColor" viewBox="0 0 640 512"><path d="M96 224c35.3 0 64-28.7 64-64s-28.7-64-64-64-64 28.7-64 64 28.7 64 64 64zm448 0c35.3 0 64-28.7 64-64s-28.7-64-64-64-64 28.7-64 64 28.7 64 64 64zm32 32h-64c-17.6 0-33.5 7.1-45.1 18.6 40.3 22.1 68.9 62 75.1 109.4h66c17.7 0 32-14.3 32-32v-32c0-35.3-28.7-64-64-64zm-256 0c61.9 0 112-50.1 112-112S381.9 32 320 32 208 82.1 208 144s50.1 112 112 112zm76.8 32h-8.3c-20.8 10-43.9 16-68.5 16s-47.6-6-68.5-16h-8.3C179.6 288 128 339.6 128 403.2V432c0 26.5 21.5 48 48 48h288c26.5 0 48-21.5 48-48v-28.8c0-63.6-51.6-115.2-115.2-115.2zm-223.7-13.4C161.5 263.1 145.6 256 128 256H64c-35.3 0-64 28.7-64 64v32c0 17.7 14.3 32 32 32h65.9c6.3-47.4 34.9-87.3 75.2-109.4z"></path></svg></i> Members</a></li><li class="nav-item"><a title="Search Novels with Advanced Filtering Function" href="https://novelfire.net/search-adv" class="nav-link"><i class="icon-filter"></i> Filter</a></li><li class="nav-item"><a class="nightmode_switch" data-tool="night" title="Dark Mode" data-night="0" data-content="Light Theme"><i class="icon-sun"></i></a></li></ul></nav>
                    <div class="login-wrap-nav">
                                                    <a class="nav-link login button" href="#modal" data-close-menu-mobile="1">Login</a>
                                            </div>
                </div>
                <div class="nav-back"></div><button id="mobile-menu-btn"><div id="burger-btn"></div></button><span class="nav notify-bell mobile-block icon-bell-alt"></span>
            </div>
        </header>
        <div class="sidebar-wrapper"></div><main role="main">    <div class="navbar-breadcrumb">
        <div class="breadcrumb show-dots container">
            <a title="Novel Fire - Read Web Novels Online Free" href="https://novelfire.net/home"><svg class="svg-home" height="20" viewBox="0 0 24 24" width="20"><path d="M0 0h24v24H0z" fill="none"></path><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z"></path></svg> Novel</a>
            <svg width="10" height="10" fill="currentColor" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"></path></svg>
            <a title="Mushoku Tensei" href="https://novelfire.net/book/mushoku-tensei">Mushoku Tensei</a>
            <svg width="10" height="10" fill="currentColor" viewBox="0 0 16 16"><path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708z"></path></svg>
            <a title="Mushoku Tensei Novel Chapters" href="https://novelfire.net/book/mushoku-tensei/chapters">Chapters</a>
        </div>
    </div>
    <article id="chapter-list-page">
        <header class="container">
            <div class="novel-item">
                <div class="cover-wrap">
                    <a title="Mushoku Tensei" href="https://novelfire.net/book/mushoku-tensei">
                        <figure class="novel-cover">
                            <img src="https://novelfire.net/server-1/mushoku-tensei.jpg" alt="Mushoku Tensei">
                        </figure>
                    </a>
                </div>
                <div class="item-body">
                    <h1>
                        <a class="text2row" title="Mushoku Tensei" href="https://novelfire.net/book/mushoku-tensei">Mushoku Tensei</a>
                    </h1>
                    <div class="novel-stats">
                        <span>Updated <time datetime="2023-10-30 00:12">1 year ago</time></span>
                    </div>
                    <div class="novel-stats">
                        Status:  <strong class="status">Completed</strong>                     </div>
                </div>
            </div>
            <span class="divider"></span>
            <h2>Mushoku Tensei Novel Chapters </h2>
            <p>List of most recent chapters published for the Mushoku Tensei novel. A total of 285 chapters have been translated and the release date of the last chapter is Oct 30, 2023</p>
            <p>Latest Release: <a href="https://novelfire.net/book/mushoku-tensei/chapter-285" title="Holy Night Chaos Breaker (2019 Xmas SS)">Holy Night Chaos Breaker (2019 Xmas SS)</a></p>
        </header>
        <div class="novel-body container">
            <section id="info">
                <div id="chpagedlist" class="mb-5">
                    <div class="filters">
                        <div id="gotochap">
                            <input id="gotochapno" class="n-page" name="chapno" type="number" min="1" max="285" placeholder="Enter Chapter No">
                            <input class="button go-page px-4 pointer" type="button" value="Go">
                        </div>
                        <div class="pagenav">
                            <div class="pagination-container"><nav>
        <ul class="pagination">
            
                            <li class="page-item disabled" aria-disabled="true" aria-label="« Previous">
                    <span class="page-link" aria-hidden="true">‹</span>
                </li>
            
            
                            
                
                
                                                                                        <li class="page-item active" aria-current="page"><span class="page-link">1</span></li>
                                                                                                <li class="page-item"><a class="page-link" href="https://novelfire.net/book/mushoku-tensei/chapters?page=2">2</a></li>
                                                                                                <li class="page-item"><a class="page-link" href="https://novelfire.net/book/mushoku-tensei/chapters?page=3">3</a></li>
                                                                        
            
                            <li class="page-item">
                    <a class="page-link" href="https://novelfire.net/book/mushoku-tensei/chapters?page=2" rel="next" aria-label="Next »">›</a>
                </li>
                    </ul>
    </nav>
</div>
                            <svg aria-hidden="true" style="position: absolute; width: 0px; height: 0px; overflow: hidden;">
                                <symbol id="i-rank-up" viewBox="0 0 1308 1024">
                                    <path d="M512 149.33333366666665h796.444444v113.777777H512V149.33333366666665z m0 341.333333h568.888889v113.777778H512V490.6666666666667z m0 341.333333h341.333333v113.777778H512v-113.777778zM227.555556 303.6159996666667L100.124444 452.9493336666667 13.653333 379.0506666666667 341.333333-4.949333333333332V1002.6666666666666H227.555556V303.6159996666667z"></path>
                                </symbol>
                            </svg>
                                                            <a href="javascript:;" class="sort-order"><i class="chorder fas asc" data-order="desc"><svg><use xlink:href="#i-rank-up"></use></svg></i></a>
                                                    </div>
                    </div>
                    <div class="nf-ads mb-3"><img src="https://novelfire.net/disable-blocker.jpg" style="width:300px"></div>
                    <ul class="chapter-list">
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-1" title="Volume 1 Prologue">
                                                                            <span class="chapter-no">1</span>
                                                                        <strong class="chapter-title">Volume 1 Prologue</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:36:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-2" title="Volume 1 1 — Could This Be Another World?">
                                                                            <span class="chapter-no">2</span>
                                                                        <strong class="chapter-title">Volume 1 1 — Could This Be Another World?</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:37:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-3" title="Volume 1 2 — Expressionless Maid">
                                                                            <span class="chapter-no">3</span>
                                                                        <strong class="chapter-title">Volume 1 2 — Expressionless Maid</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:38:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-4" title="Volume 1 3 — Magic Textbook">
                                                                            <span class="chapter-no">4</span>
                                                                        <strong class="chapter-title">Volume 1 3 — Magic Textbook</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:39:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-5" title="Volume 1 4 — Teacher">
                                                                            <span class="chapter-no">5</span>
                                                                        <strong class="chapter-title">Volume 1 4 — Teacher</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:40:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-6" title="Volume 1 5 — Magic and Swordsmanship">
                                                                            <span class="chapter-no">6</span>
                                                                        <strong class="chapter-title">Volume 1 5 — Magic and Swordsmanship</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:41:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-7" title="Volume 1 6 — Reason for Respect">
                                                                            <span class="chapter-no">7</span>
                                                                        <strong class="chapter-title">Volume 1 6 — Reason for Respect</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:42:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-8" title="Volume 1 7 — Friend">
                                                                            <span class="chapter-no">8</span>
                                                                        <strong class="chapter-title">Volume 1 7 — Friend</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:43:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-9" title="Volume 1 8 — Insensitive">
                                                                            <span class="chapter-no">9</span>
                                                                        <strong class="chapter-title">Volume 1 8 — Insensitive</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:44:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-10" title="Volume 1 9 — Emergency Family Meeting">
                                                                            <span class="chapter-no">10</span>
                                                                        <strong class="chapter-title">Volume 1 9 — Emergency Family Meeting</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:45:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-11" title="Volume 1 10 — Bottleneck">
                                                                            <span class="chapter-no">11</span>
                                                                        <strong class="chapter-title">Volume 1 10 — Bottleneck</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:46:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-12" title="Volume 1 11 — Separation">
                                                                            <span class="chapter-no">12</span>
                                                                        <strong class="chapter-title">Volume 1 11 — Separation</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:47:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-13" title="Volume 1 Special — The Mother in Greyrats Household">
                                                                            <span class="chapter-no">13</span>
                                                                        <strong class="chapter-title">Volume 1 Special — The Mother in Greyrats Household</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:48:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-14" title="Volume 2 Prologue">
                                                                            <span class="chapter-no">14</span>
                                                                        <strong class="chapter-title">Volume 2 Prologue</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:49:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-15" title="Volume 2 1 — Young Ladys Violence">
                                                                            <span class="chapter-no">15</span>
                                                                        <strong class="chapter-title">Volume 2 1 — Young Ladys Violence</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:50:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-16" title="Volume 2 2 — Self Directed Role">
                                                                            <span class="chapter-no">16</span>
                                                                        <strong class="chapter-title">Volume 2 2 — Self Directed Role</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:51:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-17" title="Volume 2 3 — Brutality Has Yet to End">
                                                                            <span class="chapter-no">17</span>
                                                                        <strong class="chapter-title">Volume 2 3 — Brutality Has Yet to End</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:52:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-18" title="Volume 2 4 — Staff Meeting &amp; Sunday">
                                                                            <span class="chapter-no">18</span>
                                                                        <strong class="chapter-title">Volume 2 4 — Staff Meeting &amp; Sunday</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:53:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-19" title="Volume 2 5 — Young Lady Is 10 Years Old">
                                                                            <span class="chapter-no">19</span>
                                                                        <strong class="chapter-title">Volume 2 5 — Young Lady Is 10 Years Old</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:54:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-20" title="Volume 2 6 — Studying Languages">
                                                                            <span class="chapter-no">20</span>
                                                                        <strong class="chapter-title">Volume 2 6 — Studying Languages</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:55:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-21" title="Volume 2 7 — Definite Promise">
                                                                            <span class="chapter-no">21</span>
                                                                        <strong class="chapter-title">Volume 2 7 — Definite Promise</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:56:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-22" title="Volume 2 8 — Turning Point">
                                                                            <span class="chapter-no">22</span>
                                                                        <strong class="chapter-title">Volume 2 8 — Turning Point</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:57:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-23" title="Volume 2 Side Story — Aftermath of the Event &amp; Boreas Style Greeting">
                                                                            <span class="chapter-no">23</span>
                                                                        <strong class="chapter-title">Volume 2 Side Story — Aftermath of the Event &amp; Boreas Style Greeting</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:58:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-24" title="Volume 2 Side Story 2 — Half a Year After Fedoa Region Vanishes">
                                                                            <span class="chapter-no">24</span>
                                                                        <strong class="chapter-title">Volume 2 Side Story 2 — Half a Year After Fedoa Region Vanishes</strong>
                                    <time class="chapter-update" datetime="2022-02-10 04:59:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-25" title="Volume 3 1 — Swindler Calling Himself God">
                                                                            <span class="chapter-no">25</span>
                                                                        <strong class="chapter-title">Volume 3 1 — Swindler Calling Himself God</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:00:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-26" title="Volume 3 2 — Superd Race">
                                                                            <span class="chapter-no">26</span>
                                                                        <strong class="chapter-title">Volume 3 2 — Superd Race</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:01:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-27" title="Volume 3 3 — Teachers Secret">
                                                                            <span class="chapter-no">27</span>
                                                                        <strong class="chapter-title">Volume 3 3 — Teachers Secret</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:02:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-28" title="Volume 3 4 — Reason for Trust">
                                                                            <span class="chapter-no">28</span>
                                                                        <strong class="chapter-title">Volume 3 4 — Reason for Trust</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:03:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-29" title="Volume 3 5 — Three Days to the Nearest Town">
                                                                            <span class="chapter-no">29</span>
                                                                        <strong class="chapter-title">Volume 3 5 — Three Days to the Nearest Town</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:04:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-30" title="Volume 3 6 — Disguise and Infiltration">
                                                                            <span class="chapter-no">30</span>
                                                                        <strong class="chapter-title">Volume 3 6 — Disguise and Infiltration</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:05:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-31" title="Volume 3 7 — Adventurers Guild">
                                                                            <span class="chapter-no">31</span>
                                                                        <strong class="chapter-title">Volume 3 7 — Adventurers Guild</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:06:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-32" title="Volume 3 8 — Adventurers Inn">
                                                                            <span class="chapter-no">32</span>
                                                                        <strong class="chapter-title">Volume 3 8 — Adventurers Inn</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:07:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-33" title="Volume 3 9 — The First Job and the Sanctity of Life">
                                                                            <span class="chapter-no">33</span>
                                                                        <strong class="chapter-title">Volume 3 9 — The First Job and the Sanctity of Life</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:08:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-34" title="Volume 3 10 — First Job Completed">
                                                                            <span class="chapter-no">34</span>
                                                                        <strong class="chapter-title">Volume 3 10 — First Job Completed</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:09:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-35" title="Volume 3 11 — Good Start">
                                                                            <span class="chapter-no">35</span>
                                                                        <strong class="chapter-title">Volume 3 11 — Good Start</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:10:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-36" title="Volume 3 12 — Warrior &amp; Children">
                                                                            <span class="chapter-no">36</span>
                                                                        <strong class="chapter-title">Volume 3 12 — Warrior &amp; Children</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:11:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-37" title="Volume 3 13 — Mistake, Disorder, &amp; Determination">
                                                                            <span class="chapter-no">37</span>
                                                                        <strong class="chapter-title">Volume 3 13 — Mistake, Disorder, &amp; Determination</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:12:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-38" title="Volume 3 14 — Start of the Journey">
                                                                            <span class="chapter-no">38</span>
                                                                        <strong class="chapter-title">Volume 3 14 — Start of the Journey</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:13:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-39" title="Volume 3 Special — World Map">
                                                                            <span class="chapter-no">39</span>
                                                                        <strong class="chapter-title">Volume 3 Special — World Map</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:14:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-40" title="Volume 4 1 — Wind Port">
                                                                            <span class="chapter-no">40</span>
                                                                        <strong class="chapter-title">Volume 4 1 — Wind Port</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:15:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-41" title="Volume 4 2 — Crossing Paths - First Part">
                                                                            <span class="chapter-no">41</span>
                                                                        <strong class="chapter-title">Volume 4 2 — Crossing Paths - First Part</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:16:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-42" title="Volume 4 3 — Crossing Paths - Second Part">
                                                                            <span class="chapter-no">42</span>
                                                                        <strong class="chapter-title">Volume 4 3 — Crossing Paths - Second Part</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:17:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-43" title="Volume 4 3.5 — Crossing Paths - Side Story">
                                                                            <span class="chapter-no">43</span>
                                                                        <strong class="chapter-title">Volume 4 3.5 — Crossing Paths - Side Story</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:18:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-44" title="Volume 4 4 — Sage within the Ship">
                                                                            <span class="chapter-no">44</span>
                                                                        <strong class="chapter-title">Volume 4 4 — Sage within the Ship</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:19:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-45" title="Volume 4 5 — Demon in the Storehouse">
                                                                            <span class="chapter-no">45</span>
                                                                        <strong class="chapter-title">Volume 4 5 — Demon in the Storehouse</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:20:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-46" title="Volume 4 6 — Children of the Beast Race">
                                                                            <span class="chapter-no">46</span>
                                                                        <strong class="chapter-title">Volume 4 6 — Children of the Beast Race</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:21:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-47" title="Volume 4 7 — No Cost Apartment">
                                                                            <span class="chapter-no">47</span>
                                                                        <strong class="chapter-title">Volume 4 7 — No Cost Apartment</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:22:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-48" title="Volume 4 8 — Slow Life of Dorudia Village - First Part">
                                                                            <span class="chapter-no">48</span>
                                                                        <strong class="chapter-title">Volume 4 8 — Slow Life of Dorudia Village - First Part</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:23:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-49" title="Volume 4 9 — Slow Life of Dorudia Village - Second Part">
                                                                            <span class="chapter-no">49</span>
                                                                        <strong class="chapter-title">Volume 4 9 — Slow Life of Dorudia Village - Second Part</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:24:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-50" title="Volume 4 10 — Holy Sword Highway">
                                                                            <span class="chapter-no">50</span>
                                                                        <strong class="chapter-title">Volume 4 10 — Holy Sword Highway</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:25:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-51" title="Volume 5 1 — Holy Milis Kingdom">
                                                                            <span class="chapter-no">51</span>
                                                                        <strong class="chapter-title">Volume 5 1 — Holy Milis Kingdom</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:26:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-52" title="Volume 5 2 — Paul 1.5 Years Earlier">
                                                                            <span class="chapter-no">52</span>
                                                                        <strong class="chapter-title">Volume 5 2 — Paul 1.5 Years Earlier</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:27:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-53" title="Volume 5 3 — Parent and Child Fight">
                                                                            <span class="chapter-no">53</span>
                                                                        <strong class="chapter-title">Volume 5 3 — Parent and Child Fight</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:28:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-54" title="Volume 5 4 — Reunion with Paul">
                                                                            <span class="chapter-no">54</span>
                                                                        <strong class="chapter-title">Volume 5 4 — Reunion with Paul</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:29:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-55" title="Volume 5 5 — Reconfirmation of Objectives">
                                                                            <span class="chapter-no">55</span>
                                                                        <strong class="chapter-title">Volume 5 5 — Reconfirmation of Objectives</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:30:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-56" title="Volume 5 6 — One Week in Milishion">
                                                                            <span class="chapter-no">56</span>
                                                                        <strong class="chapter-title">Volume 5 6 — One Week in Milishion</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:31:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-57" title="Volume 5 Side Story — Eris Goblin Suppression">
                                                                            <span class="chapter-no">57</span>
                                                                        <strong class="chapter-title">Volume 5 Side Story — Eris Goblin Suppression</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:32:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-58" title="Volume 5 7 — To the Central Continent">
                                                                            <span class="chapter-no">58</span>
                                                                        <strong class="chapter-title">Volume 5 7 — To the Central Continent</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:33:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-59" title="Volume 5 Side Story — Return of Roxy">
                                                                            <span class="chapter-no">59</span>
                                                                        <strong class="chapter-title">Volume 5 Side Story — Return of Roxy</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:34:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-60" title="Volume 6 1 — Route Options">
                                                                            <span class="chapter-no">60</span>
                                                                        <strong class="chapter-title">Volume 6 1 — Route Options</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:35:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-61" title="Volume 6 2 — Rice">
                                                                            <span class="chapter-no">61</span>
                                                                        <strong class="chapter-title">Volume 6 2 — Rice</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:36:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-62" title="Volume 6 3 — Shirone Kingdom">
                                                                            <span class="chapter-no">62</span>
                                                                        <strong class="chapter-title">Volume 6 3 — Shirone Kingdom</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:37:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-63" title="Volume 6 4 — Absence of God">
                                                                            <span class="chapter-no">63</span>
                                                                        <strong class="chapter-title">Volume 6 4 — Absence of God</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:38:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-64" title="Volume 6 5 — Third Prince">
                                                                            <span class="chapter-no">64</span>
                                                                        <strong class="chapter-title">Volume 6 5 — Third Prince</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:39:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-65" title="Volume 6 6 — Speedy Resolution">
                                                                            <span class="chapter-no">65</span>
                                                                        <strong class="chapter-title">Volume 6 6 — Speedy Resolution</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:40:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-66" title="Volume 6 7 — The Day the Little Sister Maid Was Born">
                                                                            <span class="chapter-no">66</span>
                                                                        <strong class="chapter-title">Volume 6 7 — The Day the Little Sister Maid Was Born</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:41:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-67" title="Volume 6 8 — Becoming an Adult">
                                                                            <span class="chapter-no">67</span>
                                                                        <strong class="chapter-title">Volume 6 8 — Becoming an Adult</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:42:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-68" title="Volume 6 9 — Turning Point 2">
                                                                            <span class="chapter-no">68</span>
                                                                        <strong class="chapter-title">Volume 6 9 — Turning Point 2</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:43:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-69" title="Volume 6 10 — Gaping Hole Opened in the Chest">
                                                                            <span class="chapter-no">69</span>
                                                                        <strong class="chapter-title">Volume 6 10 — Gaping Hole Opened in the Chest</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:44:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-70" title="Volume 6 11 — End of the Journey">
                                                                            <span class="chapter-no">70</span>
                                                                        <strong class="chapter-title">Volume 6 11 — End of the Journey</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:45:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-71" title="Volume 6 12 — Reality of the Disaster">
                                                                            <span class="chapter-no">71</span>
                                                                        <strong class="chapter-title">Volume 6 12 — Reality of the Disaster</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:46:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-72" title="Volume 6 13 — Young Ladys Decision">
                                                                            <span class="chapter-no">72</span>
                                                                        <strong class="chapter-title">Volume 6 13 — Young Ladys Decision</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:47:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-73" title="Volume 6 Side Story — The Two Who Met">
                                                                            <span class="chapter-no">73</span>
                                                                        <strong class="chapter-title">Volume 6 Side Story — The Two Who Met</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:48:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-74" title="Volume 6 Special — World Map 2">
                                                                            <span class="chapter-no">74</span>
                                                                        <strong class="chapter-title">Volume 6 Special — World Map 2</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:49:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-75" title="Volume 7 1 — Quagmire The Adventurer">
                                                                            <span class="chapter-no">75</span>
                                                                        <strong class="chapter-title">Volume 7 1 — Quagmire The Adventurer</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:50:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-76" title="Volume 7 2 — Letter of Recommendation">
                                                                            <span class="chapter-no">76</span>
                                                                        <strong class="chapter-title">Volume 7 2 — Letter of Recommendation</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:51:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-77" title="Volume 7 3 — Entrance Examination">
                                                                            <span class="chapter-no">77</span>
                                                                        <strong class="chapter-title">Volume 7 3 — Entrance Examination</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:52:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-78" title="Volume 7 4 — First Day of School - First Part">
                                                                            <span class="chapter-no">78</span>
                                                                        <strong class="chapter-title">Volume 7 4 — First Day of School - First Part</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:53:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-79" title="Volume 7 5 — First Day of School - Second Part">
                                                                            <span class="chapter-no">79</span>
                                                                        <strong class="chapter-title">Volume 7 5 — First Day of School - Second Part</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:54:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-80" title="Volume 7 6 — Fitts-Senpai">
                                                                            <span class="chapter-no">80</span>
                                                                        <strong class="chapter-title">Volume 7 6 — Fitts-Senpai</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:55:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-81" title="Volume 8 1 — An Unreachable Power - First Half">
                                                                            <span class="chapter-no">81</span>
                                                                        <strong class="chapter-title">Volume 8 1 — An Unreachable Power - First Half</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:56:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-82" title="Volume 8 2 — An Unreachable Power - Latter Half">
                                                                            <span class="chapter-no">82</span>
                                                                        <strong class="chapter-title">Volume 8 2 — An Unreachable Power - Latter Half</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:57:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-83" title="Volume 8 3 — Daughters of the Beast Race Kidnapping and Confinement Incident…">
                                                                            <span class="chapter-no">83</span>
                                                                        <strong class="chapter-title">Volume 8 3 — Daughters of the Beast Race Kidnapping and Confinement Incident…</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:58:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-84" title="Volume 8 4 — Daughters of the Beast Race Kidnapping and Confinement Incident…">
                                                                            <span class="chapter-no">84</span>
                                                                        <strong class="chapter-title">Volume 8 4 — Daughters of the Beast Race Kidnapping and Confinement Incident…</strong>
                                    <time class="chapter-update" datetime="2022-02-10 05:59:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-85" title="Volume 8 5 — The Genius Youths Secret - First Half">
                                                                            <span class="chapter-no">85</span>
                                                                        <strong class="chapter-title">Volume 8 5 — The Genius Youths Secret - First Half</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:00:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-86" title="Volume 8 6 — The Genius Youths Secret - Second Half">
                                                                            <span class="chapter-no">86</span>
                                                                        <strong class="chapter-title">Volume 8 6 — The Genius Youths Secret - Second Half</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:01:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-87" title="Volume 8 7 — Precipice of Engagement - First Part">
                                                                            <span class="chapter-no">87</span>
                                                                        <strong class="chapter-title">Volume 8 7 — Precipice of Engagement - First Part</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:02:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-88" title="Volume 8 8 — Precipice of Engagement - Second Part">
                                                                            <span class="chapter-no">88</span>
                                                                        <strong class="chapter-title">Volume 8 8 — Precipice of Engagement - Second Part</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:03:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-89" title="Volume 8 9 — White Mask - First Part">
                                                                            <span class="chapter-no">89</span>
                                                                        <strong class="chapter-title">Volume 8 9 — White Mask - First Part</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:04:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-90" title="Volume 8 10 — White Mask — Second Part">
                                                                            <span class="chapter-no">90</span>
                                                                        <strong class="chapter-title">Volume 8 10 — White Mask — Second Part</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:05:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-91" title="Volume 8 11 — Daily Life at the Magic University">
                                                                            <span class="chapter-no">91</span>
                                                                        <strong class="chapter-title">Volume 8 11 — Daily Life at the Magic University</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:06:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-92" title="Volume 8 Side Story — Enter the Mad Dog">
                                                                            <span class="chapter-no">92</span>
                                                                        <strong class="chapter-title">Volume 8 Side Story — Enter the Mad Dog</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:07:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-93" title="Volume 9 1 — Sylphys Past">
                                                                            <span class="chapter-no">93</span>
                                                                        <strong class="chapter-title">Volume 9 1 — Sylphys Past</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:08:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-94" title="Volume 9 2 — Guardian Magician Introduction - Fitts">
                                                                            <span class="chapter-no">94</span>
                                                                        <strong class="chapter-title">Volume 9 2 — Guardian Magician Introduction - Fitts</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:09:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-95" title="Volume 9 3 — Princess, Knight, and Magician">
                                                                            <span class="chapter-no">95</span>
                                                                        <strong class="chapter-title">Volume 9 3 — Princess, Knight, and Magician</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:10:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-96" title="Volume 9 4 — First Day of School — Extra Chapter">
                                                                            <span class="chapter-no">96</span>
                                                                        <strong class="chapter-title">Volume 9 4 — First Day of School — Extra Chapter</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:11:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-97" title="Volume 9 5 — Sharp and Dull">
                                                                            <span class="chapter-no">97</span>
                                                                        <strong class="chapter-title">Volume 9 5 — Sharp and Dull</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:12:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-98" title="Volume 9 6 — Over Thinking">
                                                                            <span class="chapter-no">98</span>
                                                                        <strong class="chapter-title">Volume 9 6 — Over Thinking</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:13:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-99" title="Volume 9 7 — The Protected Secret">
                                                                            <span class="chapter-no">99</span>
                                                                        <strong class="chapter-title">Volume 9 7 — The Protected Secret</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:14:18">3 years ago</time>
                                </a>
                            </li>
                                                    <li>
                                <a href="https://novelfire.net/book/mushoku-tensei/chapter-100" title="Volume 9 8 — Rain of the Forest - First Part">
                                                                            <span class="chapter-no">100</span>
                                                                        <strong class="chapter-title">Volume 9 8 — Rain of the Forest - First Part</strong>
                                    <time class="chapter-update" datetime="2022-02-10 06:15:18">3 years ago</time>
                                </a>
                            </li>
                                            </ul>
                </div>
            </section>
        </div>
    </article>
    </main>
        <footer><div class="wrapper skiptranslate"><div class="col logo text-center"><a title="Novel Fire - Read Web Novels Online Free" href="https://novelfire.net/home" style="display:inline-block"><img class="lazy footer-logo" src="data:image/gif;base64,R0lGODlhAQABAAAAACH5BAEKAAEALAAAAAABAAEAAAICTAEAOw==" data-src="https://novelfire.net/logo.svg?v=5" alt="Novel Fire"></a></div><nav class="col links"><ul><li><a title="Explore the Top Rated Novels" href="https://novelfire.net/ranking">Novel Ranking</a></li><li><a title="Explore The Recently Added Novels" href="https://novelfire.net/genre-all/sort-new/status-all/all-novel">Latest Novels</a></li><li><a title="Development Announcements" href="https://novelfire.net/notices">DEV</a></li><li><a title="Explore All Novel Tags" href="https://novelfire.net/all-tags/A">All Tags</a></li></ul></nav><nav class="col links"><ul><li><a title="Most Popular Romance Genre Novels" href="https://novelfire.net/genre-romance/sort-popular/status-all/all-novel">Romance</a></li><li><a title="Most Popular Josei Genre Novels" href="https://novelfire.net/genre-josei/sort-popular/status-all/all-novel">Josei</a></li><li><a title="Most Popular Video Games Genre Novels" href="https://novelfire.net/genre-video-games/sort-popular/status-all/all-novel">Video Games</a></li><li><a title="Most Popular Fantasy Genre Novels" href="https://novelfire.net/genre-fantasy/sort-popular/status-all/all-novel">Fantasy</a></li></ul></nav><nav class="col links"><ul><li><a title="Most Popular Martial Arts Genre Novels" href="https://novelfire.net/genre-martial-arts/sort-popular/status-all/all-novel">Martial Arts</a></li><li><a title="Most Popular Slice of Life Genre Novels" href="https://novelfire.net/genre-slice-of-life/sort-popular/status-all/all-novel">Slice of Life</a></li><li><a title="Most Popular Sci-fi Genre Novels" href="https://novelfire.net/genre-sci-fi/sort-popular/status-all/all-novel">Sci-fi</a></li><li><a title="Most Popular Supernatural Genre Novels" href="https://novelfire.net/genre-supernatural/sort-popular/status-all/all-novel">Supernatural</a></li></ul></nav><nav class="col links"><ul><li><a title="Privacy Policy" href="https://novelfire.net/page/privacy-policy">Privacy Policy</a></li><li><a title="Terms of Service" href="https://novelfire.net/page/terms-of-service">Terms of Service</a></li><li><a title="Contact Us" href="https://novelfire.net/contact-us">Contact Us</a></li></ul></nav><div class="clearfix copyright py-2 w-100 mt-3 text-center"><p>Made with ♥ for Novel Lovers</p><p class="fs-14">Disclaimer: This site Novel Fire does not store any files on its server. All contents are provided by non-affiliated third parties.</p></div></div></footer><script src="https://cdnjs.cloudflare.com/ajax/libs/js-cookie/3.0.1/js.cookie.min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script><script src="https://novelfire.net/frontend/js/appsettings.min.js?ver=4.1.7"></script><style id="font_range_slider_style">.range-fontsize .range {background: linear-gradient(to right, var(--anchor-color) 0%, var(--anchor-color) 28.571428571428573%, transparent 28.571428571428573%, transparent 100%)}.range-fontsize .range input::-webkit-slider-runnable-track{background: linear-gradient(to right, var(--anchor-color) 0%, var(--anchor-color) 28.571428571428573%, #b2b2b2 28.571428571428573%, #b2b2b2 100%)}.range-fontsize .range {background: linear-gradient(to right, var(--anchor-color) 0%, var(--anchor-color) 28.571428571428573%, transparent 28.571428571428573%, transparent 100%)}.range-fontsize .range input::-moz-range-track{background: linear-gradient(to right, var(--anchor-color) 0%, var(--anchor-color) 28.571428571428573%, #b2b2b2 28.571428571428573%, #b2b2b2 100%)}.range-fontsize .range {background: linear-gradient(to right, var(--anchor-color) 0%, var(--anchor-color) 28.571428571428573%, transparent 28.571428571428573%, transparent 100%)}.range-fontsize .range input::-ms-track{background: linear-gradient(to right, var(--anchor-color) 0%, var(--anchor-color) 28.571428571428573%, #b2b2b2 28.571428571428573%, #b2b2b2 100%)}</style><script src="https://novelfire.net/frontend/js/app.min.js?ver=4.1.7"></script><div class="ajax_waiting"></div><a id="back-to-top" href="#"><svg width="1em" height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg" class="bi bi-arrow-up-short" style="color:#fff"><path fill-rule="evenodd" d="M8 12a.5.5 0 0 0 .5-.5V5.707l2.146 2.147a.5.5 0 0 0 .708-.708l-3-3a.5.5 0 0 0-.708 0l-3 3a.5.5 0 1 0 .708.708L7.5 5.707V11.5a.5.5 0 0 0 .5.5z"></path></svg></a><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" style="position:absolute;width:0;height:0" id="__SVG_SPRITE_NODE__"><symbol id="i-times" viewBox="0 0 1024 1024"><path d="M618.775 512l320.329-320.329c30.51-30.51 30.51-76.269 0-106.775s-76.269-30.51-106.775 0l-320.329 320.329-320.329-320.329c-30.51-30.51-76.269-30.51-106.775 0s-30.51 76.269 0 106.775l320.329 320.329-320.329 320.329c-30.51 30.51-30.51 76.269 0 106.775s76.269 30.51 106.775 0l320.329-320.329 320.329 320.329c30.51 30.51 76.269 30.51 106.775 0s30.51-76.269 0-106.775l-320.329-320.329z"></path></symbol><symbol id="icon-pantool" viewBox="0 0 24 24"><path d="M21.5 4c-.83 0-1.5.67-1.5 1.5v5c0 .28-.22.5-.5.5s-.5-.22-.5-.5v-8c0-.83-.67-1.5-1.5-1.5S16 1.67 16 2.5v8c0 .28-.22.5-.5.5s-.5-.22-.5-.5v-9c0-.83-.67-1.5-1.5-1.5S12 .67 12 1.5v8.99c0 .28-.22.5-.5.5s-.5-.22-.5-.5V4.5c0-.83-.67-1.5-1.5-1.5S8 3.67 8 4.5v11.41l-4.12-2.35c-.58-.33-1.3-.24-1.78.22-.6.58-.62 1.54-.03 2.13l6.78 6.89c.75.77 1.77 1.2 2.85 1.2H19c2.21 0 4-1.79 4-4V5.5c0-.83-.67-1.5-1.5-1.5z"></path></symbol></svg>
    <div id="modal" class="popupContainer" style="display:none"><header class="popupHeader"><span class="header_title">Login</span><span class="modal_close"><svg><use xlink:href="#i-times"></use></svg></span></header><section class="popupBody"><div class="social_login"><div class="notification"></div><div><a href="https://novelfire.net/auth/redirect/google" class="social_box google"><span class="icon"><i class="i-googlePlus"></i></span><span class="icon_title">LOG IN WITH GOOGLE</span></a><a href="javascript:void(0)" id="login_form" class="social_box"><span class="icon"><i class="i-mail"></i></span><span class="icon_title">LOG IN WITH EMAIL</span></a></div><div class="centeredText">Don't have an account?<br><a href="javascript:void(0)" id="register_form" class="font-weight">Sign up with your email address.</a></div></div><div class="user_login edit-form"><form><label>Email</label><input type="email"><div class="alert alert-email"></div><label>Password</label><input type="password"><div class="alert alert-password"></div><div class="checkbox" style="display:flex"><input id="remember" type="checkbox"><label for="remember">Remember Me</label><label style="margin-left:auto"><a href="javascript:void(0)" id="forgot_password" class="forgot_password">Forgot Password?</a></label></div><div class="action_btns"><div class="one_half"><a href="javascript:void(0)" class="button btn-modal back_btn"><i class="icon-left-big"></i> Back</a></div><div class="one_half last"><a href="javascript:void(0)" class="button btn-modal" onclick="loginAjax()">Login</a></div></div></form></div><div class="user_register edit-form"><form><label>Email</label><input type="email"><div class="alert alert-email"></div><label>Username</label><input type="text"><div class="alert alert-name"></div><label>Password</label><input type="password"><div class="alert alert-password"></div><label>Confirm Password</label><input type="password" name="confirm-password"><div class="alert alert-confirm-password"></div><div class="action_btns"><div class="one_half"><a href="javascript:void(0)" class="button btn-modal back_btn"><i class="icon-left-big"></i> Back</a></div><div class="one_half last"><a href="javascript:void(0)" class="button btn-modal" onclick="registerAjax()">Sign Up</a></div></div></form></div><div class="user_forgot_password edit-form"><form><div class="pb-2"><p style="padding-bottom:10px">Enter your email address that you used to register. We'll send you an email with a link to reset your password.</p><p><i>If you don’t see the email, check other places it might be, like your junk, spam, social, or other folders.</i></p></div><input type="email" placeholder="Email"><div class="alert alert-email"></div><div class="action_btns"><div class="one_half"><a href="javascript:void(0)" class="button btn-modal back_btn_from_forgot_password"><i class="icon-left-big"></i> Back</a></div><div class="one_half last"><a href="javascript:void(0)" class="button btn-modal" onclick="codePasswordResetAjax()">Send</a></div></div></form></div><div class="form_alert"><form><div class="alert"></div></form></div></section></div>
    <script src="https://novelfire.net/frontend/js/modal.min.js?ver=4.1.7"></script><div id="lean_overlay"></div>
 <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-PKXR4EBQ8F"></script><script>window.dataLayer = window.dataLayer || [];function gtag(){dataLayer.push(arguments);}gtag('js', new Date());gtag('config', 'G-PKXR4EBQ8F');</script>
         <script>
            $(".sort-order i").click(function(e) {
                window.location.replace(window.location.href.split('?')[0] + '?page=' + $('.n-page').val() + '&sort_by=' + $(this).data('order'));
            });
            function goToElementListChapter(){
                $('html,body').animate({
                    scrollTop: $(".novel-body").offset().top - 75},
                    'slow');
            }

            
            function goToChapter(chapterNumber) {
                if (chapterNumber && chapterNumber <= 285) {
                    window.location.href = 'https://novelfire.net/book/mushoku-tensei/chapter-' + chapterNumber; // Sử dụng window.location.href
                } else if (chapterNumber) {
                    alert('Chapter not found');
                }
            }

            $(".go-page").click(function(e) {
                const chapterNumber = parseInt($('.n-page').val());
                goToChapter(chapterNumber);
            });

            $(".n-page").on('keyup', function (e) {
                if (e.key === 'Enter' || e.keyCode === 13) {
                    const chapterNumber = parseInt($(this).val());
                    goToChapter(chapterNumber);
                }
            });
        </script>
        <script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'98b6c4fa6e09f664',t:'MTc1OTkzODM2OQ=='};var a=document.createElement('script');a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script><iframe height="1" width="1" style="position: absolute; top: 0px; left: 0px; border: none; visibility: hidden;"></iframe>

</body></html>