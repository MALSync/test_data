<html lang="tr-TR" style="transform: none;">

<head>
  <style class="vjs-styles-defaults">
    .video-js {
      width: 300px;
      height: 150px;
    }

    .vjs-fluid {
      padding-top: 56.25%
    }
  </style>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>One Punch Man İzle - Anime izle</title>
  <meta name="description" content="One Punch Man izle, One Punch Man hd izle, One Punch Man 1080p izle, One Punch Man türkçe, One Punch Man izle <strong>One punch man izle</strong></br></br>


Diğer tüm animelerden farklı bir yolla sessiz ve derinden gelen One Punch Man, her yaştan izleyiciye hitap eden, aksiyonu bol ancak eğlencesi de bol bir anime serisi. İlk olarak bir sitede 2009 yılında çizgi olarak yayınlanmaya başlayan seri, çok sevilince milyonlarca tıklama alarak geniş bir hayran kitlesi oluşturdu. Bu büyük ilgiye kayıtsız kalamayan çizerler, daha sonra seriyi manga olarak yayınlamaya başladılar. Manga olarak da büyük bir başarı elde eden ve çok büyük bir hayran kitlesi oluşturan seri, nihayet animeye uyarlandı. Anime olarak yayınlanmaya başladığında çok büyük bir fan kitlesine sahip olan seri, her geçen gün daha fazla izleyici tarafından büyük bir beğeniyle izleniyor. Serinin tüm bölümlerine one punch man izle linkine tıklayarak kolayca ulaşabilirsiniz.

</br></br><strong>One Punch Man’ in konusu</strong></br></br>


Çok çalışmaktan saçları dökülen ve ayrı bir şirinlik kazanan, aynı zamanda da çelimsiz ve sıska olan Saitama, okuldan mezun olduktan sonra iş bulmakta büyük sorunlar yaşar. Aynı zamanda çok güçlü olan kahramanımız, bu süper gücünü süper kahraman olarak kullanmaktan yana tavır sergilemez. Ancak tek yumrukta en güçlü süper kahramanı bile devirebilen hatta yumruğunun yarısı boşa giden Saitama’ nın bu gücüne pek çok durumda ihtiyaç olur. Saitama’ da hobi olarak süper kahramanlık yapmaya başlar. Ancak dış görünüşü, seçtiği kahraman kostümü gibi nedenlerle, hem kahramanlar ve hem de kötüler tarafından bir türlü ciddiye alınmaz. Saçlarının dökülmüş olması konusunda da çok hassas olan Saitama, çok eğlenceli maceralarla izleyici eşsiz bir anime deneyimi oluşturuyor. Anime serisinin tüm bölümlerine yüksek görüntü kalitesiyle ulaşabilmek için one punch man izle linkine tıklamanız yeterlidir.</br></br>
Diğer tüm anime serileri ya doğrudan anime olarak yayınlanmaya başlamış ya da manga da büyük başarı kazandıktan sonra animeye uyarlanmıştır. One Punch Man ise önce bir web sitesinde çizgi olarak büyük bir başarıya ulaştıktan sonra, mangası yayınlanmaya başlanmış ve bu şekilde çok ciddi bir hayran kitlesine sahip olmuştur. Ardından animesinin yapılması aslında beklenen ve talep edilen bir durumdu. Dolayısıyla zaten merakla animesinin yayınlanmasını bekleyen ve milyonlardan oluşan bir hayran kitlesi bulunuyordu. Genel olarak manga kayranları, anime uyarlamalarını hem istemiyor hem de beğenmiyor. Ancak bu seride durum ters bir şekilde işledi ve animesinin çekilmesi büyük bir heyecanla beklendi. Serinin tüm bölümlerine web platformumuzdan ulaşabilmek için one punch man izle linkine tıklayabilirsiniz.

</br></br><strong>Özel Bir Anime Arşivi</strong></br></br>


Ülkemizin en büyük anime arşivini oluşturma amacıyla yola çıkmış olan web platformumuzda, en önemli anime serilerinin tüm bölümlerini bulabilirsiniz. Eski ve yeni olmak üzere anime dünyasının en çok sevilen en çok izlenen serilerine one punch man izle linkine tıklayarak ulaşabilirsiniz. One Punch Man, sürekli olarak her yaştan izleyicisini arttırmaya devam eden ve çok beğenilen bir seri, eğlenceli ve fantastik dünyasıyla birlikte, çok yerinde kullanılmış komedi öğeleri, seriyi unutulmaz bir animeye dönüştürüyor. </br></br>

Kuşkusuz anime efsaneleri arasında yerini alacak olan serinin tüm bölümlerini yüksek görüntü kalitesi ve çeşitli seçeneklerle izleyebilmek için one punch man izle linkine tıklayabilirsiniz. Sürekli yeni bölümler ve yeni anime serileriyle güncellenmeye devam edilen web platformumuz, anime hayranlarına özel bir web platformu olarak hazırlanıyor. Anime izleme deneyimini en üst seviyede yaşayabilmeniz için özel ve kullanıcı dostu bir yapıya sahip olan tasarımımız, sürekli kullanıcı taleplerine göre güncelleniyor. Aradığınız tüm animelere web sitemiz aracılığıyla ulaşabilirsiniz.

">
  <meta name="google" content="notranslate">
  <meta content="tr" http-equiv="Content-Language">
  <meta name="language" content="Turkish">
  <meta name="geo.placename" content="Turkey">
  <meta name="Trafficstars" content="38480">

  <link rel="canonical" href="https://www.tranimeizle.co/anime/one-punch-man-izle-hd">

  <meta property="og:url" content="https://www.tranimeizle.co/anime/one-punch-man-izle-hd">
  <meta property="og:type" content="video.tv_show">
  <meta property="og:title" content="One Punch Man izle">
  <meta property="og:image"
    content="https://static.tranimeizle.co/images/animes/covers/f873259b-b801-46ee-b671-13b8204e5fa2.jpg">
  <meta property="og:description"
    content="One Punch Man izle https://www.tranimeizle.co/ üzerinden bol alternatif ile izle">
  <meta property="og:locale" content="tr_TR">
  <meta name="twitter:url" content="https://www.tranimeizle.co/anime/one-punch-man-izle-hd">
  <meta name="twitter:type" content="video.tv_show">
  <meta name="twitter:title" content="One Punch Man izle">
  <meta name="twitter:image"
    content="https://static.tranimeizle.co/images/animes/covers/f873259b-b801-46ee-b671-13b8204e5fa2.jpg">
  <meta name="twitter:description"
    content="One Punch Man izle https://www.tranimeizle.co/ üzerinden bol alternatif ile izle">

  <!-- Favicon and touch icons -->
  <link rel="shortcut icon" href="/theme/site/assets/images/ico/favicon.png" type="image/x-icon">
  <link rel="apple-touch-icon" type="image/x-icon"
    href="/theme/site/assets/images/ico/apple-touch-icon-57-precomposed.png">
  <link rel="apple-touch-icon" type="image/x-icon" sizes="72x72"
    href="/theme/site/assets/images/ico/apple-touch-icon-72-precomposed.png">
  <link rel="apple-touch-icon" type="image/x-icon" sizes="114x114"
    href="/theme/site/assets/images/ico/apple-touch-icon-114-precomposed.png">
  <link rel="apple-touch-icon" type="image/x-icon" sizes="144x144"
    href="/theme/site/assets/images/ico/apple-touch-icon-144-precomposed.png">
  <!-- jquery ui css -->
  <link href="/theme/site/assets/css/jquery-ui.min.css" rel="stylesheet" type="text/css">
  <!-- Bootstrap -->
  <link href="/theme/site/assets/css/bootstrap.min.css" rel="stylesheet" type="text/css">
  <!--Animate css-->
  <link href="/theme/site/assets/css/animate.min.css" rel="stylesheet" type="text/css">
  <!-- Navigation css-->
  <link href="/theme/site/assets/bootsnav/css/bootsnav.css" rel="stylesheet" type="text/css">
  <!-- font awesome -->
  <link href="/theme/site/assets/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
  <!-- themify-icons -->
  <link href="/theme/site/assets/themify-icons/themify-icons.css" rel="stylesheet" type="text/css">
  <!-- weather-icons -->
  <link href="/theme/site/assets/weather-icons/css/weather-icons.min.css" rel="stylesheet" type="text/css">
  <!-- flat icon -->
  <link href="/theme/site/assets/css/flaticon.css" rel="stylesheet" type="text/css">
  <!-- Important Owl stylesheet -->
  <link href="/theme/site/assets/owl-carousel/owl.carousel.css" rel="stylesheet" type="text/css">
  <!-- Default Theme -->
  <link href="/theme/site/assets/owl-carousel/owl.theme.css" rel="stylesheet" type="text/css">
  <!-- owl transitions -->
  <link href="/theme/site/assets/owl-carousel/owl.transitions.css" rel="stylesheet" type="text/css">
  <!-- style css -->

  <link href="/theme/site/assets/css/style.css" rel="stylesheet" type="text/css">
  <link href="/lib/video.js/video-js.css" rel="stylesheet">
  <link href="/css/videoSource.css" rel="stylesheet" type="text/css">
  <link href="/css/animeDetail.css" rel="stylesheet" type="text/css">
  <link href="/css/site.css" rel="stylesheet" type="text/css">
  <link href="/css/icon-captcha.min.css" rel="stylesheet" type="text/css">
  <link href="/css/discordInvite.css" rel="stylesheet">



  <style>
    .theiaStickySidebar:after {
      content: "";
      display: table;
      clear: both;
    }
  </style>
</head>

<body class="boxed-layout" id="mainBody" style="transform: none;">
  <div class="wrapper" style="transform: none;">
    <!-- PAGE LOADER -->
    <div class="se-pre-con" style="display: none;"></div>
    <header>
      <!-- START HEADER TOP SECTION -->
      <div class="header-top">
        <div class="container">
          <div class="row">
            <div class="col-xs-6 col-md-6 col-sm-6 col-lg-6">
              <!-- Start header social -->
              <div class="header-social">
                <ul>
                  <li>
                    <a href="https://www.facebook.com/Aitr.tv">
                      <i class="fa fa-facebook"></i>
                    </a>
                  </li>
                  <li>
                    <a href="https://twitter.com/aitrtv">
                      <i class="fa fa-twitter"></i>
                    </a>
                  </li>
                  <li>
                    <a href="">
                      <i class="fa fa-google-plus"></i>
                    </a>
                  </li>
                  <li>
                    <a href="#">
                      <i class="fa fa-instagram"></i>
                    </a>
                  </li>
                  <li>
                    <a href="">
                      <i class="fa fa-whatsapp"></i>
                    </a>
                  </li>
                </ul>
              </div>
              <!-- End of /. header social -->
              <!-- Start top left menu -->
              <div class="top-left-menu hidden-xs">
                <ul>
                  <li>
                    <a href="/">Anime İzle</a>
                  </li>
                </ul>
              </div>
              <!-- End of /. top left menu -->
            </div>
            <!-- Start header top right menu -->
            <div class="col-xs-6 col-md-6 col-sm-6 col-lg-6">
              <div class="header-right-menu">
                <ul>
                  <li>
                    <a href="/Account/Login"><i class="fa fa-lock"></i> Giriş yap </a>ya da
                    <a href="/Account/Register"> Kayıt ol</a>
                  </li>
                </ul>
              </div>
            </div> <!-- end of /. header top right menu -->
          </div> <!-- end of /. row -->
        </div> <!-- end of /. container -->
      </div>
      <!-- END OF /. HEADER TOP SECTION -->
      <!-- START MIDDLE SECTION -->
      <div class="header-mid hidden-xs">
        <div class="container">
          <div class="row">
            <div class="col-sm-4">
              <div class="logo">
                <a href="/">
                  <img src="/images/anime-izle.png" class="img-responsive"
                    alt="Anime izle, türkanime, türk anime tv, anime tv, Bleach, One piece">
                </a>
              </div>
            </div>
            <div class="col-sm-8">

              <div class="add-inner">
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- END OF /. MIDDLE SECTION -->
      <!-- START NAVIGATION -->
      <div class="wrap-sticky" style="height: 49px;">
        <nav class="navbar navbar-default navbar-sticky bootsnav on no-full sticked">
          <div class="container">
            <div class="navbar-header hidden-sm hidden-md hidden-lg">
              <a class="navbar-brand" href="/">
                <img src="/images/anime-izle.png" class="logo"
                  alt="Anime izle, türkanime, türk anime tv, anime tv, Bleach, One piece">
              </a>
            </div>

            <div class="attr-nav">
              <div class="input-group">
                <input type="text" class="form-control" id="searchBar" placeholder="Anime aramak için yazın...">
                <span class="input-group-addon">
                  <i class="fa fa-search"></i>
                </span>
              </div>
            </div>

            <div class="collapse navbar-collapse" id="navbar-menu">
              <ul class="nav navbar-nav navbar-left" data-in="" data-out="">
                <li class="dropdown active">
                  <a href="/">Ana Sayfa</a>
                </li>
                <li>
                  <a href="/haberler">Haberler</a>
                </li>
                <li>
                  <a href="/ekipAlimi/translator">EKİP ÜYESİ ALIMLARI <span class="label label-danger">YENİ</span></a>
                </li>
                <li>
                  <a href="/iletisim">İLETİŞİM</a>
                </li>
              </ul>
            </div>
          </div>
        </nav>
      </div>
      <!-- END OF/. NAVIGATION -->
    </header>
    <!-- *** END OF /. PAGE HEADER SECTION *** -->

    <main class="page_main_wrapper" style="transform: none;">

      <nav class="navbar navbar-inverse navbar-silent hidden-xs">
        <div class="container">
          <ul class="nav navbar-nav">
            <li class="list-inline-item">
              <a href="/harfler/%23/sayfa-1">#</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/a/sayfa-1">A</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/b/sayfa-1">B</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/c/sayfa-1">C</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/d/sayfa-1">D</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/e/sayfa-1">E</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/f/sayfa-1">F</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/g/sayfa-1">G</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/h/sayfa-1">H</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/i/sayfa-1">I</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/j/sayfa-1">J</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/k/sayfa-1">K</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/l/sayfa-1">L</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/m/sayfa-1">M</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/n/sayfa-1">N</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/o/sayfa-1">O</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/p/sayfa-1">P</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/q/sayfa-1">Q</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/r/sayfa-1">R</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/s/sayfa-1">S</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/t/sayfa-1">T</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/u/sayfa-1">U</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/v/sayfa-1">V</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/w/sayfa-1">W</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/x/sayfa-1">X</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/y/sayfa-1">Y</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/z/sayfa-1">Z</a>
            </li>
          </ul>
        </div>
      </nav>

      <div class="visible-xs-block">

        <div class="add-inner">
        </div>
      </div>


      <!-- START NEWSTRICKER -->
      <div class="container">
        <div class="newstricker_inner">
          <span><strong>Türkçe Anime izleme</strong> keyfini Online Anime izle / Anime platformumuzda en <strong>Türkçe
              animeleri</strong> Full HD izleyerek yaşayın.</span>
        </div>
      </div>
      <!--  END OF /. NEWSTRICKER -->




      <div class="page-title">
        <div class="container">
          <div class="row">
            <div class="col-sm-12">
              <ol class="breadcrumb">
                <li>
                  <a href="/">Anime İzle</a>
                </li>
                <li class="active">
                  <a href="/anime/one-punch-man-izle-hd">One Punch Man İzle</a>
                </li>
              </ol>
            </div>
          </div>
        </div>
      </div>

      <div class="container">
        <div class="youtube-wrapper">
          <div class="playlist-title">
            <h1>One Punch Man İzle</h1>

          </div>
          <div class="animeDetail r16-9">
            <div class="animeDetail-video anime-description">
              <div class="animeDetail-video-player">
                <div class="row">
                  <div class="col-md-6">
                    <div class="poster">
                      <figure class="social-icon m-0">
                        <img alt="" class="img-responsive" src="https://static.tranimeizle.co/animes/762/large.jpeg">
                        <div>
                          <a href="#">
                            <i class="fa fa-facebook"></i>
                          </a>
                          <a href="#">
                            <i class="fa fa-twitter"></i>
                          </a>
                          <a href="#">
                            <i class="fa fa-google-plus"></i>
                          </a>
                          <a href="#" class="hidden-xs">
                            <i class="fa fa-linkedin"></i>
                          </a>
                          <a href="#" class="hidden-xs">
                            <i class="fa fa-pinterest-p"></i>
                          </a>
                        </div>
                      </figure>
                    </div>
                  </div>
                  <div class="col-md-6">
                    <div class="row">
                      <div class="col-xs-12 col-sm-12 mb-5">
                        <dd>
                          Diğer İsimleri
                        </dd>
                        <dt>
                          ワンパンマン
                        </dt>
                        <dt>
                          One Punch Man
                        </dt>
                        <dd>
                          Anime Türü
                        </dd>
                        <dt>
                          <div class="tags-inner">
                            <a class="ui tag genre" href="/animeizle/aksiyon-anime-izle-1">Aksiyon</a>
                            <a class="ui tag genre" href="/animeizle/bilim-kurgu-anime-izle-1">Bilim Kurgu</a>
                            <a class="ui tag genre" href="/animeizle/dogaustu-gucler-anime-izle-1">Doğaüstü Güçler</a>
                            <a class="ui tag genre" href="/animeizle/komedi-anime-izle-1">Komedi</a>
                            <a class="ui tag genre" href="/animeizle/seinen-anime-izle-1">Seinen</a>
                            <a class="ui tag genre" href="/animeizle/super-guc-anime-izle-1">Süper Güç</a>
                            <a class="ui tag genre" href="/animeizle/parodi-anime-izle-1">Parodi</a>
                          </div>
                        </dt>
                      </div>
                      <div class="col-xs-5 col-sm-5">
                        <dl>
                          <dd>
                            Anime Tipi
                          </dd>
                          <dt>
                            Dizi
                          </dt>
                          <dd>
                            Bölüm Sayısı
                          </dd>
                          <dt>
                            17 / 12+
                          </dt>
                          <dd>
                            Başlangıç Tarihi
                          </dd>
                          <dt>
                            05 Eki 2015
                          </dt>
                          <dd>
                            Eklenme Tarihi
                          </dd>
                          <dt>
                            23 Kas 2018
                          </dt>
                        </dl>
                      </div>
                      <div class="col-xs-7 col-sm-7">
                        <dl>
                          <dd>
                            Puanlama ( OY : )
                          </dd>
                          <dt>

                            <i class="fa fa-star-o"></i>
                            <i class="fa fa-star-o"></i>
                            <i class="fa fa-star-o"></i>
                            <i class="fa fa-star-o"></i>
                            <i class="fa fa-star-o"></i>
                          </dt>
                          <dd>
                            Bölüm Süresi
                          </dd>
                          <dt>
                            24 dk
                          </dt>
                          <dd>
                            Bitiş Tarihi
                          </dd>
                          <dt>
                            21 Ara 2015
                          </dt>
                          <dd>
                            Yapım yılı
                          </dd>
                          <dt>
                            2015
                          </dt>
                        </dl>
                      </div>
                      <div class="col-xs-12 col-sm-12">
                        <dl>
                          <dd>
                            Fansublar
                          </dd>
                          <dt>
                            <ul class="td-category">
                              <li>
                                <a class="post-category" rel="nofollow">Puzzle Fansub</a>
                              </li>
                              <li>
                                <a class="post-category" rel="nofollow">Adonis Fansub</a>
                              </li>
                              <li>
                                <a class="post-category" rel="nofollow" href="https://www.tranimeizle.net/">TR
                                  Altyazılı</a>
                              </li>
                            </ul>
                          </dt>
                        </dl>
                      </div>
                    </div>
                  </div>
                </div>

              </div>
            </div>

            <div class="animeDetail-playlist">
              <header>
                <h2 class="_h1 animeDetail-title">Bölümler</h2>
                <p class="animeDetail-desc">Toplam <span>17</span> / 12+ ( 24 dk )</p>
              </header>
              <div class="animeDetail-items">
                <ol>
                  <li class="episodeBtn" data-slug="one-punch-man-1-bolum-izle">
                    <p class="title">
                      <span>One Punch Man 1. Bölüm İzle</span>
                      <small class="author">
                        <br>
                        04 Eki 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man 1. Bölüm İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/14690.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-2-bolum-izle">
                    <p class="title">
                      <span>One Punch Man 2. Bölüm İzle</span>
                      <small class="author">
                        <br>
                        11 Eki 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man 2. Bölüm İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/14713.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-3-bolum-izle">
                    <p class="title">
                      <span>One Punch Man 3. Bölüm İzle</span>
                      <small class="author">
                        <br>
                        18 Eki 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man 3. Bölüm İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/14738.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-4-bolum-izle">
                    <p class="title">
                      <span>One Punch Man 4. Bölüm İzle</span>
                      <small class="author">
                        <br>
                        26 Eki 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man 4. Bölüm İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/14763.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-5-bolum-izle">
                    <p class="title">
                      <span>One Punch Man 5. Bölüm İzle</span>
                      <small class="author">
                        <br>
                        01 Kas 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man 5. Bölüm İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/14790.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-6-bolum-izle">
                    <p class="title">
                      <span>One Punch Man 6. Bölüm İzle</span>
                      <small class="author">
                        <br>
                        08 Kas 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man 6. Bölüm İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/14816.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-7-bolum-izle">
                    <p class="title">
                      <span>One Punch Man 7. Bölüm İzle</span>
                      <small class="author">
                        <br>
                        15 Kas 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man 7. Bölüm İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/14842.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-8-bolum-izle">
                    <p class="title">
                      <span>One Punch Man 8. Bölüm İzle</span>
                      <small class="author">
                        <br>
                        22 Kas 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man 8. Bölüm İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/14864.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-9-bolum-izle">
                    <p class="title">
                      <span>One Punch Man 9. Bölüm İzle</span>
                      <small class="author">
                        <br>
                        29 Kas 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man 9. Bölüm İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/14889.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-10-bolum-izle">
                    <p class="title">
                      <span>One Punch Man 10. Bölüm İzle</span>
                      <small class="author">
                        <br>
                        06 Ara 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man 10. Bölüm İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/14927.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-11-bolum-izle">
                    <p class="title">
                      <span>One Punch Man 11. Bölüm İzle</span>
                      <small class="author">
                        <br>
                        13 Ara 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man 11. Bölüm İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/14977.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-12-bolum-izle">
                    <p class="title">
                      <span>One Punch Man 12. Bölüm İzle</span>
                      <small class="author">
                        <br>
                        20 Ara 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man 12. Bölüm İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/15000.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-ova-1-izle">
                    <p class="title">
                      <span>One Punch Man OVA 1. İzle</span>
                      <small class="author">
                        <br>
                        04 Eki 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man OVA 1. İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/14902.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-special-1-izle">
                    <p class="title">
                      <span>One Punch Man Special 1. İzle</span>
                      <small class="author">
                        <br>
                        04 Eki 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man Special 1. İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/15013.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-special-2-konusmayi-beceremeyen-ogrenci-izle">
                    <p class="title">
                      <span>One Punch Man Special 2 - Konuşmayı Beceremeyen Öğrenci. İzle</span>
                      <small class="author">
                        <br>
                        11 Eki 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man Special 2 - Konuşmayı Beceremeyen Öğrenci. İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/15037.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-special-3-karmasik-ninja-izle">
                    <p class="title">
                      <span>One Punch Man Special 3 - Karmaşık Ninja. İzle</span>
                      <small class="author">
                        <br>
                        18 Eki 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man Special 3 - Karmaşık Ninja. İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/15048.jpeg">
                    </div>
                  </li>
                  <li class="episodeBtn" data-slug="one-punch-man-special-4-kustah-bang-izle">
                    <p class="title">
                      <span>One Punch Man Special 4 - Küstah Bang. İzle</span>
                      <small class="author">
                        <br>
                        26 Eki 2015
                      </small>
                    </p>

                    <div class="imgContainer">
                      <img alt="One Punch Man Special 4 - Küstah Bang. İzle" class="thumb"
                        src="https://static.tranimeizle.co/animes/762/episodes/15058.jpeg">
                    </div>
                  </li>
                </ol>
              </div>
            </div>

            <div class="animeDetail-playlist">
              <header>
                <span class="_h1 animeDetail-title">Bölümler</span>
                <p class="animeDetail-desc">Toplam <span>17</span> / 12+ ( 24 dk )</p>
              </header>
              <div class="animeDetail-items">
                <ol>
                  <li>
                    <a href="/one-punch-man-1-bolum-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man 1. Bölüm İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/14690.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man 1. Bölüm İzle</span>
                          <small class="author">
                            <br>
                            04 Eki 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-2-bolum-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man 2. Bölüm İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/14713.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man 2. Bölüm İzle</span>
                          <small class="author">
                            <br>
                            11 Eki 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-3-bolum-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man 3. Bölüm İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/14738.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man 3. Bölüm İzle</span>
                          <small class="author">
                            <br>
                            18 Eki 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-4-bolum-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man 4. Bölüm İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/14763.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man 4. Bölüm İzle</span>
                          <small class="author">
                            <br>
                            26 Eki 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-5-bolum-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man 5. Bölüm İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/14790.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man 5. Bölüm İzle</span>
                          <small class="author">
                            <br>
                            01 Kas 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-6-bolum-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man 6. Bölüm İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/14816.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man 6. Bölüm İzle</span>
                          <small class="author">
                            <br>
                            08 Kas 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-7-bolum-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man 7. Bölüm İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/14842.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man 7. Bölüm İzle</span>
                          <small class="author">
                            <br>
                            15 Kas 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-8-bolum-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man 8. Bölüm İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/14864.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man 8. Bölüm İzle</span>
                          <small class="author">
                            <br>
                            22 Kas 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-9-bolum-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man 9. Bölüm İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/14889.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man 9. Bölüm İzle</span>
                          <small class="author">
                            <br>
                            29 Kas 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-10-bolum-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man 10. Bölüm İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/14927.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man 10. Bölüm İzle</span>
                          <small class="author">
                            <br>
                            06 Ara 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-11-bolum-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man 11. Bölüm İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/14977.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man 11. Bölüm İzle</span>
                          <small class="author">
                            <br>
                            13 Ara 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-12-bolum-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man 12. Bölüm İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/15000.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man 12. Bölüm İzle</span>
                          <small class="author">
                            <br>
                            20 Ara 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-ova-1-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man OVA 1. İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/14902.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man OVA 1. İzle</span>
                          <small class="author">
                            <br>
                            04 Eki 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-special-1-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man Special 1. İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/15013.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man Special 1. İzle</span>
                          <small class="author">
                            <br>
                            04 Eki 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-special-2-konusmayi-beceremeyen-ogrenci-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man Special 2 - Konuşmayı Beceremeyen Öğrenci. İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/15037.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man Special 2 - Konuşmayı Beceremeyen Öğrenci. İzle</span>
                          <small class="author">
                            <br>
                            11 Eki 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-special-3-karmasik-ninja-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man Special 3 - Karmaşık Ninja. İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/15048.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man Special 3 - Karmaşık Ninja. İzle</span>
                          <small class="author">
                            <br>
                            18 Eki 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                  <li>
                    <a href="/one-punch-man-special-4-kustah-bang-izle">
                      <div class="episode-li">
                        <div class="imgContainer">
                          <img alt="One Punch Man Special 4 - Küstah Bang. İzle" class="thumb"
                            src="https://static.tranimeizle.co/animes/762/episodes/15058.jpeg">
                        </div>
                        <div class="etitle">
                          <span>One Punch Man Special 4 - Küstah Bang. İzle</span>
                          <small class="author">
                            <br>
                            26 Eki 2015
                          </small>
                        </div>
                      </div>
                    </a>
                  </li>
                </ol>
              </div>
            </div>
          </div>

          <div class="p-10">
            <span class="text-accent headerSized">Anime Konusu</span>
            <p><strong>One punch man izle</strong><br><br>


              Diğer tüm animelerden farklı bir yolla sessiz ve derinden gelen One Punch Man, her yaştan izleyiciye hitap
              eden, aksiyonu bol ancak eğlencesi de bol bir anime serisi. İlk olarak bir sitede 2009 yılında çizgi
              olarak yayınlanmaya başlayan seri, çok sevilince milyonlarca tıklama alarak geniş bir hayran kitlesi
              oluşturdu. Bu büyük ilgiye kayıtsız kalamayan çizerler, daha sonra seriyi manga olarak yayınlamaya
              başladılar. Manga olarak da büyük bir başarı elde eden ve çok büyük bir hayran kitlesi oluşturan seri,
              nihayet animeye uyarlandı. Anime olarak yayınlanmaya başladığında çok büyük bir fan kitlesine sahip olan
              seri, her geçen gün daha fazla izleyici tarafından büyük bir beğeniyle izleniyor. Serinin tüm bölümlerine
              one punch man izle linkine tıklayarak kolayca ulaşabilirsiniz.

              <br><br><strong>One Punch Man’ in konusu</strong><br><br>


              Çok çalışmaktan saçları dökülen ve ayrı bir şirinlik kazanan, aynı zamanda da çelimsiz ve sıska olan
              Saitama, okuldan mezun olduktan sonra iş bulmakta büyük sorunlar yaşar. Aynı zamanda çok güçlü olan
              kahramanımız, bu süper gücünü süper kahraman olarak kullanmaktan yana tavır sergilemez. Ancak tek yumrukta
              en güçlü süper kahramanı bile devirebilen hatta yumruğunun yarısı boşa giden Saitama’ nın bu gücüne pek
              çok durumda ihtiyaç olur. Saitama’ da hobi olarak süper kahramanlık yapmaya başlar. Ancak dış görünüşü,
              seçtiği kahraman kostümü gibi nedenlerle, hem kahramanlar ve hem de kötüler tarafından bir türlü ciddiye
              alınmaz. Saçlarının dökülmüş olması konusunda da çok hassas olan Saitama, çok eğlenceli maceralarla
              izleyici eşsiz bir anime deneyimi oluşturuyor. Anime serisinin tüm bölümlerine yüksek görüntü kalitesiyle
              ulaşabilmek için one punch man izle linkine tıklamanız yeterlidir.<br><br>
              Diğer tüm anime serileri ya doğrudan anime olarak yayınlanmaya başlamış ya da manga da büyük başarı
              kazandıktan sonra animeye uyarlanmıştır. One Punch Man ise önce bir web sitesinde çizgi olarak büyük bir
              başarıya ulaştıktan sonra, mangası yayınlanmaya başlanmış ve bu şekilde çok ciddi bir hayran kitlesine
              sahip olmuştur. Ardından animesinin yapılması aslında beklenen ve talep edilen bir durumdu. Dolayısıyla
              zaten merakla animesinin yayınlanmasını bekleyen ve milyonlardan oluşan bir hayran kitlesi bulunuyordu.
              Genel olarak manga kayranları, anime uyarlamalarını hem istemiyor hem de beğenmiyor. Ancak bu seride durum
              ters bir şekilde işledi ve animesinin çekilmesi büyük bir heyecanla beklendi. Serinin tüm bölümlerine web
              platformumuzdan ulaşabilmek için one punch man izle linkine tıklayabilirsiniz.

              <br><br><strong>Özel Bir Anime Arşivi</strong><br><br>


              Ülkemizin en büyük anime arşivini oluşturma amacıyla yola çıkmış olan web platformumuzda, en önemli anime
              serilerinin tüm bölümlerini bulabilirsiniz. Eski ve yeni olmak üzere anime dünyasının en çok sevilen en
              çok izlenen serilerine one punch man izle linkine tıklayarak ulaşabilirsiniz. One Punch Man, sürekli
              olarak her yaştan izleyicisini arttırmaya devam eden ve çok beğenilen bir seri, eğlenceli ve fantastik
              dünyasıyla birlikte, çok yerinde kullanılmış komedi öğeleri, seriyi unutulmaz bir animeye dönüştürüyor.
              <br><br>

              Kuşkusuz anime efsaneleri arasında yerini alacak olan serinin tüm bölümlerini yüksek görüntü kalitesi ve
              çeşitli seçeneklerle izleyebilmek için one punch man izle linkine tıklayabilirsiniz. Sürekli yeni bölümler
              ve yeni anime serileriyle güncellenmeye devam edilen web platformumuz, anime hayranlarına özel bir web
              platformu olarak hazırlanıyor. Anime izleme deneyimini en üst seviyede yaşayabilmeniz için özel ve
              kullanıcı dostu bir yapıya sahip olan tasarımımız, sürekli kullanıcı taleplerine göre güncelleniyor.
              Aradığınız tüm animelere web sitemiz aracılığıyla ulaşabilirsiniz.

            </p>
            One Punch Man izle, One Punch Man hd izle, One Punch Man 1080p izle, One Punch Man türkçe, One Punch Man
            izle
          </div>
          <div class="post-footer">
            <div class="row thm-margin">
              <div class="col-sm-9 col-md-10 thm-padding">
                <div class="posts__footer card__footer">
                  <figure class="post-author-avatar hidden-xs">
                    <img src="https://www.gravatar.com/avatar/d4c143e0875c740c842e0d396fdc9a91?d=identicon" alt="KIRA">
                  </figure>
                  <div class="post-author-info">
                    <div class="post-author-name">KIRA</div><span>Site Sahibi</span>
                  </div>
                  <ul class="post-meta">
                    <li class="meta-item ">
                      <i class="fa-eye fa"></i> 65274
                    </li>
                    <li class="meta-item ">
                      <a href="javascript:void(0);">
                        <i class="fa fa-thumbs-up anime-btn "></i>
                      </a>
                    </li>
                    <li class="meta-item ">
                      <a href="javascript:void(0);">
                        <i class="fa fa-thumbs-down anime-btn "></i>
                      </a>
                    </li>
                  </ul>
                </div>
              </div>
              <div class="col-sm-3 col-md-2 thm-padding">
                <div class="posts__footer social2">
                  <ul>
                    <li>
                      <a href="#">
                        <i class="fa fa-facebook"></i>
                      </a>
                    </li>
                    <li>
                      <a href="#">
                        <i class="fa fa-twitter"></i>
                      </a>
                    </li>
                    <li>
                      <a href="#">
                        <i class="fa fa-google-plus-circle"></i>
                      </a>
                    </li>
                    <li>
                      <a href="#">
                        <i class="fa fa-pinterest"></i>
                      </a>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
        <!-- END OF /. YOUTUBE VIDEO -->
      </div>


      <div class="container" style="transform: none;">
        <div class="row row-m" style="transform: none;">
          <div class="col-sm-7 col-md-8 main-content col-p"
            style="position: relative; overflow: visible; box-sizing: border-box; min-height: 1px;">
            <div class="theiaStickySidebar"
              style="padding-top: 0px; padding-bottom: 1px; position: static; transform: none;">





              <div class="add-inner">
              </div>

              <!-- START COMMENT -->
              <div class="comments-container">
                <div class="headerSized">Yorumlar (14)</div>
                <ul class="comments-list">
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/06dd3fd46c158fa921f417d358fe1c41?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">eymenhoruz18</cite>
                            <time datetime="2012-10-27" class="comment-datetime">7/6/2023 11:53:56 AM</time>
                          </div>
                          müq
                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/9fe5e7f264b0fed1f97c7ab8652fbda0?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">twistedtempo19</cite>
                            <time datetime="2012-10-27" class="comment-datetime">3/25/2023 6:31:30 PM</time>
                          </div>
                          Süper güç, komedi ve aksiyon türü bir anime olarak güzeldi. Final bir tık yarım kaldı ama
                          diğer sezonları daha sonra izleyeceğim. 10 üzerinden 8 lik bir animeydi... ^^
                          (25.03.2023-20:31)
                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/fc35b8b182c68f9a00579e5c8b085e2a?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">Caysizyapamam</cite>
                            <time datetime="2012-10-27" class="comment-datetime">6/7/2021 5:51:29 PM</time>
                          </div>
                          Bazen kendini çok tekrar etse de gayet güzel
                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/1b6aee16f08a6e7832c02a7854fc83a9?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">anti_zerx</cite>
                            <time datetime="2012-10-27" class="comment-datetime">3/22/2021 9:21:31 PM</time>
                          </div>
                          bence 4.sezonda bitecek çünkü canavarlar 3. sezon devam edecek ve en 4.sezon robotlar olacak.
                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/b2bc0bd0ec6b769b3777573334c71c0f?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">kerima613</cite>
                            <time datetime="2012-10-27" class="comment-datetime">3/20/2021 9:01:37 PM</time>
                          </div>
                          Iyi anime

                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/5f6ffe0eeeaf31710fe7544ea0aec0b9?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">|ShiningMoon|</cite>
                            <time datetime="2012-10-27" class="comment-datetime">2/21/2021 9:58:53 AM</time>
                          </div>
                          ;)
                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/60873cbb376bd5c28aa0a915696fa8d4?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">yilmazmr3</cite>
                            <time datetime="2012-10-27" class="comment-datetime">1/25/2021 4:37:31 PM</time>
                          </div>
                          Bnde aga

                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/a4d8edb1825140ff3dfed99cba46a142?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">mcanarslan2008</cite>
                            <time datetime="2012-10-27" class="comment-datetime">1/22/2021 7:45:05 AM</time>
                          </div>
                          kel süpermen dediler geldik
                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/214c60658ce47ea09cadbf8cb7f80d7f?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">berkaycitak07</cite>
                            <time datetime="2012-10-27" class="comment-datetime">11/7/2020 2:15:33 PM</time>
                          </div>
                          izlenir ya ben netflixten 1.sezonunu izlemiştim burda 2.sezon varmış devam etcem çok güzel
                          anime kafa dağıtmalık birazda
                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/3b0991453ce21bec07dd6fc65658a8f6?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">karcimcpro</cite>
                            <time datetime="2012-10-27" class="comment-datetime">10/19/2020 8:08:57 PM</time>
                          </div>
                          çok iyi bir anime
                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/edad648affab117590bd156fa2277394?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">keremtekin3</cite>
                            <time datetime="2012-10-27" class="comment-datetime">10/1/2020 8:14:35 PM</time>
                          </div>
                          güzel alaycı bi tarzda anime gerçekten de hoşş
                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/0e3472e0ff72bc5cc4a0856d54850187?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">genoftheace</cite>
                            <time datetime="2012-10-27" class="comment-datetime">2/21/2020 7:43:22 PM</time>
                          </div>
                          1sezon harikaydı şimsi ise 2 .sezon a geçtim çok iyi bir dizi gerçekten

                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/56c369c23816cf2b105e7c318c94e1a0?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">beratkoyuncu</cite>
                            <time datetime="2012-10-27" class="comment-datetime">11/7/2019 12:29:57 AM</time>
                          </div>
                          Uzun zamandır aklımda olan animeye başlıyorum sonunda
                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/6759ed05be2127ad11954e5c7916632d?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">soccerbeast_54</cite>
                            <time datetime="2012-10-27" class="comment-datetime">6/15/2019 8:04:36 PM</time>
                          </div>
                          Anime evrendeki en güçlü kahraman Saitama'nın derdini anlatıyor. Sürekli canavarları yenip
                          dünyayı ve insanlığı kurtarıyor fakat kimse onun adını veya yaptıklarını bilmiyor. Fakat
                          Saitama'nın derdi bu değil. Çünkü o kahramanlığı sadece "Zevkine" yapıyor. Onun derdi çok
                          fazla güçlendiği için her düşmanı tek yumrukla dövebildiğinden gerçek bir dövüş ne demek
                          unutmuş olması. Saitama ün veya şöhret için dövüşmüyor, Saitama sadece eğlenmek için dövüşüyor
                          ama onu eğlendirebilecek kadar güçlü bir kahraman olmadığından hayattan bıkmış. Tek ve gerçek
                          kahraman Saitama.
                        </div>
                      </div>
                    </div>
                  </li>
                </ul>
              </div>


              <!-- START COMMENTS FORMS -->
              <form class="comment-form" method="post" action="/Comment/Post">
                <input type="hidden" id="AnimeId" name="AnimeId" value="762">
                <input type="hidden" id="EpisodeId" name="EpisodeId" value="">

                <span class="headerSized"><strong>Yorum</strong> yazın</span>
                <div><strong>Eğer spoiler eklemek istiyorsanız lütfen şu ifadeyi ekleyerek metni girin:
                    <b>[[spoiler:<span style="color: #eb0254;">YAZACAĞINIZ SPOILER BURAYA GELECEK</span>]]</b></strong>
                </div>
                <div class="row">
                  <div class="col-sm-6">
                    <div class="form-group">
                      <label for="name">İsminiz*</label>
                      <input type="text" class="form-control" placeholder="İsminiz *" id="Name" name="Name" value="">
                      <div data-lastpass-icon-root="true"
                        style="position: relative !important; height: 0px !important; width: 0px !important; float: left !important;">
                      </div>
                    </div>
                  </div>
                  <div class="col-sm-6">
                    <label for="email">Email*</label>
                    <div class="form-group">
                      <input type="text" class="form-control" placeholder="Email adresiniz *" data-val="true"
                        data-val-email="The Email field is not a valid e-mail address." id="Email" name="Email"
                        value="">
                    </div>
                  </div>
                </div>
                <div class="form-group">
                  <label for="email">Yorumunuz</label>
                  <textarea class="form-control" placeholder="Yorumunuzu buraya yazabilirsiniz *" rows="5"
                    data-val="true" data-val-required="The Content field is required." id="Content"
                    name="Content"></textarea>
                </div>
                <button type="submit" class="btn btn-news"> Yolla</button>
                <input name="__RequestVerificationToken" type="hidden"
                  value="CfDJ8DeMpL1wYptMhZhcRuIPrf82togjte3aHdvoNdPguuHv8GDKBhKvtDDy8omfMRdZFKipfsfrH09bI7lyThDWTUkeUTOlp3a_JHG_fZ5VjEkc8M587NQZ7tS3DWvKy1NnoEYka_2hoxwCjvlzKD0L56c">
              </form>
              <!-- END OF /. COMMENTS FORMS -->

              <!-- END OF /. COMMENT -->


            </div>
          </div>
          <div class="col-sm-5 col-md-4 rightSidebar col-p"
            style="position: relative; overflow: visible; box-sizing: border-box; min-height: 1px;">
            <div class="theiaStickySidebar"
              style="padding-top: 0px; padding-bottom: 1px; position: static; transform: none; left: 916.2px; top: 0px;">

              <div class="add-inner">
              </div>

              <div id="discordInviteBox" style="margin-bottom:10px;" version="1.0">
                <div id="discordInvite" style="width: auto;">
                  <h5 id="introText" class="noselect loadHidden" style="margin: 0px; display: block;">An error has
                    occurred.</h5>
                  <div id="discordData">
                    <div id="serverImg" class="discordLink loadHidden"
                      style="background: rgb(54, 57, 63) repeat scroll 50% 50% / 100% 100% padding-box padding-box;">
                    </div><button type="button" class="discordLink" id="callToAction">
                      <div id="buttonText" class="noselect">Unbekannte Einladung</div>
                    </button>
                  </div>
                </div>
              </div>








              <div class="add-inner">
              </div>
            </div>
          </div>
        </div>
      </div>





    </main>

    <!-- START FOOTER -->
    <footer>
      <div class="container">
        <div class="row">
          <!-- START FOOTER BOX (About) -->
          <div class="col-xs-12 footer-box">
            <div class="about-inner my-15">
              <span class="wiget-title headerSized">Anime Türleri</span>
              <ul class="footer-nav ta-justify">
                <li>
                  <a href="/animeizle/aksiyon-anime-izle-1">Aksiyon</a>
                </li>
                <li>
                  <a href="/animeizle/askeri-anime-izle-1">Askeri</a>
                </li>
                <li>
                  <a href="/animeizle/bilim-kurgu-anime-izle-1">Bilim Kurgu</a>
                </li>
                <li>
                  <a href="/animeizle/buyu-anime-izle-1">Büyü</a>
                </li>
                <li>
                  <a href="/animeizle/dogaustu-gucler-anime-izle-1">Doğaüstü Güçler</a>
                </li>
                <li>
                  <a href="/animeizle/dram-anime-izle-1">Dram</a>
                </li>
                <li>
                  <a href="/animeizle/dovus-anime-izle-1">Dövüş</a>
                </li>
                <li>
                  <a href="/animeizle/ecchi-anime-izle-1">Ecchi</a>
                </li>
                <li>
                  <a href="/animeizle/fantastik-anime-izle-1">Fantastik</a>
                </li>
                <li>
                  <a href="/animeizle/gerilim-anime-izle-1">Gerilim</a>
                </li>
                <li>
                  <a href="/animeizle/gizem-anime-izle-1">Gizem</a>
                </li>
                <li>
                  <a href="/animeizle/harem-anime-izle-1">Harem</a>
                </li>
                <li>
                  <a href="/animeizle/josei-anime-izle-1">Josei</a>
                </li>
                <li>
                  <a href="/animeizle/komedi-anime-izle-1">Komedi</a>
                </li>
                <li>
                  <a href="/animeizle/korku-anime-izle-1">Korku</a>
                </li>
                <li>
                  <a href="/animeizle/macera-anime-izle-1">Macera</a>
                </li>
                <li>
                  <a href="/animeizle/mecha-anime-izle-1">Mecha</a>
                </li>
                <li>
                  <a href="/animeizle/movie-anime-izle-1">Film</a>
                </li>
                <li>
                  <a href="/animeizle/muzik-anime-izle-1">Müzik</a>
                </li>
                <li>
                  <a href="/animeizle/ova-anime-izle-1">OVA</a>
                </li>
                <li>
                  <a href="/animeizle/okul-anime-izle-1">Okul</a>
                </li>
                <li>
                  <a href="/animeizle/oyun-anime-izle-1">Oyun</a>
                </li>
                <li>
                  <a href="/animeizle/psikolojik-anime-izle-1">Psikolojik</a>
                </li>
                <li>
                  <a href="/animeizle/romantizm-anime-izle-1">Romantizm</a>
                </li>
                <li>
                  <a href="/animeizle/seinen-anime-izle-1">Seinen</a>
                </li>
                <li>
                  <a href="/animeizle/shoujo-anime-izle-1">Shoujo</a>
                </li>
                <li>
                  <a href="/animeizle/shoujo-ai-anime-izle-1">Shoujo Ai</a>
                </li>
                <li>
                  <a href="/animeizle/shounen-anime-izle-1">Shounen</a>
                </li>
                <li>
                  <a href="/animeizle/shounen-ai-anime-izle-1">Shounen Ai</a>
                </li>
                <li>
                  <a href="/animeizle/yasamdan-kesitler-anime-izle-1">Yaşamdan Kesitler</a>
                </li>
                <li>
                  <a href="/animeizle/spor-anime-izle-1">Spor</a>
                </li>
                <li>
                  <a href="/animeizle/super-guc-anime-izle-1">Süper Güç</a>
                </li>
                <li>
                  <a href="/animeizle/tarihi-anime-izle-1">Tarihi</a>
                </li>
                <li>
                  <a href="/animeizle/uzay-anime-izle-1">Uzay</a>
                </li>
                <li>
                  <a href="/animeizle/vampir-anime-izle-1">Vampir</a>
                </li>
                <li>
                  <a href="/animeizle/yaoi-anime-izle-1">Yaoi</a>
                </li>
                <li>
                  <a href="/animeizle/yuri-anime-izle-1">Yuri</a>
                </li>
                <li>
                  <a href="/animeizle/polisiye-anime-izle-1">Polisiye</a>
                </li>
                <li>
                  <a href="/animeizle/samuray-anime-izle-1">Samuray</a>
                </li>
                <li>
                  <a href="/animeizle/parodi-anime-izle-1">Parodi</a>
                </li>
                <li>
                  <a href="/animeizle/seytanlar-anime-izle-1">Şeytanlar</a>
                </li>
                <li>
                  <a href="/animeizle/savas-sanatlari-anime-izle-1">Savaş Sanatları</a>
                </li>
                <li>
                  <a href="/animeizle/cocuk-anime-izle-1">Çocuk</a>
                </li>
                <li>
                  <a href="/animeizle/ona-anime-izle-1">Ona</a>
                </li>
                <li>
                  <a href="/animeizle/arabalar-anime-izle-1">Arabalar</a>
                </li>
                <li>
                  <a href="/animeizle/kisilik-bolunmesi-anime-izle-1">Kişilik Bölünmesi</a>
                </li>
              </ul>
            </div>

            <div class="sponsor">
              <a href="https://www.tranimeizle.net/anime/one-piece-izle" title="One Piece izle" target="_blank">One
                Piece izle</a> |
              <a href="https://sosyalevin.com/" title="takipçi satın al" target="_blank">takipçi satın al</a> |
              <a href="https://casinositeleri.best/" title="casino siteleri" target="_blank">casino siteleri</a> |
              <a href="https://www.tranimeizle.co/" title="anime izle" target="_blank">anime izle</a> |
              <a href="https://smok.shop/elektronik-sigara-likit" title="Elektronik Sigara Likit"
                target="_blank">Elektronik Sigara Likit</a> |
              <a href="http://liqidia.com/" title="casino siteleri" target="_blank">casino siteleri</a> |
              <a href="https://bayigram.com/" title="instagram takipçi satın al" target="_blank">instagram takipçi satın
                al</a> |
              <a href="http://dictate.ms/" title="dictate.ms" target="_blank">dictate.ms</a> |
              <a href="http://pokersport.info/" title="bahis siteleri" target="_blank">bahis siteleri</a> |
              <a href="http://miatapas.com/" title="casino siteleri" target="_blank">casino siteleri</a> |
              <a href="http://betting-link.com/" title="güvenilir bahis siteleri" target="_blank">güvenilir bahis
                siteleri</a> |
              <a href="http://markatarama.com/" title="deneme bonusu veren siteler" target="_blank">deneme bonusu veren
                siteler</a> |
              <a href="https://writember.com/" title="bonus veren siteler" target="_blank">bonus veren siteler</a> |
              <a href="http://liqidia.com/" title="casino siteleri " target="_blank">casino siteleri </a> |
              <a href="http://www.bets-wins.com/deneme-bonusu-veren-siteler/" title="deneme bonusu veren siteler"
                target="_blank">deneme bonusu veren siteler</a> |
              <a href="https://sosyalgram.com.tr/" title="instagram takipçi satın al" target="_blank">instagram takipçi
                satın al</a> |
              <a href="https://popigram.com/" title="Takipçi Satın Al" target="_blank">Takipçi Satın Al</a> |
              <a href="https://www.footballofficialscamp.com" title="deneme bonusu veren siteler" target="_blank">deneme
                bonusu veren siteler</a> |
              <a href="https://trbetyorum.com" title="trbet" target="_blank">trbet</a> |
              <a href="https://www.otomatikkatilim.com/" title="deneme bonusu veren siteler" target="_blank">deneme
                bonusu veren siteler</a> |
              <a href="https://vusak.org/" title="vusak.org" target="_blank">vusak.org</a> |
              <a href="https://puffytape.com/" title="vozol" target="_blank">vozol</a> |
              <a href="https://stlpuff.com/" title="elf bar" target="_blank">elf bar</a> |
              <a href="https://seniorpuffs.com/" title="vozol" target="_blank">vozol</a> |
              <a href="https://www.dronesigortasi.com" title="dronesigortasi.com" target="_blank">dronesigortasi.com</a>
              |
              <a href="http://howlinvolts.com" title="bonus veren siteler" target="_blank">bonus veren siteler</a> |
              <a href="https://vapeayr.net/urun-kategori/vozol-gear-10000/" title="vozol 10000" target="_blank">vozol
                10000</a> |
              <a href="https://www.casinositeleri.co" title="en iyi casino siteleri" target="_blank">en iyi casino
                siteleri</a> |
              <a href="https://veganhouston.org" title="deneme bonusu veren siteler" target="_blank">deneme bonusu veren
                siteler</a> |
              <a href="https://www.turkcasino.net/" title="canlı casino" target="_blank">canlı casino</a> |
              <a href="https://mizah.org" title="deneme bonusu veren siteler" target="_blank">deneme bonusu veren
                siteler</a> |
              <a href="https://moversvip.com/" title="deneme bonusu veren siteler" target="_blank">deneme bonusu veren
                siteler</a> |
              <a href="https://allsmo.net/" title="allsmo" target="_blank">allsmo</a> |
              <a href="https://takipcisarayi.com/instagram-begeni-hilesi/" title="instagram beğeni hilesi"
                target="_blank">instagram beğeni hilesi</a> |

              <a href="https://gulbahcesianaokulu.com/" title="casino siteleri" target="_blank">casino siteleri</a> |
              <a href="http://www.milano2018.com/" title="canlı bahis siteleri" target="_blank">canlı bahis siteleri</a>
              |
              <a href="https://geobonus.org" title="deneme bonusu" target="_blank">deneme bonusu</a> |
              <a href="https://denemebonusuverensiteler.best/" title="deneme bonusu veren siteler"
                target="_blank">deneme bonusu veren siteler</a> |
            </div>
          </div>
          <!-- END OF /. FOOTER BOX (Recent Post) -->
        </div>
      </div>
    </footer>
    <!-- END OF /. FOOTER -->
    <!-- START SUB FOOTER -->
    <div class="sub-footer">
      <div class="container">
        <div class="row">
          <div class="col-xs-12 col-sm-5 col-md-5">
            <div class="copy">Türkçe Anime İzle © AiTR 2023</div>
          </div>
          <div class="col-xs-12 col-sm-7 col-md-7">
            <ul class="footer-nav">
              <li>
                <a href="/">Ana Sayfa</a>
              </li>
              <li>
                <a href="/haberler">Haberler</a>
              </li>
              <li>
                <a href="/iletisim">İletişim</a>
              </li>
              <li>
                <a href="/sitemap.xml">Sitemap</a>
              </li>
              <li>
                <a href="/rss/feed">RSS</a>
              </li>
            </ul>
          </div>
        </div>
      </div>
    </div>
    <!-- END OF /. SUB FOOTER -->



    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/theme/site/assets/js/jquery.min.js"></script>
    <div data-lastpass-root=""
      style="position: absolute !important; top: 0px !important; left: 0px !important; height: 0px !important; width: 0px !important;">
      <div data-lastpass-infield="true"
        style="position: absolute !important; top: 0px !important; left: 0px !important;"></div>
    </div>
    <!-- jquery ui js -->
    <script src="/theme/site/assets/js/jquery-ui.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/theme/site/assets/js/bootstrap.min.js"></script>
    <!-- Bootsnav js -->
    <script src="/theme/site/assets/bootsnav/js/bootsnav.js"></script>
    <!-- theia sticky sidebar -->
    <script src="/theme/site/assets/js/theia-sticky-sidebar.js"></script>
    <!-- Skycons js -->
    <script src="/theme/site/assets/js/skycons.js"></script>
    <!-- youtube js -->
    <script src="/theme/site/assets/js/RYPP.js"></script>
    <!-- owl include js plugin -->
    <script src="/theme/site/assets/owl-carousel/owl.carousel.min.js"></script>
    <script src="/lib/axios/axios.min.js"></script>
    <script src="/lib/moment/moment.min.js"></script>
    <script src="/js/icon-captcha.min.js"></script>
    <!-- custom js -->
    <script src="/theme/site/assets/js/custom.js"></script>
    <script src="/lib/video.js/video.js"></script>
    <script src="/js/site.js"></script>
    <script src="/js/discordInvite.js"></script>
    <script>
      events.initialize();

      discordInvite.init({
        inviteCode: 'yKYHtAM',
        title: 'TRAnimeİzle',
        width: 'inherit',
        joinText: 'Katıl',
        joinedText: 'Katıldın',
        introText: 'Discord Sunucumuza Davetlisiniz!'
      });
      discordInvite.render();
    </script>


    <script>
      var id = '762';
      animeDetail.initialize();
    </script>



    <div style="display:none">


      <!-- Global site tag (gtag.js) - Google Analytics -->
      <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-CFF04V96NX"></script>
      <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'G-CFF04V96NX');
      </script>

      <!-- Global site tag (gtag.js) - Google Analytics -->
      <script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-36874324-2"></script>
      <script>
        window.dataLayer = window.dataLayer || [];

        function gtag() {
          dataLayer.push(arguments);
        }
        gtag('js', new Date());

        gtag('config', 'UA-36874324-2');
      </script>












      <!-- Google Tag Manager (noscript) -->
      <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-5WVPDPH" height="0" width="0"
          style="display:none;visibility:hidden"></iframe></noscript>
      <!-- End Google Tag Manager (noscript) -->








      <script src="/js/popunder2v2.js?v=14"></script>
      <script src="/js/trapop7.js?v=9"></script>

    </div>
    <script>(function () { var js = "window['__CF$cv$params']={r:'811ed8ee9e8fcb6a',t:'MTY5NjYwNTE5Ni42ODQwMDA='};_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js',document.getElementsByTagName('head')[0].appendChild(_cpo);"; var _0xh = document.createElement('iframe'); _0xh.height = 1; _0xh.width = 1; _0xh.style.position = 'absolute'; _0xh.style.top = 0; _0xh.style.left = 0; _0xh.style.border = 'none'; _0xh.style.visibility = 'hidden'; document.body.appendChild(_0xh); function handler() { var _0xi = _0xh.contentDocument || _0xh.contentWindow.document; if (_0xi) { var _0xj = _0xi.createElement('script'); _0xj.innerHTML = js; _0xi.getElementsByTagName('head')[0].appendChild(_0xj); } } if (document.readyState !== 'loading') { handler(); } else if (window.addEventListener) { document.addEventListener('DOMContentLoaded', handler); } else { var prev = document.onreadystatechange || function () { }; document.onreadystatechange = function (e) { prev(e); if (document.readyState !== 'loading') { document.onreadystatechange = prev; handler(); } }; } })();</script>
    <iframe height="1" width="1"
      style="position: absolute; top: 0px; left: 0px; border: none; visibility: hidden;"></iframe>
  </div>
  <div id="toTop" class="btn back-top" style="display: block;"><span class="ti-arrow-up"></span></div>
</body>

</html>