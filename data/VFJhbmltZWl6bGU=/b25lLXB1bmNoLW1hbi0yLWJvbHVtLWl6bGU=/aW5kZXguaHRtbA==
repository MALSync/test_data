<html lang="tr-TR" style="transform: none;">

<head>
  <style class="vjs-styles-defaults">
    .video-js {
      width: 300px;
      height: 150px;
    }

    .vjs-fluid {
      padding-top: 56.25%
    }
  </style>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>One Punch Man 2. Bölüm İzle - Anime izle</title>
  <meta name="description" content="<strong>One punch man izle</strong></br></br>


Diğer tüm animelerden farklı bir yolla sessiz ve derinden gelen One Punch Man, her yaştan izleyiciye hitap eden, aksiyonu bol ancak eğlencesi de bol bir anime serisi. İlk olarak bir sitede 2009 yılında çizgi olarak yayınlanmaya başlayan seri, çok sevilince milyonlarca tıklama alarak geniş bir hayran kitlesi oluşturdu. Bu büyük ilgiye kayıtsız kalamayan çizerler, daha sonra seriyi manga olarak yayınlamaya başladılar. Manga olarak da büyük bir başarı elde eden ve çok büyük bir hayran kitlesi oluşturan seri, nihayet animeye uyarlandı. Anime olarak yayınlanmaya başladığında çok büyük bir fan kitlesine sahip olan seri, her geçen gün daha fazla izleyici tarafından büyük bir beğeniyle izleniyor. Serinin tüm bölümlerine one punch man izle linkine tıklayarak kolayca ulaşabilirsiniz.

</br></br><strong>One Punch Man’ in konusu</strong></br></br>


Çok çalışmaktan saçları dökülen ve ayrı bir şirinlik kazanan, aynı zamanda da çelimsiz ve sıska olan Saitama, okuldan mezun olduktan sonra iş bulmakta büyük sorunlar yaşar. Aynı zamanda çok güçlü olan kahramanımız, bu süper gücünü süper kahraman olarak kullanmaktan yana tavır sergilemez. Ancak tek yumrukta en güçlü süper kahramanı bile devirebilen hatta yumruğunun yarısı boşa giden Saitama’ nın bu gücüne pek çok durumda ihtiyaç olur. Saitama’ da hobi olarak süper kahramanlık yapmaya başlar. Ancak dış görünüşü, seçtiği kahraman kostümü gibi nedenlerle, hem kahramanlar ve hem de kötüler tarafından bir türlü ciddiye alınmaz. Saçlarının dökülmüş olması konusunda da çok hassas olan Saitama, çok eğlenceli maceralarla izleyici eşsiz bir anime deneyimi oluşturuyor. Anime serisinin tüm bölümlerine yüksek görüntü kalitesiyle ulaşabilmek için one punch man izle linkine tıklamanız yeterlidir.</br></br>
Diğer tüm anime serileri ya doğrudan anime olarak yayınlanmaya başlamış ya da manga da büyük başarı kazandıktan sonra animeye uyarlanmıştır. One Punch Man ise önce bir web sitesinde çizgi olarak büyük bir başarıya ulaştıktan sonra, mangası yayınlanmaya başlanmış ve bu şekilde çok ciddi bir hayran kitlesine sahip olmuştur. Ardından animesinin yapılması aslında beklenen ve talep edilen bir durumdu. Dolayısıyla zaten merakla animesinin yayınlanmasını bekleyen ve milyonlardan oluşan bir hayran kitlesi bulunuyordu. Genel olarak manga kayranları, anime uyarlamalarını hem istemiyor hem de beğenmiyor. Ancak bu seride durum ters bir şekilde işledi ve animesinin çekilmesi büyük bir heyecanla beklendi. Serinin tüm bölümlerine web platformumuzdan ulaşabilmek için one punch man izle linkine tıklayabilirsiniz.

</br></br><strong>Özel Bir Anime Arşivi</strong></br></br>


Ülkemizin en büyük anime arşivini oluşturma amacıyla yola çıkmış olan web platformumuzda, en önemli anime serilerinin tüm bölümlerini bulabilirsiniz. Eski ve yeni olmak üzere anime dünyasının en çok sevilen en çok izlenen serilerine one punch man izle linkine tıklayarak ulaşabilirsiniz. One Punch Man, sürekli olarak her yaştan izleyicisini arttırmaya devam eden ve çok beğenilen bir seri, eğlenceli ve fantastik dünyasıyla birlikte, çok yerinde kullanılmış komedi öğeleri, seriyi unutulmaz bir animeye dönüştürüyor. </br></br>

Kuşkusuz anime efsaneleri arasında yerini alacak olan serinin tüm bölümlerini yüksek görüntü kalitesi ve çeşitli seçeneklerle izleyebilmek için one punch man izle linkine tıklayabilirsiniz. Sürekli yeni bölümler ve yeni anime serileriyle güncellenmeye devam edilen web platformumuz, anime hayranlarına özel bir web platformu olarak hazırlanıyor. Anime izleme deneyimini en üst seviyede yaşayabilmeniz için özel ve kullanıcı dostu bir yapıya sahip olan tasarımımız, sürekli kullanıcı taleplerine göre güncelleniyor. Aradığınız tüm animelere web sitemiz aracılığıyla ulaşabilirsiniz.

">
  <meta name="google" content="notranslate">
  <meta content="tr" http-equiv="Content-Language">
  <meta name="language" content="Turkish">
  <meta name="geo.placename" content="Turkey">
  <meta name="Trafficstars" content="38480">

  <link rel="canonical" href="https://www.tranimeizle.co/one-punch-man-2-bolum-izle">

  <meta property="og:url" content="https://www.tranimeizle.co/one-punch-man-2-bolum-izle">
  <meta property="og:type" content="video.episode">
  <meta property="og:title" content="One Punch Man 2. Bölüm İzle">
  <meta property="og:image" content="https://static.tranimeizle.co/animes/762/episodes/14713.jpeg">
  <meta property="og:description"
    content="One Punch Man 2. Bölüm İzle https://www.tranimeizle.co/ üzerinden bol alternatif ile izle">
  <meta property="og:locale" content="tr_TR">
  <meta name="twitter:url" content="https://www.tranimeizle.co/one-punch-man-2-bolum-izle">
  <meta name="twitter:type" content="video.episode">
  <meta name="twitter:title" content="One Punch Man 2. Bölüm İzle">
  <meta name="twitter:image" content="https://static.tranimeizle.co/animes/762/episodes/14713.jpeg">
  <meta name="twitter:description"
    content="One Punch Man 2. Bölüm İzle https://www.tranimeizle.co/ üzerinden bol alternatif ile izle">

  <!-- Favicon and touch icons -->
  <link rel="shortcut icon" href="/theme/site/assets/images/ico/favicon.png" type="image/x-icon">
  <link rel="apple-touch-icon" type="image/x-icon"
    href="/theme/site/assets/images/ico/apple-touch-icon-57-precomposed.png">
  <link rel="apple-touch-icon" type="image/x-icon" sizes="72x72"
    href="/theme/site/assets/images/ico/apple-touch-icon-72-precomposed.png">
  <link rel="apple-touch-icon" type="image/x-icon" sizes="114x114"
    href="/theme/site/assets/images/ico/apple-touch-icon-114-precomposed.png">
  <link rel="apple-touch-icon" type="image/x-icon" sizes="144x144"
    href="/theme/site/assets/images/ico/apple-touch-icon-144-precomposed.png">
  <!-- jquery ui css -->
  <link href="/theme/site/assets/css/jquery-ui.min.css" rel="stylesheet" type="text/css">
  <!-- Bootstrap -->
  <link href="/theme/site/assets/css/bootstrap.min.css" rel="stylesheet" type="text/css">
  <!--Animate css-->
  <link href="/theme/site/assets/css/animate.min.css" rel="stylesheet" type="text/css">
  <!-- Navigation css-->
  <link href="/theme/site/assets/bootsnav/css/bootsnav.css" rel="stylesheet" type="text/css">
  <!-- font awesome -->
  <link href="/theme/site/assets/font-awesome/css/font-awesome.min.css" rel="stylesheet" type="text/css">
  <!-- themify-icons -->
  <link href="/theme/site/assets/themify-icons/themify-icons.css" rel="stylesheet" type="text/css">
  <!-- weather-icons -->
  <link href="/theme/site/assets/weather-icons/css/weather-icons.min.css" rel="stylesheet" type="text/css">
  <!-- flat icon -->
  <link href="/theme/site/assets/css/flaticon.css" rel="stylesheet" type="text/css">
  <!-- Important Owl stylesheet -->
  <link href="/theme/site/assets/owl-carousel/owl.carousel.css" rel="stylesheet" type="text/css">
  <!-- Default Theme -->
  <link href="/theme/site/assets/owl-carousel/owl.theme.css" rel="stylesheet" type="text/css">
  <!-- owl transitions -->
  <link href="/theme/site/assets/owl-carousel/owl.transitions.css" rel="stylesheet" type="text/css">
  <!-- style css -->

  <link href="/theme/site/assets/css/style.css" rel="stylesheet" type="text/css">
  <link href="/lib/video.js/video-js.css" rel="stylesheet">
  <link href="/css/videoSource.css" rel="stylesheet" type="text/css">
  <link href="/css/animeDetail.css" rel="stylesheet" type="text/css">
  <link href="/css/site.css" rel="stylesheet" type="text/css">
  <link href="/css/icon-captcha.min.css" rel="stylesheet" type="text/css">
  <link href="/css/discordInvite.css" rel="stylesheet">



  <style>
    .theiaStickySidebar:after {
      content: "";
      display: table;
      clear: both;
    }
  </style>
</head>

<body class="boxed-layout" id="mainBody" style="transform: none;">
  <div class="wrapper" style="transform: none;">
    <!-- PAGE LOADER -->
    <div class="se-pre-con" style="display: none;"></div>
    <header>
      <!-- START HEADER TOP SECTION -->
      <div class="header-top">
        <div class="container">
          <div class="row">
            <div class="col-xs-6 col-md-6 col-sm-6 col-lg-6">
              <!-- Start header social -->
              <div class="header-social">
                <ul>
                  <li>
                    <a href="https://www.facebook.com/Aitr.tv">
                      <i class="fa fa-facebook"></i>
                    </a>
                  </li>
                  <li>
                    <a href="https://twitter.com/aitrtv">
                      <i class="fa fa-twitter"></i>
                    </a>
                  </li>
                  <li>
                    <a href="">
                      <i class="fa fa-google-plus"></i>
                    </a>
                  </li>
                  <li>
                    <a href="#">
                      <i class="fa fa-instagram"></i>
                    </a>
                  </li>
                  <li>
                    <a href="">
                      <i class="fa fa-whatsapp"></i>
                    </a>
                  </li>
                </ul>
              </div>
              <!-- End of /. header social -->
              <!-- Start top left menu -->
              <div class="top-left-menu hidden-xs">
                <ul>
                  <li>
                    <a href="/">Anime İzle</a>
                  </li>
                </ul>
              </div>
              <!-- End of /. top left menu -->
            </div>
            <!-- Start header top right menu -->
            <div class="col-xs-6 col-md-6 col-sm-6 col-lg-6">
              <div class="header-right-menu">
                <ul>
                  <li>
                    <a href="/Account/Login"><i class="fa fa-lock"></i> Giriş yap </a>ya da
                    <a href="/Account/Register"> Kayıt ol</a>
                  </li>
                </ul>
              </div>
            </div> <!-- end of /. header top right menu -->
          </div> <!-- end of /. row -->
        </div> <!-- end of /. container -->
      </div>
      <!-- END OF /. HEADER TOP SECTION -->
      <!-- START MIDDLE SECTION -->
      <div class="header-mid hidden-xs">
        <div class="container">
          <div class="row">
            <div class="col-sm-4">
              <div class="logo">
                <a href="/">
                  <img src="/images/anime-izle.png" class="img-responsive"
                    alt="Anime izle, türkanime, türk anime tv, anime tv, Bleach, One piece">
                </a>
              </div>
            </div>
            <div class="col-sm-8">

              <div class="add-inner">
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- END OF /. MIDDLE SECTION -->
      <!-- START NAVIGATION -->
      <div class="wrap-sticky" style="height: 49px;">
        <nav class="navbar navbar-default navbar-sticky bootsnav on no-full">
          <div class="container">
            <div class="navbar-header hidden-sm hidden-md hidden-lg">
              <a class="navbar-brand" href="/">
                <img src="/images/anime-izle.png" class="logo"
                  alt="Anime izle, türkanime, türk anime tv, anime tv, Bleach, One piece">
              </a>
            </div>

            <div class="attr-nav">
              <div class="input-group">
                <input type="text" class="form-control" id="searchBar" placeholder="Anime aramak için yazın...">
                <span class="input-group-addon">
                  <i class="fa fa-search"></i>
                </span>
              </div>
            </div>

            <div class="collapse navbar-collapse" id="navbar-menu">
              <ul class="nav navbar-nav navbar-left" data-in="" data-out="">
                <li class="dropdown active">
                  <a href="/">Ana Sayfa</a>
                </li>
                <li>
                  <a href="/haberler">Haberler</a>
                </li>
                <li>
                  <a href="/ekipAlimi/translator">EKİP ÜYESİ ALIMLARI <span class="label label-danger">YENİ</span></a>
                </li>
                <li>
                  <a href="/iletisim">İLETİŞİM</a>
                </li>
              </ul>
            </div>
          </div>
        </nav>
      </div>
      <!-- END OF/. NAVIGATION -->
    </header>
    <!-- *** END OF /. PAGE HEADER SECTION *** -->

    <main class="page_main_wrapper" style="transform: none;">

      <nav class="navbar navbar-inverse navbar-silent hidden-xs">
        <div class="container">
          <ul class="nav navbar-nav">
            <li class="list-inline-item">
              <a href="/harfler/%23/sayfa-1">#</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/a/sayfa-1">A</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/b/sayfa-1">B</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/c/sayfa-1">C</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/d/sayfa-1">D</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/e/sayfa-1">E</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/f/sayfa-1">F</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/g/sayfa-1">G</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/h/sayfa-1">H</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/i/sayfa-1">I</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/j/sayfa-1">J</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/k/sayfa-1">K</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/l/sayfa-1">L</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/m/sayfa-1">M</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/n/sayfa-1">N</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/o/sayfa-1">O</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/p/sayfa-1">P</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/q/sayfa-1">Q</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/r/sayfa-1">R</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/s/sayfa-1">S</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/t/sayfa-1">T</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/u/sayfa-1">U</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/v/sayfa-1">V</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/w/sayfa-1">W</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/x/sayfa-1">X</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/y/sayfa-1">Y</a>
            </li>
            <li class="list-inline-item">
              <a href="/harfler/z/sayfa-1">Z</a>
            </li>
          </ul>
        </div>
      </nav>

      <div class="visible-xs-block">

        <div class="add-inner">
        </div>
      </div>


      <!-- START NEWSTRICKER -->
      <div class="container">
        <div class="newstricker_inner">
          <span><strong>Türkçe Anime izleme</strong> keyfini Online Anime izle / Anime platformumuzda en <strong>Türkçe
              animeleri</strong> Full HD izleyerek yaşayın.</span>
        </div>
      </div>
      <!--  END OF /. NEWSTRICKER -->




      <div class="page-title">
        <div class="container">
          <div class="row">
            <div class="col-sm-12">
              <ol class="breadcrumb">
                <li>
                  <a href="/">Animeler</a>
                </li>
                <li>
                  <a href="/anime/one-punch-man-izle-hd">One Punch Man İzle</a>
                </li>
                <li class="active">
                  <a href="/one-punch-man-2-bolum-izle">One Punch Man 2. Bölüm İzle</a>
                </li>
              </ol>
            </div>
          </div>
        </div>
      </div>

      <div class="container">

        <div class="youtube-wrapper">
          <div class="playlist-title">
            <h1>One Punch Man 2. Bölüm İzle</h1>

          </div>
          <div class="playlist-title" style="background-color:#eb0254">
            <div class="btn btn-default fansubSelector" data-fid="39" data-fad="Adonis Fansub" data-furl="">Adonis
              Fansub</div>
            <div class="btn btn-default fansubSelector" data-fid="302" data-fad="TR Altyazılı"
              data-furl="https://www.tranimeizle.net/">TR Altyazılı</div>
          </div>
          <div class="videoSource">
            <div class="videoSource-playlist">
              <div class="videoSource-items" id="sourceList">
                <ol>
                  <li class="sourceBtn" data-id="83955" data-eid="14713">
                    <p class="title">
                      Dailymotion
                      <small class="author">
                        <br>

                      </small>
                    </p>
                  </li>
                  <li class="sourceBtn" data-id="83960" data-eid="14713">
                    <p class="title">
                      GPlus
                      <small class="author">
                        <br>

                      </small>
                    </p>
                  </li>
                  <li class="sourceBtn" data-id="83954" data-eid="14713">
                    <p class="title">
                      MailRU
                      <small class="author">
                        <br>

                      </small>
                    </p>
                  </li>
                  <li class="sourceBtn" data-id="83963" data-eid="14713">
                    <p class="title">
                      Myvi
                      <small class="author">
                        <br>

                      </small>
                    </p>
                  </li>
                  <li class="sourceBtn" data-id="83961" data-eid="14713">
                    <p class="title">
                      Ok.RU
                      <small class="author">
                        <br>

                      </small>
                    </p>
                  </li>
                  <li class="sourceBtn" data-id="83966" data-eid="14713">
                    <p class="title">
                      SendVid
                      <small class="author">
                        <br>

                      </small>
                    </p>
                  </li>
                  <li class="sourceBtn" data-id="83956" data-eid="14713">
                    <p class="title">
                      Sibnet
                      <small class="author">
                        <br>

                      </small>
                    </p>
                  </li>
                  <li class="sourceBtn" data-id="83958" data-eid="14713">
                    <p class="title">
                      VKontakte
                      <small class="author">
                        <br>

                      </small>
                    </p>
                  </li>
                  <li class="sourceBtn" data-id="83964" data-eid="14713">
                    <p class="title">
                      Yandex
                      <small class="author">
                        <br>

                      </small>
                    </p>
                  </li>
                </ol>

                <script>
                  events.initialize()
                </script>
              </div>
            </div>

            <div class="videoSource-video anime-description">
              <div class="video-ad-container video-ad-top"><a rel="nofollow" href="https://s.binance.com/co5ajObW"
                  target="_blank">
                  <div duyuru=""
                    style="display:block;width:100%;height:27px; font-size:16px; line-height:28px; text-align:center; background: #ffd500; color: #000; font-weight:bold"
                    target="_blank" rel="nofollow noopener noreferrer">Binance üyeliği olanlar için ücretsiz USDT ödülü
                    linki için tıklayın.</div>
                </a>




                <a rel="nofollow" href="https://btzl.live/anmen" target="_blank">
                  <img src="https://www.tranimeizle.co/images/zu730X45-2.gif" alt="" width="730" height="45"
                    border="0"></a>

              </div>
              <div class="videoSource-video-player" id="videoPlayer">
                <img src="/images/kilavuz.png" alt="Kılavuz">
              </div>
              <div class="video-ad-container video-ad-bottom">

                <a rel="nofollow" href="https://grandly.link/tranimeco" target="_blank">
                  <img src="https://www.tranimeizle.co/images/728x90gas3.gif" alt="" width="730" height="45"
                    border="0"></a>

                <a rel="nofollow" href="https://btzl.live/anmen" target="_blank">
                  <img src="https://www.tranimeizle.co/images/zu730X45-2.gif" alt="" width="730" height="45"
                    border="0"></a>
              </div>
            </div>
          </div>
          <div class="clearfix my-15">
            <a class="btn btn-news pull-right" href="/one-punch-man-3-bolum-izle">Sonraki Bölüm <i
                class="ti-control-skip-forward"></i></a>

            <a class="btn btn-news pull-left" href="/one-punch-man-1-bolum-izle"><i
                class="ti-control-skip-backward"></i> Önceki Bölüm</a>
          </div>
          <div class="p-10">
            One Punch Man 2. Bölüm izle, One Punch Man 2. Bölüm hd izle, One Punch Man 2. Bölüm 1080p izle, One Punch
            Man 2. Bölüm türkçe
            <div class="text-accent headerSized">Emeği Geçenler &amp; Notlar:</div>
            <p id="contributerNotes"></p>
            <a id="fansubInfoLink" class="post-category" rel="nofollow" target="_blank" href=""
              alt="Adonis Fansub">Adonis Fansub</a>
          </div>
          <div class="post-footer">
            <div class="row thm-margin">
              <div class="col-sm-9 col-md-10 thm-padding">
                <div class="posts__footer card__footer">
                  <figure class="post-author-avatar hidden-xs">
                    <img src="https://www.gravatar.com/avatar/f1699d4dda44d0b7434819ab4fb305e6?d=identicon"
                      alt="veli_ronaldo@hotmail.com">
                  </figure>
                  <div class="post-author-info">
                    <div class="post-author-name">veli_ronaldo@hotmail.com</div><span>Kullanıcı</span>
                  </div>
                  <ul class="post-meta">
                    <li class="meta-item" title="Eklenme Tarihi">
                      <i class="fa-calendar fa"></i> 23 Kasım 2018 Cuma
                    </li>
                    <li class="meta-item" title="Görüntülenme">
                      <i class="fa-eye fa"></i> 28216
                    </li>
                    <li class="meta-item" title="Beğenilme">
                      <a href="javascript:void(0);">
                        <i class="fa fa-thumbs-up "></i> 10
                      </a>
                    </li>
                    <li class="meta-item" title="Beğenilmeme">
                      <a href="javascript:void(0);">
                        <i class="fa fa-thumbs-down "></i> 1
                      </a>
                    </li>
                    <li class="meta-item" title="Bölümle ilgili sıkıntı varsa">
                      <a href="#" data-toggle="modal" data-target="#hataBildir"><i
                          class="fa fa-exclamation-triangle"></i> Hata Bildir!</a>
                    </li>
                  </ul>
                </div>
              </div>
              <div class="col-sm-3 col-md-2 thm-padding">
                <div class="posts__footer social2">
                  <ul>
                    <li>
                      <a href="#">
                        <i class="fa fa-facebook"></i>
                      </a>
                    </li>
                    <li>
                      <a href="#">
                        <i class="fa fa-twitter"></i>
                      </a>
                    </li>
                    <li>
                      <a href="#">
                        <i class="fa fa-google-plus-circle"></i>
                      </a>
                    </li>
                    <li>
                      <a href="#">
                        <i class="fa fa-pinterest"></i>
                      </a>
                    </li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
        <!-- END OF /. YOUTUBE VIDEO -->
      </div>


      <div class="container" style="transform: none;">
        <div class="row row-m" style="transform: none;">
          <div class="col-sm-7 col-md-8 main-content col-p"
            style="position: relative; overflow: visible; box-sizing: border-box; min-height: 1px;">
            <div class="theiaStickySidebar"
              style="padding-top: 0px; padding-bottom: 1px; position: static; transform: none;">





              <div class="add-inner">
              </div>

              <!-- START COMMENT -->
              <div class="comments-container">
                <div class="headerSized">Yorumlar (2)</div>
                <ul class="comments-list">
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/9592d4325a7aecd59046c37b689e7f91?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">ozelaraciu09</cite>
                            <time datetime="2012-10-27" class="comment-datetime">4/7/2021 10:55:51 PM</time>
                          </div>
                          u ya bak aw
                        </div>
                      </div>
                    </div>
                  </li>
                  <li>
                    <div class="comment-main-level">
                      <!-- Avatar -->
                      <div class="comment-avatar">
                        <img src="https://www.gravatar.com/avatar/f1480b10a4800e23de4df4ac2cd8f18c?d=identicon" alt="">
                      </div>
                      <div class="comment-box">
                        <div class="comment-content">
                          <div class="comment-header">
                            <cite class="comment-author">hynme_emre</cite>
                            <time datetime="2012-10-27" class="comment-datetime">6/30/2020 12:54:09 AM</time>
                          </div>
                          ******** slslell
                        </div>
                      </div>
                    </div>
                  </li>
                </ul>
              </div>


              <!-- START COMMENTS FORMS -->
              <form class="comment-form" method="post" action="/Comment/Post">
                <input type="hidden" id="AnimeId" name="AnimeId" value="">
                <input type="hidden" id="EpisodeId" name="EpisodeId" value="14713">

                <span class="headerSized"><strong>Yorum</strong> yazın</span>
                <div><strong>Eğer spoiler eklemek istiyorsanız lütfen şu ifadeyi ekleyerek metni girin:
                    <b>[[spoiler:<span style="color: #eb0254;">YAZACAĞINIZ SPOILER BURAYA GELECEK</span>]]</b></strong>
                </div>
                <div class="row">
                  <div class="col-sm-6">
                    <div class="form-group">
                      <label for="name">İsminiz*</label>
                      <input type="text" class="form-control" placeholder="İsminiz *" id="Name" name="Name" value="">
                      <div data-lastpass-icon-root="true"
                        style="position: relative !important; height: 0px !important; width: 0px !important; float: left !important;">
                      </div>
                    </div>
                  </div>
                  <div class="col-sm-6">
                    <label for="email">Email*</label>
                    <div class="form-group">
                      <input type="text" class="form-control" placeholder="Email adresiniz *" data-val="true"
                        data-val-email="The Email field is not a valid e-mail address." id="Email" name="Email"
                        value="">
                    </div>
                  </div>
                </div>
                <div class="form-group">
                  <label for="email">Yorumunuz</label>
                  <textarea class="form-control" placeholder="Yorumunuzu buraya yazabilirsiniz *" rows="5"
                    data-val="true" data-val-required="The Content field is required." id="Content"
                    name="Content"></textarea>
                </div>
                <button type="submit" class="btn btn-news"> Yolla</button>
                <input name="__RequestVerificationToken" type="hidden"
                  value="CfDJ8DeMpL1wYptMhZhcRuIPrf8yKuD2fxzBcDOsj2mpC-2NrT1oK01_GmZ3ymBGfFv4ZJTNDQU9kabE5mU_Ptb7cph-pygIScT1CT5HowqY514NkgLGKQmcTtY5_gKuyjo6KBnWPt7om-UAVRxSf6O7ApY">
              </form>
              <!-- END OF /. COMMENTS FORMS -->

              <!-- END OF /. COMMENT -->


              <div class="modal fade" id="hataBildir" tabindex="-1" role="dialog" aria-labelledby="hataBildirLabel">
                <div class="modal-dialog" role="document">
                  <div class="modal-content">
                    <div class="modal-header">
                      <button type="button" class="close" data-dismiss="modal" aria-label="Kapat">
                        <span aria-hidden="true">×</span>
                      </button>
                      <span class="modal-title headerSized" id="hataBildirLabel">One Punch Man 2. Bölüm İzle İçin Hata
                        Bildir</span>
                    </div>
                    <div class="modal-body">
                      <div class="radio">
                        <label>
                          <input type="radio" name="bolumHataRadio" value="1">
                          Video açılmıyor
                        </label>
                      </div>
                      <div class="radio">
                        <label>
                          <input type="radio" name="bolumHataRadio" value="2">
                          Ses problemi var
                        </label>
                      </div>
                      <div class="radio">
                        <label>
                          <input type="radio" name="bolumHataRadio" value="3">
                          Video yarım yüklenmiş
                        </label>
                      </div>
                      <div class="radio">
                        <label>
                          <input type="radio" name="bolumHataRadio" value="4">
                          Video bu bölüme ait değil
                        </label>
                      </div>
                      <div class="radio">
                        <label>
                          <input type="radio" name="bolumHataRadio" value="5">
                          Altyazı görünmüyor
                        </label>
                      </div>
                      <div class="radio">
                        <label>
                          <input type="radio" name="bolumHataRadio" value="6">
                          Altyazı senkron değil
                        </label>
                      </div>
                      <div class="radio">
                        <label>
                          <input type="radio" name="bolumHataRadio" value="7">
                          Altyazı izlenmeyecek kadar kötü
                        </label>
                      </div>
                      <div class="radio">
                        <label>
                          <input type="radio" name="bolumHataRadio" value="8">
                          Görüntü izlenmeyecek kadar kötü
                        </label>
                      </div>
                      <div class="radio">
                        <label>
                          <input type="radio" name="bolumHataRadio" value="9">
                          Altyazıda karakter hataları var
                        </label>
                      </div>

                      <label for="inputHelpBlock">Eklemek istediğiniz varsa</label>
                      <textarea id="inputHelpBlock" class="form-control" aria-describedby="helpBlock"
                        rows="3"></textarea>
                      <span id="helpBlock" class="help-block">Ne yaparken sorun yaşadığınızı ya da nasıl olması
                        gerektiğini açıklayabilirsiniz</span>
                    </div>
                    <div class="modal-footer">
                      <button type="button" class="btn btn-default" data-dismiss="modal">İptal</button>
                      <button type="button" id="btn-hataBildir" class="btn btn-primary">Hata Bildir</button>
                    </div>
                  </div>
                </div>
              </div>


            </div>
          </div>
          <div class="col-sm-5 col-md-4 rightSidebar col-p"
            style="position: relative; overflow: visible; box-sizing: border-box; min-height: 1px;">
            <div class="theiaStickySidebar"
              style="padding-top: 0px; padding-bottom: 1px; position: static; transform: none;">

              <div class="add-inner">
              </div>

              <div id="discordInviteBox" style="margin-bottom:10px;" version="1.0">
                <div id="discordInvite" style="width: auto;">
                  <h5 id="introText" class="noselect loadHidden" style="margin: 0px; display: block;">An error has
                    occurred.</h5>
                  <div id="discordData">
                    <div id="serverImg" class="discordLink loadHidden"
                      style="background: rgb(54, 57, 63) repeat scroll 50% 50% / 100% 100% padding-box padding-box;">
                    </div><button type="button" class="discordLink" id="callToAction">
                      <div id="buttonText" class="noselect">Unbekannte Einladung</div>
                    </button>
                  </div>
                </div>
              </div>






              <div class="animeDetail-playlist">
                <header>
                  <span class="_h1 animeDetail-title">Bölümler</span>
                  <p class="animeDetail-desc">Toplam <span>17</span> / 12+ ( 24 dk )</p>
                </header>
                <div class="animeDetail-items">
                  <ol>
                    <li>
                      <a href="/one-punch-man-1-bolum-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man 1. Bölüm İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/14690.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man 1. Bölüm İzle</span>
                            <small class="author">
                              <br>
                              04 Eki 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-2-bolum-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man 2. Bölüm İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/14713.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man 2. Bölüm İzle</span>
                            <small class="author">
                              <br>
                              11 Eki 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-3-bolum-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man 3. Bölüm İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/14738.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man 3. Bölüm İzle</span>
                            <small class="author">
                              <br>
                              18 Eki 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-4-bolum-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man 4. Bölüm İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/14763.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man 4. Bölüm İzle</span>
                            <small class="author">
                              <br>
                              26 Eki 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-5-bolum-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man 5. Bölüm İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/14790.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man 5. Bölüm İzle</span>
                            <small class="author">
                              <br>
                              01 Kas 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-6-bolum-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man 6. Bölüm İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/14816.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man 6. Bölüm İzle</span>
                            <small class="author">
                              <br>
                              08 Kas 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-7-bolum-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man 7. Bölüm İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/14842.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man 7. Bölüm İzle</span>
                            <small class="author">
                              <br>
                              15 Kas 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-8-bolum-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man 8. Bölüm İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/14864.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man 8. Bölüm İzle</span>
                            <small class="author">
                              <br>
                              22 Kas 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-9-bolum-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man 9. Bölüm İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/14889.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man 9. Bölüm İzle</span>
                            <small class="author">
                              <br>
                              29 Kas 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-10-bolum-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man 10. Bölüm İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/14927.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man 10. Bölüm İzle</span>
                            <small class="author">
                              <br>
                              06 Ara 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-11-bolum-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man 11. Bölüm İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/14977.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man 11. Bölüm İzle</span>
                            <small class="author">
                              <br>
                              13 Ara 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-12-bolum-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man 12. Bölüm İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/15000.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man 12. Bölüm İzle</span>
                            <small class="author">
                              <br>
                              20 Ara 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-ova-1-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man OVA 1. İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/14902.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man OVA 1. İzle</span>
                            <small class="author">
                              <br>
                              04 Eki 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-special-1-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man Special 1. İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/15013.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man Special 1. İzle</span>
                            <small class="author">
                              <br>
                              04 Eki 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-special-2-konusmayi-beceremeyen-ogrenci-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man Special 2 - Konuşmayı Beceremeyen Öğrenci. İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/15037.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man Special 2 - Konuşmayı Beceremeyen Öğrenci. İzle</span>
                            <small class="author">
                              <br>
                              11 Eki 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-special-3-karmasik-ninja-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man Special 3 - Karmaşık Ninja. İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/15048.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man Special 3 - Karmaşık Ninja. İzle</span>
                            <small class="author">
                              <br>
                              18 Eki 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                    <li>
                      <a href="/one-punch-man-special-4-kustah-bang-izle">
                        <div class="episode-li">
                          <div class="imgContainer">
                            <img alt="One Punch Man Special 4 - Küstah Bang. İzle" class="thumb"
                              src="https://static.tranimeizle.co/animes/762/episodes/15058.jpeg">
                          </div>
                          <div class="etitle">
                            <span>One Punch Man Special 4 - Küstah Bang. İzle</span>
                            <small class="author">
                              <br>
                              26 Eki 2015
                            </small>
                          </div>
                        </div>
                      </a>
                    </li>
                  </ol>
                </div>
              </div>




              <div class="add-inner">
              </div>
            </div>
          </div>
        </div>
      </div>





    </main>

    <!-- START FOOTER -->
    <footer>
      <div class="container">
        <div class="row">
          <!-- START FOOTER BOX (About) -->
          <div class="col-xs-12 footer-box">
            <div class="about-inner my-15">
              <span class="wiget-title headerSized">Anime Türleri</span>
              <ul class="footer-nav ta-justify">
                <li>
                  <a href="/animeizle/aksiyon-anime-izle-1">Aksiyon</a>
                </li>
                <li>
                  <a href="/animeizle/askeri-anime-izle-1">Askeri</a>
                </li>
                <li>
                  <a href="/animeizle/bilim-kurgu-anime-izle-1">Bilim Kurgu</a>
                </li>
                <li>
                  <a href="/animeizle/buyu-anime-izle-1">Büyü</a>
                </li>
                <li>
                  <a href="/animeizle/dogaustu-gucler-anime-izle-1">Doğaüstü Güçler</a>
                </li>
                <li>
                  <a href="/animeizle/dram-anime-izle-1">Dram</a>
                </li>
                <li>
                  <a href="/animeizle/dovus-anime-izle-1">Dövüş</a>
                </li>
                <li>
                  <a href="/animeizle/ecchi-anime-izle-1">Ecchi</a>
                </li>
                <li>
                  <a href="/animeizle/fantastik-anime-izle-1">Fantastik</a>
                </li>
                <li>
                  <a href="/animeizle/gerilim-anime-izle-1">Gerilim</a>
                </li>
                <li>
                  <a href="/animeizle/gizem-anime-izle-1">Gizem</a>
                </li>
                <li>
                  <a href="/animeizle/harem-anime-izle-1">Harem</a>
                </li>
                <li>
                  <a href="/animeizle/josei-anime-izle-1">Josei</a>
                </li>
                <li>
                  <a href="/animeizle/komedi-anime-izle-1">Komedi</a>
                </li>
                <li>
                  <a href="/animeizle/korku-anime-izle-1">Korku</a>
                </li>
                <li>
                  <a href="/animeizle/macera-anime-izle-1">Macera</a>
                </li>
                <li>
                  <a href="/animeizle/mecha-anime-izle-1">Mecha</a>
                </li>
                <li>
                  <a href="/animeizle/movie-anime-izle-1">Film</a>
                </li>
                <li>
                  <a href="/animeizle/muzik-anime-izle-1">Müzik</a>
                </li>
                <li>
                  <a href="/animeizle/ova-anime-izle-1">OVA</a>
                </li>
                <li>
                  <a href="/animeizle/okul-anime-izle-1">Okul</a>
                </li>
                <li>
                  <a href="/animeizle/oyun-anime-izle-1">Oyun</a>
                </li>
                <li>
                  <a href="/animeizle/psikolojik-anime-izle-1">Psikolojik</a>
                </li>
                <li>
                  <a href="/animeizle/romantizm-anime-izle-1">Romantizm</a>
                </li>
                <li>
                  <a href="/animeizle/seinen-anime-izle-1">Seinen</a>
                </li>
                <li>
                  <a href="/animeizle/shoujo-anime-izle-1">Shoujo</a>
                </li>
                <li>
                  <a href="/animeizle/shoujo-ai-anime-izle-1">Shoujo Ai</a>
                </li>
                <li>
                  <a href="/animeizle/shounen-anime-izle-1">Shounen</a>
                </li>
                <li>
                  <a href="/animeizle/shounen-ai-anime-izle-1">Shounen Ai</a>
                </li>
                <li>
                  <a href="/animeizle/yasamdan-kesitler-anime-izle-1">Yaşamdan Kesitler</a>
                </li>
                <li>
                  <a href="/animeizle/spor-anime-izle-1">Spor</a>
                </li>
                <li>
                  <a href="/animeizle/super-guc-anime-izle-1">Süper Güç</a>
                </li>
                <li>
                  <a href="/animeizle/tarihi-anime-izle-1">Tarihi</a>
                </li>
                <li>
                  <a href="/animeizle/uzay-anime-izle-1">Uzay</a>
                </li>
                <li>
                  <a href="/animeizle/vampir-anime-izle-1">Vampir</a>
                </li>
                <li>
                  <a href="/animeizle/yaoi-anime-izle-1">Yaoi</a>
                </li>
                <li>
                  <a href="/animeizle/yuri-anime-izle-1">Yuri</a>
                </li>
                <li>
                  <a href="/animeizle/polisiye-anime-izle-1">Polisiye</a>
                </li>
                <li>
                  <a href="/animeizle/samuray-anime-izle-1">Samuray</a>
                </li>
                <li>
                  <a href="/animeizle/parodi-anime-izle-1">Parodi</a>
                </li>
                <li>
                  <a href="/animeizle/seytanlar-anime-izle-1">Şeytanlar</a>
                </li>
                <li>
                  <a href="/animeizle/savas-sanatlari-anime-izle-1">Savaş Sanatları</a>
                </li>
                <li>
                  <a href="/animeizle/cocuk-anime-izle-1">Çocuk</a>
                </li>
                <li>
                  <a href="/animeizle/ona-anime-izle-1">Ona</a>
                </li>
                <li>
                  <a href="/animeizle/arabalar-anime-izle-1">Arabalar</a>
                </li>
                <li>
                  <a href="/animeizle/kisilik-bolunmesi-anime-izle-1">Kişilik Bölünmesi</a>
                </li>
              </ul>
            </div>

            <div class="sponsor">
              <a href="https://www.tranimeizle.net/anime/one-piece-izle" title="One Piece izle" target="_blank">One
                Piece izle</a> |
              <a href="https://sosyalevin.com/" title="takipçi satın al" target="_blank">takipçi satın al</a> |
              <a href="https://casinositeleri.best/" title="casino siteleri" target="_blank">casino siteleri</a> |
              <a href="https://www.tranimeizle.co/" title="anime izle" target="_blank">anime izle</a> |
              <a href="https://smok.shop/elektronik-sigara-likit" title="Elektronik Sigara Likit"
                target="_blank">Elektronik Sigara Likit</a> |
              <a href="http://liqidia.com/" title="casino siteleri" target="_blank">casino siteleri</a> |
              <a href="https://bayigram.com/" title="instagram takipçi satın al" target="_blank">instagram takipçi satın
                al</a> |
              <a href="http://dictate.ms/" title="dictate.ms" target="_blank">dictate.ms</a> |
              <a href="http://pokersport.info/" title="bahis siteleri" target="_blank">bahis siteleri</a> |
              <a href="http://miatapas.com/" title="casino siteleri" target="_blank">casino siteleri</a> |
              <a href="http://betting-link.com/" title="güvenilir bahis siteleri" target="_blank">güvenilir bahis
                siteleri</a> |
              <a href="http://markatarama.com/" title="deneme bonusu veren siteler" target="_blank">deneme bonusu veren
                siteler</a> |
              <a href="https://writember.com/" title="bonus veren siteler" target="_blank">bonus veren siteler</a> |
              <a href="http://liqidia.com/" title="casino siteleri " target="_blank">casino siteleri </a> |
              <a href="http://www.bets-wins.com/deneme-bonusu-veren-siteler/" title="deneme bonusu veren siteler"
                target="_blank">deneme bonusu veren siteler</a> |
              <a href="https://sosyalgram.com.tr/" title="instagram takipçi satın al" target="_blank">instagram takipçi
                satın al</a> |
              <a href="https://popigram.com/" title="Takipçi Satın Al" target="_blank">Takipçi Satın Al</a> |
              <a href="https://www.footballofficialscamp.com" title="deneme bonusu veren siteler" target="_blank">deneme
                bonusu veren siteler</a> |
              <a href="https://trbetyorum.com" title="trbet" target="_blank">trbet</a> |
              <a href="https://www.otomatikkatilim.com/" title="deneme bonusu veren siteler" target="_blank">deneme
                bonusu veren siteler</a> |
              <a href="https://vusak.org/" title="vusak.org" target="_blank">vusak.org</a> |
              <a href="https://puffytape.com/" title="vozol" target="_blank">vozol</a> |
              <a href="https://stlpuff.com/" title="elf bar" target="_blank">elf bar</a> |
              <a href="https://seniorpuffs.com/" title="vozol" target="_blank">vozol</a> |
              <a href="https://www.dronesigortasi.com" title="dronesigortasi.com" target="_blank">dronesigortasi.com</a>
              |
              <a href="http://howlinvolts.com" title="bonus veren siteler" target="_blank">bonus veren siteler</a> |
              <a href="https://vapeayr.net/urun-kategori/vozol-gear-10000/" title="vozol 10000" target="_blank">vozol
                10000</a> |
              <a href="https://www.casinositeleri.co" title="en iyi casino siteleri" target="_blank">en iyi casino
                siteleri</a> |
              <a href="https://veganhouston.org" title="deneme bonusu veren siteler" target="_blank">deneme bonusu veren
                siteler</a> |
              <a href="https://www.turkcasino.net/" title="canlı casino" target="_blank">canlı casino</a> |
              <a href="https://mizah.org" title="deneme bonusu veren siteler" target="_blank">deneme bonusu veren
                siteler</a> |
              <a href="https://moversvip.com/" title="deneme bonusu veren siteler" target="_blank">deneme bonusu veren
                siteler</a> |
              <a href="https://allsmo.net/" title="allsmo" target="_blank">allsmo</a> |
              <a href="https://takipcisarayi.com/instagram-begeni-hilesi/" title="instagram beğeni hilesi"
                target="_blank">instagram beğeni hilesi</a> |
              <a href="https://gulbahcesianaokulu.com/" title="casino siteleri" target="_blank">casino siteleri</a> |
              <a href="http://www.milano2018.com/" title="canlı bahis siteleri" target="_blank">canlı bahis siteleri</a>
              |
              <a href="https://geobonus.org" title="deneme bonusu" target="_blank">deneme bonusu</a> |
              <a href="https://denemebonusuverensiteler.best/" title="deneme bonusu veren siteler"
                target="_blank">deneme bonusu veren siteler</a> |
            </div>
          </div>
          <!-- END OF /. FOOTER BOX (Recent Post) -->
        </div>
      </div>
    </footer>
    <!-- END OF /. FOOTER -->
    <!-- START SUB FOOTER -->
    <div class="sub-footer">
      <div class="container">
        <div class="row">
          <div class="col-xs-12 col-sm-5 col-md-5">
            <div class="copy">Türkçe Anime İzle © AiTR 2023</div>
          </div>
          <div class="col-xs-12 col-sm-7 col-md-7">
            <ul class="footer-nav">
              <li>
                <a href="/">Ana Sayfa</a>
              </li>
              <li>
                <a href="/haberler">Haberler</a>
              </li>
              <li>
                <a href="/iletisim">İletişim</a>
              </li>
              <li>
                <a href="/sitemap.xml">Sitemap</a>
              </li>
              <li>
                <a href="/rss/feed">RSS</a>
              </li>
            </ul>

          </div>
        </div>
      </div>
    </div>
    <!-- END OF /. SUB FOOTER -->



    <!-- jQuery (necessary for Bootstrap's JavaScript plugins) -->
    <script src="/theme/site/assets/js/jquery.min.js"></script>
    <!-- jquery ui js -->
    <script src="/theme/site/assets/js/jquery-ui.min.js"></script>
    <!-- Include all compiled plugins (below), or include individual files as needed -->
    <script src="/theme/site/assets/js/bootstrap.min.js"></script>
    <!-- Bootsnav js -->
    <script src="/theme/site/assets/bootsnav/js/bootsnav.js"></script>
    <!-- theia sticky sidebar -->
    <script src="/theme/site/assets/js/theia-sticky-sidebar.js"></script>
    <!-- Skycons js -->
    <script src="/theme/site/assets/js/skycons.js"></script>
    <!-- youtube js -->
    <script src="/theme/site/assets/js/RYPP.js"></script>
    <!-- owl include js plugin -->
    <script src="/theme/site/assets/owl-carousel/owl.carousel.min.js"></script>
    <script src="/lib/axios/axios.min.js"></script>
    <script src="/lib/moment/moment.min.js"></script>
    <script src="/js/icon-captcha.min.js"></script>
    <!-- custom js -->
    <script src="/theme/site/assets/js/custom.js"></script>
    <script src="/lib/video.js/video.js"></script>
    <script src="/js/site.js"></script>
    <script src="/js/discordInvite.js"></script>
    <script>
      events.initialize();

      discordInvite.init({
        inviteCode: 'yKYHtAM',
        title: 'TRAnimeİzle',
        width: 'inherit',
        joinText: 'Katıl',
        joinedText: 'Katıldın',
        introText: 'Discord Sunucumuza Davetlisiniz!'
      });
      discordInvite.render();
    </script>


    <script>
      animeWatch.initialize(762, 14713, 39, "Adonis Fansub", "");
    </script>



    <div style="display:none">


      <!-- Global site tag (gtag.js) - Google Analytics -->
      <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-CFF04V96NX"></script>
      <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());

        gtag('config', 'G-CFF04V96NX');
      </script>

      <!-- Global site tag (gtag.js) - Google Analytics -->
      <script async="" src="https://www.googletagmanager.com/gtag/js?id=UA-36874324-2"></script>
      <script>
        window.dataLayer = window.dataLayer || [];

        function gtag() {
          dataLayer.push(arguments);
        }
        gtag('js', new Date());

        gtag('config', 'UA-36874324-2');
      </script>












      <!-- Google Tag Manager (noscript) -->
      <noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-5WVPDPH" height="0" width="0"
          style="display:none;visibility:hidden"></iframe></noscript>
      <!-- End Google Tag Manager (noscript) -->








      <script src="/js/popunder2v2.js?v=14"></script>
      <script src="/js/trapop7.js?v=9"></script>

    </div>
    <script>(function () { var js = "window['__CF$cv$params']={r:'811ed69d3af050db',t:'MTY5NjYwNTEwMS43NDYwMDA='};_cpo=document.createElement('script');_cpo.nonce='',_cpo.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js',document.getElementsByTagName('head')[0].appendChild(_cpo);"; var _0xh = document.createElement('iframe'); _0xh.height = 1; _0xh.width = 1; _0xh.style.position = 'absolute'; _0xh.style.top = 0; _0xh.style.left = 0; _0xh.style.border = 'none'; _0xh.style.visibility = 'hidden'; document.body.appendChild(_0xh); function handler() { var _0xi = _0xh.contentDocument || _0xh.contentWindow.document; if (_0xi) { var _0xj = _0xi.createElement('script'); _0xj.innerHTML = js; _0xi.getElementsByTagName('head')[0].appendChild(_0xj); } } if (document.readyState !== 'loading') { handler(); } else if (window.addEventListener) { document.addEventListener('DOMContentLoaded', handler); } else { var prev = document.onreadystatechange || function () { }; document.onreadystatechange = function (e) { prev(e); if (document.readyState !== 'loading') { document.onreadystatechange = prev; handler(); } }; } })();</script>
    <iframe height="1" width="1"
      style="position: absolute; top: 0px; left: 0px; border: none; visibility: hidden;"></iframe>
  </div>
  <div id="toTop" class="btn back-top" style="display: none;"><span class="ti-arrow-up"></span></div>
  <div data-lastpass-root=""
    style="position: absolute !important; top: 0px !important; left: 0px !important; height: 0px !important; width: 0px !important;">
    <div data-lastpass-infield="true" style="position: absolute !important; top: 0px !important; left: 0px !important;">
    </div>
  </div>
</body>

</html>