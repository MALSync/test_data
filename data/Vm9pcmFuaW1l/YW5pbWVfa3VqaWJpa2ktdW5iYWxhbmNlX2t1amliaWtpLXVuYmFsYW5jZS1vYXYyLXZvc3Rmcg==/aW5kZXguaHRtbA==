<html lang="en-US">

<head>
  <meta http-equiv="origin-trial"
    content="A/kargTFyk8MR5ueravczef/wIlTkbVk1qXQesp39nV+xNECPdLBVeYffxrM8TmZT6RArWGQVCJ0LRivD7glcAUAAACQeyJvcmlnaW4iOiJodHRwczovL2dvb2dsZS5jb206NDQzIiwiZmVhdHVyZSI6IkRpc2FibGVUaGlyZFBhcnR5U3RvcmFnZVBhcnRpdGlvbmluZzIiLCJleHBpcnkiOjE3NDIzNDIzOTksImlzU3ViZG9tYWluIjp0cnVlLCJpc1RoaXJkUGFydHkiOnRydWV9">
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="profile" href="https://gmpg.org/xfn/11">
  <link rel="pingback" href="https://v6.voiranime.com/xmlrpc.php">



  <meta name="robots" content="index, follow, max-image-preview:large, max-snippet:-1, max-video-preview:-1">
  <style>
    img:is([sizes="auto" i], [sizes^="auto," i]) {
      contain-intrinsic-size: 3000px 1500px
    }
  </style>

  <!-- This site is optimized with the Yoast SEO plugin v24.0 - https://yoast.com/wordpress/plugins/seo/ -->
  <title>Kujibiki Unbalance - Kujibiki Unbalance - OAV2 VOSTFR - OAV2 - Voiranime</title>
  <meta name="description"
    content="Cette série fait suite aux 3 OAV de Kujibiki Unbalance. Une fois par an, la prestigieuse Rikkyouin High School organise une loterie pour déterminer des">
  <link rel="canonical" href="https://v6.voiranime.com/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/">
  <meta property="og:locale" content="en_US">
  <meta property="og:type" content="article">
  <meta property="og:title" content="Regarder gratuitement Kujibiki Unbalance en HD- Voiranime">
  <meta property="og:description"
    content="Cette série fait suite aux 3 OAV de Kujibiki Unbalance. Une fois par an, la prestigieuse Rikkyouin High School organise une loterie pour déterminer des">
  <meta property="og:url" content="https://v6.voiranime.com/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/">
  <meta property="og:site_name" content="Voiranime">
  <meta property="og:image" content="https://v6.voiranime.com/wp-content/uploads/2021/01/thumb_5ff044ffdf8c5.jpg">
  <meta property="og:image:width" content="225">
  <meta property="og:image:height" content="297">
  <meta property="og:image:type" content="image/jpeg">
  <meta name="twitter:card" content="summary_large_image">
  <meta name="twitter:label1" content="Est. reading time">
  <meta name="twitter:data1" content="1 minute">
  <script type="text/javascript" async="" charset="utf-8"
    src="https://www.gstatic.com/recaptcha/releases/zIriijn3uj5Vpknvt_LnfNbF/recaptcha__fr.js" crossorigin="anonymous"
    integrity="sha384-QJjV0Kt1KlDkjOccXUP374QUwH4l+d79wRAFcYz4hvSUXxmnrlQ0h0FgqdW1f3dV"></script>
  <script type="application/ld+json"
    class="yoast-schema-graph">{"@context":"https://schema.org","@graph":[{"@type":"WebPage","@id":"https://v6.voiranime.com/anime/kujibiki-unbalance/","url":"https://v6.voiranime.com/anime/kujibiki-unbalance/","name":"Regarder gratuitement Kujibiki Unbalance en HD- Voiranime","isPartOf":{"@id":"https://v6.voiranime.com/#website"},"primaryImageOfPage":{"@id":"https://v6.voiranime.com/anime/kujibiki-unbalance/#primaryimage"},"image":{"@id":"https://v6.voiranime.com/anime/kujibiki-unbalance/#primaryimage"},"thumbnailUrl":"https://v6.voiranime.com/wp-content/uploads/2021/01/thumb_5ff044ffdf8c5.jpg","datePublished":"2021-01-02T21:49:16+00:00","dateModified":"2021-01-02T21:49:16+00:00","description":"Cette série fait suite aux 3 OAV de Kujibiki Unbalance. Une fois par an, la prestigieuse Rikkyouin High School organise une loterie pour déterminer des","breadcrumb":{"@id":"https://v6.voiranime.com/anime/kujibiki-unbalance/#breadcrumb"},"inLanguage":"en-US","potentialAction":[{"@type":"ReadAction","target":["https://v6.voiranime.com/anime/kujibiki-unbalance/"]}]},{"@type":"ImageObject","inLanguage":"en-US","@id":"https://v6.voiranime.com/anime/kujibiki-unbalance/#primaryimage","url":"https://v6.voiranime.com/wp-content/uploads/2021/01/thumb_5ff044ffdf8c5.jpg","contentUrl":"https://v6.voiranime.com/wp-content/uploads/2021/01/thumb_5ff044ffdf8c5.jpg","width":225,"height":297},{"@type":"BreadcrumbList","@id":"https://v6.voiranime.com/anime/kujibiki-unbalance/#breadcrumb","itemListElement":[{"@type":"ListItem","position":1,"name":"Home","item":"https://v6.voiranime.com/"},{"@type":"ListItem","position":2,"name":"Manga","item":"https://v6.voiranime.com/anime/"},{"@type":"ListItem","position":3,"name":"Kujibiki Unbalance"}]},{"@type":"WebSite","@id":"https://v6.voiranime.com/#website","url":"https://v6.voiranime.com/","name":"Voiranime","description":"LE MEILLEUR DE L&#039;ANIME EN HD","potentialAction":[{"@type":"SearchAction","target":{"@type":"EntryPoint","urlTemplate":"https://v6.voiranime.com/?s={search_term_string}"},"query-input":{"@type":"PropertyValueSpecification","valueRequired":true,"valueName":"search_term_string"}}],"inLanguage":"en-US"}]}</script>
  <!-- / Yoast SEO plugin. -->


  <link rel="dns-prefetch" href="//widgetlogic.org">
  <link rel="alternate" type="application/rss+xml" title="Voiranime » Feed" href="https://v6.voiranime.com/feed/">
  <link rel="alternate" type="application/rss+xml" title="Voiranime » Comments Feed"
    href="https://v6.voiranime.com/comments/feed/">
  <link rel="alternate" type="application/rss+xml" title="Voiranime » Kujibiki Unbalance Comments Feed"
    href="https://v6.voiranime.com/anime/kujibiki-unbalance/feed/">
  <script type="text/javascript">
    /* <![CDATA[ */
    window._wpemojiSettings = { "baseUrl": "https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/72x72\/", "ext": ".png", "svgUrl": "https:\/\/s.w.org\/images\/core\/emoji\/15.0.3\/svg\/", "svgExt": ".svg", "source": { "concatemoji": "https:\/\/v6.voiranime.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=6.7.1" } };
    /*! This file is auto-generated */
    !function (i, n) { var o, s, e; function c(e) { try { var t = { supportTests: e, timestamp: (new Date).valueOf() }; sessionStorage.setItem(o, JSON.stringify(t)) } catch (e) { } } function p(e, t, n) { e.clearRect(0, 0, e.canvas.width, e.canvas.height), e.fillText(t, 0, 0); var t = new Uint32Array(e.getImageData(0, 0, e.canvas.width, e.canvas.height).data), r = (e.clearRect(0, 0, e.canvas.width, e.canvas.height), e.fillText(n, 0, 0), new Uint32Array(e.getImageData(0, 0, e.canvas.width, e.canvas.height).data)); return t.every(function (e, t) { return e === r[t] }) } function u(e, t, n) { switch (t) { case "flag": return n(e, "\ud83c\udff3\ufe0f\u200d\u26a7\ufe0f", "\ud83c\udff3\ufe0f\u200b\u26a7\ufe0f") ? !1 : !n(e, "\ud83c\uddfa\ud83c\uddf3", "\ud83c\uddfa\u200b\ud83c\uddf3") && !n(e, "\ud83c\udff4\udb40\udc67\udb40\udc62\udb40\udc65\udb40\udc6e\udb40\udc67\udb40\udc7f", "\ud83c\udff4\u200b\udb40\udc67\u200b\udb40\udc62\u200b\udb40\udc65\u200b\udb40\udc6e\u200b\udb40\udc67\u200b\udb40\udc7f"); case "emoji": return !n(e, "\ud83d\udc26\u200d\u2b1b", "\ud83d\udc26\u200b\u2b1b") }return !1 } function f(e, t, n) { var r = "undefined" != typeof WorkerGlobalScope && self instanceof WorkerGlobalScope ? new OffscreenCanvas(300, 150) : i.createElement("canvas"), a = r.getContext("2d", { willReadFrequently: !0 }), o = (a.textBaseline = "top", a.font = "600 32px Arial", {}); return e.forEach(function (e) { o[e] = t(a, e, n) }), o } function t(e) { var t = i.createElement("script"); t.src = e, t.defer = !0, i.head.appendChild(t) } "undefined" != typeof Promise && (o = "wpEmojiSettingsSupports", s = ["flag", "emoji"], n.supports = { everything: !0, everythingExceptFlag: !0 }, e = new Promise(function (e) { i.addEventListener("DOMContentLoaded", e, { once: !0 }) }), new Promise(function (t) { var n = function () { try { var e = JSON.parse(sessionStorage.getItem(o)); if ("object" == typeof e && "number" == typeof e.timestamp && (new Date).valueOf() < e.timestamp + 604800 && "object" == typeof e.supportTests) return e.supportTests } catch (e) { } return null }(); if (!n) { if ("undefined" != typeof Worker && "undefined" != typeof OffscreenCanvas && "undefined" != typeof URL && URL.createObjectURL && "undefined" != typeof Blob) try { var e = "postMessage(" + f.toString() + "(" + [JSON.stringify(s), u.toString(), p.toString()].join(",") + "));", r = new Blob([e], { type: "text/javascript" }), a = new Worker(URL.createObjectURL(r), { name: "wpTestEmojiSupports" }); return void (a.onmessage = function (e) { c(n = e.data), a.terminate(), t(n) }) } catch (e) { } c(n = f(s, u, p)) } t(n) }).then(function (e) { for (var t in e) n.supports[t] = e[t], n.supports.everything = n.supports.everything && n.supports[t], "flag" !== t && (n.supports.everythingExceptFlag = n.supports.everythingExceptFlag && n.supports[t]); n.supports.everythingExceptFlag = n.supports.everythingExceptFlag && !n.supports.flag, n.DOMReady = !1, n.readyCallback = function () { n.DOMReady = !0 } }).then(function () { return e }).then(function () { var e; n.supports.everything || (n.readyCallback(), (e = n.source || {}).concatemoji ? t(e.concatemoji) : e.wpemoji && e.twemoji && (t(e.twemoji), t(e.wpemoji))) })) }((window, document), window._wpemojiSettings);
    /* ]]> */
  </script>
  <style id="wp-emoji-styles-inline-css" type="text/css">
    img.wp-smiley,
    img.emoji {
      display: inline !important;
      border: none !important;
      box-shadow: none !important;
      height: 1em !important;
      width: 1em !important;
      margin: 0 0.07em !important;
      vertical-align: -0.1em !important;
      background: none !important;
      padding: 0 !important;
    }
  </style>
  <link rel="stylesheet" id="wp-block-library-css"
    href="https://v6.voiranime.com/wp-includes/css/dist/block-library/style.min.css?ver=6.7.1" type="text/css"
    media="all">
  <style id="wp-block-library-theme-inline-css" type="text/css">
    .wp-block-audio :where(figcaption) {
      color: #555;
      font-size: 13px;
      text-align: center
    }

    .is-dark-theme .wp-block-audio :where(figcaption) {
      color: #ffffffa6
    }

    .wp-block-audio {
      margin: 0 0 1em
    }

    .wp-block-code {
      border: 1px solid #ccc;
      border-radius: 4px;
      font-family: Menlo, Consolas, monaco, monospace;
      padding: .8em 1em
    }

    .wp-block-embed :where(figcaption) {
      color: #555;
      font-size: 13px;
      text-align: center
    }

    .is-dark-theme .wp-block-embed :where(figcaption) {
      color: #ffffffa6
    }

    .wp-block-embed {
      margin: 0 0 1em
    }

    .blocks-gallery-caption {
      color: #555;
      font-size: 13px;
      text-align: center
    }

    .is-dark-theme .blocks-gallery-caption {
      color: #ffffffa6
    }

    :root :where(.wp-block-image figcaption) {
      color: #555;
      font-size: 13px;
      text-align: center
    }

    .is-dark-theme :root :where(.wp-block-image figcaption) {
      color: #ffffffa6
    }

    .wp-block-image {
      margin: 0 0 1em
    }

    .wp-block-pullquote {
      border-bottom: 4px solid;
      border-top: 4px solid;
      color: currentColor;
      margin-bottom: 1.75em
    }

    .wp-block-pullquote cite,
    .wp-block-pullquote footer,
    .wp-block-pullquote__citation {
      color: currentColor;
      font-size: .8125em;
      font-style: normal;
      text-transform: uppercase
    }

    .wp-block-quote {
      border-left: .25em solid;
      margin: 0 0 1.75em;
      padding-left: 1em
    }

    .wp-block-quote cite,
    .wp-block-quote footer {
      color: currentColor;
      font-size: .8125em;
      font-style: normal;
      position: relative
    }

    .wp-block-quote:where(.has-text-align-right) {
      border-left: none;
      border-right: .25em solid;
      padding-left: 0;
      padding-right: 1em
    }

    .wp-block-quote:where(.has-text-align-center) {
      border: none;
      padding-left: 0
    }

    .wp-block-quote.is-large,
    .wp-block-quote.is-style-large,
    .wp-block-quote:where(.is-style-plain) {
      border: none
    }

    .wp-block-search .wp-block-search__label {
      font-weight: 700
    }

    .wp-block-search__button {
      border: 1px solid #ccc;
      padding: .375em .625em
    }

    :where(.wp-block-group.has-background) {
      padding: 1.25em 2.375em
    }

    .wp-block-separator.has-css-opacity {
      opacity: .4
    }

    .wp-block-separator {
      border: none;
      border-bottom: 2px solid;
      margin-left: auto;
      margin-right: auto
    }

    .wp-block-separator.has-alpha-channel-opacity {
      opacity: 1
    }

    .wp-block-separator:not(.is-style-wide):not(.is-style-dots) {
      width: 100px
    }

    .wp-block-separator.has-background:not(.is-style-dots) {
      border-bottom: none;
      height: 1px
    }

    .wp-block-separator.has-background:not(.is-style-wide):not(.is-style-dots) {
      height: 2px
    }

    .wp-block-table {
      margin: 0 0 1em
    }

    .wp-block-table td,
    .wp-block-table th {
      word-break: normal
    }

    .wp-block-table :where(figcaption) {
      color: #555;
      font-size: 13px;
      text-align: center
    }

    .is-dark-theme .wp-block-table :where(figcaption) {
      color: #ffffffa6
    }

    .wp-block-video :where(figcaption) {
      color: #555;
      font-size: 13px;
      text-align: center
    }

    .is-dark-theme .wp-block-video :where(figcaption) {
      color: #ffffffa6
    }

    .wp-block-video {
      margin: 0 0 1em
    }

    :root :where(.wp-block-template-part.has-background) {
      margin-bottom: 0;
      margin-top: 0;
      padding: 1.25em 2.375em
    }
  </style>
  <link rel="stylesheet" id="block-widget-css"
    href="https://v6.voiranime.com/wp-content/plugins/widget-logic/block_widget/css/widget.css?ver=1733175276"
    type="text/css" media="all">
  <style id="classic-theme-styles-inline-css" type="text/css">
    /*! This file is auto-generated */
    .wp-block-button__link {
      color: #fff;
      background-color: #32373c;
      border-radius: 9999px;
      box-shadow: none;
      text-decoration: none;
      padding: calc(.667em + 2px) calc(1.333em + 2px);
      font-size: 1.125em
    }

    .wp-block-file__button {
      background: #32373c;
      color: #fff;
      text-decoration: none
    }
  </style>
  <style id="global-styles-inline-css" type="text/css">
    :root {
      --wp--preset--aspect-ratio--square: 1;
      --wp--preset--aspect-ratio--4-3: 4/3;
      --wp--preset--aspect-ratio--3-4: 3/4;
      --wp--preset--aspect-ratio--3-2: 3/2;
      --wp--preset--aspect-ratio--2-3: 2/3;
      --wp--preset--aspect-ratio--16-9: 16/9;
      --wp--preset--aspect-ratio--9-16: 9/16;
      --wp--preset--color--black: #000000;
      --wp--preset--color--cyan-bluish-gray: #abb8c3;
      --wp--preset--color--white: #ffffff;
      --wp--preset--color--pale-pink: #f78da7;
      --wp--preset--color--vivid-red: #cf2e2e;
      --wp--preset--color--luminous-vivid-orange: #ff6900;
      --wp--preset--color--luminous-vivid-amber: #fcb900;
      --wp--preset--color--light-green-cyan: #7bdcb5;
      --wp--preset--color--vivid-green-cyan: #00d084;
      --wp--preset--color--pale-cyan-blue: #8ed1fc;
      --wp--preset--color--vivid-cyan-blue: #0693e3;
      --wp--preset--color--vivid-purple: #9b51e0;
      --wp--preset--gradient--vivid-cyan-blue-to-vivid-purple: linear-gradient(135deg, rgba(6, 147, 227, 1) 0%, rgb(155, 81, 224) 100%);
      --wp--preset--gradient--light-green-cyan-to-vivid-green-cyan: linear-gradient(135deg, rgb(122, 220, 180) 0%, rgb(0, 208, 130) 100%);
      --wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange: linear-gradient(135deg, rgba(252, 185, 0, 1) 0%, rgba(255, 105, 0, 1) 100%);
      --wp--preset--gradient--luminous-vivid-orange-to-vivid-red: linear-gradient(135deg, rgba(255, 105, 0, 1) 0%, rgb(207, 46, 46) 100%);
      --wp--preset--gradient--very-light-gray-to-cyan-bluish-gray: linear-gradient(135deg, rgb(238, 238, 238) 0%, rgb(169, 184, 195) 100%);
      --wp--preset--gradient--cool-to-warm-spectrum: linear-gradient(135deg, rgb(74, 234, 220) 0%, rgb(151, 120, 209) 20%, rgb(207, 42, 186) 40%, rgb(238, 44, 130) 60%, rgb(251, 105, 98) 80%, rgb(254, 248, 76) 100%);
      --wp--preset--gradient--blush-light-purple: linear-gradient(135deg, rgb(255, 206, 236) 0%, rgb(152, 150, 240) 100%);
      --wp--preset--gradient--blush-bordeaux: linear-gradient(135deg, rgb(254, 205, 165) 0%, rgb(254, 45, 45) 50%, rgb(107, 0, 62) 100%);
      --wp--preset--gradient--luminous-dusk: linear-gradient(135deg, rgb(255, 203, 112) 0%, rgb(199, 81, 192) 50%, rgb(65, 88, 208) 100%);
      --wp--preset--gradient--pale-ocean: linear-gradient(135deg, rgb(255, 245, 203) 0%, rgb(182, 227, 212) 50%, rgb(51, 167, 181) 100%);
      --wp--preset--gradient--electric-grass: linear-gradient(135deg, rgb(202, 248, 128) 0%, rgb(113, 206, 126) 100%);
      --wp--preset--gradient--midnight: linear-gradient(135deg, rgb(2, 3, 129) 0%, rgb(40, 116, 252) 100%);
      --wp--preset--font-size--small: 13px;
      --wp--preset--font-size--medium: 20px;
      --wp--preset--font-size--large: 36px;
      --wp--preset--font-size--x-large: 42px;
      --wp--preset--spacing--20: 0.44rem;
      --wp--preset--spacing--30: 0.67rem;
      --wp--preset--spacing--40: 1rem;
      --wp--preset--spacing--50: 1.5rem;
      --wp--preset--spacing--60: 2.25rem;
      --wp--preset--spacing--70: 3.38rem;
      --wp--preset--spacing--80: 5.06rem;
      --wp--preset--shadow--natural: 6px 6px 9px rgba(0, 0, 0, 0.2);
      --wp--preset--shadow--deep: 12px 12px 50px rgba(0, 0, 0, 0.4);
      --wp--preset--shadow--sharp: 6px 6px 0px rgba(0, 0, 0, 0.2);
      --wp--preset--shadow--outlined: 6px 6px 0px -3px rgba(255, 255, 255, 1), 6px 6px rgba(0, 0, 0, 1);
      --wp--preset--shadow--crisp: 6px 6px 0px rgba(0, 0, 0, 1);
    }

    :where(.is-layout-flex) {
      gap: 0.5em;
    }

    :where(.is-layout-grid) {
      gap: 0.5em;
    }

    body .is-layout-flex {
      display: flex;
    }

    .is-layout-flex {
      flex-wrap: wrap;
      align-items: center;
    }

    .is-layout-flex> :is(*, div) {
      margin: 0;
    }

    body .is-layout-grid {
      display: grid;
    }

    .is-layout-grid> :is(*, div) {
      margin: 0;
    }

    :where(.wp-block-columns.is-layout-flex) {
      gap: 2em;
    }

    :where(.wp-block-columns.is-layout-grid) {
      gap: 2em;
    }

    :where(.wp-block-post-template.is-layout-flex) {
      gap: 1.25em;
    }

    :where(.wp-block-post-template.is-layout-grid) {
      gap: 1.25em;
    }

    .has-black-color {
      color: var(--wp--preset--color--black) !important;
    }

    .has-cyan-bluish-gray-color {
      color: var(--wp--preset--color--cyan-bluish-gray) !important;
    }

    .has-white-color {
      color: var(--wp--preset--color--white) !important;
    }

    .has-pale-pink-color {
      color: var(--wp--preset--color--pale-pink) !important;
    }

    .has-vivid-red-color {
      color: var(--wp--preset--color--vivid-red) !important;
    }

    .has-luminous-vivid-orange-color {
      color: var(--wp--preset--color--luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-amber-color {
      color: var(--wp--preset--color--luminous-vivid-amber) !important;
    }

    .has-light-green-cyan-color {
      color: var(--wp--preset--color--light-green-cyan) !important;
    }

    .has-vivid-green-cyan-color {
      color: var(--wp--preset--color--vivid-green-cyan) !important;
    }

    .has-pale-cyan-blue-color {
      color: var(--wp--preset--color--pale-cyan-blue) !important;
    }

    .has-vivid-cyan-blue-color {
      color: var(--wp--preset--color--vivid-cyan-blue) !important;
    }

    .has-vivid-purple-color {
      color: var(--wp--preset--color--vivid-purple) !important;
    }

    .has-black-background-color {
      background-color: var(--wp--preset--color--black) !important;
    }

    .has-cyan-bluish-gray-background-color {
      background-color: var(--wp--preset--color--cyan-bluish-gray) !important;
    }

    .has-white-background-color {
      background-color: var(--wp--preset--color--white) !important;
    }

    .has-pale-pink-background-color {
      background-color: var(--wp--preset--color--pale-pink) !important;
    }

    .has-vivid-red-background-color {
      background-color: var(--wp--preset--color--vivid-red) !important;
    }

    .has-luminous-vivid-orange-background-color {
      background-color: var(--wp--preset--color--luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-amber-background-color {
      background-color: var(--wp--preset--color--luminous-vivid-amber) !important;
    }

    .has-light-green-cyan-background-color {
      background-color: var(--wp--preset--color--light-green-cyan) !important;
    }

    .has-vivid-green-cyan-background-color {
      background-color: var(--wp--preset--color--vivid-green-cyan) !important;
    }

    .has-pale-cyan-blue-background-color {
      background-color: var(--wp--preset--color--pale-cyan-blue) !important;
    }

    .has-vivid-cyan-blue-background-color {
      background-color: var(--wp--preset--color--vivid-cyan-blue) !important;
    }

    .has-vivid-purple-background-color {
      background-color: var(--wp--preset--color--vivid-purple) !important;
    }

    .has-black-border-color {
      border-color: var(--wp--preset--color--black) !important;
    }

    .has-cyan-bluish-gray-border-color {
      border-color: var(--wp--preset--color--cyan-bluish-gray) !important;
    }

    .has-white-border-color {
      border-color: var(--wp--preset--color--white) !important;
    }

    .has-pale-pink-border-color {
      border-color: var(--wp--preset--color--pale-pink) !important;
    }

    .has-vivid-red-border-color {
      border-color: var(--wp--preset--color--vivid-red) !important;
    }

    .has-luminous-vivid-orange-border-color {
      border-color: var(--wp--preset--color--luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-amber-border-color {
      border-color: var(--wp--preset--color--luminous-vivid-amber) !important;
    }

    .has-light-green-cyan-border-color {
      border-color: var(--wp--preset--color--light-green-cyan) !important;
    }

    .has-vivid-green-cyan-border-color {
      border-color: var(--wp--preset--color--vivid-green-cyan) !important;
    }

    .has-pale-cyan-blue-border-color {
      border-color: var(--wp--preset--color--pale-cyan-blue) !important;
    }

    .has-vivid-cyan-blue-border-color {
      border-color: var(--wp--preset--color--vivid-cyan-blue) !important;
    }

    .has-vivid-purple-border-color {
      border-color: var(--wp--preset--color--vivid-purple) !important;
    }

    .has-vivid-cyan-blue-to-vivid-purple-gradient-background {
      background: var(--wp--preset--gradient--vivid-cyan-blue-to-vivid-purple) !important;
    }

    .has-light-green-cyan-to-vivid-green-cyan-gradient-background {
      background: var(--wp--preset--gradient--light-green-cyan-to-vivid-green-cyan) !important;
    }

    .has-luminous-vivid-amber-to-luminous-vivid-orange-gradient-background {
      background: var(--wp--preset--gradient--luminous-vivid-amber-to-luminous-vivid-orange) !important;
    }

    .has-luminous-vivid-orange-to-vivid-red-gradient-background {
      background: var(--wp--preset--gradient--luminous-vivid-orange-to-vivid-red) !important;
    }

    .has-very-light-gray-to-cyan-bluish-gray-gradient-background {
      background: var(--wp--preset--gradient--very-light-gray-to-cyan-bluish-gray) !important;
    }

    .has-cool-to-warm-spectrum-gradient-background {
      background: var(--wp--preset--gradient--cool-to-warm-spectrum) !important;
    }

    .has-blush-light-purple-gradient-background {
      background: var(--wp--preset--gradient--blush-light-purple) !important;
    }

    .has-blush-bordeaux-gradient-background {
      background: var(--wp--preset--gradient--blush-bordeaux) !important;
    }

    .has-luminous-dusk-gradient-background {
      background: var(--wp--preset--gradient--luminous-dusk) !important;
    }

    .has-pale-ocean-gradient-background {
      background: var(--wp--preset--gradient--pale-ocean) !important;
    }

    .has-electric-grass-gradient-background {
      background: var(--wp--preset--gradient--electric-grass) !important;
    }

    .has-midnight-gradient-background {
      background: var(--wp--preset--gradient--midnight) !important;
    }

    .has-small-font-size {
      font-size: var(--wp--preset--font-size--small) !important;
    }

    .has-medium-font-size {
      font-size: var(--wp--preset--font-size--medium) !important;
    }

    .has-large-font-size {
      font-size: var(--wp--preset--font-size--large) !important;
    }

    .has-x-large-font-size {
      font-size: var(--wp--preset--font-size--x-large) !important;
    }

    :where(.wp-block-post-template.is-layout-flex) {
      gap: 1.25em;
    }

    :where(.wp-block-post-template.is-layout-grid) {
      gap: 1.25em;
    }

    :where(.wp-block-columns.is-layout-flex) {
      gap: 2em;
    }

    :where(.wp-block-columns.is-layout-grid) {
      gap: 2em;
    }

    :root :where(.wp-block-pullquote) {
      font-size: 1.5em;
      line-height: 1.6;
    }
  </style>
  <link rel="stylesheet" id="ct-shortcode-css"
    href="https://v6.voiranime.com/wp-content/plugins/madara-shortcodes/shortcodes/css/shortcodes.css?ver=6.7.1"
    type="text/css" media="all">
  <link rel="stylesheet" id="wp-pagenavi-css"
    href="https://v6.voiranime.com/wp-content/plugins/wp-pagenavi/pagenavi-css.css?ver=2.70" type="text/css"
    media="all">
  <link rel="stylesheet" id="fontawesome-css"
    href="https://v6.voiranime.com/wp-content/themes/madara/app/lib/fontawesome/web-fonts-with-css/css/all.min.css?ver=5.15.3"
    type="text/css" media="all">
  <link rel="stylesheet" id="bootstrap-css"
    href="https://v6.voiranime.com/wp-content/themes/madara/css/bootstrap.min.css?ver=4.3.1" type="text/css"
    media="all">
  <link rel="stylesheet" id="slick-css"
    href="https://v6.voiranime.com/wp-content/themes/madara/js/slick/slick.css?ver=1.9.0" type="text/css" media="all">
  <link rel="stylesheet" id="slick-theme-css"
    href="https://v6.voiranime.com/wp-content/themes/madara/js/slick/slick-theme.css?ver=6.7.1" type="text/css"
    media="all">
  <link rel="stylesheet" id="madara-css-child-css"
    href="https://v6.voiranime.com/wp-content/themes/madara/style.css?ver=6.7.1" type="text/css" media="all">
  <link rel="stylesheet" id="ionicons-css"
    href="https://v6.voiranime.com/wp-content/themes/madara/css/fonts/ionicons/css/ionicons.min.css?ver=4.5.10"
    type="text/css" media="all">
  <link rel="stylesheet" id="madara-icons-css"
    href="https://v6.voiranime.com/wp-content/themes/madara/css/fonts/ct-icon/ct-icon.css?ver=6.7.1" type="text/css"
    media="all">
  <link rel="stylesheet" id="loaders-css"
    href="https://v6.voiranime.com/wp-content/themes/madara/css/loaders.min.css?ver=6.7.1" type="text/css" media="all">
  <link rel="stylesheet" id="madara-css-css"
    href="https://v6.voiranime.com/wp-content/themes/madara-child-voiranime/style.css?ver=1.6.6" type="text/css"
    media="all">
  <style id="madara-css-inline-css" type="text/css">
    .c-blog__heading.style-2 i:after,
    .settings-page .nav-tabs-wrap ul.nav-tabs li.active:after {
      border-left-color: #2e2d34;
      border-right-color: #2e2d34;
    }

    .site-header .main-navigation.style-1,
    .widget-heading,
    .widget.background:after,
    .c-blog__heading.style-2 i,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li.active a:after,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li:hover a:after,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li a:after,
    .related-heading.font-nav,
    .c-blog__heading.style-3,
    .settings-page .nav-tabs-wrap ul.nav-tabs li.active a,
    .off-canvas {
      background: -webkit-linear-gradient(left, #1a1920 20%, #2e2d34);
      background: -o-linear-gradient(right, #1a1920 20%, #2e2d34);
      background: -moz-linear-gradient(right, #1a1920 20%, #2e2d34);
      background: linear-gradient(to right, #1a1920 20%, #2e2d34);
      ;
    }

    .widget-heading:after,
    .related-heading.font-nav:after,
    .genres_wrap .c-blog__heading.style-3.active:after {
      border-top-color: #1a1920;
    }

    body.modal-open .modal .modal-content a:hover,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li.active a,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li:hover a,
    body.search.search-results .search-wrap .tab-content-wrap .c-tabs-item .c-tabs-item__content .tab-summary .post-content .post-content_item .summary-content:not(.release-year) a:hover,
    body.search.search-results .search-wrap .tab-content-wrap .c-tabs-item .c-tabs-item__content .tab-summary .post-content .post-content_item .summary-content.release-year a:hover,
    .c-blog-post .entry-header .entry-meta .post-on:before,
    .manga-slider .slider__container .slick-dots li.slick-active button:before,
    .manga-slider .slider__container .slick-dots li button:hover:before,
    body.manga-page .profile-manga .tab-summary .summary_content_wrap .summary_content .post-status .manga-action .count-comment .action_icon a i,
    body.manga-page .profile-manga .tab-summary .summary_content_wrap .summary_content .post-status .manga-action .add-bookmark .action_icon a i,
    body.manga-page .profile-manga .tab-summary .summary_content_wrap .summary_content .post-status .manga-action .count-comment .action_detail a i,
    body.manga-page .profile-manga .tab-summary .summary_content_wrap .summary_content .post-status .manga-action .add-bookmark .action_detail a i,
    body.manga-page .profile-manga .post-title a,
    body.manga-page .content-readmore:hover,
    body.text-ui-light.manga-page .content-readmore:hover,
    .genres_wrap .genres__collapse .genres ul li a:hover,
    .genres_wrap .genres__collapse .genres ul li a:hover:before,
    .c-blog-post .entry-header .entry-meta .post-on .posted-on a:hover,
    body.search .c-search-header__wrapper #search-advanced .search-advanced-form .form-group.checkbox-group .checkbox label:hover,
    .site-header .main-navigation .search-navigation .menu-search .open-search-main-menu,
    .c-btn.c-btn_style-2,
    body.search .c-search-header__wrapper .search-content .btn-search-adv,
    body.reading-manga .entry-header .entry-header_wrap .action-icon ul li a,
    body.reading-manga .c-select-bottom .entry-header_wrap .action-icon ul li a,
    .widget.c-released .released-item-wrap ul.list-released li a:hover,
    body.manga-page .profile-manga .post-title h1,
    .genres_wrap .genres__collapse #genres ul li:hover a,
    .genres_wrap .genres__collapse #genres ul li:hover a:before,
    input[type=checkbox]:checked+label:before,
    input[type=radio]:checked+label:before,
    .genres_wrap a.btn-genres,
    .c-breadcrumb .breadcrumb li a:hover,
    body.search.search-results .search-wrap .tab-content-wrap .c-tabs-item .c-tabs-item__content .tab-summary .post-content .post-content_item.mg_genres .summary-content,
    body.page .c-page-content .c-page .c-page__content .page-content-listing .page-listing-item .page-item-detail .item-summary .list-chapter .chapter-item .vol a:hover,
    #hover-infor .item_thumb .post-title a,
    body.manga-page .version-chap:before,
    body.manga-page .content-readmore:hover,
    body.manga-page .chapter-readmore:hover,
    .icon-load-info,
    .c-blog-post .entry-header .entry-meta .post-on .c-blog__date .post-category a:hover,
    .woocommerce ul.products li.product .price,
    .woocommerce div.entry-summary p.price,
    .woocommerce div.entry-summary form.cart .variations .label,
    .woocommerce div.entry-summary form.cart .quantity-text,
    .widget_product_categories .product-categories li a:hover,
    .woocommerce ul.products li.product h2:hover,
    .woocommerce .c-woo-breadcrumb a:hover,
    .site-header .c-sub-header-nav .c-sub-nav_wrap .c-modal_item .c-user_item .c-user_menu a:hover,
    .site-header .c-sub-header-nav .c-sub-nav_wrap .sub-nav_content .sub-nav_list li:hover>a,
    .settings-page .action i.ion-ios-close:hover:before,
    .settings-page .list-chapter .chapter-item a:hover,
    .settings-page .tabs-content-wrap .tab-group-item .tab-item .history-content .item-infor .chapter span a,
    .settings-page .nav-tabs-wrap ul.nav-tabs li:not(.active):hover a,
    .main-color,
    .site-header .c-sub-header-nav .c-sub-nav_wrap .sub-nav_content .sub-nav_list li.menu-item-has-children.active>a,
    .woocommerce .woocommerce-ordering:after,
    .text-ui-light .widget.c-popular .popular-item-wrap .popular-content .chapter-item .chapter a:hover,
    body.text-ui-light .settings-page .list-chapter .chapter-item .chapter a:hover,
    body.search.text-ui-light .search-wrap .tab-content-wrap .c-tabs-item .c-tabs-item__content .tab-meta .latest-chap .chapter a:hover {
      color: #1a1920;
    }

    .c-blog__heading.style-2 i:after {
      border-right-color: #1a1920 !important
    }

    body.page.text-ui-light .c-page-content .c-page .c-page__content .page-content-listing .page-listing-item .page-item-detail .item-summary .list-chapter .chapter-item .chapter a:hover,
    .text-ui-light .widget.c-popular .popular-item-wrap .popular-content .chapter-item .chapter a:hover,
    #hover-infor .item_thumb .post-title a {
      color: #FFFFFF
    }

    .navigation-ajax .load-ajax:not(.show-loading):hover,
    body.manga-page .page-content-listing.single-page .listing-chapters_wrap>ul.main.version-chap .sub-chap>li:before,
    .shortcode-manga-chapters .listing-chapters_wrap>ul.main.version-chap .sub-chap>li:before,
    .c-wg-button-wrap .btn:hover,
    body.manga-page .page-content-listing.single-page .listing-chapters_wrap ul.main.version-chap .wp-manga-chapter:before,
    .site-header .search-main-menu form input[type=submit],
    .form-submit input[type=submit],
    #comments.comments-area #respond.comment-respond .comment-form .form-submit #submit,
    .c-btn.c-btn_style-1,
    .settings-page input[type="submit"],
    .settings-page .remove-all #delete-bookmark-manga,
    body.manga-page .page-content-listing.single-page .listing-chapters_wrap>ul.main.version-chap li .wp-manga-chapter:before,
    .woocommerce ul.products li.product .button,
    .woocommerce span.onsale,
    .woocommerce .widget_price_filter .price_slider_amount .button:not(:hover),
    .woocommerce .woocommerce-pagination .page-numbers li span.current,
    .woocommerce .woocommerce-pagination .page-numbers li .prev:hover,
    .woocommerce .woocommerce-pagination .page-numbers li .next:hover,
    .woocommerce div.entry-summary form.cart .single_add_to_cart_button,
    .post-password-form input[name="Submit"] {
      background: #1a1920;
    }

    .navigation-ajax .load-ajax:not(.show-loading):hover,
    .popular-slider .slider__container .slider__item .slider__content .slider__content_item .chapter-item .chapter a:hover,
    body.search .c-search-header__wrapper .search-content .btn-search-adv.collapsed,
    .c-btn.c-btn_style-2,
    body.search .c-search-header__wrapper .search-content .btn-search-adv,
    .genres_wrap a.btn-genres,
    .wpcf7-validation-errors,
    .text-ui-light.woocommerce-page input[type="text"]:focus,
    .text-ui-light.woocommerce-page input[type="email"]:focus,
    .text-ui-light.woocommerce-page input[type="search"]:focus,
    .text-ui-light.woocommerce-page input[type="url"]:focus,
    .text-ui-light.woocommerce-page input[type="password"]:focus,
    .text-ui-light.woocommerce-page input[type="tel"]:focus,
    .text-ui-light.woocommerce-page .input-text:focus,
    .text-ui-light.woocommerce-page input[type="text"]:active,
    .text-ui-light.woocommerce-page input[type="email"]:active,
    .text-ui-light.woocommerce-page input[type="search"]:active,
    .text-ui-light.woocommerce-page input[type="url"]:active,
    .text-ui-light.woocommerce-page input[type="password"]:active,
    .text-ui-light.woocommerce-page input[type="tel"]:active,
    .text-ui-light.woocommerce-page .input-text:active,
    .text-ui-light.woocommerce-page input[type="text"]:hover,
    .text-ui-light.woocommerce-page input[type="email"]:hover,
    .text-ui-light.woocommerce-page input[type="search"]:hover,
    .text-ui-light.woocommerce-page input[type="url"]:hover,
    .text-ui-light.woocommerce-page input[type="password"]:hover,
    .text-ui-light.woocommerce-page input[type="tel"]:hover,
    .text-ui-light.woocommerce-page .input-text:hover,
    .text-ui-light.woocommerce-page select.orderby:hover {
      border-color: #1a1920;
    }

    .site-header .c-sub-header-nav .c-sub-nav_wrap .sub-nav_content .sub-nav_list>li.menu-item-has-children>ul.sub-menu,
    .site-header .c-sub-header-nav .c-sub-nav_wrap .c-modal_item .c-user_item .c-user_menu {
      border-bottom-color: #1a1920;
    }

    .widget.widget_tag_cloud .tag-cloud-link:hover,
    body.page .c-page-content .c-page .c-page__content .page-content-listing .page-listing-item .page-item-detail .item-summary .list-chapter .chapter-item .chapter:hover,
    .popular-slider .slider__container .slider__item .slider__content .slider__content_item .chapter-item .chapter a:hover,
    .widget.c-popular .popular-item-wrap .popular-content .chapter-item .chapter:hover,
    .site-footer .top-footer .wrap_social_account ul.social_account__item li a,
    .site-content .main-col .item-tags ul li a:hover,
    .popular-slider .slider__container .slick-arrow:hover,
    .widget.background.widget_tag_cloud .tag-cloud-link:hover,
    .wp-pagenavi a:hover,
    body.search.search-results .search-wrap .tab-content-wrap .c-tabs-item .c-tabs-item__content .tab-meta .latest-chap .chapter:hover,
    .go-to-top:hover,
    .widget.c-popular .widget-view-more,
    body.search .c-search-header__wrapper .search-content .search-form .search-submit,
    body.reading-manga .entry-header .select-pagination .nav-links .nav-next a:not(:hover),
    body.reading-manga .c-select-bottom .select-pagination .nav-links .nav-next a:not(:hover),
    body.reading-manga .entry-header .entry-header_wrap .action-icon ul li:hover a,
    body.reading-manga .c-select-bottom .entry-header_wrap .action-icon ul li:hover a,
    .widget.c-released .released-search form [type="submit"],
    body.manga-page .profile-manga .tab-summary .loader-inner>div,
    .wpcf7-submit,
    .woocommerce #respond input#submit.alt,
    .woocommerce a.button.alt,
    .woocommerce button.button.alt,
    .woocommerce input.button.alt,
    .woocommerce .woocommerce-cart-form .cart button.button,
    .woocommerce .cart input.button:not(:hover),
    #adult_modal .modal-footer .btn.btn-primary:not(:hover),
    body.reading-manga .entry-header .select-pagination .nav-links>* a,
    body.reading-manga .c-select-bottom .select-pagination .nav-links>* a,
    .settings-page .list-chapter .chapter-item .chapter:hover,
    body.modal-open .modal .modal-content .modal-body .login .submit .wp-submit:not(:hover),
    .settings-page .tabs-content-wrap .my_account_orders a.button.view,
    .main-bg,
    #madara-comments.comments-area #respond.comment-respond .comment-form .form-submit #submit,
    body.search .c-search-header__wrapper .search-content .btn-search-adv {
      background-color: #1a1920;
    }

    :root {
      --madara-main-color: #1a1920
    }

    body.search.search-results .search-wrap .tab-content-wrap .c-tabs-item .c-tabs-item__content .tab-meta .latest-chap .chapter:hover a,
    .wp-pagenavi a:hover {
      color: #FFF !important
    }

    .item-thumb .quick-chapter-link {
      background: #1a1920;
    }

    .page-content-listing.single-page li.wp-manga-chapter.unread a {
      color: #1a1920
    }

    a:not(.btn-link):hover,
    .c-breadcrumb .breadcrumb li a:hover,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li.active a,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li:hover a,
    .c-blog-post .entry-header .entry-meta .post-on .posted-on a:hover,
    .c-blog-post .entry-header .entry-meta .post-on .c-blog__date .post-category a:hover,
    body.manga-page .content-readmore:hover,
    body.text-ui-light.manga-page .content-readmore:hover,
    body.manga-page .chapter-readmore:hover,
    body.page .c-page-content .c-page .c-page__content .page-content-listing .page-listing-item .page-item-detail .item-summary .list-chapter .chapter-item .vol a:hover,
    .site-header .main-navigation.style-1 .search-navigation .search-navigation__wrap .link-adv-search a:hover,
    .woocommerce ul.products li.product h2:hover,
    .woocommerce .c-woo-breadcrumb a:hover,
    .genres_wrap .genres__collapse .genres ul li a:hover,
    .genres_wrap .genres__collapse .genres ul li a:hover:before,
    .widget.c-released .released-item-wrap ul.list-released li a:hover,
    body.search.search-results .search-wrap .tab-content-wrap .c-tabs-item .c-tabs-item__content .tab-summary .post-content .post-content_item .summary-content:not(.release-year) a:hover,
    body.search.search-results .search-wrap .tab-content-wrap .c-tabs-item .c-tabs-item__content .tab-summary .post-content .post-content_item .summary-content.release-year a:hover {
      color: #7289da;
    }

    .tab-wrap .c-nav-tabs ul.c-tabs-content li.active a:after,
    .tab-wrap .c-nav-tabs ul.c-tabs-content li:hover a:after,
    {
    background: #7289da;
    }

    .meta-item.rating .rating_current,
    .meta-item.rating .rating_current_half,
    body.manga-page .profile-manga .tab-summary .post-rating i.ion-ios-star,
    body.manga-page .profile-manga .tab-summary .post-rating i.ion-ios-star.rating_current,
    body.manga-page .profile-manga .tab-summary .post-rating i.ion-ios-star-half,
    body.manga-page .profile-manga .tab-summary .post-rating .user-rating i.ion-ios-star,
    body.manga-page .profile-manga .tab-summary .post-rating .post-total-rating i.ion-ios-star,
    body.manga-page .profile-manga .tab-summary .post-rating .post-total-rating i.ion-ios-star.rating_current,
    body.manga-page .profile-manga .tab-summary .post-rating .user-rating i.ion-ios-star,
    body.manga-page .profile-manga .tab-summary .post-rating .user-rating i.ion-ios-star.rating_current,
    .woocommerce .star-rating,
    .woocommerce .star-rating::before,
    body.manga-page .profile-manga .tab-summary .post-rating .post-total-rating i.ion-ios-star-half {
      color: #ff3c38;
    }

    #pageloader.spinners {
      position: fixed;
      top: 0;
      left: 0;

      width: 100%;
      height: 100%;
      z-index: 99999;
      background: #222
    }

    p.madara-unyson {
      color: #FF0000;
    }

    .table.table-hover.list-bookmark tr:last-child td {
      text-align: center;
    }

    #adminmenu .wp-submenu li.current {
      display: none !important;
    }

    .show_tgmpa_version {
      float: right;
      padding: 0em 1.5em 0.5em 0;
    }

    .tgmpa>h2 {
      font-size: 23px;
      font-weight: 400;
      line-height: 29px;
      margin: 0;
      padding: 9px 15px 4px 0;
    }

    .update-php {
      width: 100%;
      height: 98%;
      min-height: 850px;
      padding-top: 1px;
    }

    .c-blog-post .entry-content .entry-content_wrap .read-container img.alignleft {
      margin: 10px 30px 10px 0 !important;
    }

    .c-blog-post .entry-content .entry-content_wrap .read-container img.alignright {
      margin: 10px 0px 10px 30px !important;
    }

    .read-container i.fas.fa-spinner.fa-spin {
      font-size: 31px;
      color: #888;
    }

    .c-blog-post .entry-content .entry-content_wrap .read-container img {
      cursor: pointer;
    }

    .choose-avatar .loading-overlay {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(255, 255, 255, 0.72);
      z-index: 1;
      display: none;
    }

    .choose-avatar .loading-overlay i.fas.fa-spinner {
      font-size: 40px;
      color: #ec3348;
    }

    .choose-avatar .loading-overlay .loading-icon {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    }

    .choose-avatar.uploading .loading-overlay {
      display: block;
    }

    .site-header .c-sub-header-nav .entry-header {
      display: none;
      margin-bottom: 15px;
    }

    .site-header .c-sub-header-nav.sticky .entry-header {
      display: block;
    }

    .site-header .c-sub-header-nav.hide-sticky-menu.sticky .c-sub-nav_wrap {
      display: none;
    }

    .site-header .c-sub-header-nav.hide-sticky-menu .entry-header {
      margin-top: 15px;
    }

    body.page .c-page-content .c-page .c-page__content .page-content-listing .page-listing-item .page-item-detail .item-summary .list-chapter .chapter-item span.vol.font-meta {
      display: none
    }

    @media (max-width: 480px) {
      .c-blog-post .entry-content .entry-content_wrap .reading-content {
        margin-left: -15px;
        margin-right: -15px
      }
    }

    .settings-page table.list-bookmark>tbody tr td>div.mange-name:before {
      content: "Anime";
    }

    .settings-page table.list-bookmark>tbody tr td>div.action:before {
      content: "Modifier";
    }

    .settings-page table.list-bookmark>tbody tr td>div.post-on:before {
      content: "Mise à jour";
    }

    #madara-comments input#submit {
      color: #FFF
    }

    @media (max-width: 480px) {
      body.reading-manga .entry-header .select-view .c-selectpicker {
        max-width: 100% !important;
      }
    }
  </style>
  <link rel="stylesheet" id="lity-css"
    href="https://v6.voiranime.com/wp-content/plugins/madara-core/assets/css/lity.min.css?ver=6.7.1" type="text/css"
    media="all">
  <script type="text/javascript" src="https://v6.voiranime.com/wp-includes/js/jquery/jquery.min.js?ver=3.7.1"
    id="jquery-core-js"></script>
  <script type="text/javascript" src="https://v6.voiranime.com/wp-includes/js/jquery/jquery-migrate.min.js?ver=3.4.1"
    id="jquery-migrate-js"></script>
  <script type="text/javascript"
    src="https://v6.voiranime.com/wp-content/themes/madara-child-voiranime/assets/js/script.js?ver=1.1"
    id="child_manga_single-js"></script>
  <link rel="https://api.w.org/" href="https://v6.voiranime.com/wp-json/">
  <link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://v6.voiranime.com/xmlrpc.php?rsd">
  <meta name="generator" content="WordPress 6.7.1">
  <link rel="shortlink" href="https://v6.voiranime.com/?p=68475">
  <link rel="alternate" title="oEmbed (JSON)" type="application/json+oembed"
    href="https://v6.voiranime.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fv6.voiranime.com%2Fanime%2Fkujibiki-unbalance%2F">
  <link rel="alternate" title="oEmbed (XML)" type="text/xml+oembed"
    href="https://v6.voiranime.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fv6.voiranime.com%2Fanime%2Fkujibiki-unbalance%2F&amp;format=xml">

  <!-- GA Google Analytics @ https://m0n.co/ga -->
  <script async="" src="https://www.googletagmanager.com/gtag/js?id=G-89GV8YH5X1"></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() { dataLayer.push(arguments); }
    gtag('js', new Date());
    gtag('config', 'G-89GV8YH5X1');
  </script>

  <link rel="apple-touch-icon" sizes="120x120" href="/wp-content/uploads/fbrfg/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="/wp-content/uploads/fbrfg/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="/wp-content/uploads/fbrfg/favicon-16x16.png">
  <link rel="manifest" href="/wp-content/uploads/fbrfg/site.webmanifest">
  <link rel="mask-icon" href="/wp-content/uploads/fbrfg/safari-pinned-tab.svg" color="#5bbad5">
  <link rel="shortcut icon" href="/wp-content/uploads/fbrfg/favicon.ico">
  <meta name="msapplication-TileColor" content="#da532c">
  <meta name="msapplication-config" content="/wp-content/uploads/fbrfg/browserconfig.xml">
  <meta name="theme-color" content="#ffffff">
  <script type="application/ld+json">
						{
							"@context": "http://schema.org",
							"@type": "Article",
							"mainEntityOfPage": {
								"@type": "WebPage",
								"@id": "https://google.com/article"
							},
							"headline": "Kujibiki Unbalance",
							"image": {
								"@type": "ImageObject",
								"url": "https://v6.voiranime.com/wp-content/uploads/2021/01/thumb_5ff044ffdf8c5.jpg",
								"height": 391,
								"width": 696							},
							"datePublished": "2021-01-02 21:49:16",
							"dateModified": "2021-01-02 21:49:16",
							"author": {
								"@type": "Person",
								"name": "voiranime"
							},
							"publisher": {
								"@type": "Organization",
								"name": "Voiranime",
								"logo": {
									"@type": "ImageObject",
									"url": "https://voiranime.com/wp-content/uploads/2019/12/vato.png"
								}
							},
							"description": "Kujibiki Unbalance. Kujibiki Unbalance - OAV2 VOSTFR - OAV2. Cette série fait suite aux 3 OAV de Kujibiki Unbalance.

Une fois par an, la prestigieuse Rikkyouin High School organise une loterie pour déterminer des étudian"
						}
					</script>
  <meta property="og:type" content="article">
  <meta property="og:image" content="https://v6.voiranime.com/wp-content/uploads/2021/01/thumb_5ff044ffdf8c5.jpg">
  <meta property="og:site_name" content="Voiranime">
  <meta property="fb:app_id" content="">
  <meta property="og:title" content="Kujibiki Unbalance - Kujibiki Unbalance - OAV2 VOSTFR - OAV2 - Voiranime">
  <meta property="og:url" content="https://v6.voiranime.com/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/">
  <meta property="og:description" content="Kujibiki Unbalance. Kujibiki Unbalance - OAV2 VOSTFR - OAV2. Cette série fait suite aux 3 OAV de Kujibiki Unbalance.

Une fois par an, la prestigieuse Rikkyouin High School organise une loterie pour déterminer des étudian">
  <meta name="twitter:card" content="summary">
  <meta name="twitter:site" content="@Voiranime">
  <meta name="twitter:title" content="Kujibiki Unbalance - Kujibiki Unbalance - OAV2 VOSTFR - OAV2 - Voiranime">
  <meta name="twitter:description" content="Kujibiki Unbalance. Kujibiki Unbalance - OAV2 VOSTFR - OAV2. Cette série fait suite aux 3 OAV de Kujibiki Unbalance.

Une fois par an, la prestigieuse Rikkyouin High School organise une loterie pour déterminer des étudian">
  <meta name="twitter:url" content="https://v6.voiranime.com/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/">
  <meta name="twitter:image" content="https://v6.voiranime.com/wp-content/uploads/2021/01/thumb_5ff044ffdf8c5.jpg">
  <meta name="description" content="Kujibiki Unbalance. Kujibiki Unbalance - OAV2 VOSTFR - OAV2. Cette série fait suite aux 3 OAV de Kujibiki Unbalance.

Une fois par an, la prestigieuse Rikkyouin High School organise une loterie pour déterminer des étudian">
  <meta name="generator" content="Powered by Madara - A powerful manga, novel theme from Mangabooth.com">
  <style id="asp-basic">
    @keyframes aspAnFadeIn {
      0% {
        opacity: 0
      }

      50% {
        opacity: 0.6
      }

      100% {
        opacity: 1
      }
    }

    @-webkit-keyframes aspAnFadeIn {
      0% {
        opacity: 0
      }

      50% {
        opacity: 0.6
      }

      100% {
        opacity: 1
      }
    }

    @keyframes aspAnFadeOut {
      0% {
        opacity: 1
      }

      50% {
        opacity: 0.6
      }

      100% {
        opacity: 0
      }
    }

    @-webkit-keyframes aspAnFadeOut {
      0% {
        opacity: 1
      }

      50% {
        opacity: 0.6
      }

      100% {
        opacity: 0
      }
    }

    @keyframes aspAnFadeInDrop {
      0% {
        opacity: 0;
        transform: translate(0, -50px)
      }

      100% {
        opacity: 1;
        transform: translate(0, 0)
      }
    }

    @-webkit-keyframes aspAnFadeInDrop {
      0% {
        opacity: 0;
        transform: translate(0, -50px);
        -webkit-transform: translate(0, -50px)
      }

      100% {
        opacity: 1;
        transform: translate(0, 0);
        -webkit-transform: translate(0, 0)
      }
    }

    @keyframes aspAnFadeOutDrop {
      0% {
        opacity: 1;
        transform: translate(0, 0);
        -webkit-transform: translate(0, 0)
      }

      100% {
        opacity: 0;
        transform: translate(0, -50px);
        -webkit-transform: translate(0, -50px)
      }
    }

    @-webkit-keyframes aspAnFadeOutDrop {
      0% {
        opacity: 1;
        transform: translate(0, 0);
        -webkit-transform: translate(0, 0)
      }

      100% {
        opacity: 0;
        transform: translate(0, -50px);
        -webkit-transform: translate(0, -50px)
      }
    }

    div.ajaxsearchpro.asp_an_fadeIn,
    div.ajaxsearchpro.asp_an_fadeOut,
    div.ajaxsearchpro.asp_an_fadeInDrop,
    div.ajaxsearchpro.asp_an_fadeOutDrop {
      -webkit-animation-duration: 100ms;
      animation-duration: 100ms;
      -webkit-animation-fill-mode: forwards;
      animation-fill-mode: forwards
    }

    .asp_an_fadeIn,
    div.ajaxsearchpro.asp_an_fadeIn {
      animation-name: aspAnFadeIn;
      -webkit-animation-name: aspAnFadeIn
    }

    .asp_an_fadeOut,
    div.ajaxsearchpro.asp_an_fadeOut {
      animation-name: aspAnFadeOut;
      -webkit-animation-name: aspAnFadeOut
    }

    div.ajaxsearchpro.asp_an_fadeInDrop {
      animation-name: aspAnFadeInDrop;
      -webkit-animation-name: aspAnFadeInDrop
    }

    div.ajaxsearchpro.asp_an_fadeOutDrop {
      animation-name: aspAnFadeOutDrop;
      -webkit-animation-name: aspAnFadeOutDrop
    }

    div.ajaxsearchpro.asp_main_container {
      transition: width 130ms linear;
      -webkit-transition: width 130ms linear
    }

    asp_w_container,
    div.asp_w.ajaxsearchpro,
    div.asp_w.asp_r,
    div.asp_w.asp_s,
    div.asp_w.asp_sb,
    div.asp_w.asp_sb * {
      -webkit-box-sizing: content-box;
      -moz-box-sizing: content-box;
      -ms-box-sizing: content-box;
      -o-box-sizing: content-box;
      box-sizing: content-box;
      padding: 0;
      margin: 0;
      border: 0;
      border-radius: 0;
      text-transform: none;
      text-shadow: none;
      box-shadow: none;
      text-decoration: none;
      text-align: left;
      text-indent: initial;
      letter-spacing: normal;
      font-display: swap
    }

    div.asp_w_container div[id*=__original__] {
      display: none !important
    }

    div.asp_w.ajaxsearchpro {
      -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
      -ms-box-sizing: border-box;
      -o-box-sizing: border-box;
      box-sizing: border-box
    }

    div.asp_w.asp_r,
    div.asp_w.asp_r * {
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      -khtml-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none
    }

    div.asp_w.ajaxsearchpro input[type=text]::-ms-clear {
      display: none;
      width: 0;
      height: 0
    }

    div.asp_w.ajaxsearchpro input[type=text]::-ms-reveal {
      display: none;
      width: 0;
      height: 0
    }

    div.asp_w.ajaxsearchpro input[type="search"]::-webkit-search-decoration,
    div.asp_w.ajaxsearchpro input[type="search"]::-webkit-search-cancel-button,
    div.asp_w.ajaxsearchpro input[type="search"]::-webkit-search-results-button,
    div.asp_w.ajaxsearchpro input[type="search"]::-webkit-search-results-decoration {
      display: none
    }

    div.asp_w.ajaxsearchpro input[type="search"] {
      appearance: auto !important;
      -webkit-appearance: none !important
    }

    .clear {
      clear: both
    }

    .asp_clear {
      display: block !important;
      clear: both !important;
      margin: 0 !important;
      padding: 0 !important;
      width: auto !important;
      height: 0 !important
    }

    .hiddend {
      display: none !important
    }

    div.asp_w.ajaxsearchpro {
      width: 100%;
      height: auto;
      border-radius: 0;
      background: rgba(255, 255, 255, 0);
      overflow: hidden
    }

    div.asp_w.ajaxsearchpro.asp_non_compact {
      min-width: 200px
    }

    #asp_absolute_overlay {
      width: 0;
      height: 0;
      position: fixed;
      background: rgba(255, 255, 255, 0.5);
      top: 0;
      left: 0;
      display: block;
      z-index: 0;
      opacity: 0;
      transition: opacity 200ms linear;
      -webkit-transition: opacity 200ms linear
    }

    div.asp_m.ajaxsearchpro .proinput input:before,
    div.asp_m.ajaxsearchpro .proinput input:after,
    div.asp_m.ajaxsearchpro .proinput form:before,
    div.asp_m.ajaxsearchpro .proinput form:after {
      display: none
    }

    div.asp_w.ajaxsearchpro textarea:focus,
    div.asp_w.ajaxsearchpro input:focus {
      outline: none
    }

    div.asp_m.ajaxsearchpro .probox .proinput input::-ms-clear {
      display: none
    }

    div.asp_m.ajaxsearchpro .probox {
      width: auto;
      border-radius: 5px;
      background: #FFF;
      overflow: hidden;
      border: 1px solid #FFF;
      box-shadow: 1px 0 3px #CCC inset;
      display: -webkit-flex;
      display: flex;
      -webkit-flex-direction: row;
      flex-direction: row;
      direction: ltr;
      align-items: stretch;
      isolation: isolate
    }

    div.asp_m.ajaxsearchpro .probox .proinput {
      width: 1px;
      height: 100%;
      float: left;
      box-shadow: none;
      position: relative;
      flex: 1 1 auto;
      -webkit-flex: 1 1 auto;
      z-index: 0
    }

    div.asp_m.ajaxsearchpro .probox .proinput form {
      height: 100%;
      margin: 0 !important;
      padding: 0 !important;
      display: block !important;
      max-width: unset !important
    }

    div.asp_m.ajaxsearchpro .probox .proinput input {
      height: 100%;
      width: 100%;
      border: 0;
      background: transparent;
      box-shadow: none;
      padding: 0;
      left: 0;
      padding-top: 2px;
      min-width: 120px;
      min-height: unset;
      max-height: unset
    }

    div.asp_m.ajaxsearchpro .probox .proinput input.autocomplete {
      border: 0;
      background: transparent;
      width: 100%;
      box-shadow: none;
      margin: 0;
      padding: 0;
      left: 0
    }

    div.asp_m.ajaxsearchpro .probox .proinput.iepaddingfix {
      padding-top: 0
    }

    div.asp_m.ajaxsearchpro .probox .proloading,
    div.asp_m.ajaxsearchpro .probox .proclose,
    div.asp_m.ajaxsearchpro .probox .promagnifier,
    div.asp_m.ajaxsearchpro .probox .prosettings {
      width: 20px;
      height: 20px;
      min-width: unset;
      min-height: unset;
      background: none;
      background-size: 20px 20px;
      float: right;
      box-shadow: none;
      margin: 0;
      padding: 0;
      z-index: 1
    }

    div.asp_m.ajaxsearchpro button.promagnifier:focus-visible {
      box-shadow: inset 0 0 0 2px rgba(0, 0, 0, 0.4)
    }

    div.asp_m.ajaxsearchpro .probox .proloading,
    div.asp_m.ajaxsearchpro .probox .proclose {
      background-position: center center;
      display: none;
      background-size: auto;
      background-repeat: no-repeat;
      background-color: transparent
    }

    div.asp_m.ajaxsearchpro .probox .proloading {
      padding: 2px;
      box-sizing: border-box
    }

    div.asp_m.ajaxsearchpro .probox .proclose {
      position: relative;
      cursor: pointer;
      z-index: 2
    }

    div.asp_m.ajaxsearchpro .probox .promagnifier .innericon,
    div.asp_m.ajaxsearchpro .probox .prosettings .innericon,
    div.asp_m.ajaxsearchpro .probox .proclose .innericon {
      background-size: 20px 20px;
      background-position: center center;
      background-repeat: no-repeat;
      background-color: transparent;
      width: 100%;
      height: 100%;
      line-height: initial;
      text-align: center;
      overflow: hidden
    }

    div.asp_m.ajaxsearchpro .probox .promagnifier .innericon svg,
    div.asp_m.ajaxsearchpro .probox .prosettings .innericon svg,
    div.asp_m.ajaxsearchpro .probox .proloading svg {
      height: 100%;
      width: 22px;
      vertical-align: baseline;
      display: inline-block
    }

    div.asp_m.ajaxsearchpro .probox .proclose svg {
      background: #333;
      position: absolute;
      top: 50%;
      width: 20px;
      height: 20px;
      left: 50%;
      fill: #fefefe;
      box-sizing: border-box;
      box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.9)
    }

    .opacityOne {
      opacity: 1
    }

    .opacityZero {
      opacity: 0
    }

    div.asp_w.asp_s [disabled].noUi-connect,
    div.asp_w.asp_s [disabled] .noUi-connect {
      background: #B8B8B8
    }

    div.asp_w.asp_s [disabled] .noUi-handle {
      cursor: not-allowed
    }

    div.asp_w.asp_r p.showmore {
      display: none;
      margin: 0
    }

    div.asp_w.asp_r.asp_more_res_loading p.showmore a,
    div.asp_w.asp_r.asp_more_res_loading p.showmore a span {
      color: transparent !important
    }

    @-webkit-keyframes shm-rot-simple {
      0% {
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg);
        opacity: 1
      }

      50% {
        -webkit-transform: rotate(180deg);
        transform: rotate(180deg);
        opacity: 0.85
      }

      100% {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg);
        opacity: 1
      }
    }

    @keyframes shm-rot-simple {
      0% {
        -webkit-transform: rotate(0deg);
        transform: rotate(0deg);
        opacity: 1
      }

      50% {
        -webkit-transform: rotate(180deg);
        transform: rotate(180deg);
        opacity: 0.85
      }

      100% {
        -webkit-transform: rotate(360deg);
        transform: rotate(360deg);
        opacity: 1
      }
    }

    div.asp_w.asp_r div.asp_showmore_container {
      position: relative
    }

    div.asp_w.asp_r. div.asp_moreres_loader {
      display: none;
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      background: rgba(255, 255, 255, 0.2)
    }

    div.asp_w.asp_r.asp_more_res_loading div.asp_moreres_loader {
      display: block !important
    }

    div.asp_w.asp_r div.asp_moreres_loader-inner {
      height: 24px;
      width: 24px;
      animation: shm-rot-simple 0.8s infinite linear;
      -webkit-animation: shm-rot-simple 0.8s infinite linear;
      border: 4px solid #353535;
      border-right-color: transparent;
      border-radius: 50%;
      box-sizing: border-box;
      position: absolute;
      top: 50%;
      margin: -12px auto auto -12px;
      left: 50%
    }

    div.asp_hidden_data,
    div.asp_hidden_data * {
      display: none
    }

    div.asp_w.asp_r {
      display: none
    }

    div.asp_w.asp_r * {
      text-decoration: none;
      text-shadow: none
    }

    div.asp_w.asp_r .results {
      overflow: hidden;
      width: auto;
      height: 0;
      margin: 0;
      padding: 0
    }

    div.asp_w.asp_r .asp_nores {
      display: flex;
      flex-wrap: wrap;
      gap: 8px;
      overflow: hidden;
      width: auto;
      height: auto;
      position: relative;
      z-index: 2
    }

    div.asp_w.asp_r .results .item {
      overflow: hidden;
      width: auto;
      margin: 0;
      padding: 3px;
      position: relative;
      background: #f4f4f4;
      border-left: 1px solid rgba(255, 255, 255, 0.6);
      border-right: 1px solid rgba(255, 255, 255, 0.4)
    }

    div.asp_w.asp_r .results .item,
    div.asp_w.asp_r .results .asp_group_header {
      animation-delay: 0s;
      animation-duration: 0.5s;
      animation-fill-mode: both;
      animation-timing-function: ease;
      backface-visibility: hidden;
      -webkit-animation-delay: 0s;
      -webkit-animation-duration: 0.5s;
      -webkit-animation-fill-mode: both;
      -webkit-animation-timing-function: ease;
      -webkit-backface-visibility: hidden
    }

    div.asp_w.asp_r .results .item .asp_image {
      overflow: hidden;
      background: transparent;
      padding: 0;
      float: left;
      background-position: center;
      background-size: cover;
      position: relative
    }

    div.asp_w.asp_r .results .asp_image canvas {
      display: none
    }

    div.asp_w.asp_r .results .asp_image .asp_item_canvas {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      margin: 0;
      width: 100%;
      height: 100%;
      z-index: 1;
      display: block;
      opacity: 1;
      background-position: inherit;
      background-size: inherit;
      transition: opacity 0.5s
    }

    div.asp_w.asp_r .results .item:hover .asp_image .asp_item_canvas,
    div.asp_w.asp_r .results figure:hover .asp_image .asp_item_canvas {
      opacity: 0
    }

    div.asp_w.asp_r a.asp_res_image_url,
    div.asp_w.asp_r a.asp_res_image_url:hover,
    div.asp_w.asp_r a.asp_res_image_url:focus,
    div.asp_w.asp_r a.asp_res_image_url:active {
      box-shadow: none !important;
      border: none !important;
      margin: 0 !important;
      padding: 0 !important;
      display: inline !important
    }

    div.asp_w.asp_r .results .item .asp_image_auto {
      width: auto !important;
      height: auto !important
    }

    div.asp_w.asp_r .results .item .asp_image img {
      width: 100%;
      height: 100%
    }

    div.asp_w.asp_r .results a span.overlap {
      position: absolute;
      width: 100%;
      height: 100%;
      top: 0;
      left: 0;
      z-index: 1
    }

    div.asp_w.asp_r .resdrg {
      height: auto
    }

    div.asp_w.ajaxsearchpro .asp_results_group {
      margin: 10px 0 0 0
    }

    div.asp_w.ajaxsearchpro .asp_results_group:first-of-type {
      margin: 0 !important
    }

    div.asp_w.asp_r.vertical .results .item:first-child {
      border-radius: 0
    }

    div.asp_w.asp_r.vertical .results .item:last-child {
      border-radius: 0;
      margin-bottom: 0
    }

    div.asp_w.asp_r.vertical .results .item:last-child:after {
      height: 0;
      margin: 0;
      width: 0
    }

    div.asp_w.asp_s.searchsettings {
      width: auto;
      height: auto;
      position: absolute;
      display: none;
      z-index: 11001;
      border-radius: 0 0 3px 3px;
      visibility: hidden;
      opacity: 0;
      overflow: visible
    }

    div.asp_w.asp_sb.searchsettings {
      display: none;
      visibility: hidden;
      direction: ltr;
      overflow: visible;
      position: relative;
      z-index: 1
    }

    div.asp_w.asp_sb.searchsettings .asp_sett_scroll::-webkit-scrollbar-thumb {
      background: transparent;
      border-radius: 5px;
      border: none
    }

    div.asp_w.asp_s.searchsettings form,
    div.asp_w.asp_sb.searchsettings form {
      display: flex;
      flex-wrap: wrap;
      margin: 0 0 12px 0 !important;
      padding: 0 !important
    }

    div.asp_w.asp_s.searchsettings .asp_option_inner,
    div.asp_w.asp_sb.searchsettings .asp_option_inner,
    div.asp_w.asp_sb.searchsettings input[type='text'] {
      margin: 2px 10px 0 10px;
      *padding-bottom: 10px
    }

    div.asp_w.asp_s.searchsettings input[type='text']:not(.asp_select2-search__field),
    div.asp_w.asp_sb.searchsettings input[type='text']:not(.asp_select2-search__field) {
      width: 86% !important;
      padding: 8px 6px !important;
      margin: 0 0 0 10px !important;
      background-color: #FAFAFA !important;
      font-size: 13px;
      border: none !important;
      line-height: 17px;
      height: 20px
    }

    div.asp_w.asp_s.searchsettings.ie78 .asp_option_inner,
    div.asp_w.asp_sb.searchsettings.ie78 .asp_option_inner {
      margin-bottom: 0 !important;
      padding-bottom: 0 !important
    }

    div.asp_w.asp_s.searchsettings div.asp_option_label,
    div.asp_w.asp_sb.searchsettings div.asp_option_label {
      font-size: 14px;
      line-height: 20px !important;
      margin: 0;
      width: 150px;
      text-shadow: none;
      padding: 0;
      min-height: 20px;
      border: none;
      background: transparent;
      float: none;
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none
    }

    div.asp_w.asp_s.searchsettings .asp_label,
    div.asp_w.asp_sb.searchsettings .asp_label {
      line-height: 24px !important;
      vertical-align: middle;
      display: inline-block;
      cursor: pointer
    }

    div.asp_w.asp_s.searchsettings input[type=radio],
    div.asp_w.asp_sb.searchsettings input[type=radio] {
      vertical-align: middle;
      margin: 0 6px 0 17px;
      display: inline-block;
      appearance: normal;
      -moz-appearance: normal;
      -webkit-appearance: radio
    }

    div.asp_w.asp_s.searchsettings .asp_option_inner input[type=checkbox],
    div.asp_w.asp_sb.searchsettings .asp_option_inner input[type=checkbox] {
      display: none !important
    }

    div.asp_w.asp_s.searchsettings.ie78 .asp_option_inner input[type=checkbox],
    div.asp_w.asp_sb.searchsettings.ie78 .asp_option_inner input[type=checkbox] {
      display: block
    }

    div.asp_w.asp_s.searchsettings.ie78 div.asp_option_label,
    div.asp_w.asp_sb.searchsettings.ie78 div.asp_option_label {
      float: right !important
    }

    div.asp_w.asp_s.searchsettings .asp_option_inner,
    div.asp_w.asp_sb.searchsettings .asp_option_inner {
      width: 17px;
      height: 17px;
      position: relative;
      flex-grow: 0;
      -webkit-flex-grow: 0;
      flex-shrink: 0;
      -webkit-flex-shrink: 0
    }

    div.asp_w.asp_sb.searchsettings .asp_option_inner {
      border-radius: 3px;
      background: rgb(66, 66, 66);
      box-shadow: none
    }

    div.asp_w.asp_s.searchsettings .asp_option_inner .asp_option_checkbox,
    div.asp_w.asp_sb.searchsettings .asp_option_inner .asp_option_checkbox {
      cursor: pointer;
      position: absolute;
      width: 17px;
      height: 17px;
      top: 0;
      padding: 0;
      border-radius: 2px;
      box-shadow: none;
      font-size: 0 !important;
      color: rgba(0, 0, 0, 0)
    }

    div.asp_w.asp_s.searchsettings.ie78 .asp_option_inner .asp_option_checkbox,
    div.asp_w.asp_sb.searchsettings.ie78 .asp_option_inner .asp_option_checkbox {
      display: none
    }

    div.asp_w.asp_s.searchsettings .asp_option_inner .asp_option_checkbox:before,
    div.asp_w.asp_sb.searchsettings .asp_option_inner .asp_option_checkbox:before {
      display: none !important
    }

    div.asp_w.asp_s.searchsettings .asp_option_inner .asp_option_checkbox:after,
    div.asp_w.asp_sb.searchsettings .asp_option_inner .asp_option_checkbox:after {
      opacity: 0;
      font-family: 'asppsicons2';
      content: "\e800";
      background: transparent;
      border-top: none;
      border-right: none;
      box-sizing: content-box;
      height: 100%;
      width: 100%;
      padding: 0 !important;
      position: absolute;
      top: 0;
      left: 0
    }

    div.asp_w.asp_s.searchsettings.ie78 .asp_option_inner .asp_option_checkbox:after,
    div.asp_w.asp_sb.searchsettings.ie78 .asp_option_inner .asp_option_checkbox:after {
      display: none
    }

    div.asp_w.asp_s.searchsettings .asp_option_inner .asp_option_checkbox:hover::after,
    div.asp_w.asp_sb.searchsettings .asp_option_inner .asp_option_checkbox:hover::after {
      opacity: 0.3
    }

    div.asp_w.asp_s.searchsettings .asp_option_inner input[type=checkbox]:checked~div:after,
    div.asp_w.asp_sb.searchsettings .asp_option_inner input[type=checkbox]:checked~div:after {
      opacity: 1
    }

    div.asp_w.asp_sb.searchsettings span.checked~div:after,
    div.asp_w.asp_s.searchsettings span.checked~div:after {
      opacity: 1 !important
    }

    div.asp_w.asp_s.searchsettings fieldset,
    div.asp_w.asp_sb.searchsettings fieldset {
      position: relative;
      float: left
    }

    div.asp_w.asp_s.searchsettings fieldset,
    div.asp_w.asp_sb.searchsettings fieldset {
      background: transparent;
      font-size: .9em;
      margin: 12px 0 0 !important;
      padding: 0 !important;
      width: 200px;
      min-width: 200px
    }

    div.asp_w.asp_sb.searchsettings fieldset:last-child {
      margin: 5px 0 0 !important
    }

    div.asp_w.asp_sb.searchsettings fieldset {
      margin: 10px 0 0
    }

    div.asp_w.asp_sb.searchsettings fieldset legend {
      padding: 0 0 0 10px;
      margin: 0;
      font-weight: normal;
      font-size: 13px
    }

    div.asp_w.asp_sb.searchsettings .asp_option,
    div.asp_w.asp_s.searchsettings .asp_option {
      display: flex;
      flex-direction: row;
      -webkit-flex-direction: row;
      align-items: flex-start;
      margin: 0 0 10px 0;
      cursor: pointer
    }

    div.asp_w.asp_sb.searchsettings .asp_option:focus,
    div.asp_w.asp_s.searchsettings .asp_option:focus {
      outline: none
    }

    div.asp_w.asp_sb.searchsettings .asp_option:focus-visible,
    div.asp_w.asp_s.searchsettings .asp_option:focus-visible {
      outline-style: auto
    }

    div.asp_w.asp_s.searchsettings .asp_option.asp-o-last,
    div.asp_w.asp_s.searchsettings .asp_option:last-child {
      margin-bottom: 0
    }

    div.asp_w.asp_s.searchsettings fieldset .asp_option,
    div.asp_w.asp_s.searchsettings fieldset .asp_option_cat,
    div.asp_w.asp_sb.searchsettings fieldset .asp_option,
    div.asp_w.asp_sb.searchsettings fieldset .asp_option_cat {
      width: auto;
      max-width: none
    }

    div.asp_w.asp_s.searchsettings fieldset .asp_option_cat_level-1,
    div.asp_w.asp_sb.searchsettings fieldset .asp_option_cat_level-1 {
      margin-left: 12px
    }

    div.asp_w.asp_s.searchsettings fieldset .asp_option_cat_level-2,
    div.asp_w.asp_sb.searchsettings fieldset .asp_option_cat_level-2 {
      margin-left: 24px
    }

    div.asp_w.asp_s.searchsettings fieldset .asp_option_cat_level-3,
    div.asp_w.asp_sb.searchsettings fieldset .asp_option_cat_level-3 {
      margin-left: 36px
    }

    div.asp_w.asp_s.searchsettings fieldset div.asp_option_label,
    div.asp_w.asp_sb.searchsettings fieldset div.asp_option_label {
      width: 70%;
      display: block
    }

    div.asp_w.asp_s.searchsettings fieldset div.asp_option_label {
      width: auto;
      display: block;
      box-sizing: border-box
    }

    div.asp_w.asp_s.searchsettings fieldset .asp_option_cat_level-2 div.asp_option_label {
      padding-right: 12px
    }

    div.asp_w.asp_s.searchsettings fieldset .asp_option_cat_level-3 div.asp_option_label {
      padding-right: 24px
    }

    div.asp_w.asp_s select,
    div.asp_w.asp_sb select {
      width: 100%;
      max-width: 100%;
      border-radius: 0;
      padding: 5px !important;
      background: #f9f9f9;
      background-clip: padding-box;
      -webkit-box-shadow: none;
      box-shadow: none;
      margin: 0;
      border: none;
      color: #111;
      margin-bottom: 0 !important;
      box-sizing: border-box;
      line-height: initial;
      outline: none !important;
      font-family: Roboto, Helvetica;
      font-size: 14px;
      height: 34px;
      min-height: unset !important
    }

    div.asp_w.asp_s select[multiple],
    div.asp_w.asp_sb select[multiple] {
      background: #fff
    }

    div.asp_w.asp_s select:not([multiple]),
    div.asp_w.asp_sb select:not([multiple]) {
      overflow: hidden !important
    }

    div.asp_w.asp_s .asp-nr-container,
    div.asp_w.asp_sb .asp-nr-container {
      display: flex;
      gap: 8px;
      justify-content: space-between
    }

    div.ajaxsearchpro.searchsettings fieldset.asp_custom_f {
      margin-top: 9px
    }

    div.ajaxsearchpro.searchsettings fieldset legend {
      margin-bottom: 8px !important;
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      -moz-user-select: none;
      -ms-user-select: none;
      user-select: none
    }

    div.ajaxsearchpro.searchsettings fieldset legend+div.asp_option_inner {
      margin-top: 0 !important
    }

    div.ajaxsearchpro.searchsettings .asp_sett_scroll>.asp_option_cat:first-child>.asp_option_inner {
      margin-top: 0 !important
    }

    div.ajaxsearchpro.searchsettings fieldset .asp_select_single,
    div.ajaxsearchpro.searchsettings fieldset .asp_select_multiple {
      padding: 0 10px
    }

    .asp_arrow_box {
      position: absolute;
      background: #444;
      padding: 12px;
      color: white;
      border-radius: 4px;
      font-size: 14px;
      max-width: 240px;
      display: none;
      z-index: 99999999999999999
    }

    .asp_arrow_box:after {
      top: 100%;
      left: 50%;
      border: solid transparent;
      content: " ";
      height: 0;
      width: 0;
      position: absolute;
      pointer-events: none;
      border-color: transparent;
      border-top-color: #444;
      border-width: 6px;
      margin-left: -6px
    }

    .asp_arrow_box.asp_arrow_box_bottom:after {
      bottom: 100%;
      top: unset;
      border-bottom-color: #444;
      border-top-color: transparent
    }

    .asp_two_column {
      margin: 8px 0 12px 0
    }

    .asp_two_column .asp_two_column_first,
    .asp_two_column .asp_two_column_last {
      width: 48%;
      padding: 1% 2% 1% 0;
      float: left;
      box-sizing: content-box
    }

    .asp_two_column .asp_two_column_last {
      padding: 1% 0 1% 2%
    }

    .asp_shortcodes_container {
      display: -webkit-flex;
      display: flex;
      -webkit-flex-wrap: wrap;
      flex-wrap: wrap;
      margin: -10px 0 12px -10px;
      box-sizing: border-box
    }

    .asp_shortcodes_container .asp_shortcode_column {
      -webkit-flex-grow: 0;
      flex-grow: 0;
      -webkit-flex-shrink: 1;
      flex-shrink: 1;
      min-width: 120px;
      padding: 10px 0 0 10px;
      flex-basis: 33%;
      -webkit-flex-basis: 33%;
      box-sizing: border-box
    }

    p.asp-try {
      color: #555;
      font-size: 14px;
      margin-top: 5px;
      line-height: 28px;
      font-weight: 300;
      visibility: hidden
    }

    p.asp-try a {
      color: #FFB556;
      margin-left: 10px;
      cursor: pointer;
      display: inline-block
    }

    .asp_ac_autocomplete,
    .asp_ac_autocomplete div,
    .asp_ac_autocomplete span {}

    .asp_ac_autocomplete {
      display: inline;
      position: relative;
      word-spacing: normal;
      text-transform: none;
      text-indent: 0;
      text-shadow: none;
      text-align: start
    }

    .asp_ac_autocomplete .asp_ac_autocomplete_dropdown {
      position: absolute;
      border: 1px solid #ccc;
      border-top-color: #d9d9d9;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      -webkit-box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
      cursor: default;
      display: none;
      z-index: 1001;
      margin-top: -1px;
      background-color: #fff;
      min-width: 100%;
      overflow: auto
    }

    .asp_ac_autocomplete .asp_ac_autocomplete_hint {
      position: absolute;
      z-index: 1;
      color: #ccc !important;
      -webkit-text-fill-color: #ccc !important;
      text-fill-color: #ccc !important;
      overflow: hidden !important;
      white-space: pre !important
    }

    .asp_ac_autocomplete .asp_ac_autocomplete_hint span {
      color: transparent;
      opacity: 0.0
    }

    .asp_ac_autocomplete .asp_ac_autocomplete_dropdown>div {
      background: #fff;
      white-space: nowrap;
      cursor: pointer;
      line-height: 1.5em;
      padding: 2px 0 2px 0
    }

    .asp_ac_autocomplete .asp_ac_autocomplete_dropdown>div.active {
      background: #0097CF;
      color: #FFF
    }

    .rtl .asp_content,
    .rtl .asp_nores,
    .rtl .asp_content *,
    .rtl .asp_nores *,
    .rtl .searchsettings form {
      text-align: right !important;
      direction: rtl !important
    }

    .rtl .asp_nores>* {
      display: inline-block
    }

    .rtl .searchsettings .asp_option {
      flex-direction: row-reverse !important;
      -webkit-flex-direction: row-reverse !important
    }

    .rtl .asp_option {
      direction: ltr
    }

    .rtl .asp_label,
    .rtl .asp_option div.asp_option_label {
      text-align: right !important
    }

    .rtl .asp_label {
      max-width: 1000px !important;
      width: 100%;
      direction: rtl !important
    }

    .rtl .asp_label input[type=radio] {
      margin: 0 0 0 6px !important
    }

    .rtl .asp_option_cat_level-0 div.asp_option_label {
      font-weight: bold !important
    }

    .rtl fieldset .asp_option_cat_level-1 {
      margin-right: 12px !important;
      margin-left: 0
    }

    .rtl fieldset .asp_option_cat_level-2 {
      margin-right: 24px !important;
      margin-left: 0
    }

    .rtl fieldset .asp_option_cat_level-3 {
      margin-right: 36px !important;
      margin-left: 0
    }

    .rtl .searchsettings legend {
      text-align: right !important;
      display: block;
      width: 100%
    }

    .rtl .searchsettings input[type=text],
    .rtl .searchsettings select {
      direction: rtl !important;
      text-align: right !important
    }

    .rtl div.asp_w.asp_s.searchsettings form,
    .rtl div.asp_w.asp_sb.searchsettings form {
      flex-direction: row-reverse !important
    }

    .rtl div.horizontal.asp_r div.item {
      float: right !important
    }

    .rtl p.asp-try {
      direction: rtl;
      text-align: right;
      margin-right: 10px;
      width: auto !important
    }

    .asp_elementor_nores {
      text-align: center
    }

    .elementor-sticky__spacer .asp_w,
    .elementor-sticky__spacer .asp-try {
      visibility: hidden !important;
      opacity: 0 !important;
      z-index: -1 !important
    }
  </style>
  <style id="asp-instance-3">
    div[id*='ajaxsearchpro3_'] div.asp_loader,
    div[id*='ajaxsearchpro3_'] div.asp_loader * {
      box-sizing: border-box !important;
      margin: 0;
      padding: 0;
      box-shadow: none
    }

    div[id*='ajaxsearchpro3_'] div.asp_loader {
      box-sizing: border-box;
      display: flex;
      flex: 0 1 auto;
      flex-direction: column;
      flex-grow: 0;
      flex-shrink: 0;
      flex-basis: 28px;
      max-width: 100%;
      max-height: 100%;
      align-items: center;
      justify-content: center
    }

    div[id*='ajaxsearchpro3_'] div.asp_loader-inner {
      width: 100%;
      margin: 0 auto;
      text-align: center;
      height: 100%
    }

    @-webkit-keyframes ball-scale {
      0% {
        -webkit-transform: scale(0);
        transform: scale(0)
      }

      100% {
        -webkit-transform: scale(1);
        transform: scale(1);
        opacity: 0
      }
    }

    @keyframes ball-scale {
      0% {
        -webkit-transform: scale(0);
        transform: scale(0)
      }

      100% {
        -webkit-transform: scale(1);
        transform: scale(1);
        opacity: 0
      }
    }

    div[id*='ajaxsearchpro3_'] div.asp_ball-scale>div {
      background-color: rgb(5, 5, 5);
      border-radius: 100%;
      -webkit-animation-fill-mode: both;
      animation-fill-mode: both;
      display: inline-block;
      height: 100%;
      width: 100%;
      -webkit-animation: ball-scale 1s 0s ease-in-out infinite;
      animation: ball-scale 1s 0s ease-in-out infinite
    }

    div[id*='ajaxsearchprores3_'] .asp_res_loader div.asp_loader,
    div[id*='ajaxsearchprores3_'] .asp_res_loader div.asp_loader * {
      box-sizing: border-box !important;
      margin: 0;
      padding: 0;
      box-shadow: none
    }

    div[id*='ajaxsearchprores3_'] .asp_res_loader div.asp_loader {
      box-sizing: border-box;
      display: flex;
      flex: 0 1 auto;
      flex-direction: column;
      flex-grow: 0;
      flex-shrink: 0;
      flex-basis: 28px;
      max-width: 100%;
      max-height: 100%;
      align-items: center;
      justify-content: center
    }

    div[id*='ajaxsearchprores3_'] .asp_res_loader div.asp_loader-inner {
      width: 100%;
      margin: 0 auto;
      text-align: center;
      height: 100%
    }

    @-webkit-keyframes ball-scale {
      0% {
        -webkit-transform: scale(0);
        transform: scale(0)
      }

      100% {
        -webkit-transform: scale(1);
        transform: scale(1);
        opacity: 0
      }
    }

    @keyframes ball-scale {
      0% {
        -webkit-transform: scale(0);
        transform: scale(0)
      }

      100% {
        -webkit-transform: scale(1);
        transform: scale(1);
        opacity: 0
      }
    }

    div[id*='ajaxsearchprores3_'] .asp_res_loader div.asp_ball-scale>div {
      background-color: rgb(5, 5, 5);
      border-radius: 100%;
      -webkit-animation-fill-mode: both;
      animation-fill-mode: both;
      display: inline-block;
      height: 100%;
      width: 100%;
      -webkit-animation: ball-scale 1s 0s ease-in-out infinite;
      animation: ball-scale 1s 0s ease-in-out infinite
    }

    #ajaxsearchpro3_1 div.asp_loader,
    #ajaxsearchpro3_2 div.asp_loader,
    #ajaxsearchpro3_1 div.asp_loader *,
    #ajaxsearchpro3_2 div.asp_loader * {
      box-sizing: border-box !important;
      margin: 0;
      padding: 0;
      box-shadow: none
    }

    #ajaxsearchpro3_1 div.asp_loader,
    #ajaxsearchpro3_2 div.asp_loader {
      box-sizing: border-box;
      display: flex;
      flex: 0 1 auto;
      flex-direction: column;
      flex-grow: 0;
      flex-shrink: 0;
      flex-basis: 28px;
      max-width: 100%;
      max-height: 100%;
      align-items: center;
      justify-content: center
    }

    #ajaxsearchpro3_1 div.asp_loader-inner,
    #ajaxsearchpro3_2 div.asp_loader-inner {
      width: 100%;
      margin: 0 auto;
      text-align: center;
      height: 100%
    }

    @-webkit-keyframes ball-scale {
      0% {
        -webkit-transform: scale(0);
        transform: scale(0)
      }

      100% {
        -webkit-transform: scale(1);
        transform: scale(1);
        opacity: 0
      }
    }

    @keyframes ball-scale {
      0% {
        -webkit-transform: scale(0);
        transform: scale(0)
      }

      100% {
        -webkit-transform: scale(1);
        transform: scale(1);
        opacity: 0
      }
    }

    #ajaxsearchpro3_1 div.asp_ball-scale>div,
    #ajaxsearchpro3_2 div.asp_ball-scale>div {
      background-color: rgb(5, 5, 5);
      border-radius: 100%;
      -webkit-animation-fill-mode: both;
      animation-fill-mode: both;
      display: inline-block;
      height: 100%;
      width: 100%;
      -webkit-animation: ball-scale 1s 0s ease-in-out infinite;
      animation: ball-scale 1s 0s ease-in-out infinite
    }

    @-webkit-keyframes asp_an_fadeInDown {
      0% {
        opacity: 0;
        -webkit-transform: translateY(-20px)
      }

      100% {
        opacity: 1;
        -webkit-transform: translateY(0)
      }
    }

    @keyframes asp_an_fadeInDown {
      0% {
        opacity: 0;
        transform: translateY(-20px)
      }

      100% {
        opacity: 1;
        transform: translateY(0)
      }
    }

    .asp_an_fadeInDown {
      -webkit-animation-name: asp_an_fadeInDown;
      animation-name: asp_an_fadeInDown
    }

    #ajaxsearchpro3_1,
    #ajaxsearchprosettings3_1,
    #ajaxsearchprores3_1,
    #ajaxsearchpro3_2,
    #ajaxsearchprores3_2,
    #ajaxsearchprosettings3_2,
    div.asp_r.asp_r_3,
    div.asp_r.asp_r_3 *,
    div.asp_m.asp_m_3,
    div.asp_m.asp_m_3 *,
    div.asp_s.asp_s_3,
    div.asp_s.asp_s_3 * {
      -webkit-box-sizing: content-box;
      -moz-box-sizing: content-box;
      -ms-box-sizing: content-box;
      -o-box-sizing: content-box;
      box-sizing: content-box;
      border: 0;
      border-radius: 0;
      text-transform: none;
      text-shadow: none;
      box-shadow: none;
      text-decoration: none;
      text-align: left;
      letter-spacing: normal
    }

    #ajaxsearchpro3_1,
    #ajaxsearchprosettings3_1,
    #ajaxsearchprores3_1,
    #ajaxsearchpro3_2,
    #ajaxsearchprores3_2,
    #ajaxsearchprosettings3_2,
    div.asp_r.asp_r_3,
    div.asp_m.asp_m_3,
    div.asp_s.asp_s_3 {
      -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
      -ms-box-sizing: border-box;
      -o-box-sizing: border-box;
      box-sizing: border-box
    }

    div.asp_r.asp_r_3,
    div.asp_r.asp_r_3 *,
    div.asp_m.asp_m_3,
    div.asp_m.asp_m_3 *,
    div.asp_s.asp_s_3,
    div.asp_s.asp_s_3 * {
      padding: 0;
      margin: 0
    }

    .wpdreams_clear {
      clear: both
    }

    .asp_w_container_3 {
      width: 100%
    }

    #ajaxsearchpro3_1,
    #ajaxsearchpro3_2,
    div.asp_m.asp_m_3 {
      width: 100%;
      height: auto;
      max-height: none;
      border-radius: 5px;
      background: #d1eaff;
      margin-top: 0;
      margin-bottom: 0;
      background-image: -moz-radial-gradient(center, ellipse cover, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: -webkit-gradient(radial, center center, 0px, center center, 100%, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: -webkit-radial-gradient(center, ellipse cover, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: -o-radial-gradient(center, ellipse cover, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: -ms-radial-gradient(center, ellipse cover, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: radial-gradient(ellipse at center, rgb(255, 255, 255), rgb(255, 255, 255));
      overflow: hidden;
      border: 2px inset rgb(255, 0, 0);
      border-radius: 10px 10px 10px 10px;
      box-shadow: none
    }

    #ajaxsearchpro3_1 .probox,
    #ajaxsearchpro3_2 .probox,
    div.asp_m.asp_m_3 .probox {
      margin: 6px;
      height: 32px;
      background: transparent;
      border: 0 none rgb(255, 255, 255);
      border-radius: 0;
      box-shadow: none
    }

    p[id*=asp-try-3] {
      color: rgb(85, 85, 85) !important;
      display: block
    }

    div.asp_main_container+[id*=asp-try-3] {
      width: 100%
    }

    p[id*=asp-try-3] a {
      color: rgb(255, 181, 86) !important
    }

    p[id*=asp-try-3] a:after {
      color: rgb(85, 85, 85) !important;
      display: inline;
      content: ','
    }

    p[id*=asp-try-3] a:last-child:after {
      display: none
    }

    #ajaxsearchpro3_1 .probox .proinput,
    #ajaxsearchpro3_2 .probox .proinput,
    div.asp_m.asp_m_3 .probox .proinput {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none;
      line-height: normal;
      flex-grow: 1;
      order: 5;
      margin: 0 0 0 10px;
      padding: 0 5px
    }

    #ajaxsearchpro3_1 .probox .proinput input.orig,
    #ajaxsearchpro3_2 .probox .proinput input.orig,
    div.asp_m.asp_m_3 .probox .proinput input.orig {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none;
      line-height: normal;
      border: 0;
      box-shadow: none;
      height: 32px;
      position: relative;
      z-index: 2;
      padding: 0 !important;
      padding-top: 2px !important;
      margin: -1px 0 0 -4px !important;
      width: 100%;
      background: transparent !important
    }

    #ajaxsearchpro3_1 .probox .proinput input.autocomplete,
    #ajaxsearchpro3_2 .probox .proinput input.autocomplete,
    div.asp_m.asp_m_3 .probox .proinput input.autocomplete {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none;
      line-height: normal;
      opacity: 0.25;
      height: 32px;
      display: block;
      position: relative;
      z-index: 1;
      padding: 0 !important;
      margin: -1px 0 0 -4px !important;
      margin-top: -32px !important;
      width: 100%;
      background: transparent !important
    }

    .rtl #ajaxsearchpro3_1 .probox .proinput input.orig,
    .rtl #ajaxsearchpro3_2 .probox .proinput input.orig,
    .rtl #ajaxsearchpro3_1 .probox .proinput input.autocomplete,
    .rtl #ajaxsearchpro3_2 .probox .proinput input.autocomplete,
    .rtl div.asp_m.asp_m_3 .probox .proinput input.orig,
    .rtl div.asp_m.asp_m_3 .probox .proinput input.autocomplete {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none;
      line-height: normal;
      direction: rtl;
      text-align: right
    }

    .rtl #ajaxsearchpro3_1 .probox .proinput,
    .rtl #ajaxsearchpro3_2 .probox .proinput,
    .rtl div.asp_m.asp_m_3 .probox .proinput {
      margin-right: 2px
    }

    .rtl #ajaxsearchpro3_1 .probox .proloading,
    .rtl #ajaxsearchpro3_1 .probox .proclose,
    .rtl #ajaxsearchpro3_2 .probox .proloading,
    .rtl #ajaxsearchpro3_2 .probox .proclose,
    .rtl div.asp_m.asp_m_3 .probox .proloading,
    .rtl div.asp_m.asp_m_3 .probox .proclose {
      order: 3
    }

    div.asp_m.asp_m_3 .probox .proinput input.orig::-webkit-input-placeholder {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      text-shadow: none;
      opacity: 0.85
    }

    div.asp_m.asp_m_3 .probox .proinput input.orig::-moz-placeholder {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      text-shadow: none;
      opacity: 0.85
    }

    div.asp_m.asp_m_3 .probox .proinput input.orig:-ms-input-placeholder {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      text-shadow: none;
      opacity: 0.85
    }

    div.asp_m.asp_m_3 .probox .proinput input.orig:-moz-placeholder {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      text-shadow: none;
      opacity: 0.85;
      line-height: normal !important
    }

    #ajaxsearchpro3_1 .probox .proinput input.autocomplete,
    #ajaxsearchpro3_2 .probox .proinput input.autocomplete,
    div.asp_m.asp_m_3 .probox .proinput input.autocomplete {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none;
      line-height: normal;
      border: 0;
      box-shadow: none
    }

    #ajaxsearchpro3_1 .probox .proloading,
    #ajaxsearchpro3_1 .probox .proclose,
    #ajaxsearchpro3_1 .probox .promagnifier,
    #ajaxsearchpro3_1 .probox .prosettings,
    #ajaxsearchpro3_2 .probox .proloading,
    #ajaxsearchpro3_2 .probox .proclose,
    #ajaxsearchpro3_2 .probox .promagnifier,
    #ajaxsearchpro3_2 .probox .prosettings,
    div.asp_m.asp_m_3 .probox .proloading,
    div.asp_m.asp_m_3 .probox .proclose,
    div.asp_m.asp_m_3 .probox .promagnifier,
    div.asp_m.asp_m_3 .probox .prosettings {
      width: 32px;
      height: 32px;
      flex: 0 0 32px;
      flex-grow: 0;
      order: 7;
      text-align: center
    }

    #ajaxsearchpro3_1 .probox .proclose svg,
    #ajaxsearchpro3_2 .probox .proclose svg,
    div.asp_m.asp_m_3 .probox .proclose svg {
      fill: rgb(254, 254, 254);
      background: rgb(51, 51, 51);
      box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.9);
      border-radius: 50%;
      box-sizing: border-box;
      margin-left: -10px;
      margin-top: -10px;
      padding: 4px
    }

    #ajaxsearchpro3_1 .probox .proloading,
    #ajaxsearchpro3_2 .probox .proloading,
    div.asp_m.asp_m_3 .probox .proloading {
      width: 32px;
      height: 32px;
      min-width: 32px;
      min-height: 32px;
      max-width: 32px;
      max-height: 32px
    }

    #ajaxsearchpro3_1 .probox .proloading .asp_loader,
    #ajaxsearchpro3_2 .probox .proloading .asp_loader,
    div.asp_m.asp_m_3 .probox .proloading .asp_loader {
      width: 28px;
      height: 28px;
      min-width: 28px;
      min-height: 28px;
      max-width: 28px;
      max-height: 28px
    }

    #ajaxsearchpro3_1 .probox .promagnifier,
    #ajaxsearchpro3_2 .probox .promagnifier,
    div.asp_m.asp_m_3 .probox .promagnifier {
      width: auto;
      height: 32px;
      flex: 0 0 auto;
      order: 7;
      -webkit-flex: 0 0 auto;
      -webkit-order: 7
    }

    div.asp_m.asp_m_3 .probox .promagnifier:focus-visible {
      outline: black outset
    }

    #ajaxsearchpro3_1 .probox .proloading .innericon,
    #ajaxsearchpro3_2 .probox .proloading .innericon,
    #ajaxsearchpro3_1 .probox .proclose .innericon,
    #ajaxsearchpro3_2 .probox .proclose .innericon,
    #ajaxsearchpro3_1 .probox .promagnifier .innericon,
    #ajaxsearchpro3_2 .probox .promagnifier .innericon,
    #ajaxsearchpro3_1 .probox .prosettings .innericon,
    #ajaxsearchpro3_2 .probox .prosettings .innericon,
    div.asp_m.asp_m_3 .probox .proloading .innericon,
    div.asp_m.asp_m_3 .probox .proclose .innericon,
    div.asp_m.asp_m_3 .probox .promagnifier .innericon,
    div.asp_m.asp_m_3 .probox .prosettings .innericon {
      text-align: center
    }

    #ajaxsearchpro3_1 .probox .promagnifier .innericon,
    #ajaxsearchpro3_2 .probox .promagnifier .innericon,
    div.asp_m.asp_m_3 .probox .promagnifier .innericon {
      display: block;
      width: 32px;
      height: 32px;
      float: right
    }

    #ajaxsearchpro3_1 .probox .promagnifier .asp_text_button,
    #ajaxsearchpro3_2 .probox .promagnifier .asp_text_button,
    div.asp_m.asp_m_3 .probox .promagnifier .asp_text_button {
      display: block;
      width: auto;
      height: 32px;
      float: right;
      margin: 0;
      padding: 0 10px 0 2px;
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(51, 51, 51);
      font-size: 15px;
      line-height: auto;
      text-shadow: none;
      line-height: 32px
    }

    #ajaxsearchpro3_1 .probox .promagnifier .innericon svg,
    #ajaxsearchpro3_2 .probox .promagnifier .innericon svg,
    div.asp_m.asp_m_3 .probox .promagnifier .innericon svg {
      fill: rgb(5, 5, 5)
    }

    #ajaxsearchpro3_1 .probox .prosettings .innericon svg,
    #ajaxsearchpro3_2 .probox .prosettings .innericon svg,
    div.asp_m.asp_m_3 .probox .prosettings .innericon svg {
      fill: rgb(5, 5, 5)
    }

    #ajaxsearchpro3_1 .probox .promagnifier,
    #ajaxsearchpro3_2 .probox .promagnifier,
    div.asp_m.asp_m_3 .probox .promagnifier {
      width: 32px;
      height: 32px;
      background: transparent;
      background-position: center center;
      background-repeat: no-repeat;
      order: 11;
      -webkit-order: 11;
      float: right;
      border: 0 solid rgb(255, 255, 255);
      border-radius: 0;
      box-shadow: -1px 1px 0 0 rgba(255, 255, 255, 0.64) inset;
      cursor: pointer;
      background-size: 100% 100%;
      background-position: center center;
      background-repeat: no-repeat;
      cursor: pointer
    }

    #ajaxsearchpro3_1 .probox .prosettings,
    #ajaxsearchpro3_2 .probox .prosettings,
    div.asp_m.asp_m_3 .probox .prosettings {
      width: 32px;
      height: 32px;
      background: transparent;
      background-position: center center;
      background-repeat: no-repeat;
      order: 10;
      -webkit-order: 10;
      float: right;
      border: 0 solid rgb(255, 255, 255);
      border-radius: 0;
      box-shadow: 0 1px 0 0 rgba(255, 255, 255, 0.64) inset;
      cursor: pointer;
      background-size: 100% 100%;
      align-self: flex-end
    }

    #ajaxsearchprores3_1,
    #ajaxsearchprores3_2,
    div.asp_r.asp_r_3 {
      position: absolute;
      z-index: 11000;
      width: auto;
      margin: 12px 0 0 0
    }

    #ajaxsearchprores3_1 .asp_nores,
    #ajaxsearchprores3_2 .asp_nores,
    div.asp_r.asp_r_3 .asp_nores {
      border: 0 solid rgb(0, 0, 0);
      border-radius: 0;
      box-shadow: 0 5px 5px -5px #dfdfdf;
      padding: 6px 12px 6px 12px;
      margin: 0;
      font-weight: normal;
      font-family: inherit;
      color: rgba(74, 74, 74, 1);
      font-size: 1rem;
      line-height: 1.2rem;
      text-shadow: none;
      font-weight: normal;
      background: rgb(255, 255, 255)
    }

    #ajaxsearchprores3_1 .asp_nores .asp_nores_kw_suggestions,
    #ajaxsearchprores3_2 .asp_nores .asp_nores_kw_suggestions,
    div.asp_r.asp_r_3 .asp_nores .asp_nores_kw_suggestions {
      color: rgba(234, 67, 53, 1);
      font-weight: normal
    }

    #ajaxsearchprores3_1 .asp_nores .asp_keyword,
    #ajaxsearchprores3_2 .asp_nores .asp_keyword,
    div.asp_r.asp_r_3 .asp_nores .asp_keyword {
      padding: 0 8px 0 0;
      cursor: pointer;
      color: rgba(20, 84, 169, 1);
      font-weight: bold
    }

    #ajaxsearchprores3_1 .asp_results_top,
    #ajaxsearchprores3_2 .asp_results_top,
    div.asp_r.asp_r_3 .asp_results_top {
      background: rgb(255, 255, 255);
      border: 1px none rgb(81, 81, 81);
      border-radius: 0;
      padding: 6px 12px 6px 12px;
      margin: 0 0 4px 0;
      text-align: center;
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(81, 81, 81);
      font-size: 13px;
      line-height: 16px;
      text-shadow: none
    }

    #ajaxsearchprores3_1 .results .item,
    #ajaxsearchprores3_2 .results .item,
    div.asp_r.asp_r_3 .results .item {
      height: auto;
      background: rgb(255, 255, 255)
    }

    #ajaxsearchprores3_1 .results .item.hovered,
    #ajaxsearchprores3_2 .results .item.hovered,
    div.asp_r.asp_r_3 .results .item.hovered {
      background-image: -moz-radial-gradient(center, ellipse cover, rgb(244, 244, 244), rgb(246, 246, 246));
      background-image: -webkit-gradient(radial, center center, 0px, center center, 100%, rgb(244, 244, 244), rgb(246, 246, 246));
      background-image: -webkit-radial-gradient(center, ellipse cover, rgb(244, 244, 244), rgb(246, 246, 246));
      background-image: -o-radial-gradient(center, ellipse cover, rgb(244, 244, 244), rgb(246, 246, 246));
      background-image: -ms-radial-gradient(center, ellipse cover, rgb(244, 244, 244), rgb(246, 246, 246));
      background-image: radial-gradient(ellipse at center, rgb(244, 244, 244), rgb(246, 246, 246))
    }

    #ajaxsearchprores3_1 .results .item .asp_image,
    #ajaxsearchprores3_2 .results .item .asp_image,
    div.asp_r.asp_r_3 .results .item .asp_image {
      background-size: cover;
      background-repeat: no-repeat
    }

    #ajaxsearchprores3_1 .results .item .asp_image img,
    #ajaxsearchprores3_2 .results .item .asp_image img,
    div.asp_r.asp_r_3 .results .item .asp_image img {
      object-fit: cover
    }

    #ajaxsearchprores3_1 .results .item .asp_item_overlay_img,
    #ajaxsearchprores3_2 .results .item .asp_item_overlay_img,
    div.asp_r.asp_r_3 .results .item .asp_item_overlay_img {
      background-size: cover;
      background-repeat: no-repeat
    }

    #ajaxsearchprores3_1 .results .item .asp_content,
    #ajaxsearchprores3_2 .results .item .asp_content,
    div.asp_r.asp_r_3 .results .item .asp_content {
      overflow: hidden;
      background: transparent;
      margin: 0;
      padding: 0 10px
    }

    #ajaxsearchprores3_1 .results .item .asp_content h3,
    #ajaxsearchprores3_2 .results .item .asp_content h3,
    div.asp_r.asp_r_3 .results .item .asp_content h3 {
      margin: 0;
      padding: 0;
      display: inline-block;
      line-height: inherit;
      font-weight: bold;
      font-family: "Lato";
      color: rgb(20, 104, 169);
      font-size: 14px;
      line-height: 1.55em;
      text-shadow: none
    }

    #ajaxsearchprores3_1 .results .item .asp_content h3 a,
    #ajaxsearchprores3_2 .results .item .asp_content h3 a,
    div.asp_r.asp_r_3 .results .item .asp_content h3 a {
      margin: 0;
      padding: 0;
      line-height: inherit;
      display: block;
      font-weight: bold;
      font-family: "Lato";
      color: rgb(20, 104, 169);
      font-size: 14px;
      line-height: 1.55em;
      text-shadow: none
    }

    #ajaxsearchprores3_1 .results .item .asp_content h3 a:hover,
    #ajaxsearchprores3_2 .results .item .asp_content h3 a:hover,
    div.asp_r.asp_r_3 .results .item .asp_content h3 a:hover {
      font-weight: bold;
      font-family: "Lato";
      color: rgb(20, 104, 169);
      font-size: 14px;
      line-height: 1.55em;
      text-shadow: none
    }

    #ajaxsearchprores3_1 .results .item div.etc,
    #ajaxsearchprores3_2 .results .item div.etc,
    div.asp_r.asp_r_3 .results .item div.etc {
      padding: 0;
      font-size: 13px;
      line-height: 1.3em;
      margin-bottom: 6px
    }

    #ajaxsearchprores3_1 .results .item .etc .asp_author,
    #ajaxsearchprores3_2 .results .item .etc .asp_author,
    div.asp_r.asp_r_3 .results .item .etc .asp_author {
      padding: 0;
      font-weight: bold;
      font-family: "Open Sans";
      color: rgb(161, 161, 161);
      font-size: 11px;
      line-height: 13px;
      text-shadow: none
    }

    #ajaxsearchprores3_1 .results .item .etc .asp_date,
    #ajaxsearchprores3_2 .results .item .etc .asp_date,
    div.asp_r.asp_r_3 .results .item .etc .asp_date {
      margin: 0 0 0 10px;
      padding: 0;
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(173, 173, 173);
      font-size: 11px;
      line-height: 15px;
      text-shadow: none
    }

    #ajaxsearchprores3_1 .results .item div.asp_content,
    #ajaxsearchprores3_2 .results .item div.asp_content,
    div.asp_r.asp_r_3 .results .item div.asp_content {
      margin: 0;
      padding: 0;
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(74, 74, 74);
      font-size: 13px;
      line-height: 1.35em;
      text-shadow: none
    }

    #ajaxsearchprores3_1 span.highlighted,
    #ajaxsearchprores3_2 span.highlighted,
    div.asp_r.asp_r_3 span.highlighted {
      font-weight: bold;
      color: rgba(217, 49, 43, 1);
      background-color: rgba(238, 238, 238, 1)
    }

    #ajaxsearchprores3_1 p.showmore,
    #ajaxsearchprores3_2 p.showmore,
    div.asp_r.asp_r_3 p.showmore {
      text-align: center;
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(5, 94, 148);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none
    }

    #ajaxsearchprores3_1 p.showmore a,
    #ajaxsearchprores3_2 p.showmore a,
    div.asp_r.asp_r_3 p.showmore a {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(5, 94, 148);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none;
      padding: 10px 5px;
      margin: 0 auto;
      background: rgba(255, 255, 255, 1);
      display: block;
      text-align: center
    }

    #ajaxsearchprores3_1 .asp_res_loader,
    #ajaxsearchprores3_2 .asp_res_loader,
    div.asp_r.asp_r_3 .asp_res_loader {
      background: rgb(255, 255, 255);
      height: 200px;
      padding: 10px
    }

    #ajaxsearchprores3_1.isotopic .asp_res_loader,
    #ajaxsearchprores3_2.isotopic .asp_res_loader,
    div.asp_r.asp_r_3.isotopic .asp_res_loader {
      background: rgba(255, 255, 255, 0)
    }

    #ajaxsearchprores3_1 .asp_res_loader .asp_loader,
    #ajaxsearchprores3_2 .asp_res_loader .asp_loader,
    div.asp_r.asp_r_3 .asp_res_loader .asp_loader {
      height: 200px;
      width: 200px;
      margin: 0 auto
    }

    div.asp_s.asp_s_3.searchsettings,
    div.asp_s.asp_s_3.searchsettings,
    div.asp_s.asp_s_3.searchsettings {
      direction: ltr;
      padding: 0;
      background-image: -webkit-linear-gradient(185deg, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: -moz-linear-gradient(185deg, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: -o-linear-gradient(185deg, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: -ms-linear-gradient(185deg, rgb(255, 255, 255) 0, rgb(255, 255, 255) 100%);
      background-image: linear-gradient(185deg, rgb(255, 255, 255), rgb(255, 255, 255));
      box-shadow: 1px 1px 0 1px rgb(5, 5, 5);
      ;
      max-width: 208px;
      z-index: 2
    }

    div.asp_s.asp_s_3.searchsettings.asp_s,
    div.asp_s.asp_s_3.searchsettings.asp_s,
    div.asp_s.asp_s_3.searchsettings.asp_s {
      z-index: 11001
    }

    #ajaxsearchprobsettings3_1.searchsettings,
    #ajaxsearchprobsettings3_2.searchsettings,
    div.asp_sb.asp_sb_3.searchsettings {
      max-width: none
    }

    div.asp_s.asp_s_3.searchsettings form,
    div.asp_s.asp_s_3.searchsettings form,
    div.asp_s.asp_s_3.searchsettings form {
      display: flex
    }

    div.asp_sb.asp_sb_3.searchsettings form,
    div.asp_sb.asp_sb_3.searchsettings form,
    div.asp_sb.asp_sb_3.searchsettings form {
      display: flex
    }

    #ajaxsearchprosettings3_1.searchsettings div.asp_option_label,
    #ajaxsearchprosettings3_2.searchsettings div.asp_option_label,
    #ajaxsearchprosettings3_1.searchsettings .asp_label,
    #ajaxsearchprosettings3_2.searchsettings .asp_label,
    div.asp_s.asp_s_3.searchsettings div.asp_option_label,
    div.asp_s.asp_s_3.searchsettings .asp_label {
      font-weight: bold;
      font-family: "Open Sans";
      color: rgb(43, 43, 43);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none
    }

    #ajaxsearchprosettings3_1.searchsettings .asp_option_inner .asp_option_checkbox,
    #ajaxsearchprosettings3_2.searchsettings .asp_option_inner .asp_option_checkbox,
    div.asp_sb.asp_sb_3.searchsettings .asp_option_inner .asp_option_checkbox,
    div.asp_s.asp_s_3.searchsettings .asp_option_inner .asp_option_checkbox {
      background-image: -webkit-linear-gradient(180deg, rgb(34, 34, 34), rgb(69, 72, 77));
      background-image: -moz-linear-gradient(180deg, rgb(34, 34, 34), rgb(69, 72, 77));
      background-image: -o-linear-gradient(180deg, rgb(34, 34, 34), rgb(69, 72, 77));
      background-image: -ms-linear-gradient(180deg, rgb(34, 34, 34) 0, rgb(69, 72, 77) 100%);
      background-image: linear-gradient(180deg, rgb(34, 34, 34), rgb(69, 72, 77))
    }

    #ajaxsearchprosettings3_1.searchsettings .asp_option_inner .asp_option_checkbox:after,
    #ajaxsearchprosettings3_2.searchsettings .asp_option_inner .asp_option_checkbox:after,
    #ajaxsearchprobsettings3_1.searchsettings .asp_option_inner .asp_option_checkbox:after,
    #ajaxsearchprobsettings3_2.searchsettings .asp_option_inner .asp_option_checkbox:after,
    div.asp_sb.asp_sb_3.searchsettings .asp_option_inner .asp_option_checkbox:after,
    div.asp_s.asp_s_3.searchsettings .asp_option_inner .asp_option_checkbox:after {
      font-family: 'asppsicons2';
      border: none;
      content: "\e800";
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      font-size: 11px;
      color: rgb(255, 255, 255);
      margin: 1px 0 0 0 !important;
      line-height: 17px;
      text-align: center;
      text-decoration: none;
      text-shadow: none
    }

    div.asp_sb.asp_sb_3.searchsettings .asp_sett_scroll,
    div.asp_s.asp_s_3.searchsettings .asp_sett_scroll {
      scrollbar-width: thin;
      scrollbar-color: rgba(0, 0, 0, 0.5) transparent
    }

    div.asp_sb.asp_sb_3.searchsettings .asp_sett_scroll::-webkit-scrollbar,
    div.asp_s.asp_s_3.searchsettings .asp_sett_scroll::-webkit-scrollbar {
      width: 7px
    }

    div.asp_sb.asp_sb_3.searchsettings .asp_sett_scroll::-webkit-scrollbar-track,
    div.asp_s.asp_s_3.searchsettings .asp_sett_scroll::-webkit-scrollbar-track {
      background: transparent
    }

    div.asp_sb.asp_sb_3.searchsettings .asp_sett_scroll::-webkit-scrollbar-thumb,
    div.asp_s.asp_s_3.searchsettings .asp_sett_scroll::-webkit-scrollbar-thumb {
      background: rgba(0, 0, 0, 0.5);
      border-radius: 5px;
      border: none
    }

    #ajaxsearchprosettings3_1.searchsettings .asp_sett_scroll,
    #ajaxsearchprosettings3_2.searchsettings .asp_sett_scroll,
    div.asp_s.asp_s_3.searchsettings .asp_sett_scroll {
      max-height: 220px;
      overflow: auto
    }

    #ajaxsearchprobsettings3_1.searchsettings .asp_sett_scroll,
    #ajaxsearchprobsettings3_2.searchsettings .asp_sett_scroll,
    div.asp_sb.asp_sb_3.searchsettings .asp_sett_scroll {
      max-height: 220px;
      overflow: auto
    }

    #ajaxsearchprosettings3_1.searchsettings fieldset,
    #ajaxsearchprosettings3_2.searchsettings fieldset,
    div.asp_s.asp_s_3.searchsettings fieldset {
      width: 200px;
      min-width: 200px;
      max-width: 10000px
    }

    #ajaxsearchprobsettings3_1.searchsettings fieldset,
    #ajaxsearchprobsettings3_2.searchsettings fieldset,
    div.asp_sb.asp_sb_3.searchsettings fieldset {
      width: 200px;
      min-width: 200px;
      max-width: 10000px
    }

    #ajaxsearchprosettings3_1.searchsettings fieldset legend,
    #ajaxsearchprosettings3_2.searchsettings fieldset legend,
    div.asp_s.asp_s_3.searchsettings fieldset legend {
      padding: 0 0 0 10px;
      margin: 0;
      background: transparent;
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(71, 71, 71);
      font-size: 13px;
      line-height: 15px;
      text-shadow: none
    }

    #ajaxsearchprores3_1.vertical,
    #ajaxsearchprores3_2.vertical,
    div.asp_r.asp_r_3.vertical {
      padding: 4px;
      background: rgb(255, 255, 255);
      border-radius: 3px;
      border: 2px solid rgb(5, 5, 5);
      border-radius: 3px 3px 3px 3px;
      box-shadow: none;
      visibility: hidden;
      display: none
    }

    #ajaxsearchprores3_1.vertical .results,
    #ajaxsearchprores3_2.vertical .results,
    div.asp_r.asp_r_3.vertical .results {
      max-height: none;
      overflow-x: hidden;
      overflow-y: auto
    }

    #ajaxsearchprores3_1.vertical .item,
    #ajaxsearchprores3_2.vertical .item,
    div.asp_r.asp_r_3.vertical .item {
      position: relative;
      box-sizing: border-box
    }

    #ajaxsearchprores3_1.vertical .item .asp_content h3,
    #ajaxsearchprores3_2.vertical .item .asp_content h3,
    div.asp_r.asp_r_3.vertical .item .asp_content h3 {
      display: inline
    }

    #ajaxsearchprores3_1.vertical .results .item .asp_content,
    #ajaxsearchprores3_2.vertical .results .item .asp_content,
    div.asp_r.asp_r_3.vertical .results .item .asp_content {
      overflow: hidden;
      width: auto;
      height: auto;
      background: transparent;
      margin: 0;
      padding: 8px
    }

    #ajaxsearchprores3_1.vertical .results .item .asp_image,
    #ajaxsearchprores3_2.vertical .results .item .asp_image,
    div.asp_r.asp_r_3.vertical .results .item .asp_image {
      width: 50px;
      height: 50px;
      margin: 2px 8px 0 0
    }

    #ajaxsearchprores3_1.vertical .asp_simplebar-scrollbar::before,
    #ajaxsearchprores3_2.vertical .asp_simplebar-scrollbar::before,
    div.asp_r.asp_r_3.vertical .asp_simplebar-scrollbar::before {
      background: transparent;
      background-image: -moz-radial-gradient(center, ellipse cover, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5));
      background-image: -webkit-gradient(radial, center center, 0px, center center, 100%, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5));
      background-image: -webkit-radial-gradient(center, ellipse cover, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5));
      background-image: -o-radial-gradient(center, ellipse cover, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5));
      background-image: -ms-radial-gradient(center, ellipse cover, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5));
      background-image: radial-gradient(ellipse at center, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5))
    }

    #ajaxsearchprores3_1.vertical .results .item::after,
    #ajaxsearchprores3_2.vertical .results .item::after,
    div.asp_r.asp_r_3.vertical .results .item::after {
      display: block;
      position: absolute;
      bottom: 0;
      content: "";
      height: 1px;
      width: 100%;
      background: rgba(255, 255, 255, 0.55)
    }

    #ajaxsearchprores3_1.vertical .results .item.asp_last_item::after,
    #ajaxsearchprores3_2.vertical .results .item.asp_last_item::after,
    div.asp_r.asp_r_3.vertical .results .item.asp_last_item::after {
      display: none
    }

    .asp_spacer {
      display: none !important;
    }

    .asp_v_spacer {
      width: 100%;
      height: 0
    }

    #ajaxsearchprores3_1 .asp_group_header,
    #ajaxsearchprores3_2 .asp_group_header,
    div.asp_r.asp_r_3 .asp_group_header {
      background: #DDD;
      background: rgb(246, 246, 246);
      border-radius: 3px 3px 0 0;
      border-top: 1px solid rgb(248, 248, 248);
      border-left: 1px solid rgb(248, 248, 248);
      border-right: 1px solid rgb(248, 248, 248);
      margin: 0 0 -3px;
      padding: 7px 0 7px 10px;
      position: relative;
      z-index: 1000;
      min-width: 90%;
      flex-grow: 1;
      font-weight: bold;
      font-family: "Open Sans";
      color: rgb(5, 94, 148);
      font-size: 11px;
      line-height: 13px;
      text-shadow: none
    }

    #ajaxsearchprores3_1.vertical .results,
    #ajaxsearchprores3_2.vertical .results,
    div.asp_r.asp_r_3.vertical .results {
      scrollbar-width: thin;
      scrollbar-color: rgba(0, 0, 0, 0.5) rgb(255, 255, 255)
    }

    #ajaxsearchprores3_1.vertical .results::-webkit-scrollbar,
    #ajaxsearchprores3_2.vertical .results::-webkit-scrollbar,
    div.asp_r.asp_r_3.vertical .results::-webkit-scrollbar {
      width: 10px
    }

    #ajaxsearchprores3_1.vertical .results::-webkit-scrollbar-track,
    #ajaxsearchprores3_2.vertical .results::-webkit-scrollbar-track,
    div.asp_r.asp_r_3.vertical .results::-webkit-scrollbar-track {
      background: rgb(255, 255, 255);
      box-shadow: inset 0 0 12px 12px transparent;
      border: none
    }

    #ajaxsearchprores3_1.vertical .results::-webkit-scrollbar-thumb,
    #ajaxsearchprores3_2.vertical .results::-webkit-scrollbar-thumb,
    div.asp_r.asp_r_3.vertical .results::-webkit-scrollbar-thumb {
      background: transparent;
      box-shadow: inset 0 0 12px 12px rgba(0, 0, 0, 0);
      border: solid 2px transparent;
      border-radius: 12px
    }

    #ajaxsearchprores3_1.vertical:hover .results::-webkit-scrollbar-thumb,
    #ajaxsearchprores3_2.vertical:hover .results::-webkit-scrollbar-thumb,
    div.asp_r.asp_r_3.vertical:hover .results::-webkit-scrollbar-thumb {
      box-shadow: inset 0 0 12px 12px rgba(0, 0, 0, 0.5)
    }

    @media(hover:none), (max-width:500px) {

      #ajaxsearchprores3_1.vertical .results::-webkit-scrollbar-thumb,
      #ajaxsearchprores3_2.vertical .results::-webkit-scrollbar-thumb,
      div.asp_r.asp_r_3.vertical .results::-webkit-scrollbar-thumb {
        box-shadow: inset 0 0 12px 12px rgba(0, 0, 0, 0.5)
      }
    }
  </style>
  <style id="asp-instance-4">
    div[id*='ajaxsearchpro4_'] div.asp_loader,
    div[id*='ajaxsearchpro4_'] div.asp_loader * {
      box-sizing: border-box !important;
      margin: 0;
      padding: 0;
      box-shadow: none
    }

    div[id*='ajaxsearchpro4_'] div.asp_loader {
      box-sizing: border-box;
      display: flex;
      flex: 0 1 auto;
      flex-direction: column;
      flex-grow: 0;
      flex-shrink: 0;
      flex-basis: 28px;
      max-width: 100%;
      max-height: 100%;
      align-items: center;
      justify-content: center
    }

    div[id*='ajaxsearchpro4_'] div.asp_loader-inner {
      width: 100%;
      margin: 0 auto;
      text-align: center;
      height: 100%
    }

    @-webkit-keyframes ball-scale {
      0% {
        -webkit-transform: scale(0);
        transform: scale(0)
      }

      100% {
        -webkit-transform: scale(1);
        transform: scale(1);
        opacity: 0
      }
    }

    @keyframes ball-scale {
      0% {
        -webkit-transform: scale(0);
        transform: scale(0)
      }

      100% {
        -webkit-transform: scale(1);
        transform: scale(1);
        opacity: 0
      }
    }

    div[id*='ajaxsearchpro4_'] div.asp_ball-scale>div {
      background-color: rgb(5, 5, 5);
      border-radius: 100%;
      -webkit-animation-fill-mode: both;
      animation-fill-mode: both;
      display: inline-block;
      height: 100%;
      width: 100%;
      -webkit-animation: ball-scale 1s 0s ease-in-out infinite;
      animation: ball-scale 1s 0s ease-in-out infinite
    }

    div[id*='ajaxsearchprores4_'] .asp_res_loader div.asp_loader,
    div[id*='ajaxsearchprores4_'] .asp_res_loader div.asp_loader * {
      box-sizing: border-box !important;
      margin: 0;
      padding: 0;
      box-shadow: none
    }

    div[id*='ajaxsearchprores4_'] .asp_res_loader div.asp_loader {
      box-sizing: border-box;
      display: flex;
      flex: 0 1 auto;
      flex-direction: column;
      flex-grow: 0;
      flex-shrink: 0;
      flex-basis: 28px;
      max-width: 100%;
      max-height: 100%;
      align-items: center;
      justify-content: center
    }

    div[id*='ajaxsearchprores4_'] .asp_res_loader div.asp_loader-inner {
      width: 100%;
      margin: 0 auto;
      text-align: center;
      height: 100%
    }

    @-webkit-keyframes ball-scale {
      0% {
        -webkit-transform: scale(0);
        transform: scale(0)
      }

      100% {
        -webkit-transform: scale(1);
        transform: scale(1);
        opacity: 0
      }
    }

    @keyframes ball-scale {
      0% {
        -webkit-transform: scale(0);
        transform: scale(0)
      }

      100% {
        -webkit-transform: scale(1);
        transform: scale(1);
        opacity: 0
      }
    }

    div[id*='ajaxsearchprores4_'] .asp_res_loader div.asp_ball-scale>div {
      background-color: rgb(5, 5, 5);
      border-radius: 100%;
      -webkit-animation-fill-mode: both;
      animation-fill-mode: both;
      display: inline-block;
      height: 100%;
      width: 100%;
      -webkit-animation: ball-scale 1s 0s ease-in-out infinite;
      animation: ball-scale 1s 0s ease-in-out infinite
    }

    #ajaxsearchpro4_1 div.asp_loader,
    #ajaxsearchpro4_2 div.asp_loader,
    #ajaxsearchpro4_1 div.asp_loader *,
    #ajaxsearchpro4_2 div.asp_loader * {
      box-sizing: border-box !important;
      margin: 0;
      padding: 0;
      box-shadow: none
    }

    #ajaxsearchpro4_1 div.asp_loader,
    #ajaxsearchpro4_2 div.asp_loader {
      box-sizing: border-box;
      display: flex;
      flex: 0 1 auto;
      flex-direction: column;
      flex-grow: 0;
      flex-shrink: 0;
      flex-basis: 28px;
      max-width: 100%;
      max-height: 100%;
      align-items: center;
      justify-content: center
    }

    #ajaxsearchpro4_1 div.asp_loader-inner,
    #ajaxsearchpro4_2 div.asp_loader-inner {
      width: 100%;
      margin: 0 auto;
      text-align: center;
      height: 100%
    }

    @-webkit-keyframes ball-scale {
      0% {
        -webkit-transform: scale(0);
        transform: scale(0)
      }

      100% {
        -webkit-transform: scale(1);
        transform: scale(1);
        opacity: 0
      }
    }

    @keyframes ball-scale {
      0% {
        -webkit-transform: scale(0);
        transform: scale(0)
      }

      100% {
        -webkit-transform: scale(1);
        transform: scale(1);
        opacity: 0
      }
    }

    #ajaxsearchpro4_1 div.asp_ball-scale>div,
    #ajaxsearchpro4_2 div.asp_ball-scale>div {
      background-color: rgb(5, 5, 5);
      border-radius: 100%;
      -webkit-animation-fill-mode: both;
      animation-fill-mode: both;
      display: inline-block;
      height: 100%;
      width: 100%;
      -webkit-animation: ball-scale 1s 0s ease-in-out infinite;
      animation: ball-scale 1s 0s ease-in-out infinite
    }

    @-webkit-keyframes asp_an_fadeInDown {
      0% {
        opacity: 0;
        -webkit-transform: translateY(-20px)
      }

      100% {
        opacity: 1;
        -webkit-transform: translateY(0)
      }
    }

    @keyframes asp_an_fadeInDown {
      0% {
        opacity: 0;
        transform: translateY(-20px)
      }

      100% {
        opacity: 1;
        transform: translateY(0)
      }
    }

    .asp_an_fadeInDown {
      -webkit-animation-name: asp_an_fadeInDown;
      animation-name: asp_an_fadeInDown
    }

    #ajaxsearchpro4_1,
    #ajaxsearchprosettings4_1,
    #ajaxsearchprores4_1,
    #ajaxsearchpro4_2,
    #ajaxsearchprores4_2,
    #ajaxsearchprosettings4_2,
    div.asp_r.asp_r_4,
    div.asp_r.asp_r_4 *,
    div.asp_m.asp_m_4,
    div.asp_m.asp_m_4 *,
    div.asp_s.asp_s_4,
    div.asp_s.asp_s_4 * {
      -webkit-box-sizing: content-box;
      -moz-box-sizing: content-box;
      -ms-box-sizing: content-box;
      -o-box-sizing: content-box;
      box-sizing: content-box;
      border: 0;
      border-radius: 0;
      text-transform: none;
      text-shadow: none;
      box-shadow: none;
      text-decoration: none;
      text-align: left;
      letter-spacing: normal
    }

    #ajaxsearchpro4_1,
    #ajaxsearchprosettings4_1,
    #ajaxsearchprores4_1,
    #ajaxsearchpro4_2,
    #ajaxsearchprores4_2,
    #ajaxsearchprosettings4_2,
    div.asp_r.asp_r_4,
    div.asp_m.asp_m_4,
    div.asp_s.asp_s_4 {
      -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
      -ms-box-sizing: border-box;
      -o-box-sizing: border-box;
      box-sizing: border-box
    }

    div.asp_r.asp_r_4,
    div.asp_r.asp_r_4 *,
    div.asp_m.asp_m_4,
    div.asp_m.asp_m_4 *,
    div.asp_s.asp_s_4,
    div.asp_s.asp_s_4 * {
      padding: 0;
      margin: 0
    }

    .wpdreams_clear {
      clear: both
    }

    .asp_w_container_4 {
      width: 100%
    }

    #ajaxsearchpro4_1,
    #ajaxsearchpro4_2,
    div.asp_m.asp_m_4 {
      width: 100%;
      height: auto;
      max-height: none;
      border-radius: 5px;
      background: #d1eaff;
      margin-top: 0;
      margin-bottom: 0;
      background-image: -moz-radial-gradient(center, ellipse cover, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: -webkit-gradient(radial, center center, 0px, center center, 100%, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: -webkit-radial-gradient(center, ellipse cover, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: -o-radial-gradient(center, ellipse cover, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: -ms-radial-gradient(center, ellipse cover, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: radial-gradient(ellipse at center, rgb(255, 255, 255), rgb(255, 255, 255));
      overflow: hidden;
      border: 2px inset rgb(114, 137, 217);
      border-radius: 10px 10px 10px 10px;
      box-shadow: none
    }

    #ajaxsearchpro4_1 .probox,
    #ajaxsearchpro4_2 .probox,
    div.asp_m.asp_m_4 .probox {
      margin: 6px;
      height: 32px;
      background: transparent;
      border: 0 none rgb(255, 255, 255);
      border-radius: 0;
      box-shadow: none
    }

    p[id*=asp-try-4] {
      color: rgb(85, 85, 85) !important;
      display: block
    }

    div.asp_main_container+[id*=asp-try-4] {
      width: 100%
    }

    p[id*=asp-try-4] a {
      color: rgb(255, 181, 86) !important
    }

    p[id*=asp-try-4] a:after {
      color: rgb(85, 85, 85) !important;
      display: inline;
      content: ','
    }

    p[id*=asp-try-4] a:last-child:after {
      display: none
    }

    #ajaxsearchpro4_1 .probox .proinput,
    #ajaxsearchpro4_2 .probox .proinput,
    div.asp_m.asp_m_4 .probox .proinput {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none;
      line-height: normal;
      flex-grow: 1;
      order: 5;
      margin: 0 0 0 10px;
      padding: 0 5px
    }

    #ajaxsearchpro4_1 .probox .proinput input.orig,
    #ajaxsearchpro4_2 .probox .proinput input.orig,
    div.asp_m.asp_m_4 .probox .proinput input.orig {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none;
      line-height: normal;
      border: 0;
      box-shadow: none;
      height: 32px;
      position: relative;
      z-index: 2;
      padding: 0 !important;
      padding-top: 2px !important;
      margin: -1px 0 0 -4px !important;
      width: 100%;
      background: transparent !important
    }

    #ajaxsearchpro4_1 .probox .proinput input.autocomplete,
    #ajaxsearchpro4_2 .probox .proinput input.autocomplete,
    div.asp_m.asp_m_4 .probox .proinput input.autocomplete {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none;
      line-height: normal;
      opacity: 0.25;
      height: 32px;
      display: block;
      position: relative;
      z-index: 1;
      padding: 0 !important;
      margin: -1px 0 0 -4px !important;
      margin-top: -32px !important;
      width: 100%;
      background: transparent !important
    }

    .rtl #ajaxsearchpro4_1 .probox .proinput input.orig,
    .rtl #ajaxsearchpro4_2 .probox .proinput input.orig,
    .rtl #ajaxsearchpro4_1 .probox .proinput input.autocomplete,
    .rtl #ajaxsearchpro4_2 .probox .proinput input.autocomplete,
    .rtl div.asp_m.asp_m_4 .probox .proinput input.orig,
    .rtl div.asp_m.asp_m_4 .probox .proinput input.autocomplete {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none;
      line-height: normal;
      direction: rtl;
      text-align: right
    }

    .rtl #ajaxsearchpro4_1 .probox .proinput,
    .rtl #ajaxsearchpro4_2 .probox .proinput,
    .rtl div.asp_m.asp_m_4 .probox .proinput {
      margin-right: 2px
    }

    .rtl #ajaxsearchpro4_1 .probox .proloading,
    .rtl #ajaxsearchpro4_1 .probox .proclose,
    .rtl #ajaxsearchpro4_2 .probox .proloading,
    .rtl #ajaxsearchpro4_2 .probox .proclose,
    .rtl div.asp_m.asp_m_4 .probox .proloading,
    .rtl div.asp_m.asp_m_4 .probox .proclose {
      order: 3
    }

    div.asp_m.asp_m_4 .probox .proinput input.orig::-webkit-input-placeholder {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      text-shadow: none;
      opacity: 0.85
    }

    div.asp_m.asp_m_4 .probox .proinput input.orig::-moz-placeholder {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      text-shadow: none;
      opacity: 0.85
    }

    div.asp_m.asp_m_4 .probox .proinput input.orig:-ms-input-placeholder {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      text-shadow: none;
      opacity: 0.85
    }

    div.asp_m.asp_m_4 .probox .proinput input.orig:-moz-placeholder {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      text-shadow: none;
      opacity: 0.85;
      line-height: normal !important
    }

    #ajaxsearchpro4_1 .probox .proinput input.autocomplete,
    #ajaxsearchpro4_2 .probox .proinput input.autocomplete,
    div.asp_m.asp_m_4 .probox .proinput input.autocomplete {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(0, 0, 0);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none;
      line-height: normal;
      border: 0;
      box-shadow: none
    }

    #ajaxsearchpro4_1 .probox .proloading,
    #ajaxsearchpro4_1 .probox .proclose,
    #ajaxsearchpro4_1 .probox .promagnifier,
    #ajaxsearchpro4_1 .probox .prosettings,
    #ajaxsearchpro4_2 .probox .proloading,
    #ajaxsearchpro4_2 .probox .proclose,
    #ajaxsearchpro4_2 .probox .promagnifier,
    #ajaxsearchpro4_2 .probox .prosettings,
    div.asp_m.asp_m_4 .probox .proloading,
    div.asp_m.asp_m_4 .probox .proclose,
    div.asp_m.asp_m_4 .probox .promagnifier,
    div.asp_m.asp_m_4 .probox .prosettings {
      width: 32px;
      height: 32px;
      flex: 0 0 32px;
      flex-grow: 0;
      order: 7;
      text-align: center
    }

    #ajaxsearchpro4_1 .probox .proclose svg,
    #ajaxsearchpro4_2 .probox .proclose svg,
    div.asp_m.asp_m_4 .probox .proclose svg {
      fill: rgb(254, 254, 254);
      background: rgb(51, 51, 51);
      box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.9);
      border-radius: 50%;
      box-sizing: border-box;
      margin-left: -10px;
      margin-top: -10px;
      padding: 4px
    }

    #ajaxsearchpro4_1 .probox .proloading,
    #ajaxsearchpro4_2 .probox .proloading,
    div.asp_m.asp_m_4 .probox .proloading {
      width: 32px;
      height: 32px;
      min-width: 32px;
      min-height: 32px;
      max-width: 32px;
      max-height: 32px
    }

    #ajaxsearchpro4_1 .probox .proloading .asp_loader,
    #ajaxsearchpro4_2 .probox .proloading .asp_loader,
    div.asp_m.asp_m_4 .probox .proloading .asp_loader {
      width: 28px;
      height: 28px;
      min-width: 28px;
      min-height: 28px;
      max-width: 28px;
      max-height: 28px
    }

    #ajaxsearchpro4_1 .probox .promagnifier,
    #ajaxsearchpro4_2 .probox .promagnifier,
    div.asp_m.asp_m_4 .probox .promagnifier {
      width: auto;
      height: 32px;
      flex: 0 0 auto;
      order: 7;
      -webkit-flex: 0 0 auto;
      -webkit-order: 7
    }

    div.asp_m.asp_m_4 .probox .promagnifier:focus-visible {
      outline: black outset
    }

    #ajaxsearchpro4_1 .probox .proloading .innericon,
    #ajaxsearchpro4_2 .probox .proloading .innericon,
    #ajaxsearchpro4_1 .probox .proclose .innericon,
    #ajaxsearchpro4_2 .probox .proclose .innericon,
    #ajaxsearchpro4_1 .probox .promagnifier .innericon,
    #ajaxsearchpro4_2 .probox .promagnifier .innericon,
    #ajaxsearchpro4_1 .probox .prosettings .innericon,
    #ajaxsearchpro4_2 .probox .prosettings .innericon,
    div.asp_m.asp_m_4 .probox .proloading .innericon,
    div.asp_m.asp_m_4 .probox .proclose .innericon,
    div.asp_m.asp_m_4 .probox .promagnifier .innericon,
    div.asp_m.asp_m_4 .probox .prosettings .innericon {
      text-align: center
    }

    #ajaxsearchpro4_1 .probox .promagnifier .innericon,
    #ajaxsearchpro4_2 .probox .promagnifier .innericon,
    div.asp_m.asp_m_4 .probox .promagnifier .innericon {
      display: block;
      width: 32px;
      height: 32px;
      float: right
    }

    #ajaxsearchpro4_1 .probox .promagnifier .asp_text_button,
    #ajaxsearchpro4_2 .probox .promagnifier .asp_text_button,
    div.asp_m.asp_m_4 .probox .promagnifier .asp_text_button {
      display: block;
      width: auto;
      height: 32px;
      float: right;
      margin: 0;
      padding: 0 10px 0 2px;
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(51, 51, 51);
      font-size: 15px;
      line-height: auto;
      text-shadow: none;
      line-height: 32px
    }

    #ajaxsearchpro4_1 .probox .promagnifier .innericon svg,
    #ajaxsearchpro4_2 .probox .promagnifier .innericon svg,
    div.asp_m.asp_m_4 .probox .promagnifier .innericon svg {
      fill: rgb(5, 5, 5)
    }

    #ajaxsearchpro4_1 .probox .prosettings .innericon svg,
    #ajaxsearchpro4_2 .probox .prosettings .innericon svg,
    div.asp_m.asp_m_4 .probox .prosettings .innericon svg {
      fill: rgb(5, 5, 5)
    }

    #ajaxsearchpro4_1 .probox .promagnifier,
    #ajaxsearchpro4_2 .probox .promagnifier,
    div.asp_m.asp_m_4 .probox .promagnifier {
      width: 32px;
      height: 32px;
      background: transparent;
      background-position: center center;
      background-repeat: no-repeat;
      order: 11;
      -webkit-order: 11;
      float: right;
      border: 0 solid rgb(255, 255, 255);
      border-radius: 0;
      box-shadow: -1px 1px 0 0 rgba(255, 255, 255, 0.64) inset;
      cursor: pointer;
      background-size: 100% 100%;
      background-position: center center;
      background-repeat: no-repeat;
      cursor: pointer
    }

    #ajaxsearchpro4_1 .probox .prosettings,
    #ajaxsearchpro4_2 .probox .prosettings,
    div.asp_m.asp_m_4 .probox .prosettings {
      width: 32px;
      height: 32px;
      background: transparent;
      background-position: center center;
      background-repeat: no-repeat;
      order: 10;
      -webkit-order: 10;
      float: right;
      border: 0 solid rgb(255, 255, 255);
      border-radius: 0;
      box-shadow: 0 1px 0 0 rgba(255, 255, 255, 0.64) inset;
      cursor: pointer;
      background-size: 100% 100%;
      align-self: flex-end
    }

    #ajaxsearchprores4_1,
    #ajaxsearchprores4_2,
    div.asp_r.asp_r_4 {
      position: absolute;
      z-index: 11000;
      width: auto;
      margin: 12px 0 0 0
    }

    #ajaxsearchprores4_1 .asp_nores,
    #ajaxsearchprores4_2 .asp_nores,
    div.asp_r.asp_r_4 .asp_nores {
      border: 0 solid rgb(0, 0, 0);
      border-radius: 0;
      box-shadow: 0 5px 5px -5px #dfdfdf;
      padding: 6px 12px 6px 12px;
      margin: 0;
      font-weight: normal;
      font-family: inherit;
      color: rgba(74, 74, 74, 1);
      font-size: 1rem;
      line-height: 1.2rem;
      text-shadow: none;
      font-weight: normal;
      background: rgb(255, 255, 255)
    }

    #ajaxsearchprores4_1 .asp_nores .asp_nores_kw_suggestions,
    #ajaxsearchprores4_2 .asp_nores .asp_nores_kw_suggestions,
    div.asp_r.asp_r_4 .asp_nores .asp_nores_kw_suggestions {
      color: rgba(234, 67, 53, 1);
      font-weight: normal
    }

    #ajaxsearchprores4_1 .asp_nores .asp_keyword,
    #ajaxsearchprores4_2 .asp_nores .asp_keyword,
    div.asp_r.asp_r_4 .asp_nores .asp_keyword {
      padding: 0 8px 0 0;
      cursor: pointer;
      color: rgba(20, 84, 169, 1);
      font-weight: bold
    }

    #ajaxsearchprores4_1 .asp_results_top,
    #ajaxsearchprores4_2 .asp_results_top,
    div.asp_r.asp_r_4 .asp_results_top {
      background: rgb(255, 255, 255);
      border: 1px none rgb(81, 81, 81);
      border-radius: 0;
      padding: 6px 12px 6px 12px;
      margin: 0 0 4px 0;
      text-align: center;
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(81, 81, 81);
      font-size: 13px;
      line-height: 16px;
      text-shadow: none
    }

    #ajaxsearchprores4_1 .results .item,
    #ajaxsearchprores4_2 .results .item,
    div.asp_r.asp_r_4 .results .item {
      height: auto;
      background: rgb(255, 255, 255)
    }

    #ajaxsearchprores4_1 .results .item.hovered,
    #ajaxsearchprores4_2 .results .item.hovered,
    div.asp_r.asp_r_4 .results .item.hovered {
      background-image: -moz-radial-gradient(center, ellipse cover, rgb(244, 244, 244), rgb(246, 246, 246));
      background-image: -webkit-gradient(radial, center center, 0px, center center, 100%, rgb(244, 244, 244), rgb(246, 246, 246));
      background-image: -webkit-radial-gradient(center, ellipse cover, rgb(244, 244, 244), rgb(246, 246, 246));
      background-image: -o-radial-gradient(center, ellipse cover, rgb(244, 244, 244), rgb(246, 246, 246));
      background-image: -ms-radial-gradient(center, ellipse cover, rgb(244, 244, 244), rgb(246, 246, 246));
      background-image: radial-gradient(ellipse at center, rgb(244, 244, 244), rgb(246, 246, 246))
    }

    #ajaxsearchprores4_1 .results .item .asp_image,
    #ajaxsearchprores4_2 .results .item .asp_image,
    div.asp_r.asp_r_4 .results .item .asp_image {
      background-size: cover;
      background-repeat: no-repeat
    }

    #ajaxsearchprores4_1 .results .item .asp_image img,
    #ajaxsearchprores4_2 .results .item .asp_image img,
    div.asp_r.asp_r_4 .results .item .asp_image img {
      object-fit: cover
    }

    #ajaxsearchprores4_1 .results .item .asp_item_overlay_img,
    #ajaxsearchprores4_2 .results .item .asp_item_overlay_img,
    div.asp_r.asp_r_4 .results .item .asp_item_overlay_img {
      background-size: cover;
      background-repeat: no-repeat
    }

    #ajaxsearchprores4_1 .results .item .asp_content,
    #ajaxsearchprores4_2 .results .item .asp_content,
    div.asp_r.asp_r_4 .results .item .asp_content {
      overflow: hidden;
      background: transparent;
      margin: 0;
      padding: 0 10px
    }

    #ajaxsearchprores4_1 .results .item .asp_content h3,
    #ajaxsearchprores4_2 .results .item .asp_content h3,
    div.asp_r.asp_r_4 .results .item .asp_content h3 {
      margin: 0;
      padding: 0;
      display: inline-block;
      line-height: inherit;
      font-weight: bold;
      font-family: "Lato";
      color: rgb(20, 104, 169);
      font-size: 14px;
      line-height: 1.55em;
      text-shadow: none
    }

    #ajaxsearchprores4_1 .results .item .asp_content h3 a,
    #ajaxsearchprores4_2 .results .item .asp_content h3 a,
    div.asp_r.asp_r_4 .results .item .asp_content h3 a {
      margin: 0;
      padding: 0;
      line-height: inherit;
      display: block;
      font-weight: bold;
      font-family: "Lato";
      color: rgb(20, 104, 169);
      font-size: 14px;
      line-height: 1.55em;
      text-shadow: none
    }

    #ajaxsearchprores4_1 .results .item .asp_content h3 a:hover,
    #ajaxsearchprores4_2 .results .item .asp_content h3 a:hover,
    div.asp_r.asp_r_4 .results .item .asp_content h3 a:hover {
      font-weight: bold;
      font-family: "Lato";
      color: rgb(20, 104, 169);
      font-size: 14px;
      line-height: 1.55em;
      text-shadow: none
    }

    #ajaxsearchprores4_1 .results .item div.etc,
    #ajaxsearchprores4_2 .results .item div.etc,
    div.asp_r.asp_r_4 .results .item div.etc {
      padding: 0;
      font-size: 13px;
      line-height: 1.3em;
      margin-bottom: 6px
    }

    #ajaxsearchprores4_1 .results .item .etc .asp_author,
    #ajaxsearchprores4_2 .results .item .etc .asp_author,
    div.asp_r.asp_r_4 .results .item .etc .asp_author {
      padding: 0;
      font-weight: bold;
      font-family: "Open Sans";
      color: rgb(161, 161, 161);
      font-size: 11px;
      line-height: 13px;
      text-shadow: none
    }

    #ajaxsearchprores4_1 .results .item .etc .asp_date,
    #ajaxsearchprores4_2 .results .item .etc .asp_date,
    div.asp_r.asp_r_4 .results .item .etc .asp_date {
      margin: 0 0 0 10px;
      padding: 0;
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(173, 173, 173);
      font-size: 11px;
      line-height: 15px;
      text-shadow: none
    }

    #ajaxsearchprores4_1 .results .item div.asp_content,
    #ajaxsearchprores4_2 .results .item div.asp_content,
    div.asp_r.asp_r_4 .results .item div.asp_content {
      margin: 0;
      padding: 0;
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(74, 74, 74);
      font-size: 13px;
      line-height: 1.35em;
      text-shadow: none
    }

    #ajaxsearchprores4_1 span.highlighted,
    #ajaxsearchprores4_2 span.highlighted,
    div.asp_r.asp_r_4 span.highlighted {
      font-weight: bold;
      color: rgba(217, 49, 43, 1);
      background-color: rgba(238, 238, 238, 1)
    }

    #ajaxsearchprores4_1 p.showmore,
    #ajaxsearchprores4_2 p.showmore,
    div.asp_r.asp_r_4 p.showmore {
      text-align: center;
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(5, 94, 148);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none
    }

    #ajaxsearchprores4_1 p.showmore a,
    #ajaxsearchprores4_2 p.showmore a,
    div.asp_r.asp_r_4 p.showmore a {
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(5, 94, 148);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none;
      padding: 10px 5px;
      margin: 0 auto;
      background: rgba(255, 255, 255, 1);
      display: block;
      text-align: center
    }

    #ajaxsearchprores4_1 .asp_res_loader,
    #ajaxsearchprores4_2 .asp_res_loader,
    div.asp_r.asp_r_4 .asp_res_loader {
      background: rgb(255, 255, 255);
      height: 200px;
      padding: 10px
    }

    #ajaxsearchprores4_1.isotopic .asp_res_loader,
    #ajaxsearchprores4_2.isotopic .asp_res_loader,
    div.asp_r.asp_r_4.isotopic .asp_res_loader {
      background: rgba(255, 255, 255, 0)
    }

    #ajaxsearchprores4_1 .asp_res_loader .asp_loader,
    #ajaxsearchprores4_2 .asp_res_loader .asp_loader,
    div.asp_r.asp_r_4 .asp_res_loader .asp_loader {
      height: 200px;
      width: 200px;
      margin: 0 auto
    }

    div.asp_s.asp_s_4.searchsettings,
    div.asp_s.asp_s_4.searchsettings,
    div.asp_s.asp_s_4.searchsettings {
      direction: ltr;
      padding: 0;
      background-image: -webkit-linear-gradient(185deg, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: -moz-linear-gradient(185deg, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: -o-linear-gradient(185deg, rgb(255, 255, 255), rgb(255, 255, 255));
      background-image: -ms-linear-gradient(185deg, rgb(255, 255, 255) 0, rgb(255, 255, 255) 100%);
      background-image: linear-gradient(185deg, rgb(255, 255, 255), rgb(255, 255, 255));
      box-shadow: 1px 1px 0 1px rgb(5, 5, 5);
      ;
      max-width: 208px;
      z-index: 2
    }

    div.asp_s.asp_s_4.searchsettings.asp_s,
    div.asp_s.asp_s_4.searchsettings.asp_s,
    div.asp_s.asp_s_4.searchsettings.asp_s {
      z-index: 11001
    }

    #ajaxsearchprobsettings4_1.searchsettings,
    #ajaxsearchprobsettings4_2.searchsettings,
    div.asp_sb.asp_sb_4.searchsettings {
      max-width: none
    }

    div.asp_s.asp_s_4.searchsettings form,
    div.asp_s.asp_s_4.searchsettings form,
    div.asp_s.asp_s_4.searchsettings form {
      display: flex
    }

    div.asp_sb.asp_sb_4.searchsettings form,
    div.asp_sb.asp_sb_4.searchsettings form,
    div.asp_sb.asp_sb_4.searchsettings form {
      display: flex
    }

    #ajaxsearchprosettings4_1.searchsettings div.asp_option_label,
    #ajaxsearchprosettings4_2.searchsettings div.asp_option_label,
    #ajaxsearchprosettings4_1.searchsettings .asp_label,
    #ajaxsearchprosettings4_2.searchsettings .asp_label,
    div.asp_s.asp_s_4.searchsettings div.asp_option_label,
    div.asp_s.asp_s_4.searchsettings .asp_label {
      font-weight: bold;
      font-family: "Open Sans";
      color: rgb(43, 43, 43);
      font-size: 12px;
      line-height: 15px;
      text-shadow: none
    }

    #ajaxsearchprosettings4_1.searchsettings .asp_option_inner .asp_option_checkbox,
    #ajaxsearchprosettings4_2.searchsettings .asp_option_inner .asp_option_checkbox,
    div.asp_sb.asp_sb_4.searchsettings .asp_option_inner .asp_option_checkbox,
    div.asp_s.asp_s_4.searchsettings .asp_option_inner .asp_option_checkbox {
      background-image: -webkit-linear-gradient(180deg, rgb(34, 34, 34), rgb(69, 72, 77));
      background-image: -moz-linear-gradient(180deg, rgb(34, 34, 34), rgb(69, 72, 77));
      background-image: -o-linear-gradient(180deg, rgb(34, 34, 34), rgb(69, 72, 77));
      background-image: -ms-linear-gradient(180deg, rgb(34, 34, 34) 0, rgb(69, 72, 77) 100%);
      background-image: linear-gradient(180deg, rgb(34, 34, 34), rgb(69, 72, 77))
    }

    #ajaxsearchprosettings4_1.searchsettings .asp_option_inner .asp_option_checkbox:after,
    #ajaxsearchprosettings4_2.searchsettings .asp_option_inner .asp_option_checkbox:after,
    #ajaxsearchprobsettings4_1.searchsettings .asp_option_inner .asp_option_checkbox:after,
    #ajaxsearchprobsettings4_2.searchsettings .asp_option_inner .asp_option_checkbox:after,
    div.asp_sb.asp_sb_4.searchsettings .asp_option_inner .asp_option_checkbox:after,
    div.asp_s.asp_s_4.searchsettings .asp_option_inner .asp_option_checkbox:after {
      font-family: 'asppsicons2';
      border: none;
      content: "\e800";
      display: block;
      position: absolute;
      top: 0;
      left: 0;
      font-size: 11px;
      color: rgb(255, 255, 255);
      margin: 1px 0 0 0 !important;
      line-height: 17px;
      text-align: center;
      text-decoration: none;
      text-shadow: none
    }

    div.asp_sb.asp_sb_4.searchsettings .asp_sett_scroll,
    div.asp_s.asp_s_4.searchsettings .asp_sett_scroll {
      scrollbar-width: thin;
      scrollbar-color: rgba(0, 0, 0, 0.5) transparent
    }

    div.asp_sb.asp_sb_4.searchsettings .asp_sett_scroll::-webkit-scrollbar,
    div.asp_s.asp_s_4.searchsettings .asp_sett_scroll::-webkit-scrollbar {
      width: 7px
    }

    div.asp_sb.asp_sb_4.searchsettings .asp_sett_scroll::-webkit-scrollbar-track,
    div.asp_s.asp_s_4.searchsettings .asp_sett_scroll::-webkit-scrollbar-track {
      background: transparent
    }

    div.asp_sb.asp_sb_4.searchsettings .asp_sett_scroll::-webkit-scrollbar-thumb,
    div.asp_s.asp_s_4.searchsettings .asp_sett_scroll::-webkit-scrollbar-thumb {
      background: rgba(0, 0, 0, 0.5);
      border-radius: 5px;
      border: none
    }

    #ajaxsearchprosettings4_1.searchsettings .asp_sett_scroll,
    #ajaxsearchprosettings4_2.searchsettings .asp_sett_scroll,
    div.asp_s.asp_s_4.searchsettings .asp_sett_scroll {
      max-height: 220px;
      overflow: auto
    }

    #ajaxsearchprobsettings4_1.searchsettings .asp_sett_scroll,
    #ajaxsearchprobsettings4_2.searchsettings .asp_sett_scroll,
    div.asp_sb.asp_sb_4.searchsettings .asp_sett_scroll {
      max-height: 220px;
      overflow: auto
    }

    #ajaxsearchprosettings4_1.searchsettings fieldset,
    #ajaxsearchprosettings4_2.searchsettings fieldset,
    div.asp_s.asp_s_4.searchsettings fieldset {
      width: 200px;
      min-width: 200px;
      max-width: 10000px
    }

    #ajaxsearchprobsettings4_1.searchsettings fieldset,
    #ajaxsearchprobsettings4_2.searchsettings fieldset,
    div.asp_sb.asp_sb_4.searchsettings fieldset {
      width: 200px;
      min-width: 200px;
      max-width: 10000px
    }

    #ajaxsearchprosettings4_1.searchsettings fieldset legend,
    #ajaxsearchprosettings4_2.searchsettings fieldset legend,
    div.asp_s.asp_s_4.searchsettings fieldset legend {
      padding: 0 0 0 10px;
      margin: 0;
      background: transparent;
      font-weight: normal;
      font-family: "Open Sans";
      color: rgb(71, 71, 71);
      font-size: 13px;
      line-height: 15px;
      text-shadow: none
    }

    #ajaxsearchprores4_1.vertical,
    #ajaxsearchprores4_2.vertical,
    div.asp_r.asp_r_4.vertical {
      padding: 4px;
      background: rgb(255, 255, 255);
      border-radius: 3px;
      border: 2px solid rgb(5, 5, 5);
      border-radius: 3px 3px 3px 3px;
      box-shadow: none;
      visibility: hidden;
      display: none
    }

    #ajaxsearchprores4_1.vertical .results,
    #ajaxsearchprores4_2.vertical .results,
    div.asp_r.asp_r_4.vertical .results {
      max-height: none;
      overflow-x: hidden;
      overflow-y: auto
    }

    #ajaxsearchprores4_1.vertical .item,
    #ajaxsearchprores4_2.vertical .item,
    div.asp_r.asp_r_4.vertical .item {
      position: relative;
      box-sizing: border-box
    }

    #ajaxsearchprores4_1.vertical .item .asp_content h3,
    #ajaxsearchprores4_2.vertical .item .asp_content h3,
    div.asp_r.asp_r_4.vertical .item .asp_content h3 {
      display: inline
    }

    #ajaxsearchprores4_1.vertical .results .item .asp_content,
    #ajaxsearchprores4_2.vertical .results .item .asp_content,
    div.asp_r.asp_r_4.vertical .results .item .asp_content {
      overflow: hidden;
      width: auto;
      height: auto;
      background: transparent;
      margin: 0;
      padding: 8px
    }

    #ajaxsearchprores4_1.vertical .results .item .asp_image,
    #ajaxsearchprores4_2.vertical .results .item .asp_image,
    div.asp_r.asp_r_4.vertical .results .item .asp_image {
      width: 50px;
      height: 50px;
      margin: 2px 8px 0 0
    }

    #ajaxsearchprores4_1.vertical .asp_simplebar-scrollbar::before,
    #ajaxsearchprores4_2.vertical .asp_simplebar-scrollbar::before,
    div.asp_r.asp_r_4.vertical .asp_simplebar-scrollbar::before {
      background: transparent;
      background-image: -moz-radial-gradient(center, ellipse cover, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5));
      background-image: -webkit-gradient(radial, center center, 0px, center center, 100%, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5));
      background-image: -webkit-radial-gradient(center, ellipse cover, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5));
      background-image: -o-radial-gradient(center, ellipse cover, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5));
      background-image: -ms-radial-gradient(center, ellipse cover, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5));
      background-image: radial-gradient(ellipse at center, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5))
    }

    #ajaxsearchprores4_1.vertical .results .item::after,
    #ajaxsearchprores4_2.vertical .results .item::after,
    div.asp_r.asp_r_4.vertical .results .item::after {
      display: block;
      position: absolute;
      bottom: 0;
      content: "";
      height: 1px;
      width: 100%;
      background: rgba(255, 255, 255, 0.55)
    }

    #ajaxsearchprores4_1.vertical .results .item.asp_last_item::after,
    #ajaxsearchprores4_2.vertical .results .item.asp_last_item::after,
    div.asp_r.asp_r_4.vertical .results .item.asp_last_item::after {
      display: none
    }

    .asp_spacer {
      display: none !important;
    }

    .asp_v_spacer {
      width: 100%;
      height: 0
    }

    #ajaxsearchprores4_1 .asp_group_header,
    #ajaxsearchprores4_2 .asp_group_header,
    div.asp_r.asp_r_4 .asp_group_header {
      background: #DDD;
      background: rgb(246, 246, 246);
      border-radius: 3px 3px 0 0;
      border-top: 1px solid rgb(248, 248, 248);
      border-left: 1px solid rgb(248, 248, 248);
      border-right: 1px solid rgb(248, 248, 248);
      margin: 0 0 -3px;
      padding: 7px 0 7px 10px;
      position: relative;
      z-index: 1000;
      min-width: 90%;
      flex-grow: 1;
      font-weight: bold;
      font-family: "Open Sans";
      color: rgb(5, 94, 148);
      font-size: 11px;
      line-height: 13px;
      text-shadow: none
    }

    #ajaxsearchprores4_1.vertical .results,
    #ajaxsearchprores4_2.vertical .results,
    div.asp_r.asp_r_4.vertical .results {
      scrollbar-width: thin;
      scrollbar-color: rgba(0, 0, 0, 0.5) rgb(255, 255, 255)
    }

    #ajaxsearchprores4_1.vertical .results::-webkit-scrollbar,
    #ajaxsearchprores4_2.vertical .results::-webkit-scrollbar,
    div.asp_r.asp_r_4.vertical .results::-webkit-scrollbar {
      width: 10px
    }

    #ajaxsearchprores4_1.vertical .results::-webkit-scrollbar-track,
    #ajaxsearchprores4_2.vertical .results::-webkit-scrollbar-track,
    div.asp_r.asp_r_4.vertical .results::-webkit-scrollbar-track {
      background: rgb(255, 255, 255);
      box-shadow: inset 0 0 12px 12px transparent;
      border: none
    }

    #ajaxsearchprores4_1.vertical .results::-webkit-scrollbar-thumb,
    #ajaxsearchprores4_2.vertical .results::-webkit-scrollbar-thumb,
    div.asp_r.asp_r_4.vertical .results::-webkit-scrollbar-thumb {
      background: transparent;
      box-shadow: inset 0 0 12px 12px rgba(0, 0, 0, 0);
      border: solid 2px transparent;
      border-radius: 12px
    }

    #ajaxsearchprores4_1.vertical:hover .results::-webkit-scrollbar-thumb,
    #ajaxsearchprores4_2.vertical:hover .results::-webkit-scrollbar-thumb,
    div.asp_r.asp_r_4.vertical:hover .results::-webkit-scrollbar-thumb {
      box-shadow: inset 0 0 12px 12px rgba(0, 0, 0, 0.5)
    }

    @media(hover:none), (max-width:500px) {

      #ajaxsearchprores4_1.vertical .results::-webkit-scrollbar-thumb,
      #ajaxsearchprores4_2.vertical .results::-webkit-scrollbar-thumb,
      div.asp_r.asp_r_4.vertical .results::-webkit-scrollbar-thumb {
        box-shadow: inset 0 0 12px 12px rgba(0, 0, 0, 0.5)
      }
    }
  </style>
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="">
  <style>
    @font-face {
      font-family: 'Lato';
      font-style: normal;
      font-weight: 300;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/lato/v23/S6u9w4BMUTPHh7USSwiPHA.ttf) format('truetype');
    }

    @font-face {
      font-family: 'Lato';
      font-style: normal;
      font-weight: 400;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/lato/v23/S6uyw4BMUTPHjx4wWw.ttf) format('truetype');
    }

    @font-face {
      font-family: 'Lato';
      font-style: normal;
      font-weight: 700;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/lato/v23/S6u9w4BMUTPHh6UVSwiPHA.ttf) format('truetype');
    }

    @font-face {
      font-family: 'Open Sans';
      font-style: normal;
      font-weight: 300;
      font-stretch: normal;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/opensans/v34/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsiH0B4gaVc.ttf) format('truetype');
    }

    @font-face {
      font-family: 'Open Sans';
      font-style: normal;
      font-weight: 400;
      font-stretch: normal;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/opensans/v34/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsjZ0B4gaVc.ttf) format('truetype');
    }

    @font-face {
      font-family: 'Open Sans';
      font-style: normal;
      font-weight: 700;
      font-stretch: normal;
      font-display: swap;
      src: url(https://fonts.gstatic.com/s/opensans/v34/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsg-1x4gaVc.ttf) format('truetype');
    }
  </style>
  <style>
    .wg-loader-p[data-v-55c33628] {
      background: var(--31d93014);
      border-bottom: 1px solid var(--07d13f9a)
    }
  </style>
  <style>
    #wgWidgetScreen .wg-widget-title[data-v-3b301c6f] {
      color: var(--1084ee47);
      font-size: var(--3b273f3c);
      font-weight: var(--73ce6c4f)
    }
  </style>
  <style>
    #wgWidgetScreen .wg-widget-command[data-v-62e86c4d] {
      display: flex;
      justify-content: center;
      flex-direction: column;
      align-items: center;
      margin: auto
    }

    #wgWidgetScreen .wg-widget-command__icon[data-v-62e86c4d] {
      width: 60px;
      height: 60px
    }

    #wgWidgetScreen .wg-widget-command__name[data-v-62e86c4d] {
      margin-top: 4px;
      color: var(--ca11612e);
      font-size: var(--91c9f8f8);
      font-weight: var(--309eeaf1);
      line-height: 16px
    }
  </style>
  <style>
    #wgWidgetScreen .wg-widget-score[data-v-78c5cd43] {
      margin: 0 16px;
      display: flex;
      justify-content: center;
      align-items: center;
      flex-direction: column
    }

    #wgWidgetScreen .wg-widget-score .wg-score[data-v-78c5cd43] {
      color: var(--0b9df8dc);
      font-size: var(--8b070edc);
      font-weight: var(--7de92cec)
    }

    #wgWidgetScreen .wg-widget-score .wg-score .wg-green[data-v-78c5cd43] {
      color: var(--0d99d923)
    }

    #wgWidgetScreen .wg-widget-score .wg-score .wg-up-score[data-v-78c5cd43] {
      color: var(--60b6cab1)
    }

    #wgWidgetScreen .wg-widget-score .wg-score .wg-down-score[data-v-78c5cd43] {
      color: var(--67d7e1a2)
    }

    #wgWidgetScreen .wg-widget-score .wg-score .wg-score__divider[data-v-78c5cd43] {
      margin: 0 8px
    }

    #wgWidgetScreen .wg-widget-score .wg-status[data-v-78c5cd43] {
      background: var(--0c1fbafe);
      color: var(--67d7e1a2);
      padding: 0 8px;
      border-radius: 8px;
      width: fit-content;
      margin: auto;
      font-size: var(--f86c4286);
      font-weight: var(--03be8d58)
    }

    #wgWidgetScreen .wg-widget-score .wg-live[data-v-78c5cd43] {
      color: var(--60b6cab1)
    }

    #wgWidgetScreen .wg-widget-score .wg-pen-score[data-v-78c5cd43] {
      color: var(--8b9016ac);
      font-size: var(--f86c4286);
      font-weight: var(--03be8d58)
    }
  </style>
  <style>
    #wgWidgetScreen .wg-widget-placeholder[data-v-d6249f0a] {
      display: flex;
      flex-direction: row;
      align-items: center;
      border-radius: 2px;
      padding: 4px 8px;
      background-color: var(--4ad1747f);
      font-size: var(--2a2c557e);
      font-weight: var(--240d1ab3);
      color: var(--27988709);
      margin: 8px 0
    }

    #wgWidgetScreen .wg-widget-placeholder__icon[data-v-d6249f0a] {
      margin-right: 4px
    }
  </style>
  <style>
    #wgWidgetScreen .wg-widget-container[data-v-d05217d0] {
      padding: 8px;
      display: flex;
      flex-direction: column
    }

    #wgWidgetScreen .wg-widget-container .wgwidget-game__info[data-v-d05217d0] {
      display: flex;
      flex-direction: row
    }
  </style>
  <style>
    #wgWidgetScreen {
      height: 100%
    }

    .wg-wrapper[data-v-21cbf1ea] {
      font-family: var(--07379a9f);
      height: 100%
    }
  </style>
  <script src="https://v6.voiranime.com/wp-includes/js/wp-emoji-release.min.js?ver=6.7.1" defer=""></script>
  <style>
    .\[\&_\.gdprAdTransparencyCogWheelButton\]\:\!pjra-z-\[5\],
    AD-SLOT,
    DFP-AD,
    [class^="adDisplay-module"],
    [class^="amp-ad-"],
    [data-ad-cls],
    [data-adbridg-ad-class],
    [data-adshim],
    [data-block-type="ad"],
    [data-css-class="dfp-inarticle"],
    [data-d-ad-id],
    [data-desktop-ad-id],
    [data-dynamic-ads],
    [data-ez-name],
    [data-freestar-ad][id],
    [data-id^="div-gpt-ad"],
    [data-identity="adhesive-ad"],
    [data-m-ad-id],
    [data-mobile-ad-id],
    [data-name="adaptiveConstructorAd"],
    [data-rc-widget="data-rc-widget"],
    [data-rc-widget],
    [data-role="tile-ads-module"],
    [data-template-type="nativead"],
    [data-testid="adBanner-wrapper"],
    [data-testid="ad_testID"],
    [data-testid="prism-ad-wrapper"],
    [data-type="ad-vertical"],
    [data-wpas-zoneid],
    [id^="ad-wrap-"],
    [id^="ad_sky"],
    [id^="ad_slider"],
    [id^="section-ad-banner"],
    [onclick^="location.href='https://1337x.vpnonly.site/"],
    a-ad,
    a[data-href^="http://ads.trafficjunky.net/"],
    a[data-url^="https://vulpix.bet/?ref="],
    a[style="width:100%;height:100%;z-index:10000000000000000;position:absolute;top:0;left:0;"],
    ad-shield-ads,
    ad-slot,
    app-ad,
    app-advertisement,
    app-large-ad,
    ark-top-ad,
    aside[id^="adrotate_widgets-"],
    atf-ad-slot,
    bottomadblock,
    display-ads,
    div[class^="Adstyled__AdWrapper-"],
    div[class^="Display_displayAd"],
    div[class^="kiwi-ad-wrapper"],
    div[class^="native-ad-"],
    div[data-ad-placeholder],
    div[data-ad-wrapper],
    div[data-adname],
    div[data-adunit-path],
    div[data-adunit],
    div[data-adzone],
    div[data-alias="300x250 Ad 1"],
    div[data-alias="300x250 Ad 2"],
    div[data-contentexchange-widget],
    div[data-dfp-id],
    div[data-id-advertdfpconf],
    div[id^="ad-div-"],
    div[id^="ad-position-"],
    div[id^="adngin-"],
    div[id^="adrotate_widgets-"],
    div[id^="adspot-"],
    div[id^="crt-"][style],
    div[id^="div-ads-"],
    div[id^="google_dfp_"],
    div[id^="gpt_ad_"],
    div[id^="lazyad-"],
    div[id^="optidigital-adslot"],
    div[id^="pa_sticky_ad_box_middle_"],
    div[id^="rc-widget-"],
    div[id^="st"][style^="z-index: 999999999;"],
    div[id^="sticky_ad_"],
    div[id^="vuukle-ad-"],
    gpt-ad,
    guj-ad,
    hl-adsense,
    img[src^="https://images.purevpnaffiliates.com"],
    ps-connatix-module,
    span[data-ez-ph-id],
    span[id^="ezoic-pub-ad-placeholder-"],
    topadblock,
    zeus-ad,
    [class^="tile-picker__CitrusBannerContainer-sc-"],
    citrus-ad-wrapper,
    [class^="s2nPlayer"],
    [data-taboola-options],
    div[id*="MarketGid"],
    [onclick*="content.ad/"],
    AMP-AD,
    amp-ad,
    amp-ad-custom,
    amp-connatix-player,
    amp-fx-flying-carpet,
    a[data-oburl^="https://paid.outbrain.com/network/redir?"],
    a[data-redirect^="https://paid.outbrain.com/network/redir?"],
    a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"]+.ob_source,
    div[id^="taboola-stream-"],
    div[id^="zergnet-widget"],
    html[lang]>body.ishome>div.adult+main.main,
    html[lang]>body.startnew>div#sections>section#section_uname,
    html[lang]>body:not([style])>div.captchaBody,
    html[lang]>body#body>*>div.cv-xwrapper>div.cvc>div.cv-inner,
    html[lang]>body#body>*>div.cvh.BlockClicksActivityBusy,
    html#html[sti][vic][lang]>body#allbody,
    html>body>div.container.m-p>#checkbox-window.checkbox-window,
    html>body.hold-transition.theme-primary.bg-img[style^="background-image"][style*="wallpaperaccess.com"][style*="background-repeat"][style*="background-size"],
    html>body>div.container>form#unsubscribe-form[onsubmit="submitUnsubscribeForm(event)"],
    html>body>div.content>dl>dd.dd1>div.min_sider>form#form1[action="unsubscribe.php"],
    html>body.body>div.container>div.content>form>table.optoutForm,
    [src^="https://forum.picbaron.com/Banner"],
    div[id][style^="position: fixed; inset: 0px; z-index: 2147483647; background: black"][style*="opacity: 0.01"],
    div[class$="player-promo-col"],
    div#spot-holder.spot-holder[style="display: block;"],
    a[dontfo=""][style$="position: absolute; z-index: 2147483647;"],
    [data-ad-module]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
    [data-ad-width]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
    [data-adblockkey]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(html):not(.adsbygoogle),
    [data-advadstrackid]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
    [data-ad-manager-id]:not([style$="left: -10000px !important; top: -1000px !important;"]):not(.adsbygoogle),
    div[style^="z-index: 999999; background-image: url(\"data:image/gif;base64,"][style$="position: absolute;"],
    a[onclick="openAuc();"],
    div[style="position: fixed; display: block; width: 100%; height: 100%; inset: 0px; background-color: rgba(0, 0, 0, 0); z-index: 300000;"],
    body>div[style$="z-index: 2147483647; top: 0px; left: 0px; position: fixed; display: block;"],
    div[style^="position:fixed;inset:0px;z-index:2147483647;background:black;opacity:0.01"],
    div[style^="position: fixed; inset: 0px; z-index: 2147483647; background: black; opacity: 0.01"],
    a[id][href="https://chpadblock.com/"][rel^="noopener noreferrer"],
    a[id][href="https://hamrocsit.com"][rel^="noopener noreferrer"],
    a[id][href="https://toolkitspro.com"][rel^="noopener noreferrer"],
    iframe.lazyloaded[data-src^="https://rcm-fe.amazon-adsystem.com/"],
    div[style="top: 0px; left: 0px; width: 1287px; height: 500px; position: fixed; z-index: 2147483647;"],
    div[style="position: fixed; inset: 0px; z-index: 2147483647; pointer-events: auto;"],
    #player div[style$="cursor: pointer; position: absolute; width: 100%; height: 100%; padding: 1rem; z-index: 2147483647;"],
    html[lang][style^="--main-bg-color"]>body:not([class]):not([id])>div#container[style="visibility: visible;"]>div#banner[style="opacity:0"]~main:not([class]):not([id])>div#message,
    [data-uri^="https://s3.amazonaws.com"],
    [data-lnguri^="https://s3.amazonaws.com"],
    [onclick*="postlnk.com"],
    [data-lnguri*="vipbox"],
    [class^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]),
    div[id^="div-gpt-"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
    [id^="div-gpt-ad"]:not([style^="width: 1px; height: 1px; position: absolute; left: -10000px; top: -"]):not([style="pointer-events: none; height: 1px; width: 0px; opacity: 0; visibility: hidden; position: fixed; bottom: 0px;"]),
    [src^="//dombnrs.com/"] {
      display: none !important;
    }

    #mg_vd,
    .ad,
    [data-ad-name],
    [data-revive-zoneid],
    [name^="google_ads_iframe"],
    display-ad-component,
    div[aria-label="Ads"],
    div[data-ad-targeting],
    div[id^="ad_position_"],
    div[id^="dfp-ad-"],
    div[id^="ezoic-pub-ad-"],
    div[id^="yandex_ad"],
    ins.adsbygoogle[data-ad-client],
    ins.adsbygoogle[data-ad-slot],
    div[id*="ScriptRoot"],
    a[onmousedown^="this.href='https://paid.outbrain.com/network/redir?"][target="_blank"],
    amp-embed[type="taboola"] {
      display: none !important;
    }
  </style>
  <style>
    [href*="uselnk.com/"],
    [href*="postlnk.com"],
    [href*="passtechusa.com"] {
      display: none !important;
    }
  </style>
</head>

<body
  class="wp-manga-template-default single single-wp-manga postid-68475 wp-embed-responsive wp-manga-page reading-manga keyboard-navigate page header-style-1 sticky-enabled sticky-style-1 is-sidebar text-ui-dark manga-reading-paged-style">



  <div class="wrap">
    <div class="body-wrap">
      <header class="site-header">
        <div class="c-header__top">
          <ul class="search-main-menu">
            <li>
              <div class="container">
                <div class="asp_w_container asp_w_container_4 asp_w_container_4_1" data-id="4" data-instance="1">
                  <div
                    class="asp_w asp_m asp_m_4 asp_m_4_1 wpdreams_asp_sc wpdreams_asp_sc-4 ajaxsearchpro asp_main_container asp_non_compact"
                    data-id="4" data-name="classic VOSTFR" data-instance="1" id="ajaxsearchpro4_1">
                    <div class="probox">
                      <div class="prosettings" style="display:none;" data-opened="0">
                        <div class="innericon"><svg xmlns="http://www.w3.org/2000/svg" width="22" height="22"
                            viewBox="0 0 512 512">
                            <polygon transform="rotate(90 256 256)"
                              points="142.332,104.886 197.48,50 402.5,256 197.48,462 142.332,407.113 292.727,256">
                            </polygon>
                          </svg></div>
                      </div>
                      <div class="proinput">
                        <form role="search" action="#" autocomplete="off" aria-label="Search form"><input type="search"
                            class="orig" placeholder="Rechercher en VOSTFR..." name="phrase" value=""
                            aria-label="Search input" autocomplete="off"><input type="text" class="autocomplete"
                            name="phrase" value="" aria-label="Search autocomplete input" aria-hidden="true"
                            tabindex="-1" autocomplete="off" disabled=""></form>
                      </div><button class="promagnifier" aria-label="Search magnifier button"><span
                          class="asp_text_button hiddend"> Search </span><span class="innericon"><svg
                            xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 512 512">
                            <path
                              d="M448.225 394.243l-85.387-85.385c16.55-26.08 26.146-56.986 26.146-90.094 0-92.99-75.652-168.64-168.643-168.64-92.988 0-168.64 75.65-168.64 168.64s75.65 168.64 168.64 168.64c31.466 0 60.94-8.67 86.176-23.734l86.14 86.142c36.755 36.754 92.355-18.783 55.57-55.57zm-344.233-175.48c0-64.155 52.192-116.35 116.35-116.35s116.353 52.194 116.353 116.35S284.5 335.117 220.342 335.117s-116.35-52.196-116.35-116.352zm34.463-30.26c34.057-78.9 148.668-69.75 170.248 12.863-43.482-51.037-119.984-56.532-170.248-12.862z">
                            </path>
                          </svg></span><span class="asp_clear"></span></button>
                      <div class="proloading">
                        <div class="asp_loader">
                          <div class="asp_loader-inner asp_ball-scale">
                            <div></div>
                          </div>
                        </div>
                      </div>
                      <div class="proclose"><svg version="1.1" xmlns="http://www.w3.org/2000/svg"
                          xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="512px" height="512px"
                          viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve">
                          <polygon
                            points="438.393,374.595 319.757,255.977 438.378,137.348 374.595,73.607 255.995,192.225 137.375,73.622 73.607,137.352 192.246,255.983 73.622,374.625 137.352,438.393 256.002,319.734 374.652,438.378 ">
                          </polygon>
                        </svg></div>
                    </div>
                  </div>
                  <div class="asp_data_container" style="display:none !important;">
                    <div class="asp_init_data" style="display:none !important;" id="asp_init_id_4_1" data-asp-id="4"
                      data-asp-instance="1"
                      data-aspdata="eyJob21ldXJsIjoiaHR0cHM6XC9cL3Y2LnZvaXJhbmltZS5jb21cLyIsImlzX3Jlc3VsdHNfcGFnZSI6MCwicmVzdWx0c3R5cGUiOiJ2ZXJ0aWNhbCIsInJlc3VsdHNwb3NpdGlvbiI6ImhvdmVyIiwicmVzdWx0c1NuYXBUbyI6ImxlZnQiLCJyZXN1bHRzIjp7IndpZHRoIjoiYXV0byIsIndpZHRoX3RhYmxldCI6ImF1dG8iLCJ3aWR0aF9waG9uZSI6ImF1dG8ifSwiaXRlbXNjb3VudCI6NCwiY2hhcmNvdW50IjoyLCJoaWdobGlnaHQiOjAsImhpZ2hsaWdodFdob2xld29yZHMiOjEsInNpbmdsZUhpZ2hsaWdodCI6MCwic2Nyb2xsVG9SZXN1bHRzIjp7ImVuYWJsZWQiOjAsIm9mZnNldCI6MH0sImF1dG9jb21wbGV0ZSI6eyJlbmFibGVkIjoxLCJ0cmlnZ2VyX2NoYXJjb3VudCI6MCwiZ29vZ2xlT25seSI6MSwibGFuZyI6ImVuIiwibW9iaWxlIjoxfSwidHJpZ2dlciI6eyJkZWxheSI6MzAwLCJhdXRvY29tcGxldGVfZGVsYXkiOjMxMCwidXBkYXRlX2hyZWYiOjAsImZhY2V0IjoxLCJ0eXBlIjoxLCJjbGljayI6ImFqYXhfc2VhcmNoIiwiY2xpY2tfbG9jYXRpb24iOiJzYW1lIiwicmV0dXJuIjoibm90aGluZyIsInJldHVybl9sb2NhdGlvbiI6InNhbWUiLCJyZWRpcmVjdF91cmwiOiI/cz17cGhyYXNlfSZwb3N0X3R5cGU9d3AtbWFuZ2Emb3A9JmF1dGhvcj0mYXJ0aXN0PSZyZWxlYXNlPSZhZHVsdD0mdHlwZT0mbGFuZ3VhZ2U9IiwiZWxlbWVudG9yX3VybCI6Imh0dHBzOlwvXC92Ni52b2lyYW5pbWUuY29tXC8/YXNwX2xzPXtwaHJhc2V9In0sIm92ZXJyaWRld3BkZWZhdWx0IjowLCJvdmVycmlkZV9tZXRob2QiOiJnZXQiLCJzZXR0aW5ncyI6eyJ1bnNlbGVjdENoaWxkcmVuIjoxLCJoaWRlQ2hpbGRyZW4iOjB9LCJzZXR0aW5nc2ltYWdlcG9zIjoicmlnaHQiLCJzZXR0aW5nc1Zpc2libGUiOjAsInNldHRpbmdzSGlkZU9uUmVzIjowLCJwcmVzY29udGFpbmVyaGVpZ2h0IjoiNDAwcHgiLCJjbG9zZU9uRG9jQ2xpY2siOjEsImZvY3VzT25QYWdlbG9hZCI6MCwiaXNvdG9waWMiOnsiaXRlbVdpZHRoIjoiMjAwcHgiLCJpdGVtV2lkdGhUYWJsZXQiOiIyMDBweCIsIml0ZW1XaWR0aFBob25lIjoiMjAwcHgiLCJpdGVtSGVpZ2h0IjoiMjAwcHgiLCJpdGVtSGVpZ2h0VGFibGV0IjoiMjAwcHgiLCJpdGVtSGVpZ2h0UGhvbmUiOiIyMDBweCIsInBhZ2luYXRpb24iOjEsInJvd3MiOjIsImd1dHRlciI6NSwic2hvd092ZXJsYXkiOjEsImJsdXJPdmVybGF5IjoxLCJoaWRlQ29udGVudCI6MX0sImxvYWRlckxvY2F0aW9uIjoiYXV0byIsInNob3dfbW9yZSI6eyJlbmFibGVkIjowLCJ1cmwiOiI/cz17cGhyYXNlfSIsImVsZW1lbnRvcl91cmwiOiJodHRwczpcL1wvdjYudm9pcmFuaW1lLmNvbVwvP2FzcF9scz17cGhyYXNlfSIsImFjdGlvbiI6ImFqYXgiLCJsb2NhdGlvbiI6InNhbWUiLCJpbmZpbml0ZSI6MX0sIm1vYmlsZSI6eyJ0cmlnZ2VyX29uX3R5cGUiOjEsImNsaWNrX2FjdGlvbiI6ImFqYXhfc2VhcmNoIiwicmV0dXJuX2FjdGlvbiI6Im5vdGhpbmciLCJjbGlja19hY3Rpb25fbG9jYXRpb24iOiJzYW1lIiwicmV0dXJuX2FjdGlvbl9sb2NhdGlvbiI6InNhbWUiLCJyZWRpcmVjdF91cmwiOiI/cz17cGhyYXNlfSZwb3N0X3R5cGU9d3AtbWFuZ2Emb3A9JmF1dGhvcj0mYXJ0aXN0PSZyZWxlYXNlPSZhZHVsdD0mdHlwZT0mbGFuZ3VhZ2U9IiwiZWxlbWVudG9yX3VybCI6Imh0dHBzOlwvXC92Ni52b2lyYW5pbWUuY29tXC8/YXNwX2xzPXtwaHJhc2V9IiwibWVudV9zZWxlY3RvciI6IiNtZW51LXRvZ2dsZSIsImhpZGVfa2V5Ym9hcmQiOjEsImZvcmNlX3Jlc19ob3ZlciI6MCwiZm9yY2Vfc2V0dF9ob3ZlciI6MCwiZm9yY2Vfc2V0dF9zdGF0ZSI6Im5vbmUifSwiY29tcGFjdCI6eyJlbmFibGVkIjowLCJmb2N1cyI6MSwid2lkdGgiOiIxMDAlIiwid2lkdGhfdGFibGV0IjoiNDgwcHgiLCJ3aWR0aF9waG9uZSI6IjMyMHB4IiwiY2xvc2VPbk1hZ25pZmllciI6MSwiY2xvc2VPbkRvY3VtZW50IjowLCJwb3NpdGlvbiI6InN0YXRpYyIsIm92ZXJsYXkiOjB9LCJzYiI6eyJyZWRpcmVjdF9hY3Rpb24iOiJhamF4X3NlYXJjaCIsInJlZGlyZWN0X2xvY2F0aW9uIjoic2FtZSIsInJlZGlyZWN0X3VybCI6Ij9zPXtwaHJhc2V9IiwiZWxlbWVudG9yX3VybCI6Imh0dHBzOlwvXC92Ni52b2lyYW5pbWUuY29tXC8/YXNwX2xzPXtwaHJhc2V9In0sInJiIjp7ImFjdGlvbiI6Im5vdGhpbmcifSwiYW5pbWF0aW9ucyI6eyJwYyI6eyJzZXR0aW5ncyI6eyJhbmltIjoiZmFkZWRyb3AiLCJkdXIiOjMwMH0sInJlc3VsdHMiOnsiYW5pbSI6ImZhZGVkcm9wIiwiZHVyIjozMDB9LCJpdGVtcyI6ImZhZGVJbkRvd24ifSwibW9iIjp7InNldHRpbmdzIjp7ImFuaW0iOiJmYWRlZHJvcCIsImR1ciI6MzAwfSwicmVzdWx0cyI6eyJhbmltIjoiZmFkZWRyb3AiLCJkdXIiOjMwMH0sIml0ZW1zIjoidm9pZGFuaW0ifX0sInNlbGVjdDIiOnsibm9yZXMiOiJObyByZXN1bHRzIG1hdGNoIn0sImRldGVjdFZpc2liaWxpdHkiOjAsImF1dG9wIjp7InN0YXRlIjoiZGlzYWJsZWQiLCJwaHJhc2UiOiIiLCJjb3VudCI6MTB9LCJ3b29TaG9wIjp7InVzZUFqYXgiOjAsInNlbGVjdG9yIjoiI21haW4iLCJ1cmwiOiIifSwidGF4QXJjaGl2ZSI6eyJ1c2VBamF4IjowLCJzZWxlY3RvciI6IiNtYWluIiwidXJsIjoiIn0sImNwdEFyY2hpdmUiOnsidXNlQWpheCI6MCwic2VsZWN0b3IiOiIjbWFpbiIsInVybCI6IiJ9LCJyZXNQYWdlIjp7InVzZUFqYXgiOjAsInNlbGVjdG9yIjoiI21haW4iLCJ0cmlnZ2VyX3R5cGUiOjEsInRyaWdnZXJfZmFjZXQiOjEsInRyaWdnZXJfbWFnbmlmaWVyIjowLCJ0cmlnZ2VyX3JldHVybiI6MH0sImZzc19sYXlvdXQiOiJmbGV4Iiwic2Nyb2xsQmFyIjp7Imhvcml6b250YWwiOnsiZW5hYmxlZCI6MX19LCJkaXZpIjp7ImJvZHljb21tZXJjZSI6MH0sInByZXZlbnRCb2R5U2Nyb2xsIjoxLCJzdGF0aXN0aWNzIjowLCJwcmV2ZW50RXZlbnRzIjowfQ==">
                    </div>
                    <div class="asp_hidden_data" style="display:none !important;">
                      <div class="asp_item_overlay">
                        <div class="asp_item_inner"><svg xmlns="http://www.w3.org/2000/svg" width="22" height="22"
                            viewBox="0 0 512 512">
                            <path
                              d="M448.225 394.243l-85.387-85.385c16.55-26.08 26.146-56.986 26.146-90.094 0-92.99-75.652-168.64-168.643-168.64-92.988 0-168.64 75.65-168.64 168.64s75.65 168.64 168.64 168.64c31.466 0 60.94-8.67 86.176-23.734l86.14 86.142c36.755 36.754 92.355-18.783 55.57-55.57zm-344.233-175.48c0-64.155 52.192-116.35 116.35-116.35s116.353 52.194 116.353 116.35S284.5 335.117 220.342 335.117s-116.35-52.196-116.35-116.352zm34.463-30.26c34.057-78.9 148.668-69.75 170.248 12.863-43.482-51.037-119.984-56.532-170.248-12.862z">
                            </path>
                          </svg></div>
                      </div>
                    </div>
                  </div>
                  <div id="__original__ajaxsearchprores4_1"
                    class="asp_w asp_r asp_r_4 asp_r_4_1 vertical ajaxsearchpro wpdreams_asp_sc wpdreams_asp_sc-4"
                    data-id="4" data-instance="1">
                    <div class="results">
                      <div class="resdrg"></div>
                    </div>
                    <div class="asp_res_loader hiddend">
                      <div class="asp_loader">
                        <div class="asp_loader-inner asp_ball-scale">
                          <div></div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div id="__original__ajaxsearchprosettings4_1"
                    class="asp_w asp_ss asp_ss_4 asp_s asp_s_4 asp_s_4_1 wpdreams_asp_sc wpdreams_asp_sc-4 ajaxsearchpro searchsettings"
                    data-id="4" data-instance="1">
                    <form name="options" class="asp-fss-flex" aria-label="Search settings form" autocomplete="off">
                      <input type="hidden" name="current_page_id" value="68475"><input type="hidden"
                        name="qtranslate_lang" value="0"><input type="hidden" name="filters_changed" value="0"><input
                        type="hidden" name="filters_initial" value="1">
                      <fieldset class="asp_filter_generic asp_filter_id_2 asp_filter_n_1">
                        <legend>Generic filters</legend>
                        <div class="asp_option" tabindex="0">
                          <div class="asp_option_inner"><input type="checkbox" value="exact" id="set_exact4_1"
                              aria-label="Exact matches only" name="asp_gen[]">
                            <div class="asp_option_checkbox"></div>
                          </div>
                          <div class="asp_option_label"> Exact matches only </div>
                        </div>
                        <div class="asp_option" tabindex="0">
                          <div class="asp_option_inner"><input type="checkbox" value="title" id="set_title4_1"
                              data-origvalue="1" aria-label="Search in title" name="asp_gen[]" checked="checked">
                            <div class="asp_option_checkbox"></div>
                          </div>
                          <div class="asp_option_label"> Search in title </div>
                        </div>
                        <div class="asp_option" tabindex="0">
                          <div class="asp_option_inner"><input type="checkbox" value="content" id="set_content4_1"
                              data-origvalue="1" aria-label="Search in content" name="asp_gen[]" checked="checked">
                            <div class="asp_option_checkbox"></div>
                          </div>
                          <div class="asp_option_label"> Search in content </div>
                        </div>
                        <div class="asp_option" tabindex="0">
                          <div class="asp_option_inner"><input type="checkbox" value="excerpt" id="set_excerpt4_1"
                              data-origvalue="1" aria-label="Search in excerpt" name="asp_gen[]" checked="checked">
                            <div class="asp_option_checkbox"></div>
                          </div>
                          <div class="asp_option_label"> Search in excerpt </div>
                        </div>
                      </fieldset><input type="hidden" value="vf" data-origvalue="vf" id="aspf4_11[vf__1]"
                        name="aspf[vf__1]">
                      <div style="clear:both;"></div>
                    </form>
                  </div>
                </div>
                <div class="asp_w_container asp_w_container_3 asp_w_container_3_1" data-id="3" data-instance="1">
                  <div
                    class="asp_w asp_m asp_m_3 asp_m_3_1 wpdreams_asp_sc wpdreams_asp_sc-3 ajaxsearchpro asp_main_container asp_non_compact"
                    data-id="3" data-name="classic VF" data-instance="1" id="ajaxsearchpro3_1">
                    <div class="probox">
                      <div class="prosettings" style="display:none;" data-opened="0">
                        <div class="innericon"><svg xmlns="http://www.w3.org/2000/svg" width="22" height="22"
                            viewBox="0 0 512 512">
                            <polygon transform="rotate(90 256 256)"
                              points="142.332,104.886 197.48,50 402.5,256 197.48,462 142.332,407.113 292.727,256">
                            </polygon>
                          </svg></div>
                      </div>
                      <div class="proinput">
                        <form role="search" action="#" autocomplete="off" aria-label="Search form"><input type="search"
                            class="orig" placeholder="Rechercher en VF..." name="phrase" value=""
                            aria-label="Search input" autocomplete="off"><input type="text" class="autocomplete"
                            name="phrase" value="" aria-label="Search autocomplete input" aria-hidden="true"
                            tabindex="-1" autocomplete="off" disabled=""></form>
                      </div><button class="promagnifier" aria-label="Search magnifier button"><span
                          class="asp_text_button hiddend"> Search </span><span class="innericon"><svg
                            xmlns="http://www.w3.org/2000/svg" width="22" height="22" viewBox="0 0 512 512">
                            <path
                              d="M448.225 394.243l-85.387-85.385c16.55-26.08 26.146-56.986 26.146-90.094 0-92.99-75.652-168.64-168.643-168.64-92.988 0-168.64 75.65-168.64 168.64s75.65 168.64 168.64 168.64c31.466 0 60.94-8.67 86.176-23.734l86.14 86.142c36.755 36.754 92.355-18.783 55.57-55.57zm-344.233-175.48c0-64.155 52.192-116.35 116.35-116.35s116.353 52.194 116.353 116.35S284.5 335.117 220.342 335.117s-116.35-52.196-116.35-116.352zm34.463-30.26c34.057-78.9 148.668-69.75 170.248 12.863-43.482-51.037-119.984-56.532-170.248-12.862z">
                            </path>
                          </svg></span><span class="asp_clear"></span></button>
                      <div class="proloading">
                        <div class="asp_loader">
                          <div class="asp_loader-inner asp_ball-scale">
                            <div></div>
                          </div>
                        </div>
                      </div>
                      <div class="proclose"><svg version="1.1" xmlns="http://www.w3.org/2000/svg"
                          xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="512px" height="512px"
                          viewBox="0 0 512 512" enable-background="new 0 0 512 512" xml:space="preserve">
                          <polygon
                            points="438.393,374.595 319.757,255.977 438.378,137.348 374.595,73.607 255.995,192.225 137.375,73.622 73.607,137.352 192.246,255.983 73.622,374.625 137.352,438.393 256.002,319.734 374.652,438.378 ">
                          </polygon>
                        </svg></div>
                    </div>
                  </div>
                  <div class="asp_data_container" style="display:none !important;">
                    <div class="asp_init_data" style="display:none !important;" id="asp_init_id_3_1" data-asp-id="3"
                      data-asp-instance="1"
                      data-aspdata="eyJob21ldXJsIjoiaHR0cHM6XC9cL3Y2LnZvaXJhbmltZS5jb21cLyIsImlzX3Jlc3VsdHNfcGFnZSI6MCwicmVzdWx0c3R5cGUiOiJ2ZXJ0aWNhbCIsInJlc3VsdHNwb3NpdGlvbiI6ImhvdmVyIiwicmVzdWx0c1NuYXBUbyI6ImxlZnQiLCJyZXN1bHRzIjp7IndpZHRoIjoiYXV0byIsIndpZHRoX3RhYmxldCI6ImF1dG8iLCJ3aWR0aF9waG9uZSI6ImF1dG8ifSwiaXRlbXNjb3VudCI6NCwiY2hhcmNvdW50IjoyLCJoaWdobGlnaHQiOjAsImhpZ2hsaWdodFdob2xld29yZHMiOjEsInNpbmdsZUhpZ2hsaWdodCI6MCwic2Nyb2xsVG9SZXN1bHRzIjp7ImVuYWJsZWQiOjAsIm9mZnNldCI6MH0sImF1dG9jb21wbGV0ZSI6eyJlbmFibGVkIjoxLCJ0cmlnZ2VyX2NoYXJjb3VudCI6MCwiZ29vZ2xlT25seSI6MSwibGFuZyI6ImVuIiwibW9iaWxlIjoxfSwidHJpZ2dlciI6eyJkZWxheSI6MzAwLCJhdXRvY29tcGxldGVfZGVsYXkiOjMxMCwidXBkYXRlX2hyZWYiOjAsImZhY2V0IjoxLCJ0eXBlIjoxLCJjbGljayI6ImFqYXhfc2VhcmNoIiwiY2xpY2tfbG9jYXRpb24iOiJzYW1lIiwicmV0dXJuIjoibm90aGluZyIsInJldHVybl9sb2NhdGlvbiI6InNhbWUiLCJyZWRpcmVjdF91cmwiOiI/cz17cGhyYXNlfSZwb3N0X3R5cGU9d3AtbWFuZ2Emb3A9JmF1dGhvcj0mYXJ0aXN0PSZyZWxlYXNlPSZhZHVsdD0mdHlwZT0mbGFuZ3VhZ2U9IiwiZWxlbWVudG9yX3VybCI6Imh0dHBzOlwvXC92Ni52b2lyYW5pbWUuY29tXC8/YXNwX2xzPXtwaHJhc2V9In0sIm92ZXJyaWRld3BkZWZhdWx0IjowLCJvdmVycmlkZV9tZXRob2QiOiJnZXQiLCJzZXR0aW5ncyI6eyJ1bnNlbGVjdENoaWxkcmVuIjoxLCJoaWRlQ2hpbGRyZW4iOjB9LCJzZXR0aW5nc2ltYWdlcG9zIjoicmlnaHQiLCJzZXR0aW5nc1Zpc2libGUiOjAsInNldHRpbmdzSGlkZU9uUmVzIjowLCJwcmVzY29udGFpbmVyaGVpZ2h0IjoiNDAwcHgiLCJjbG9zZU9uRG9jQ2xpY2siOjEsImZvY3VzT25QYWdlbG9hZCI6MCwiaXNvdG9waWMiOnsiaXRlbVdpZHRoIjoiMjAwcHgiLCJpdGVtV2lkdGhUYWJsZXQiOiIyMDBweCIsIml0ZW1XaWR0aFBob25lIjoiMjAwcHgiLCJpdGVtSGVpZ2h0IjoiMjAwcHgiLCJpdGVtSGVpZ2h0VGFibGV0IjoiMjAwcHgiLCJpdGVtSGVpZ2h0UGhvbmUiOiIyMDBweCIsInBhZ2luYXRpb24iOjEsInJvd3MiOjIsImd1dHRlciI6NSwic2hvd092ZXJsYXkiOjEsImJsdXJPdmVybGF5IjoxLCJoaWRlQ29udGVudCI6MX0sImxvYWRlckxvY2F0aW9uIjoiYXV0byIsInNob3dfbW9yZSI6eyJlbmFibGVkIjowLCJ1cmwiOiI/cz17cGhyYXNlfSIsImVsZW1lbnRvcl91cmwiOiJodHRwczpcL1wvdjYudm9pcmFuaW1lLmNvbVwvP2FzcF9scz17cGhyYXNlfSIsImFjdGlvbiI6ImFqYXgiLCJsb2NhdGlvbiI6InNhbWUiLCJpbmZpbml0ZSI6MX0sIm1vYmlsZSI6eyJ0cmlnZ2VyX29uX3R5cGUiOjEsImNsaWNrX2FjdGlvbiI6ImFqYXhfc2VhcmNoIiwicmV0dXJuX2FjdGlvbiI6Im5vdGhpbmciLCJjbGlja19hY3Rpb25fbG9jYXRpb24iOiJzYW1lIiwicmV0dXJuX2FjdGlvbl9sb2NhdGlvbiI6InNhbWUiLCJyZWRpcmVjdF91cmwiOiI/cz17cGhyYXNlfSZwb3N0X3R5cGU9d3AtbWFuZ2Emb3A9JmF1dGhvcj0mYXJ0aXN0PSZyZWxlYXNlPSZhZHVsdD0mdHlwZT0mbGFuZ3VhZ2U9IiwiZWxlbWVudG9yX3VybCI6Imh0dHBzOlwvXC92Ni52b2lyYW5pbWUuY29tXC8/YXNwX2xzPXtwaHJhc2V9IiwibWVudV9zZWxlY3RvciI6IiNtZW51LXRvZ2dsZSIsImhpZGVfa2V5Ym9hcmQiOjEsImZvcmNlX3Jlc19ob3ZlciI6MCwiZm9yY2Vfc2V0dF9ob3ZlciI6MCwiZm9yY2Vfc2V0dF9zdGF0ZSI6Im5vbmUifSwiY29tcGFjdCI6eyJlbmFibGVkIjowLCJmb2N1cyI6MSwid2lkdGgiOiIxMDAlIiwid2lkdGhfdGFibGV0IjoiNDgwcHgiLCJ3aWR0aF9waG9uZSI6IjMyMHB4IiwiY2xvc2VPbk1hZ25pZmllciI6MSwiY2xvc2VPbkRvY3VtZW50IjowLCJwb3NpdGlvbiI6InN0YXRpYyIsIm92ZXJsYXkiOjB9LCJzYiI6eyJyZWRpcmVjdF9hY3Rpb24iOiJhamF4X3NlYXJjaCIsInJlZGlyZWN0X2xvY2F0aW9uIjoic2FtZSIsInJlZGlyZWN0X3VybCI6Ij9zPXtwaHJhc2V9IiwiZWxlbWVudG9yX3VybCI6Imh0dHBzOlwvXC92Ni52b2lyYW5pbWUuY29tXC8/YXNwX2xzPXtwaHJhc2V9In0sInJiIjp7ImFjdGlvbiI6Im5vdGhpbmcifSwiYW5pbWF0aW9ucyI6eyJwYyI6eyJzZXR0aW5ncyI6eyJhbmltIjoiZmFkZWRyb3AiLCJkdXIiOjMwMH0sInJlc3VsdHMiOnsiYW5pbSI6ImZhZGVkcm9wIiwiZHVyIjozMDB9LCJpdGVtcyI6ImZhZGVJbkRvd24ifSwibW9iIjp7InNldHRpbmdzIjp7ImFuaW0iOiJmYWRlZHJvcCIsImR1ciI6MzAwfSwicmVzdWx0cyI6eyJhbmltIjoiZmFkZWRyb3AiLCJkdXIiOjMwMH0sIml0ZW1zIjoidm9pZGFuaW0ifX0sInNlbGVjdDIiOnsibm9yZXMiOiJObyByZXN1bHRzIG1hdGNoIn0sImRldGVjdFZpc2liaWxpdHkiOjAsImF1dG9wIjp7InN0YXRlIjoiZGlzYWJsZWQiLCJwaHJhc2UiOiIiLCJjb3VudCI6MTB9LCJ3b29TaG9wIjp7InVzZUFqYXgiOjAsInNlbGVjdG9yIjoiI21haW4iLCJ1cmwiOiIifSwidGF4QXJjaGl2ZSI6eyJ1c2VBamF4IjowLCJzZWxlY3RvciI6IiNtYWluIiwidXJsIjoiIn0sImNwdEFyY2hpdmUiOnsidXNlQWpheCI6MCwic2VsZWN0b3IiOiIjbWFpbiIsInVybCI6IiJ9LCJyZXNQYWdlIjp7InVzZUFqYXgiOjAsInNlbGVjdG9yIjoiI21haW4iLCJ0cmlnZ2VyX3R5cGUiOjEsInRyaWdnZXJfZmFjZXQiOjEsInRyaWdnZXJfbWFnbmlmaWVyIjowLCJ0cmlnZ2VyX3JldHVybiI6MH0sImZzc19sYXlvdXQiOiJmbGV4Iiwic2Nyb2xsQmFyIjp7Imhvcml6b250YWwiOnsiZW5hYmxlZCI6MX19LCJkaXZpIjp7ImJvZHljb21tZXJjZSI6MH0sInByZXZlbnRCb2R5U2Nyb2xsIjoxLCJzdGF0aXN0aWNzIjowLCJwcmV2ZW50RXZlbnRzIjowfQ==">
                    </div>
                    <div class="asp_hidden_data" style="display:none !important;">
                      <div class="asp_item_overlay">
                        <div class="asp_item_inner"><svg xmlns="http://www.w3.org/2000/svg" width="22" height="22"
                            viewBox="0 0 512 512">
                            <path
                              d="M448.225 394.243l-85.387-85.385c16.55-26.08 26.146-56.986 26.146-90.094 0-92.99-75.652-168.64-168.643-168.64-92.988 0-168.64 75.65-168.64 168.64s75.65 168.64 168.64 168.64c31.466 0 60.94-8.67 86.176-23.734l86.14 86.142c36.755 36.754 92.355-18.783 55.57-55.57zm-344.233-175.48c0-64.155 52.192-116.35 116.35-116.35s116.353 52.194 116.353 116.35S284.5 335.117 220.342 335.117s-116.35-52.196-116.35-116.352zm34.463-30.26c34.057-78.9 148.668-69.75 170.248 12.863-43.482-51.037-119.984-56.532-170.248-12.862z">
                            </path>
                          </svg></div>
                      </div>
                    </div>
                  </div>
                  <div id="__original__ajaxsearchprores3_1"
                    class="asp_w asp_r asp_r_3 asp_r_3_1 vertical ajaxsearchpro wpdreams_asp_sc wpdreams_asp_sc-3"
                    data-id="3" data-instance="1">
                    <div class="results">
                      <div class="resdrg"></div>
                    </div>
                    <div class="asp_res_loader hiddend">
                      <div class="asp_loader">
                        <div class="asp_loader-inner asp_ball-scale">
                          <div></div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div id="__original__ajaxsearchprosettings3_1"
                    class="asp_w asp_ss asp_ss_3 asp_s asp_s_3 asp_s_3_1 wpdreams_asp_sc wpdreams_asp_sc-3 ajaxsearchpro searchsettings"
                    data-id="3" data-instance="1">
                    <form name="options" class="asp-fss-flex" aria-label="Search settings form" autocomplete="off">
                      <input type="hidden" name="current_page_id" value="68475"><input type="hidden"
                        name="qtranslate_lang" value="0"><input type="hidden" name="filters_changed" value="0"><input
                        type="hidden" name="filters_initial" value="1">
                      <fieldset class="asp_filter_generic asp_filter_id_2 asp_filter_n_1">
                        <legend>Generic filters</legend>
                        <div class="asp_option" tabindex="0">
                          <div class="asp_option_inner"><input type="checkbox" value="exact" id="set_exact3_1"
                              aria-label="Exact matches only" name="asp_gen[]">
                            <div class="asp_option_checkbox"></div>
                          </div>
                          <div class="asp_option_label"> Exact matches only </div>
                        </div>
                        <div class="asp_option" tabindex="0">
                          <div class="asp_option_inner"><input type="checkbox" value="title" id="set_title3_1"
                              data-origvalue="1" aria-label="Search in title" name="asp_gen[]" checked="checked">
                            <div class="asp_option_checkbox"></div>
                          </div>
                          <div class="asp_option_label"> Search in title </div>
                        </div>
                        <div class="asp_option" tabindex="0">
                          <div class="asp_option_inner"><input type="checkbox" value="content" id="set_content3_1"
                              aria-label="Search in content" name="asp_gen[]">
                            <div class="asp_option_checkbox"></div>
                          </div>
                          <div class="asp_option_label"> Search in content </div>
                        </div>
                        <div class="asp_option" tabindex="0">
                          <div class="asp_option_inner"><input type="checkbox" value="excerpt" id="set_excerpt3_1"
                              aria-label="Search in excerpt" name="asp_gen[]">
                            <div class="asp_option_checkbox"></div>
                          </div>
                          <div class="asp_option_label"> Search in excerpt </div>
                        </div>
                      </fieldset><input type="hidden" value="vf" data-origvalue="vf" id="aspf3_11[vf__1]"
                        name="aspf[vf__1]">
                      <div style="clear:both;"></div>
                    </form>
                  </div>
                </div>
              </div>
            </li>
          </ul>
          <div class="main-navigation style-1 ">
            <div class="container ">
              <div class="row">
                <div class="col-md-12">
                  <div class="main-navigation_wrap">
                    <div class="wrap_branding">
                      <a class="logo" href="https://v6.voiranime.com/" title="Voiranime">
                        <img class="img-responsive" src="https://voiranime.com/wp-content/uploads/2019/12/vato.png"
                          alt="Voiranime">
                      </a>
                    </div>

                    <div class="main-menu">
                      <ul class="nav navbar-nav main-navbar">
                        <li id="menu-item-915"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-home menu-item-915">
                          <a href="https://v6.voiranime.com/">ACCUEIL</a></li>
                        <li id="menu-item-48192"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-48192"><a
                            href="https://v6.voiranime.com/liste-danimes/">LISTE</a></li>
                        <li id="menu-item-88326"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-88326"><a
                            href="https://v6.voiranime.com/nouveaux-ajouts/">NOUVEAU</a></li>
                        <li id="menu-item-53504"
                          class="menu-item menu-item-type-post_type menu-item-object-page menu-item-53504"><a
                            href="https://v6.voiranime.com/prochainement/">BIENTOT</a></li>
                        <li id="menu-item-2061"
                          class="menu-item menu-item-type-custom menu-item-object-custom menu-item-2061"><a
                            href="https://v6.voiranime.com/?s=&amp;post_type=wp-manga">RECHERCHE AV</a></li>
                        <li id="menu-item-92149"
                          class="menu-item menu-item-type-custom menu-item-object-custom menu-item-92149"><a
                            href="https://voirdrama.org/">VOIRDRAMA</a></li>
                      </ul>
                    </div>

                    <div class="search-navigation search-sidebar">


                      <div class="search-navigation__wrap">
                        <ul class="main-menu-search nav-menu">
                          <li class="menu-search">
                            <a href="javascript:;" class="open-search-main-menu"> <i class="icon ion-ios-search"></i>
                              <i class="icon ion-android-close"></i> </a>

                          </li>
                        </ul>
                      </div>

                    </div>
                    <div class="c-togle__menu">
                      <button type="button" class="menu_icon__open">
                        <span></span> <span></span> <span></span>
                      </button>
                    </div>

                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>


        <div class="mobile-menu menu-collapse off-canvas">
          <div class="close-nav">
            <button class="menu_icon__close">
              <span></span> <span></span>
            </button>
          </div>


          <nav class="off-menu">
            <ul id="menu-main-menu-1" class="nav navbar-nav main-navbar">
              <li id="nav-menu-item-915"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type menu-item-object-page menu-item-home">
                <a href="https://v6.voiranime.com/" class="menu-link  main-menu-link">ACCUEIL </a></li>
              <li id="nav-menu-item-48192"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type menu-item-object-page"><a
                  href="https://v6.voiranime.com/liste-danimes/" class="menu-link  main-menu-link">LISTE </a></li>
              <li id="nav-menu-item-88326"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type menu-item-object-page"><a
                  href="https://v6.voiranime.com/nouveaux-ajouts/" class="menu-link  main-menu-link">NOUVEAU </a></li>
              <li id="nav-menu-item-53504"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-post_type menu-item-object-page"><a
                  href="https://v6.voiranime.com/prochainement/" class="menu-link  main-menu-link">BIENTOT </a></li>
              <li id="nav-menu-item-2061"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-custom menu-item-object-custom"><a
                  href="https://v6.voiranime.com/?s=&amp;post_type=wp-manga" class="menu-link  main-menu-link">RECHERCHE
                  AV </a></li>
              <li id="nav-menu-item-92149"
                class="main-menu-item menu-item-depth-0 menu-item menu-item-type-custom menu-item-object-custom"><a
                  href="https://voirdrama.org/" class="menu-link  main-menu-link">VOIRDRAMA </a></li>
            </ul>
          </nav>

          <div class="center"></div>
        </div>
        <div class="clone-header"></div>
        <div class=" c-sub-header-nav with-border  ">
          <div class="container ">
            <div class="c-sub-nav_wrap">
              <div class="sub-nav_content">


                <ul class="sub-nav_list list-inline second-menu">
                  <li id="menu-item-62593"
                    class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62593"><a
                      href="https://v6.voiranime.com/anime-genre/action/">Action</a></li>
                  <li id="menu-item-62594"
                    class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62594"><a
                      href="https://v6.voiranime.com/anime-genre/adventure/">Adventure</a></li>
                  <li id="menu-item-62595"
                    class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62595"><a
                      href="https://v6.voiranime.com/anime-genre/chinese/">Chinese</a></li>
                  <li id="menu-item-62596"
                    class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre current-wp-manga-ancestor current-menu-parent current-wp-manga-parent menu-item-62596">
                    <a href="https://v6.voiranime.com/anime-genre/comedy/">Comedy</a></li>
                  <li id="menu-item-62597"
                    class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62597"><a
                      href="https://v6.voiranime.com/anime-genre/drama/">Drama</a></li>
                  <li id="menu-item-62598"
                    class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62598"><a
                      href="https://v6.voiranime.com/anime-genre/ecchi/">Ecchi</a></li>
                  <li id="menu-item-62612"
                    class="menu-item menu-item-type-custom menu-item-object-custom menu-item-has-children parent menu-item-62612">
                    <a href="#">Plus</a>
                    <ul class="sub-menu">
                      <li id="menu-item-62599"
                        class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62599"><a
                          href="https://v6.voiranime.com/anime-genre/fantasy/">Fantasy</a></li>
                      <li id="menu-item-62600"
                        class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62600"><a
                          href="https://v6.voiranime.com/anime-genre/horror/">Horror</a></li>
                      <li id="menu-item-62601"
                        class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62601"><a
                          href="https://v6.voiranime.com/anime-genre/mahou-shoujo/">Mahou Shoujo</a></li>
                      <li id="menu-item-62602"
                        class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62602"><a
                          href="https://v6.voiranime.com/anime-genre/mecha/">Mecha</a></li>
                      <li id="menu-item-62603"
                        class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62603"><a
                          href="https://v6.voiranime.com/anime-genre/music/">Music</a></li>
                      <li id="menu-item-62604"
                        class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62604"><a
                          href="https://v6.voiranime.com/anime-genre/mystery/">Mystery</a></li>
                      <li id="menu-item-62605"
                        class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62605"><a
                          href="https://v6.voiranime.com/anime-genre/psychological/">Psychological</a></li>
                      <li id="menu-item-62606"
                        class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre current-wp-manga-ancestor current-menu-parent current-wp-manga-parent menu-item-62606">
                        <a href="https://v6.voiranime.com/anime-genre/romance/">Romance</a></li>
                      <li id="menu-item-62607"
                        class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62607"><a
                          href="https://v6.voiranime.com/anime-genre/sci-fi/">Sci-Fi</a></li>
                      <li id="menu-item-62608"
                        class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62608"><a
                          href="https://v6.voiranime.com/anime-genre/slice-of-life/">Slice of Life</a></li>
                      <li id="menu-item-62609"
                        class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62609"><a
                          href="https://v6.voiranime.com/anime-genre/sports/">Sports</a></li>
                      <li id="menu-item-62610"
                        class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62610"><a
                          href="https://v6.voiranime.com/anime-genre/supernatural/">Supernatural</a></li>
                      <li id="menu-item-62611"
                        class="menu-item menu-item-type-taxonomy menu-item-object-wp-manga-genre menu-item-62611"><a
                          href="https://v6.voiranime.com/anime-genre/thriller/">Thriller</a></li>
                    </ul>
                  </li>

                  <i class="mobile-icon icon ion-md-more"></i>

                </ul>
              </div>

            </div>

          </div>
        </div>


      </header>




      <div class="site-content">
        <div class="c-page-content style-1 reading-content-wrap chapter-type-video"
          data-site-url="https://v6.voiranime.com/">
          <div class="content-area">
            <div class="container">
              <div class="row">
                <div class="main-col col-md-12 col-sm-12 sidebar-hidden">

                  <!-- container & no-sidebar-->
                  <div class="main-col-inner">
                    <div class="c-blog-post">
                      <div class="entry-header header" id="manga-reading-nav-head" data-position="header"
                        data-chapter="kujibiki-unbalance-oav2-vostfr" data-id="68475">
                        <div class="wp-manga-nav">
                          <div class="entry-header_wrap">

                            <div class="c-breadcrumb-wrapper">


                              <div class="c-breadcrumb">
                                <ol class="breadcrumb">
                                  <li>
                                    <a href="https://v6.voiranime.com/">
                                      Home </a>
                                  </li>


                                  <li>
                                    <a href="https://v6.voiranime.com/anime/kujibiki-unbalance/">
                                      Kujibiki Unbalance </a>
                                  </li>

                                  <li class="active">
                                    Kujibiki Unbalance - OAV2 VOSTFR - OAV2 </li>

                                </ol>
                              </div>

                              <div class="action-icon">
                                <ul class="action_list_icon list-inline">
                                </ul>
                              </div>
                            </div>

                          </div>

                          <div class="select-view">

                            <!-- select host -->
                            <div class="c-selectpicker selectpicker_version">
                              <label>
                                <select class="selectpicker host-select">
                                  <option
                                    data-redirect="/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/?host=LECTEUR myTV"
                                    value="LECTEUR myTV">LECTEUR myTV</option>
                                  <option
                                    data-redirect="/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/?host=LECTEUR MOON"
                                    value="LECTEUR MOON">LECTEUR MOON</option>
                                  <option
                                    data-redirect="/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/?host=LECTEUR SB"
                                    value="LECTEUR SB">LECTEUR SB</option>
                                  <option
                                    data-redirect="/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/?host=LECTEUR VOE"
                                    value="LECTEUR VOE">LECTEUR VOE</option>
                                  <option
                                    data-redirect="/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/?host=LECTEUR Stape"
                                    value="LECTEUR Stape">LECTEUR Stape</option>
                                  <option
                                    data-redirect="/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/?host=LECTEUR FHD1"
                                    value="LECTEUR FHD1">LECTEUR FHD1</option>
                                  <option
                                    data-redirect="/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/?host=LECTEUR YU"
                                    value="LECTEUR YU">LECTEUR YU</option>
                                </select> </label>
                            </div>

                            <!-- select volume -->


                            <!-- select chapter -->
                            <div class="c-selectpicker selectpicker_chapter chapters_selectbox_holder"
                              data-manga="68475" data-chapter="kujibiki-unbalance-oav2-vostfr" data-vol="0"
                              data-type="content">
                              <label>
                                <select class="c-selectpicker selectpicker_chapter selectpicker single-chapter-select"
                                  style="" for="volume-id-0">
                                  <option class="short " data-limit="40" value="kujibiki-unbalance-oav2-vostfr"
                                    data-redirect="https://v6.voiranime.com/anime/kujibiki-unbalance/kujibiki-unbalance-oav3-vostfr/">
                                    OAV3</option>

                                  <option class="short " data-limit="40" value="kujibiki-unbalance-oav2-vostfr"
                                    data-redirect="https://v6.voiranime.com/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/"
                                    selected="selected">OAV2</option>

                                  <option class="short " data-limit="40" value="kujibiki-unbalance-oav2-vostfr"
                                    data-redirect="https://v6.voiranime.com/anime/kujibiki-unbalance/kujibiki-unbalance-oav1-vostfr/">
                                    OAV1</option>

                                </select>
                              </label>
                            </div>

                            <a href="#chapter-video-frame" class="video-light" data-lity=""><i
                                class="fas fa-lightbulb"></i> <span class="text text-off">Light off</span> <span
                                class="text text-on">Light on</span></a>

                          </div>

                          <div class="select-pagination">
                            <div class="nav-links">
                              <div class="nav-previous "><a
                                  href="https://v6.voiranime.com/anime/kujibiki-unbalance/kujibiki-unbalance-oav1-vostfr/"
                                  class="btn prev_page" title="OAV1">Prev</a>
                              </div>
                              <div class="nav-next "><a
                                  href="https://v6.voiranime.com/anime/kujibiki-unbalance/kujibiki-unbalance-oav3-vostfr/"
                                  class="btn next_page" title="OAV3">Next</a></div>
                            </div>
                          </div>

                        </div>

                      </div>
                      <div class="entry-content">
                        <div class="entry-content_wrap">

                          <div class="read-container">


                            <div class="reading-content">
                              <input type="hidden" id="wp-manga-current-chap" data-id="61259"
                                value="kujibiki-unbalance-oav2-vostfr">


                              <div class="chapter-video-frame" id="chapter-video-frame">

                                <div class="chapter-video-content-validator">
                                  <script src="https://www.google.com/recaptcha/api.js?hl=fr"></script>
                                  <p></p>
                                  <form id="chapter-video-captcha-validator"
                                    action="https://v6.voiranime.com/wp-admin/admin-ajax.php"
                                    data-error-msg="Please check on reCaptcha">
                                    <p></p>
                                    <div class="g-recaptcha" data-sitekey="6Lfd5wobAAAAACjTkOIXohTrPz9RIhNwRqRq2_R9"
                                      data-callback="enableSubmitreCaptchaBtn"
                                      data-expired-callback="disableSubmitreCaptchaBtn"
                                      data-error-callback="disableSubmitreCaptchaBtn">
                                      <div style="width: 304px; height: 78px;">
                                        <div><iframe title="reCAPTCHA" width="304" height="78" role="presentation"
                                            name="a-uubpbdajm1yg" frameborder="0" scrolling="no"
                                            sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
                                            src="https://www.google.com/recaptcha/api2/anchor?ar=1&amp;k=6Lfd5wobAAAAACjTkOIXohTrPz9RIhNwRqRq2_R9&amp;co=aHR0cHM6Ly92Ni52b2lyYW5pbWUuY29tOjQ0Mw..&amp;hl=fr&amp;v=zIriijn3uj5Vpknvt_LnfNbF&amp;size=normal&amp;cb=ir9p3pvf86he"></iframe>
                                        </div><textarea id="g-recaptcha-response" name="g-recaptcha-response"
                                          class="g-recaptcha-response"
                                          style="width: 250px; height: 40px; border: 1px solid rgb(193, 193, 193); margin: 10px 25px; padding: 0px; resize: none; display: none;"></textarea>
                                      </div><iframe style="display: none;"></iframe>
                                    </div>
                                    <p> <button class="btn" type="submit" disabled="">Valider</button></p>
                                    <div class="mt-4 text-center text-white">
                                      <p>By clicking “Valider”, you acknowledge that Popup ads will appear when you
                                        click the play button before the video starts</p>
                                    </div>
                                  </form>
                                  <p></p>
                                </div>
                              </div>

                              <script>
                                var thisChapterSources = { "LECTEUR myTV": "\t\t\t\t<div class=\"chapter-video-content-validator\">\n\t\t\t\t\t<script src=\"https:\/\/www.google.com\/recaptcha\/api.js?hl=fr\"><\/script>\n\t\t\t\t\t<form \n\t\t\t\t\t\tid=\"chapter-video-captcha-validator\"\n\t\t\t\t\t\taction=\"https:\/\/v6.voiranime.com\/wp-admin\/admin-ajax.php\"\n\t\t\t\t\t\tdata-error-msg=\"Please check on reCaptcha\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\tclass=\"g-recaptcha\" \n\t\t\t\t\t\t\tdata-sitekey=\"6Lfd5wobAAAAACjTkOIXohTrPz9RIhNwRqRq2_R9\" \n\t\t\t\t\t\t\tdata-callback=\"enableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t\tdata-expired-callback=\"disableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t\tdata-error-callback=\"disableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t<button class=\"btn\" type=\"submit\" disabled>Valider<\/button>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"mt-4 text-center text-white\"><p>By clicking \"Valider\", you acknowledge that Popup ads will appear when you click the play button before the video starts<\/p><\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/form>\n\t\t\t\t<\/div>\n\t\t\t", "LECTEUR MOON": "\t\t\t\t<div class=\"chapter-video-content-validator\">\n\t\t\t\t\t<script src=\"https:\/\/www.google.com\/recaptcha\/api.js?hl=fr\"><\/script>\n\t\t\t\t\t<form \n\t\t\t\t\t\tid=\"chapter-video-captcha-validator\"\n\t\t\t\t\t\taction=\"https:\/\/v6.voiranime.com\/wp-admin\/admin-ajax.php\"\n\t\t\t\t\t\tdata-error-msg=\"Please check on reCaptcha\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\tclass=\"g-recaptcha\" \n\t\t\t\t\t\t\tdata-sitekey=\"6Lfd5wobAAAAACjTkOIXohTrPz9RIhNwRqRq2_R9\" \n\t\t\t\t\t\t\tdata-callback=\"enableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t\tdata-expired-callback=\"disableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t\tdata-error-callback=\"disableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t<button class=\"btn\" type=\"submit\" disabled>Valider<\/button>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"mt-4 text-center text-white\"><p>By clicking \"Valider\", you acknowledge that Popup ads will appear when you click the play button before the video starts<\/p><\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/form>\n\t\t\t\t<\/div>\n\t\t\t", "LECTEUR SB": "\t\t\t\t<div class=\"chapter-video-content-validator\">\n\t\t\t\t\t<script src=\"https:\/\/www.google.com\/recaptcha\/api.js?hl=fr\"><\/script>\n\t\t\t\t\t<form \n\t\t\t\t\t\tid=\"chapter-video-captcha-validator\"\n\t\t\t\t\t\taction=\"https:\/\/v6.voiranime.com\/wp-admin\/admin-ajax.php\"\n\t\t\t\t\t\tdata-error-msg=\"Please check on reCaptcha\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\tclass=\"g-recaptcha\" \n\t\t\t\t\t\t\tdata-sitekey=\"6Lfd5wobAAAAACjTkOIXohTrPz9RIhNwRqRq2_R9\" \n\t\t\t\t\t\t\tdata-callback=\"enableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t\tdata-expired-callback=\"disableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t\tdata-error-callback=\"disableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t<button class=\"btn\" type=\"submit\" disabled>Valider<\/button>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"mt-4 text-center text-white\"><p>By clicking \"Valider\", you acknowledge that Popup ads will appear when you click the play button before the video starts<\/p><\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/form>\n\t\t\t\t<\/div>\n\t\t\t", "LECTEUR VOE": "\t\t\t\t<div class=\"chapter-video-content-validator\">\n\t\t\t\t\t<script src=\"https:\/\/www.google.com\/recaptcha\/api.js?hl=fr\"><\/script>\n\t\t\t\t\t<form \n\t\t\t\t\t\tid=\"chapter-video-captcha-validator\"\n\t\t\t\t\t\taction=\"https:\/\/v6.voiranime.com\/wp-admin\/admin-ajax.php\"\n\t\t\t\t\t\tdata-error-msg=\"Please check on reCaptcha\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\tclass=\"g-recaptcha\" \n\t\t\t\t\t\t\tdata-sitekey=\"6Lfd5wobAAAAACjTkOIXohTrPz9RIhNwRqRq2_R9\" \n\t\t\t\t\t\t\tdata-callback=\"enableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t\tdata-expired-callback=\"disableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t\tdata-error-callback=\"disableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t<button class=\"btn\" type=\"submit\" disabled>Valider<\/button>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"mt-4 text-center text-white\"><p>By clicking \"Valider\", you acknowledge that Popup ads will appear when you click the play button before the video starts<\/p><\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/form>\n\t\t\t\t<\/div>\n\t\t\t", "LECTEUR Stape": "\t\t\t\t<div class=\"chapter-video-content-validator\">\n\t\t\t\t\t<script src=\"https:\/\/www.google.com\/recaptcha\/api.js?hl=fr\"><\/script>\n\t\t\t\t\t<form \n\t\t\t\t\t\tid=\"chapter-video-captcha-validator\"\n\t\t\t\t\t\taction=\"https:\/\/v6.voiranime.com\/wp-admin\/admin-ajax.php\"\n\t\t\t\t\t\tdata-error-msg=\"Please check on reCaptcha\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\tclass=\"g-recaptcha\" \n\t\t\t\t\t\t\tdata-sitekey=\"6Lfd5wobAAAAACjTkOIXohTrPz9RIhNwRqRq2_R9\" \n\t\t\t\t\t\t\tdata-callback=\"enableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t\tdata-expired-callback=\"disableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t\tdata-error-callback=\"disableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t<button class=\"btn\" type=\"submit\" disabled>Valider<\/button>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"mt-4 text-center text-white\"><p>By clicking \"Valider\", you acknowledge that Popup ads will appear when you click the play button before the video starts<\/p><\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/form>\n\t\t\t\t<\/div>\n\t\t\t", "LECTEUR FHD1": "\t\t\t\t<div class=\"chapter-video-content-validator\">\n\t\t\t\t\t<script src=\"https:\/\/www.google.com\/recaptcha\/api.js?hl=fr\"><\/script>\n\t\t\t\t\t<form \n\t\t\t\t\t\tid=\"chapter-video-captcha-validator\"\n\t\t\t\t\t\taction=\"https:\/\/v6.voiranime.com\/wp-admin\/admin-ajax.php\"\n\t\t\t\t\t\tdata-error-msg=\"Please check on reCaptcha\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\tclass=\"g-recaptcha\" \n\t\t\t\t\t\t\tdata-sitekey=\"6Lfd5wobAAAAACjTkOIXohTrPz9RIhNwRqRq2_R9\" \n\t\t\t\t\t\t\tdata-callback=\"enableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t\tdata-expired-callback=\"disableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t\tdata-error-callback=\"disableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t<button class=\"btn\" type=\"submit\" disabled>Valider<\/button>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"mt-4 text-center text-white\"><p>By clicking \"Valider\", you acknowledge that Popup ads will appear when you click the play button before the video starts<\/p><\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/form>\n\t\t\t\t<\/div>\n\t\t\t", "LECTEUR YU": "\t\t\t\t<div class=\"chapter-video-content-validator\">\n\t\t\t\t\t<script src=\"https:\/\/www.google.com\/recaptcha\/api.js?hl=fr\"><\/script>\n\t\t\t\t\t<form \n\t\t\t\t\t\tid=\"chapter-video-captcha-validator\"\n\t\t\t\t\t\taction=\"https:\/\/v6.voiranime.com\/wp-admin\/admin-ajax.php\"\n\t\t\t\t\t\tdata-error-msg=\"Please check on reCaptcha\">\n\t\t\t\t\t\t\n\t\t\t\t\t\t<div \n\t\t\t\t\t\t\tclass=\"g-recaptcha\" \n\t\t\t\t\t\t\tdata-sitekey=\"6Lfd5wobAAAAACjTkOIXohTrPz9RIhNwRqRq2_R9\" \n\t\t\t\t\t\t\tdata-callback=\"enableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t\tdata-expired-callback=\"disableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t\tdata-error-callback=\"disableSubmitreCaptchaBtn\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t<\/div>\n\t\t\t\t\t\t<button class=\"btn\" type=\"submit\" disabled>Valider<\/button>\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div class=\"mt-4 text-center text-white\"><p>By clicking \"Valider\", you acknowledge that Popup ads will appear when you click the play button before the video starts<\/p><\/div>\n\t\t\t\t\t\t\t\t\t\t\t<\/form>\n\t\t\t\t<\/div>\n\t\t\t" };
                                var defaultSources = { "mobile": "", "tablet": "" };
                                jQuery(document).ready(function ($) {
                                  $(document).on('change', 'select.host-select', function (e) {
                                    var selectHost = $(this).val();
                                    if (typeof thisChapterSources[selectHost] !== 'undefined') {
                                      e.preventDefault();
                                      e.stopImmediatePropagation();
                                      $('select.host-select').find(`option[value="${selectHost}"]`).prop('selected', true);
                                      $('.entry-content .reading-content .chapter-video-frame').html(thisChapterSources[selectHost]);
                                    }
                                  });
                                });
                              </script>



                            </div>



                          </div>


                        </div>
                      </div>
                      <div class="entry-header footer" id="manga-reading-nav-foot" data-position="footer"
                        data-id="68475">
                        <div class="wp-manga-nav">
                          <div class="select-view">

                            <!-- select host -->
                            <div class="c-selectpicker selectpicker_version">
                              <label>
                                <select class="selectpicker host-select">
                                  <option
                                    data-redirect="/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/?host=LECTEUR myTV"
                                    value="LECTEUR myTV">LECTEUR myTV</option>
                                  <option
                                    data-redirect="/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/?host=LECTEUR MOON"
                                    value="LECTEUR MOON">LECTEUR MOON</option>
                                  <option
                                    data-redirect="/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/?host=LECTEUR SB"
                                    value="LECTEUR SB">LECTEUR SB</option>
                                  <option
                                    data-redirect="/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/?host=LECTEUR VOE"
                                    value="LECTEUR VOE">LECTEUR VOE</option>
                                  <option
                                    data-redirect="/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/?host=LECTEUR Stape"
                                    value="LECTEUR Stape">LECTEUR Stape</option>
                                  <option
                                    data-redirect="/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/?host=LECTEUR FHD1"
                                    value="LECTEUR FHD1">LECTEUR FHD1</option>
                                  <option
                                    data-redirect="/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/?host=LECTEUR YU"
                                    value="LECTEUR YU">LECTEUR YU</option>
                                </select> </label>
                            </div>

                            <!-- select volume -->


                            <!-- select chapter -->
                            <div class="c-selectpicker selectpicker_chapter chapters_selectbox_holder"
                              data-manga="68475" data-chapter="kujibiki-unbalance-oav2-vostfr" data-vol="0"
                              data-type="content">
                              <label>
                                <select class="c-selectpicker selectpicker_chapter selectpicker single-chapter-select"
                                  style="" for="volume-id-0">
                                  <option class="short " data-limit="40" value="kujibiki-unbalance-oav2-vostfr"
                                    data-redirect="https://v6.voiranime.com/anime/kujibiki-unbalance/kujibiki-unbalance-oav3-vostfr/">
                                    OAV3</option>

                                  <option class="short " data-limit="40" value="kujibiki-unbalance-oav2-vostfr"
                                    data-redirect="https://v6.voiranime.com/anime/kujibiki-unbalance/kujibiki-unbalance-oav2-vostfr/"
                                    selected="selected">OAV2</option>

                                  <option class="short " data-limit="40" value="kujibiki-unbalance-oav2-vostfr"
                                    data-redirect="https://v6.voiranime.com/anime/kujibiki-unbalance/kujibiki-unbalance-oav1-vostfr/">
                                    OAV1</option>

                                </select>
                              </label>
                            </div>

                            <a href="#chapter-video-frame" class="video-light" data-lity=""><i
                                class="fas fa-lightbulb"></i> <span class="text text-off">Light off</span> <span
                                class="text text-on">Light on</span></a>

                          </div>

                          <div class="select-pagination">
                            <div class="nav-links">
                              <div class="nav-previous "><a
                                  href="https://v6.voiranime.com/anime/kujibiki-unbalance/kujibiki-unbalance-oav1-vostfr/"
                                  class="btn prev_page" title="OAV1">Prev</a>
                              </div>
                              <div class="nav-next "><a
                                  href="https://v6.voiranime.com/anime/kujibiki-unbalance/kujibiki-unbalance-oav3-vostfr/"
                                  class="btn next_page" title="OAV3">Next</a></div>
                            </div>
                          </div>

                        </div>

                      </div>
                    </div>


                    <div class="row ">
                      <div class="main-col col-12 col-sm-8 col-md-8 col-lg-8">
                        <!-- comments-area -->
                        <!-- END comments-area -->
                      </div>

                      <div class="sidebar-col col-md-4 col-sm-4">
                        <div id="main-sidebar" class="main-sidebar" role="complementary">
                          <div class="row">
                            <div id="block-5" class="widget col-12 col-md-12   default no-icon  widget_block">
                              <div class="widget__inner widget_block__inner c-widget-wrap">
                                <div class="widget-content">
                                  <p></p>
                                  <div class="asp_w_container asp_w_container_4 asp_w_container_4_2" data-id="4"
                                    data-instance="2">
                                    <div
                                      class="asp_w asp_m asp_m_4 asp_m_4_2 wpdreams_asp_sc wpdreams_asp_sc-4 ajaxsearchpro asp_main_container asp_non_compact"
                                      data-id="4" data-name="classic VOSTFR" data-instance="2" id="ajaxsearchpro4_2">
                                      <div class="probox">
                                        <div class="prosettings" style="display:none;" data-opened="0">
                                          <div class="innericon"><svg xmlns="http://www.w3.org/2000/svg" width="22"
                                              height="22" viewBox="0 0 512 512">
                                              <polygon transform="rotate(90 256 256)"
                                                points="142.332,104.886 197.48,50 402.5,256 197.48,462 142.332,407.113 292.727,256">
                                              </polygon>
                                            </svg></div>
                                        </div>
                                        <div class="proinput">
                                          <form role="search" action="#" autocomplete="off" aria-label="Search form">
                                            <input type="search" class="orig" placeholder="Rechercher en VOSTFR..."
                                              name="phrase" value="" aria-label="Search input" autocomplete="off"><input
                                              type="text" class="autocomplete" name="phrase" value=""
                                              aria-label="Search autocomplete input" aria-hidden="true" tabindex="-1"
                                              autocomplete="off" disabled=""></form>
                                        </div><button class="promagnifier" aria-label="Search magnifier button"><span
                                            class="asp_text_button hiddend"> Search </span><span class="innericon"><svg
                                              xmlns="http://www.w3.org/2000/svg" width="22" height="22"
                                              viewBox="0 0 512 512">
                                              <path
                                                d="M448.225 394.243l-85.387-85.385c16.55-26.08 26.146-56.986 26.146-90.094 0-92.99-75.652-168.64-168.643-168.64-92.988 0-168.64 75.65-168.64 168.64s75.65 168.64 168.64 168.64c31.466 0 60.94-8.67 86.176-23.734l86.14 86.142c36.755 36.754 92.355-18.783 55.57-55.57zm-344.233-175.48c0-64.155 52.192-116.35 116.35-116.35s116.353 52.194 116.353 116.35S284.5 335.117 220.342 335.117s-116.35-52.196-116.35-116.352zm34.463-30.26c34.057-78.9 148.668-69.75 170.248 12.863-43.482-51.037-119.984-56.532-170.248-12.862z">
                                              </path>
                                            </svg></span><span class="asp_clear"></span></button>
                                        <div class="proloading">
                                          <div class="asp_loader">
                                            <div class="asp_loader-inner asp_ball-scale">
                                              <div></div>
                                            </div>
                                          </div>
                                        </div>
                                        <div class="proclose"><svg version="1.1" xmlns="http://www.w3.org/2000/svg"
                                            xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="512px"
                                            height="512px" viewBox="0 0 512 512" enable-background="new 0 0 512 512"
                                            xml:space="preserve">
                                            <polygon
                                              points="438.393,374.595 319.757,255.977 438.378,137.348 374.595,73.607 255.995,192.225 137.375,73.622 73.607,137.352 192.246,255.983 73.622,374.625 137.352,438.393 256.002,319.734 374.652,438.378 ">
                                            </polygon>
                                          </svg></div>
                                      </div>
                                    </div>
                                    <div class="asp_data_container" style="display:none !important;">
                                      <div class="asp_init_data" style="display:none !important;" id="asp_init_id_4_2"
                                        data-asp-id="4" data-asp-instance="2"
                                        data-aspdata="eyJob21ldXJsIjoiaHR0cHM6XC9cL3Y2LnZvaXJhbmltZS5jb21cLyIsImlzX3Jlc3VsdHNfcGFnZSI6MCwicmVzdWx0c3R5cGUiOiJ2ZXJ0aWNhbCIsInJlc3VsdHNwb3NpdGlvbiI6ImhvdmVyIiwicmVzdWx0c1NuYXBUbyI6ImxlZnQiLCJyZXN1bHRzIjp7IndpZHRoIjoiYXV0byIsIndpZHRoX3RhYmxldCI6ImF1dG8iLCJ3aWR0aF9waG9uZSI6ImF1dG8ifSwiaXRlbXNjb3VudCI6NCwiY2hhcmNvdW50IjoyLCJoaWdobGlnaHQiOjAsImhpZ2hsaWdodFdob2xld29yZHMiOjEsInNpbmdsZUhpZ2hsaWdodCI6MCwic2Nyb2xsVG9SZXN1bHRzIjp7ImVuYWJsZWQiOjAsIm9mZnNldCI6MH0sImF1dG9jb21wbGV0ZSI6eyJlbmFibGVkIjoxLCJ0cmlnZ2VyX2NoYXJjb3VudCI6MCwiZ29vZ2xlT25seSI6MSwibGFuZyI6ImVuIiwibW9iaWxlIjoxfSwidHJpZ2dlciI6eyJkZWxheSI6MzAwLCJhdXRvY29tcGxldGVfZGVsYXkiOjMxMCwidXBkYXRlX2hyZWYiOjAsImZhY2V0IjoxLCJ0eXBlIjoxLCJjbGljayI6ImFqYXhfc2VhcmNoIiwiY2xpY2tfbG9jYXRpb24iOiJzYW1lIiwicmV0dXJuIjoibm90aGluZyIsInJldHVybl9sb2NhdGlvbiI6InNhbWUiLCJyZWRpcmVjdF91cmwiOiI/cz17cGhyYXNlfSZwb3N0X3R5cGU9d3AtbWFuZ2Emb3A9JmF1dGhvcj0mYXJ0aXN0PSZyZWxlYXNlPSZhZHVsdD0mdHlwZT0mbGFuZ3VhZ2U9IiwiZWxlbWVudG9yX3VybCI6Imh0dHBzOlwvXC92Ni52b2lyYW5pbWUuY29tXC8/YXNwX2xzPXtwaHJhc2V9In0sIm92ZXJyaWRld3BkZWZhdWx0IjowLCJvdmVycmlkZV9tZXRob2QiOiJnZXQiLCJzZXR0aW5ncyI6eyJ1bnNlbGVjdENoaWxkcmVuIjoxLCJoaWRlQ2hpbGRyZW4iOjB9LCJzZXR0aW5nc2ltYWdlcG9zIjoicmlnaHQiLCJzZXR0aW5nc1Zpc2libGUiOjAsInNldHRpbmdzSGlkZU9uUmVzIjowLCJwcmVzY29udGFpbmVyaGVpZ2h0IjoiNDAwcHgiLCJjbG9zZU9uRG9jQ2xpY2siOjEsImZvY3VzT25QYWdlbG9hZCI6MCwiaXNvdG9waWMiOnsiaXRlbVdpZHRoIjoiMjAwcHgiLCJpdGVtV2lkdGhUYWJsZXQiOiIyMDBweCIsIml0ZW1XaWR0aFBob25lIjoiMjAwcHgiLCJpdGVtSGVpZ2h0IjoiMjAwcHgiLCJpdGVtSGVpZ2h0VGFibGV0IjoiMjAwcHgiLCJpdGVtSGVpZ2h0UGhvbmUiOiIyMDBweCIsInBhZ2luYXRpb24iOjEsInJvd3MiOjIsImd1dHRlciI6NSwic2hvd092ZXJsYXkiOjEsImJsdXJPdmVybGF5IjoxLCJoaWRlQ29udGVudCI6MX0sImxvYWRlckxvY2F0aW9uIjoiYXV0byIsInNob3dfbW9yZSI6eyJlbmFibGVkIjowLCJ1cmwiOiI/cz17cGhyYXNlfSIsImVsZW1lbnRvcl91cmwiOiJodHRwczpcL1wvdjYudm9pcmFuaW1lLmNvbVwvP2FzcF9scz17cGhyYXNlfSIsImFjdGlvbiI6ImFqYXgiLCJsb2NhdGlvbiI6InNhbWUiLCJpbmZpbml0ZSI6MX0sIm1vYmlsZSI6eyJ0cmlnZ2VyX29uX3R5cGUiOjEsImNsaWNrX2FjdGlvbiI6ImFqYXhfc2VhcmNoIiwicmV0dXJuX2FjdGlvbiI6Im5vdGhpbmciLCJjbGlja19hY3Rpb25fbG9jYXRpb24iOiJzYW1lIiwicmV0dXJuX2FjdGlvbl9sb2NhdGlvbiI6InNhbWUiLCJyZWRpcmVjdF91cmwiOiI/cz17cGhyYXNlfSZwb3N0X3R5cGU9d3AtbWFuZ2Emb3A9JmF1dGhvcj0mYXJ0aXN0PSZyZWxlYXNlPSZhZHVsdD0mdHlwZT0mbGFuZ3VhZ2U9IiwiZWxlbWVudG9yX3VybCI6Imh0dHBzOlwvXC92Ni52b2lyYW5pbWUuY29tXC8/YXNwX2xzPXtwaHJhc2V9IiwibWVudV9zZWxlY3RvciI6IiNtZW51LXRvZ2dsZSIsImhpZGVfa2V5Ym9hcmQiOjEsImZvcmNlX3Jlc19ob3ZlciI6MCwiZm9yY2Vfc2V0dF9ob3ZlciI6MCwiZm9yY2Vfc2V0dF9zdGF0ZSI6Im5vbmUifSwiY29tcGFjdCI6eyJlbmFibGVkIjowLCJmb2N1cyI6MSwid2lkdGgiOiIxMDAlIiwid2lkdGhfdGFibGV0IjoiNDgwcHgiLCJ3aWR0aF9waG9uZSI6IjMyMHB4IiwiY2xvc2VPbk1hZ25pZmllciI6MSwiY2xvc2VPbkRvY3VtZW50IjowLCJwb3NpdGlvbiI6InN0YXRpYyIsIm92ZXJsYXkiOjB9LCJzYiI6eyJyZWRpcmVjdF9hY3Rpb24iOiJhamF4X3NlYXJjaCIsInJlZGlyZWN0X2xvY2F0aW9uIjoic2FtZSIsInJlZGlyZWN0X3VybCI6Ij9zPXtwaHJhc2V9IiwiZWxlbWVudG9yX3VybCI6Imh0dHBzOlwvXC92Ni52b2lyYW5pbWUuY29tXC8/YXNwX2xzPXtwaHJhc2V9In0sInJiIjp7ImFjdGlvbiI6Im5vdGhpbmcifSwiYW5pbWF0aW9ucyI6eyJwYyI6eyJzZXR0aW5ncyI6eyJhbmltIjoiZmFkZWRyb3AiLCJkdXIiOjMwMH0sInJlc3VsdHMiOnsiYW5pbSI6ImZhZGVkcm9wIiwiZHVyIjozMDB9LCJpdGVtcyI6ImZhZGVJbkRvd24ifSwibW9iIjp7InNldHRpbmdzIjp7ImFuaW0iOiJmYWRlZHJvcCIsImR1ciI6MzAwfSwicmVzdWx0cyI6eyJhbmltIjoiZmFkZWRyb3AiLCJkdXIiOjMwMH0sIml0ZW1zIjoidm9pZGFuaW0ifX0sInNlbGVjdDIiOnsibm9yZXMiOiJObyByZXN1bHRzIG1hdGNoIn0sImRldGVjdFZpc2liaWxpdHkiOjAsImF1dG9wIjp7InN0YXRlIjoiZGlzYWJsZWQiLCJwaHJhc2UiOiIiLCJjb3VudCI6MTB9LCJ3b29TaG9wIjp7InVzZUFqYXgiOjAsInNlbGVjdG9yIjoiI21haW4iLCJ1cmwiOiIifSwidGF4QXJjaGl2ZSI6eyJ1c2VBamF4IjowLCJzZWxlY3RvciI6IiNtYWluIiwidXJsIjoiIn0sImNwdEFyY2hpdmUiOnsidXNlQWpheCI6MCwic2VsZWN0b3IiOiIjbWFpbiIsInVybCI6IiJ9LCJyZXNQYWdlIjp7InVzZUFqYXgiOjAsInNlbGVjdG9yIjoiI21haW4iLCJ0cmlnZ2VyX3R5cGUiOjEsInRyaWdnZXJfZmFjZXQiOjEsInRyaWdnZXJfbWFnbmlmaWVyIjowLCJ0cmlnZ2VyX3JldHVybiI6MH0sImZzc19sYXlvdXQiOiJmbGV4Iiwic2Nyb2xsQmFyIjp7Imhvcml6b250YWwiOnsiZW5hYmxlZCI6MX19LCJkaXZpIjp7ImJvZHljb21tZXJjZSI6MH0sInByZXZlbnRCb2R5U2Nyb2xsIjoxLCJzdGF0aXN0aWNzIjowLCJwcmV2ZW50RXZlbnRzIjowfQ==">
                                      </div>
                                      <div class="asp_hidden_data" style="display:none !important;">
                                        <div class="asp_item_overlay">
                                          <div class="asp_item_inner"><svg xmlns="http://www.w3.org/2000/svg" width="22"
                                              height="22" viewBox="0 0 512 512">
                                              <path
                                                d="M448.225 394.243l-85.387-85.385c16.55-26.08 26.146-56.986 26.146-90.094 0-92.99-75.652-168.64-168.643-168.64-92.988 0-168.64 75.65-168.64 168.64s75.65 168.64 168.64 168.64c31.466 0 60.94-8.67 86.176-23.734l86.14 86.142c36.755 36.754 92.355-18.783 55.57-55.57zm-344.233-175.48c0-64.155 52.192-116.35 116.35-116.35s116.353 52.194 116.353 116.35S284.5 335.117 220.342 335.117s-116.35-52.196-116.35-116.352zm34.463-30.26c34.057-78.9 148.668-69.75 170.248 12.863-43.482-51.037-119.984-56.532-170.248-12.862z">
                                              </path>
                                            </svg></div>
                                        </div>
                                      </div>
                                    </div>
                                    <div id="__original__ajaxsearchprores4_2"
                                      class="asp_w asp_r asp_r_4 asp_r_4_2 vertical ajaxsearchpro wpdreams_asp_sc wpdreams_asp_sc-4"
                                      data-id="4" data-instance="2">
                                      <div class="results">
                                        <div class="resdrg"></div>
                                      </div>
                                      <div class="asp_res_loader hiddend">
                                        <div class="asp_loader">
                                          <div class="asp_loader-inner asp_ball-scale">
                                            <div></div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <div id="__original__ajaxsearchprosettings4_2"
                                      class="asp_w asp_ss asp_ss_4 asp_s asp_s_4 asp_s_4_2 wpdreams_asp_sc wpdreams_asp_sc-4 ajaxsearchpro searchsettings"
                                      data-id="4" data-instance="2">
                                      <form name="options" class="asp-fss-flex" aria-label="Search settings form"
                                        autocomplete="off"><input type="hidden" name="current_page_id"
                                          value="68475"><input type="hidden" name="qtranslate_lang" value="0"><input
                                          type="hidden" name="filters_changed" value="0"><input type="hidden"
                                          name="filters_initial" value="1">
                                        <fieldset class="asp_filter_generic asp_filter_id_2 asp_filter_n_1">
                                          <legend>Generic filters</legend>
                                          <div class="asp_option" tabindex="0">
                                            <div class="asp_option_inner"><input type="checkbox" value="exact"
                                                id="set_exact4_2" aria-label="Exact matches only" name="asp_gen[]">
                                              <div class="asp_option_checkbox"></div>
                                            </div>
                                            <div class="asp_option_label"> Exact matches only </div>
                                          </div>
                                          <div class="asp_option" tabindex="0">
                                            <div class="asp_option_inner"><input type="checkbox" value="title"
                                                id="set_title4_2" data-origvalue="1" aria-label="Search in title"
                                                name="asp_gen[]" checked="checked">
                                              <div class="asp_option_checkbox"></div>
                                            </div>
                                            <div class="asp_option_label"> Search in title </div>
                                          </div>
                                          <div class="asp_option" tabindex="0">
                                            <div class="asp_option_inner"><input type="checkbox" value="content"
                                                id="set_content4_2" data-origvalue="1" aria-label="Search in content"
                                                name="asp_gen[]" checked="checked">
                                              <div class="asp_option_checkbox"></div>
                                            </div>
                                            <div class="asp_option_label"> Search in content </div>
                                          </div>
                                          <div class="asp_option" tabindex="0">
                                            <div class="asp_option_inner"><input type="checkbox" value="excerpt"
                                                id="set_excerpt4_2" data-origvalue="1" aria-label="Search in excerpt"
                                                name="asp_gen[]" checked="checked">
                                              <div class="asp_option_checkbox"></div>
                                            </div>
                                            <div class="asp_option_label"> Search in excerpt </div>
                                          </div>
                                        </fieldset><input type="hidden" value="vf" data-origvalue="vf"
                                          id="aspf4_21[vf__1]" name="aspf[vf__1]">
                                        <div style="clear:both;"></div>
                                      </form>
                                    </div>
                                  </div><br>
                                  <div class="asp_w_container asp_w_container_3 asp_w_container_3_2" data-id="3"
                                    data-instance="2">
                                    <div
                                      class="asp_w asp_m asp_m_3 asp_m_3_2 wpdreams_asp_sc wpdreams_asp_sc-3 ajaxsearchpro asp_main_container asp_non_compact"
                                      data-id="3" data-name="classic VF" data-instance="2" id="ajaxsearchpro3_2">
                                      <div class="probox">
                                        <div class="prosettings" style="display:none;" data-opened="0">
                                          <div class="innericon"><svg xmlns="http://www.w3.org/2000/svg" width="22"
                                              height="22" viewBox="0 0 512 512">
                                              <polygon transform="rotate(90 256 256)"
                                                points="142.332,104.886 197.48,50 402.5,256 197.48,462 142.332,407.113 292.727,256">
                                              </polygon>
                                            </svg></div>
                                        </div>
                                        <div class="proinput">
                                          <form role="search" action="#" autocomplete="off" aria-label="Search form">
                                            <input type="search" class="orig" placeholder="Rechercher en VF..."
                                              name="phrase" value="" aria-label="Search input" autocomplete="off"><input
                                              type="text" class="autocomplete" name="phrase" value=""
                                              aria-label="Search autocomplete input" aria-hidden="true" tabindex="-1"
                                              autocomplete="off" disabled=""></form>
                                        </div><button class="promagnifier" aria-label="Search magnifier button"><span
                                            class="asp_text_button hiddend"> Search </span><span class="innericon"><svg
                                              xmlns="http://www.w3.org/2000/svg" width="22" height="22"
                                              viewBox="0 0 512 512">
                                              <path
                                                d="M448.225 394.243l-85.387-85.385c16.55-26.08 26.146-56.986 26.146-90.094 0-92.99-75.652-168.64-168.643-168.64-92.988 0-168.64 75.65-168.64 168.64s75.65 168.64 168.64 168.64c31.466 0 60.94-8.67 86.176-23.734l86.14 86.142c36.755 36.754 92.355-18.783 55.57-55.57zm-344.233-175.48c0-64.155 52.192-116.35 116.35-116.35s116.353 52.194 116.353 116.35S284.5 335.117 220.342 335.117s-116.35-52.196-116.35-116.352zm34.463-30.26c34.057-78.9 148.668-69.75 170.248 12.863-43.482-51.037-119.984-56.532-170.248-12.862z">
                                              </path>
                                            </svg></span><span class="asp_clear"></span></button>
                                        <div class="proloading">
                                          <div class="asp_loader">
                                            <div class="asp_loader-inner asp_ball-scale">
                                              <div></div>
                                            </div>
                                          </div>
                                        </div>
                                        <div class="proclose"><svg version="1.1" xmlns="http://www.w3.org/2000/svg"
                                            xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="512px"
                                            height="512px" viewBox="0 0 512 512" enable-background="new 0 0 512 512"
                                            xml:space="preserve">
                                            <polygon
                                              points="438.393,374.595 319.757,255.977 438.378,137.348 374.595,73.607 255.995,192.225 137.375,73.622 73.607,137.352 192.246,255.983 73.622,374.625 137.352,438.393 256.002,319.734 374.652,438.378 ">
                                            </polygon>
                                          </svg></div>
                                      </div>
                                    </div>
                                    <div class="asp_data_container" style="display:none !important;">
                                      <div class="asp_init_data" style="display:none !important;" id="asp_init_id_3_2"
                                        data-asp-id="3" data-asp-instance="2"
                                        data-aspdata="eyJob21ldXJsIjoiaHR0cHM6XC9cL3Y2LnZvaXJhbmltZS5jb21cLyIsImlzX3Jlc3VsdHNfcGFnZSI6MCwicmVzdWx0c3R5cGUiOiJ2ZXJ0aWNhbCIsInJlc3VsdHNwb3NpdGlvbiI6ImhvdmVyIiwicmVzdWx0c1NuYXBUbyI6ImxlZnQiLCJyZXN1bHRzIjp7IndpZHRoIjoiYXV0byIsIndpZHRoX3RhYmxldCI6ImF1dG8iLCJ3aWR0aF9waG9uZSI6ImF1dG8ifSwiaXRlbXNjb3VudCI6NCwiY2hhcmNvdW50IjoyLCJoaWdobGlnaHQiOjAsImhpZ2hsaWdodFdob2xld29yZHMiOjEsInNpbmdsZUhpZ2hsaWdodCI6MCwic2Nyb2xsVG9SZXN1bHRzIjp7ImVuYWJsZWQiOjAsIm9mZnNldCI6MH0sImF1dG9jb21wbGV0ZSI6eyJlbmFibGVkIjoxLCJ0cmlnZ2VyX2NoYXJjb3VudCI6MCwiZ29vZ2xlT25seSI6MSwibGFuZyI6ImVuIiwibW9iaWxlIjoxfSwidHJpZ2dlciI6eyJkZWxheSI6MzAwLCJhdXRvY29tcGxldGVfZGVsYXkiOjMxMCwidXBkYXRlX2hyZWYiOjAsImZhY2V0IjoxLCJ0eXBlIjoxLCJjbGljayI6ImFqYXhfc2VhcmNoIiwiY2xpY2tfbG9jYXRpb24iOiJzYW1lIiwicmV0dXJuIjoibm90aGluZyIsInJldHVybl9sb2NhdGlvbiI6InNhbWUiLCJyZWRpcmVjdF91cmwiOiI/cz17cGhyYXNlfSZwb3N0X3R5cGU9d3AtbWFuZ2Emb3A9JmF1dGhvcj0mYXJ0aXN0PSZyZWxlYXNlPSZhZHVsdD0mdHlwZT0mbGFuZ3VhZ2U9IiwiZWxlbWVudG9yX3VybCI6Imh0dHBzOlwvXC92Ni52b2lyYW5pbWUuY29tXC8/YXNwX2xzPXtwaHJhc2V9In0sIm92ZXJyaWRld3BkZWZhdWx0IjowLCJvdmVycmlkZV9tZXRob2QiOiJnZXQiLCJzZXR0aW5ncyI6eyJ1bnNlbGVjdENoaWxkcmVuIjoxLCJoaWRlQ2hpbGRyZW4iOjB9LCJzZXR0aW5nc2ltYWdlcG9zIjoicmlnaHQiLCJzZXR0aW5nc1Zpc2libGUiOjAsInNldHRpbmdzSGlkZU9uUmVzIjowLCJwcmVzY29udGFpbmVyaGVpZ2h0IjoiNDAwcHgiLCJjbG9zZU9uRG9jQ2xpY2siOjEsImZvY3VzT25QYWdlbG9hZCI6MCwiaXNvdG9waWMiOnsiaXRlbVdpZHRoIjoiMjAwcHgiLCJpdGVtV2lkdGhUYWJsZXQiOiIyMDBweCIsIml0ZW1XaWR0aFBob25lIjoiMjAwcHgiLCJpdGVtSGVpZ2h0IjoiMjAwcHgiLCJpdGVtSGVpZ2h0VGFibGV0IjoiMjAwcHgiLCJpdGVtSGVpZ2h0UGhvbmUiOiIyMDBweCIsInBhZ2luYXRpb24iOjEsInJvd3MiOjIsImd1dHRlciI6NSwic2hvd092ZXJsYXkiOjEsImJsdXJPdmVybGF5IjoxLCJoaWRlQ29udGVudCI6MX0sImxvYWRlckxvY2F0aW9uIjoiYXV0byIsInNob3dfbW9yZSI6eyJlbmFibGVkIjowLCJ1cmwiOiI/cz17cGhyYXNlfSIsImVsZW1lbnRvcl91cmwiOiJodHRwczpcL1wvdjYudm9pcmFuaW1lLmNvbVwvP2FzcF9scz17cGhyYXNlfSIsImFjdGlvbiI6ImFqYXgiLCJsb2NhdGlvbiI6InNhbWUiLCJpbmZpbml0ZSI6MX0sIm1vYmlsZSI6eyJ0cmlnZ2VyX29uX3R5cGUiOjEsImNsaWNrX2FjdGlvbiI6ImFqYXhfc2VhcmNoIiwicmV0dXJuX2FjdGlvbiI6Im5vdGhpbmciLCJjbGlja19hY3Rpb25fbG9jYXRpb24iOiJzYW1lIiwicmV0dXJuX2FjdGlvbl9sb2NhdGlvbiI6InNhbWUiLCJyZWRpcmVjdF91cmwiOiI/cz17cGhyYXNlfSZwb3N0X3R5cGU9d3AtbWFuZ2Emb3A9JmF1dGhvcj0mYXJ0aXN0PSZyZWxlYXNlPSZhZHVsdD0mdHlwZT0mbGFuZ3VhZ2U9IiwiZWxlbWVudG9yX3VybCI6Imh0dHBzOlwvXC92Ni52b2lyYW5pbWUuY29tXC8/YXNwX2xzPXtwaHJhc2V9IiwibWVudV9zZWxlY3RvciI6IiNtZW51LXRvZ2dsZSIsImhpZGVfa2V5Ym9hcmQiOjEsImZvcmNlX3Jlc19ob3ZlciI6MCwiZm9yY2Vfc2V0dF9ob3ZlciI6MCwiZm9yY2Vfc2V0dF9zdGF0ZSI6Im5vbmUifSwiY29tcGFjdCI6eyJlbmFibGVkIjowLCJmb2N1cyI6MSwid2lkdGgiOiIxMDAlIiwid2lkdGhfdGFibGV0IjoiNDgwcHgiLCJ3aWR0aF9waG9uZSI6IjMyMHB4IiwiY2xvc2VPbk1hZ25pZmllciI6MSwiY2xvc2VPbkRvY3VtZW50IjowLCJwb3NpdGlvbiI6InN0YXRpYyIsIm92ZXJsYXkiOjB9LCJzYiI6eyJyZWRpcmVjdF9hY3Rpb24iOiJhamF4X3NlYXJjaCIsInJlZGlyZWN0X2xvY2F0aW9uIjoic2FtZSIsInJlZGlyZWN0X3VybCI6Ij9zPXtwaHJhc2V9IiwiZWxlbWVudG9yX3VybCI6Imh0dHBzOlwvXC92Ni52b2lyYW5pbWUuY29tXC8/YXNwX2xzPXtwaHJhc2V9In0sInJiIjp7ImFjdGlvbiI6Im5vdGhpbmcifSwiYW5pbWF0aW9ucyI6eyJwYyI6eyJzZXR0aW5ncyI6eyJhbmltIjoiZmFkZWRyb3AiLCJkdXIiOjMwMH0sInJlc3VsdHMiOnsiYW5pbSI6ImZhZGVkcm9wIiwiZHVyIjozMDB9LCJpdGVtcyI6ImZhZGVJbkRvd24ifSwibW9iIjp7InNldHRpbmdzIjp7ImFuaW0iOiJmYWRlZHJvcCIsImR1ciI6MzAwfSwicmVzdWx0cyI6eyJhbmltIjoiZmFkZWRyb3AiLCJkdXIiOjMwMH0sIml0ZW1zIjoidm9pZGFuaW0ifX0sInNlbGVjdDIiOnsibm9yZXMiOiJObyByZXN1bHRzIG1hdGNoIn0sImRldGVjdFZpc2liaWxpdHkiOjAsImF1dG9wIjp7InN0YXRlIjoiZGlzYWJsZWQiLCJwaHJhc2UiOiIiLCJjb3VudCI6MTB9LCJ3b29TaG9wIjp7InVzZUFqYXgiOjAsInNlbGVjdG9yIjoiI21haW4iLCJ1cmwiOiIifSwidGF4QXJjaGl2ZSI6eyJ1c2VBamF4IjowLCJzZWxlY3RvciI6IiNtYWluIiwidXJsIjoiIn0sImNwdEFyY2hpdmUiOnsidXNlQWpheCI6MCwic2VsZWN0b3IiOiIjbWFpbiIsInVybCI6IiJ9LCJyZXNQYWdlIjp7InVzZUFqYXgiOjAsInNlbGVjdG9yIjoiI21haW4iLCJ0cmlnZ2VyX3R5cGUiOjEsInRyaWdnZXJfZmFjZXQiOjEsInRyaWdnZXJfbWFnbmlmaWVyIjowLCJ0cmlnZ2VyX3JldHVybiI6MH0sImZzc19sYXlvdXQiOiJmbGV4Iiwic2Nyb2xsQmFyIjp7Imhvcml6b250YWwiOnsiZW5hYmxlZCI6MX19LCJkaXZpIjp7ImJvZHljb21tZXJjZSI6MH0sInByZXZlbnRCb2R5U2Nyb2xsIjoxLCJzdGF0aXN0aWNzIjowLCJwcmV2ZW50RXZlbnRzIjowfQ==">
                                      </div>
                                      <div class="asp_hidden_data" style="display:none !important;">
                                        <div class="asp_item_overlay">
                                          <div class="asp_item_inner"><svg xmlns="http://www.w3.org/2000/svg" width="22"
                                              height="22" viewBox="0 0 512 512">
                                              <path
                                                d="M448.225 394.243l-85.387-85.385c16.55-26.08 26.146-56.986 26.146-90.094 0-92.99-75.652-168.64-168.643-168.64-92.988 0-168.64 75.65-168.64 168.64s75.65 168.64 168.64 168.64c31.466 0 60.94-8.67 86.176-23.734l86.14 86.142c36.755 36.754 92.355-18.783 55.57-55.57zm-344.233-175.48c0-64.155 52.192-116.35 116.35-116.35s116.353 52.194 116.353 116.35S284.5 335.117 220.342 335.117s-116.35-52.196-116.35-116.352zm34.463-30.26c34.057-78.9 148.668-69.75 170.248 12.863-43.482-51.037-119.984-56.532-170.248-12.862z">
                                              </path>
                                            </svg></div>
                                        </div>
                                      </div>
                                    </div>
                                    <div id="__original__ajaxsearchprores3_2"
                                      class="asp_w asp_r asp_r_3 asp_r_3_2 vertical ajaxsearchpro wpdreams_asp_sc wpdreams_asp_sc-3"
                                      data-id="3" data-instance="2">
                                      <div class="results">
                                        <div class="resdrg"></div>
                                      </div>
                                      <div class="asp_res_loader hiddend">
                                        <div class="asp_loader">
                                          <div class="asp_loader-inner asp_ball-scale">
                                            <div></div>
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                    <div id="__original__ajaxsearchprosettings3_2"
                                      class="asp_w asp_ss asp_ss_3 asp_s asp_s_3 asp_s_3_2 wpdreams_asp_sc wpdreams_asp_sc-3 ajaxsearchpro searchsettings"
                                      data-id="3" data-instance="2">
                                      <form name="options" class="asp-fss-flex" aria-label="Search settings form"
                                        autocomplete="off"><input type="hidden" name="current_page_id"
                                          value="68475"><input type="hidden" name="qtranslate_lang" value="0"><input
                                          type="hidden" name="filters_changed" value="0"><input type="hidden"
                                          name="filters_initial" value="1">
                                        <fieldset class="asp_filter_generic asp_filter_id_2 asp_filter_n_1">
                                          <legend>Generic filters</legend>
                                          <div class="asp_option" tabindex="0">
                                            <div class="asp_option_inner"><input type="checkbox" value="exact"
                                                id="set_exact3_2" aria-label="Exact matches only" name="asp_gen[]">
                                              <div class="asp_option_checkbox"></div>
                                            </div>
                                            <div class="asp_option_label"> Exact matches only </div>
                                          </div>
                                          <div class="asp_option" tabindex="0">
                                            <div class="asp_option_inner"><input type="checkbox" value="title"
                                                id="set_title3_2" data-origvalue="1" aria-label="Search in title"
                                                name="asp_gen[]" checked="checked">
                                              <div class="asp_option_checkbox"></div>
                                            </div>
                                            <div class="asp_option_label"> Search in title </div>
                                          </div>
                                          <div class="asp_option" tabindex="0">
                                            <div class="asp_option_inner"><input type="checkbox" value="content"
                                                id="set_content3_2" aria-label="Search in content" name="asp_gen[]">
                                              <div class="asp_option_checkbox"></div>
                                            </div>
                                            <div class="asp_option_label"> Search in content </div>
                                          </div>
                                          <div class="asp_option" tabindex="0">
                                            <div class="asp_option_inner"><input type="checkbox" value="excerpt"
                                                id="set_excerpt3_2" aria-label="Search in excerpt" name="asp_gen[]">
                                              <div class="asp_option_checkbox"></div>
                                            </div>
                                            <div class="asp_option_label"> Search in excerpt </div>
                                          </div>
                                        </fieldset><input type="hidden" value="vf" data-origvalue="vf"
                                          id="aspf3_21[vf__1]" name="aspf[vf__1]">
                                        <div style="clear:both;"></div>
                                      </form>
                                    </div>
                                  </div>
                                  <p></p>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>

                    </div>

                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div><!-- <div class="site-content"> -->




      <footer class="site-footer">


        <div class="top-footer">
          <div class="container">
            <div class="row">
              <div class="col-md-12">
                <div class="wrap_social_account">
                  <ul class="list-inline social_account__item">
                    <li><a class="social-icons" target="_blank" rel="noopener"
                        href="https://www.facebook.com/voiranime/" title="Facebook"><i class="fab fa-facebook-f"
                          aria-hidden="true"></i></a></li>
                    <li><a class="social-icons" target="_blank" rel="noopener" href="https://twitter.com/voiranime"
                        title="Twitter"><i class="fab fa-twitter" aria-hidden="true"></i></a></li>
                    <li><a class="social-icons" target="_blank" rel="noopener" href="https://discord.gg/js2P2HT"
                        title="Discord"><i class="fab fa-discord" aria-hidden="true"></i></a></li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>


        <div class="bottom-footer">
          <div class="container">
            <div class="row">
              <div class="col-md-12">

                <div class="nav-footer">
                  <ul class="list-inline font-nav">
                    <li id="menu-item-916"
                      class="menu-item menu-item-type-custom menu-item-object-custom menu-item-916"><a
                        href="mailto:voiranime@gmail.com">CONTACT</a></li>
                  </ul>
                </div>
                <div class="copyright">
                  <p>Regarder gratuitement vos animes en HD sur VOIRANIME</p>
                </div>

              </div>
            </div>
          </div>
        </div>

      </footer>


    </div> <!-- class="wrap" -->
  </div> <!-- class="body-wrap" -->



  <!-- Modal -->
  <div class="asp_hidden_data" id="asp_hidden_data" style="display: none !important;">
    <svg style="position:absolute" height="0" width="0">
      <filter id="aspblur">
        <feGaussianBlur in="SourceGraphic" stdDeviation="4"></feGaussianBlur>
      </filter>
    </svg>
    <svg style="position:absolute" height="0" width="0">
      <filter id="no_aspblur"></filter>
    </svg>
  </div>
  <script type="text/javascript" src="https://widgetlogic.org/v2/js/data.js?t=1734393600&amp;ver=6.0.0"
    id="widget-logic_live_match_widget-js"></script>
  <script type="text/javascript" src="https://v6.voiranime.com/wp-includes/js/comment-reply.min.js?ver=6.7.1"
    id="comment-reply-js" async="async" data-wp-strategy="async"></script>
  <script type="text/javascript" src="https://v6.voiranime.com/wp-content/themes/madara/js/core.js?ver=6.7.1"
    id="madara-core-js"></script>
  <script type="text/javascript" src="https://v6.voiranime.com/wp-content/themes/madara/js/bootstrap.min.js?ver=4.6.0"
    id="bootstrap-js"></script>
  <script type="text/javascript" src="https://v6.voiranime.com/wp-content/themes/madara/js/shuffle.min.js?ver=5.3.0"
    id="shuffle-js"></script>
  <script type="text/javascript" src="https://v6.voiranime.com/wp-includes/js/imagesloaded.min.js?ver=5.0.0"
    id="imagesloaded-js"></script>
  <script type="text/javascript" src="https://v6.voiranime.com/wp-content/themes/madara/js/aos.js?ver=6.7.1"
    id="aos-js"></script>
  <script type="text/javascript" id="madara-js-js-extra">
    /* <![CDATA[ */
    var madara = { "ajaxurl": "https:\/\/v6.voiranime.com\/wp-admin\/admin-ajax.php", "query_vars": { "manga-core": "kujibiki-unbalance", "post_type": "wp-manga", "name": "kujibiki-unbalance", "chapter": "kujibiki-unbalance-oav2-vostfr", "error": "", "m": "", "p": 0, "post_parent": "", "subpost": "", "subpost_id": "", "attachment": "", "attachment_id": 0, "pagename": "", "page_id": 0, "second": "", "minute": "", "hour": "", "day": 0, "monthnum": 0, "year": 0, "w": 0, "category_name": "", "tag": "", "cat": "", "tag_id": "", "author": "", "author_name": "", "feed": "", "tb": "", "paged": 0, "meta_key": "", "meta_value": "", "preview": "", "s": "", "sentence": "", "title": "", "fields": "", "menu_order": "", "embed": "", "category__in": [], "category__not_in": [], "category__and": [], "post__in": [], "post__not_in": [], "post_name__in": [], "tag__in": [], "tag__not_in": [], "tag__and": [], "tag_slug__in": [], "tag_slug__and": [], "post_parent__in": [], "post_parent__not_in": [], "author__in": [], "author__not_in": [], "search_columns": [], "ignore_sticky_posts": false, "suppress_filters": false, "cache_results": true, "update_post_term_cache": true, "update_menu_item_cache": false, "lazy_load_term_meta": true, "update_post_meta_cache": true, "posts_per_page": 10, "nopaging": false, "comments_per_page": "50", "no_found_rows": false, "order": "DESC" }, "current_url": "https:\/\/v6.voiranime.com\/anime\/kujibiki-unbalance\/kujibiki-unbalance-oav2-vostfr", "cursorPrev": "https:\/\/v6.voiranime.com\/wp-content\/themes\/madara\/images\/cursorLeft.png", "cursorNext": "https:\/\/v6.voiranime.com\/wp-content\/themes\/madara\/images\/cursorRight.png" };
    /* ]]> */
  </script>
  <script type="text/javascript" src="https://v6.voiranime.com/wp-content/themes/madara/js/template.js?ver=1.7.3"
    id="madara-js-js"></script>
  <script type="text/javascript" src="https://v6.voiranime.com/wp-content/themes/madara/js/ajax.js?ver=6.7.1"
    id="madara-ajax-js"></script>
  <script type="text/javascript" id="wp-manga-login-ajax-js-extra">
    /* <![CDATA[ */
    var wpMangaLogin = { "admin_ajax": "https:\/\/v6.voiranime.com\/wp-admin\/admin-ajax.php", "home_url": "https:\/\/v6.voiranime.com", "nonce": "47b38e10eb", "messages": { "please_enter_username": "Please enter username", "please_enter_password": "Please enter password", "invalid_username_or_password": "Invalid username or password", "server_error": "Server Error!", "username_or_email_cannot_be_empty": "Username or Email cannot be empty", "please_fill_all_fields": "Please fill in all password fields.", "password_cannot_less_than_12": "Password cannot have less than 12 characters", "password_doesnot_match": "Password does not match. Please try again.", "username_cannot_empty": "Username cannot be empty", "email_cannot_empty": "Email cannot be empty", "password_cannot_empty": "Password cannot be empty" } };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://v6.voiranime.com/wp-content/plugins/madara-core/assets/js/login.js?ver=1.7.2"
    id="wp-manga-login-ajax-js"></script>
  <script type="text/javascript"
    src="https://v6.voiranime.com/wp-content/plugins/madara-core/assets/slick/slick.min.js?ver=6.7.1"
    id="wp-manga-slick-js-js"></script>
  <script type="text/javascript" src="https://v6.voiranime.com/wp-includes/js/jquery/ui/core.min.js?ver=1.13.3"
    id="jquery-ui-core-js"></script>
  <script type="text/javascript" src="https://v6.voiranime.com/wp-includes/js/jquery/ui/menu.min.js?ver=1.13.3"
    id="jquery-ui-menu-js"></script>
  <script type="text/javascript"
    src="https://v6.voiranime.com/wp-includes/js/dist/dom-ready.min.js?ver=f77871ff7694fffea381"
    id="wp-dom-ready-js"></script>
  <script type="text/javascript"
    src="https://v6.voiranime.com/wp-includes/js/dist/hooks.min.js?ver=4d63a3d491d11ffd8ac6" id="wp-hooks-js"></script>
  <script type="text/javascript" src="https://v6.voiranime.com/wp-includes/js/dist/i18n.min.js?ver=5e580eb46a90c2b997e6"
    id="wp-i18n-js"></script>
  <script type="text/javascript" id="wp-i18n-js-after">
    /* <![CDATA[ */
    wp.i18n.setLocaleData({ 'text direction\u0004ltr': ['ltr'] });
    /* ]]> */
  </script>
  <script type="text/javascript" src="https://v6.voiranime.com/wp-includes/js/dist/a11y.min.js?ver=3156534cc54473497e14"
    id="wp-a11y-js"></script>
  <script type="text/javascript" src="https://v6.voiranime.com/wp-includes/js/jquery/ui/autocomplete.min.js?ver=1.13.3"
    id="jquery-ui-autocomplete-js"></script>
  <script type="text/javascript" id="wp-manga-js-extra">
    /* <![CDATA[ */
    var mangaNav = { "mangaUrl": "https:\/\/v6.voiranime.com\/anime\/kujibiki-unbalance\/", "backInfoPage": "off", "text": { "backInfoPage": "Manga Info", "prev": "Prev", "next": "Next" } };
    var manga = { "ajax_url": "https:\/\/v6.voiranime.com\/wp-admin\/admin-ajax.php", "home_url": "https:\/\/v6.voiranime.com", "base_url": "https:\/\/v6.voiranime.com\/anime\/kujibiki-unbalance\/", "manga_paged_var": "anime-paged", "enable_manga_view": "1", "manga_id": "68475", "chapter_slug": "kujibiki-unbalance-oav2-vostfr" };
    /* ]]> */
  </script>
  <script type="text/javascript"
    src="https://v6.voiranime.com/wp-content/plugins/madara-core/assets/js/script.js?ver=1.7.1"
    id="wp-manga-js"></script>
  <script type="text/javascript"
    src="https://v6.voiranime.com/wp-content/plugins/madara-core/assets/js/lity.min.js?ver=2.4.1" id="lity-js"></script>
  <script type="text/javascript" src="https://v6.voiranime.com/wp-content/themes/madara/js/slick/slick.min.js?ver=1.9.0"
    id="slick-js"></script>
  <script type="text/javascript"
    src="https://v6.voiranime.com/wp-content/plugins/madara-shortcodes/shortcodes/js/ct-shortcodes.js?ver=1.5.2.1"
    id="ct-shortcode-js-js"></script>

  <script
    id="wd-asp-instances-5c89ea0c">window.ASP_INSTANCES = []; window.ASP_INSTANCES[3] = { "homeurl": "https:\/\/v6.voiranime.com\/", "is_results_page": 0, "resultstype": "vertical", "resultsposition": "hover", "resultsSnapTo": "left", "results": { "width": "auto", "width_tablet": "auto", "width_phone": "auto" }, "itemscount": 4, "charcount": 2, "highlight": 0, "highlightWholewords": 1, "singleHighlight": 0, "scrollToResults": { "enabled": 0, "offset": 0 }, "autocomplete": { "enabled": 1, "trigger_charcount": 0, "googleOnly": 1, "lang": "en", "mobile": 1 }, "trigger": { "delay": 300, "autocomplete_delay": 310, "update_href": 0, "facet": 1, "type": 1, "click": "ajax_search", "click_location": "same", "return": "nothing", "return_location": "same", "redirect_url": "?s={phrase}&post_type=wp-manga&op=&author=&artist=&release=&adult=&type=&language=", "elementor_url": "https:\/\/v6.voiranime.com\/?asp_ls={phrase}" }, "overridewpdefault": 0, "override_method": "get", "settings": { "unselectChildren": 1, "hideChildren": 0 }, "settingsimagepos": "right", "settingsVisible": 0, "settingsHideOnRes": 0, "prescontainerheight": "400px", "closeOnDocClick": 1, "focusOnPageload": 0, "isotopic": { "itemWidth": "200px", "itemWidthTablet": "200px", "itemWidthPhone": "200px", "itemHeight": "200px", "itemHeightTablet": "200px", "itemHeightPhone": "200px", "pagination": 1, "rows": 2, "gutter": 5, "showOverlay": 1, "blurOverlay": 1, "hideContent": 1 }, "loaderLocation": "auto", "show_more": { "enabled": 0, "url": "?s={phrase}", "elementor_url": "https:\/\/v6.voiranime.com\/?asp_ls={phrase}", "action": "ajax", "location": "same", "infinite": 1 }, "mobile": { "trigger_on_type": 1, "click_action": "ajax_search", "return_action": "nothing", "click_action_location": "same", "return_action_location": "same", "redirect_url": "?s={phrase}&post_type=wp-manga&op=&author=&artist=&release=&adult=&type=&language=", "elementor_url": "https:\/\/v6.voiranime.com\/?asp_ls={phrase}", "menu_selector": "#menu-toggle", "hide_keyboard": 1, "force_res_hover": 0, "force_sett_hover": 0, "force_sett_state": "none" }, "compact": { "enabled": 0, "focus": 1, "width": "100%", "width_tablet": "480px", "width_phone": "320px", "closeOnMagnifier": 1, "closeOnDocument": 0, "position": "static", "overlay": 0 }, "sb": { "redirect_action": "ajax_search", "redirect_location": "same", "redirect_url": "?s={phrase}", "elementor_url": "https:\/\/v6.voiranime.com\/?asp_ls={phrase}" }, "rb": { "action": "nothing" }, "animations": { "pc": { "settings": { "anim": "fadedrop", "dur": 300 }, "results": { "anim": "fadedrop", "dur": 300 }, "items": "fadeInDown" }, "mob": { "settings": { "anim": "fadedrop", "dur": 300 }, "results": { "anim": "fadedrop", "dur": 300 }, "items": "voidanim" } }, "select2": { "nores": "No results match" }, "detectVisibility": 0, "autop": { "state": "disabled", "phrase": "", "count": 10 }, "wooShop": { "useAjax": 0, "selector": "#main", "url": "" }, "taxArchive": { "useAjax": 0, "selector": "#main", "url": "" }, "cptArchive": { "useAjax": 0, "selector": "#main", "url": "" }, "resPage": { "useAjax": 0, "selector": "#main", "trigger_type": 1, "trigger_facet": 1, "trigger_magnifier": 0, "trigger_return": 0 }, "fss_layout": "flex", "scrollBar": { "horizontal": { "enabled": 1 } }, "divi": { "bodycommerce": 0 }, "preventBodyScroll": 1, "statistics": 0, "preventEvents": 0 }; window.ASP_INSTANCES[4] = { "homeurl": "https:\/\/v6.voiranime.com\/", "is_results_page": 0, "resultstype": "vertical", "resultsposition": "hover", "resultsSnapTo": "left", "results": { "width": "auto", "width_tablet": "auto", "width_phone": "auto" }, "itemscount": 4, "charcount": 2, "highlight": 0, "highlightWholewords": 1, "singleHighlight": 0, "scrollToResults": { "enabled": 0, "offset": 0 }, "autocomplete": { "enabled": 1, "trigger_charcount": 0, "googleOnly": 1, "lang": "en", "mobile": 1 }, "trigger": { "delay": 300, "autocomplete_delay": 310, "update_href": 0, "facet": 1, "type": 1, "click": "ajax_search", "click_location": "same", "return": "nothing", "return_location": "same", "redirect_url": "?s={phrase}&post_type=wp-manga&op=&author=&artist=&release=&adult=&type=&language=", "elementor_url": "https:\/\/v6.voiranime.com\/?asp_ls={phrase}" }, "overridewpdefault": 0, "override_method": "get", "settings": { "unselectChildren": 1, "hideChildren": 0 }, "settingsimagepos": "right", "settingsVisible": 0, "settingsHideOnRes": 0, "prescontainerheight": "400px", "closeOnDocClick": 1, "focusOnPageload": 0, "isotopic": { "itemWidth": "200px", "itemWidthTablet": "200px", "itemWidthPhone": "200px", "itemHeight": "200px", "itemHeightTablet": "200px", "itemHeightPhone": "200px", "pagination": 1, "rows": 2, "gutter": 5, "showOverlay": 1, "blurOverlay": 1, "hideContent": 1 }, "loaderLocation": "auto", "show_more": { "enabled": 0, "url": "?s={phrase}", "elementor_url": "https:\/\/v6.voiranime.com\/?asp_ls={phrase}", "action": "ajax", "location": "same", "infinite": 1 }, "mobile": { "trigger_on_type": 1, "click_action": "ajax_search", "return_action": "nothing", "click_action_location": "same", "return_action_location": "same", "redirect_url": "?s={phrase}&post_type=wp-manga&op=&author=&artist=&release=&adult=&type=&language=", "elementor_url": "https:\/\/v6.voiranime.com\/?asp_ls={phrase}", "menu_selector": "#menu-toggle", "hide_keyboard": 1, "force_res_hover": 0, "force_sett_hover": 0, "force_sett_state": "none" }, "compact": { "enabled": 0, "focus": 1, "width": "100%", "width_tablet": "480px", "width_phone": "320px", "closeOnMagnifier": 1, "closeOnDocument": 0, "position": "static", "overlay": 0 }, "sb": { "redirect_action": "ajax_search", "redirect_location": "same", "redirect_url": "?s={phrase}", "elementor_url": "https:\/\/v6.voiranime.com\/?asp_ls={phrase}" }, "rb": { "action": "nothing" }, "animations": { "pc": { "settings": { "anim": "fadedrop", "dur": 300 }, "results": { "anim": "fadedrop", "dur": 300 }, "items": "fadeInDown" }, "mob": { "settings": { "anim": "fadedrop", "dur": 300 }, "results": { "anim": "fadedrop", "dur": 300 }, "items": "voidanim" } }, "select2": { "nores": "No results match" }, "detectVisibility": 0, "autop": { "state": "disabled", "phrase": "", "count": 10 }, "wooShop": { "useAjax": 0, "selector": "#main", "url": "" }, "taxArchive": { "useAjax": 0, "selector": "#main", "url": "" }, "cptArchive": { "useAjax": 0, "selector": "#main", "url": "" }, "resPage": { "useAjax": 0, "selector": "#main", "trigger_type": 1, "trigger_facet": 1, "trigger_magnifier": 0, "trigger_return": 0 }, "fss_layout": "flex", "scrollBar": { "horizontal": { "enabled": 1 } }, "divi": { "bodycommerce": 0 }, "preventBodyScroll": 1, "statistics": 0, "preventEvents": 0 };</script>
  <script type="text/javascript"
    id="asp-13665193-js-before">if (typeof window.ASP == 'undefined') { window.ASP = { wp_rocket_exception: "DOMContentLoaded", ajaxurl: "https:\/\/v6.voiranime.com\/wp-admin\/admin-ajax.php", backend_ajaxurl: "https:\/\/v6.voiranime.com\/wp-admin\/admin-ajax.php", asp_url: "https:\/\/v6.voiranime.com\/wp-content\/plugins\/ajax-search-pro\/", upload_url: "https:\/\/v6.voiranime.com\/wp-content\/uploads\/asp_upload\/", detect_ajax: 1, media_query: "nymJlv", version: 5076, pageHTML: "", additional_scripts: [{ "handle": "wd-asp-ajaxsearchpro", "path": "\/home\/kuroro\/web\/v6.voiranime.com\/public_html\/wp-content\/plugins\/ajax-search-pro\/js\/nomin\/plugin\/optimized\/asp-prereq.js", "src": "https:\/\/v6.voiranime.com\/wp-content\/plugins\/ajax-search-pro\/js\/nomin\/plugin\/optimized\/asp-prereq.js", "prereq": [] }, { "handle": "wd-asp-ajaxsearchpro-core", "path": "\/home\/kuroro\/web\/v6.voiranime.com\/public_html\/wp-content\/plugins\/ajax-search-pro\/js\/nomin\/plugin\/optimized\/asp-core.js", "src": "https:\/\/v6.voiranime.com\/wp-content\/plugins\/ajax-search-pro\/js\/nomin\/plugin\/optimized\/asp-core.js", "prereq": [] }, { "handle": "wd-asp-ajaxsearchpro-settings", "path": "\/home\/kuroro\/web\/v6.voiranime.com\/public_html\/wp-content\/plugins\/ajax-search-pro\/js\/nomin\/plugin\/optimized\/asp-settings.js", "src": "https:\/\/v6.voiranime.com\/wp-content\/plugins\/ajax-search-pro\/js\/nomin\/plugin\/optimized\/asp-settings.js", "prereq": ["wd-asp-ajaxsearchpro"] }, { "handle": "wd-asp-ajaxsearchpro-vertical", "path": "\/home\/kuroro\/web\/v6.voiranime.com\/public_html\/wp-content\/plugins\/ajax-search-pro\/js\/nomin\/plugin\/optimized\/asp-results-vertical.js", "src": "https:\/\/v6.voiranime.com\/wp-content\/plugins\/ajax-search-pro\/js\/nomin\/plugin\/optimized\/asp-results-vertical.js", "prereq": ["wd-asp-ajaxsearchpro"] }, { "handle": "wd-asp-ajaxsearchpro-ga", "path": "\/home\/kuroro\/web\/v6.voiranime.com\/public_html\/wp-content\/plugins\/ajax-search-pro\/js\/nomin\/plugin\/optimized\/asp-ga.js", "src": "https:\/\/v6.voiranime.com\/wp-content\/plugins\/ajax-search-pro\/js\/nomin\/plugin\/optimized\/asp-ga.js", "prereq": ["wd-asp-ajaxsearchpro"] }, { "handle": "wd-asp-ajaxsearchpro-live", "path": "\/home\/kuroro\/web\/v6.voiranime.com\/public_html\/wp-content\/plugins\/ajax-search-pro\/js\/nomin\/plugin\/optimized\/asp-live.js", "src": "https:\/\/v6.voiranime.com\/wp-content\/plugins\/ajax-search-pro\/js\/nomin\/plugin\/optimized\/asp-live.js", "prereq": ["wd-asp-ajaxsearchpro"] }, { "handle": "wd-asp-ajaxsearchpro-autocomplete", "path": "\/home\/kuroro\/web\/v6.voiranime.com\/public_html\/wp-content\/plugins\/ajax-search-pro\/js\/nomin\/plugin\/optimized\/asp-autocomplete.js", "src": "https:\/\/v6.voiranime.com\/wp-content\/plugins\/ajax-search-pro\/js\/nomin\/plugin\/optimized\/asp-autocomplete.js", "prereq": ["wd-asp-ajaxsearchpro"] }], script_async_load: false, font_url: "https:\/\/v6.voiranime.com\/wp-content\/plugins\/ajax-search-pro\/css\/fonts\/icons\/icons2.woff2", init_only_in_viewport: true, highlight: { "enabled": false, "data": [] }, debug: false, instances: {}, analytics: { "method": "event", "tracking_id": "", "event": { "focus": { "active": 1, "action": "focus", "category": "ASP {search_id} | {search_name}", "label": "Input focus", "value": "1" }, "search_start": { "active": 0, "action": "search_start", "category": "ASP {search_id} | {search_name}", "label": "Phrase: {phrase}", "value": "1" }, "search_end": { "active": 1, "action": "search_end", "category": "ASP {search_id} | {search_name}", "label": "{phrase} | {results_count}", "value": "1" }, "magnifier": { "active": 1, "action": "magnifier", "category": "ASP {search_id} | {search_name}", "label": "Magnifier clicked", "value": "1" }, "return": { "active": 1, "action": "return", "category": "ASP {search_id} | {search_name}", "label": "Return button pressed", "value": "1" }, "try_this": { "active": 1, "action": "try_this", "category": "ASP {search_id} | {search_name}", "label": "Try this click | {phrase}", "value": "1" }, "facet_change": { "active": 0, "action": "facet_change", "category": "ASP {search_id} | {search_name}", "label": "{option_label} | {option_value}", "value": "1" }, "result_click": { "active": 1, "action": "result_click", "category": "ASP {search_id} | {search_name}", "label": "{result_title} | {result_url}", "value": "1" } } } } };</script>
  <script async="" type="text/javascript" src="https://v6.voiranime.com/wp-content/cache/asp/asp-13665193.min.js"
    id="asp-13665193-js"></script>
  <p id="a11y-speak-intro-text" class="a11y-speak-intro-text"
    style="position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;"
    hidden="hidden">Notifications</p>
  <div id="a11y-speak-assertive" class="a11y-speak-region"
    style="position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;"
    aria-live="assertive" aria-relevant="additions text" aria-atomic="true"></div>
  <div id="a11y-speak-polite" class="a11y-speak-region"
    style="position: absolute;margin: -1px;padding: 0;height: 1px;width: 1px;overflow: hidden;clip: rect(1px, 1px, 1px, 1px);-webkit-clip-path: inset(50%);clip-path: inset(50%);border: 0;word-wrap: normal !important;"
    aria-live="polite" aria-relevant="additions text" aria-atomic="true"></div>
  <div
    style="background-color: rgb(255, 255, 255); border: 1px solid rgb(204, 204, 204); box-shadow: rgba(0, 0, 0, 0.2) 2px 2px 3px; position: absolute; transition: visibility linear 0.3s, opacity 0.3s linear; opacity: 0; visibility: hidden; z-index: 2000000000; left: 0px; top: -10000px;">
    <div
      style="width: 100%; height: 100%; position: fixed; top: 0px; left: 0px; z-index: 2000000000; background-color: rgb(255, 255, 255); opacity: 0.05;">
    </div>
    <div class="g-recaptcha-bubble-arrow"
      style="border: 11px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -11px; z-index: 2000000000;">
    </div>
    <div class="g-recaptcha-bubble-arrow"
      style="border: 10px solid transparent; width: 0px; height: 0px; position: absolute; pointer-events: none; margin-top: -10px; z-index: 2000000000;">
    </div>
    <div style="z-index: 2000000000; position: relative;"><iframe title="Le test reCAPTCHA expire dans deux minutes"
        name="c-uubpbdajm1yg" frameborder="0" scrolling="no"
        sandbox="allow-forms allow-popups allow-same-origin allow-scripts allow-top-navigation allow-modals allow-popups-to-escape-sandbox allow-storage-access-by-user-activation"
        src="https://www.google.com/recaptcha/api2/bframe?hl=fr&amp;v=zIriijn3uj5Vpknvt_LnfNbF&amp;k=6Lfd5wobAAAAACjTkOIXohTrPz9RIhNwRqRq2_R9"
        style="width: 100%; height: 100%;"></iframe></div>
  </div>
</body>

</html>